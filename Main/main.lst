   1              		.file	"main.c"
   2              		.text
   3              	.Ltext0:
   4              		.cfi_sections	.debug_frame
   5              		.align	2
   7              	UART0ISR:
   8              	.LFB3:
   9              		.file 1 "main.c"
   1:main.c        **** /*********************************************************************************
   2:main.c        ****  * Logomatic V2 Firmware
   3:main.c        ****  * Sparkfun Electronics 2008
   4:main.c        ****  * ******************************************************************************/
   5:main.c        **** 
   6:main.c        **** /*******************************************************
   7:main.c        ****  * 		     Header Files
   8:main.c        ****  ******************************************************/
   9:main.c        **** #include <stdio.h>
  10:main.c        **** #include <string.h>
  11:main.c        **** #include "LPC21xx.h"
  12:main.c        **** 
  13:main.c        **** //UART0 Debugging
  14:main.c        **** #include "serial.h"
  15:main.c        **** #include "rprintf.h"
  16:main.c        **** 
  17:main.c        **** //Needed for main function calls
  18:main.c        **** #include "main_msc.h"
  19:main.c        **** #include "fat.h"
  20:main.c        **** #include "armVIC.h"
  21:main.c        **** #include "itoa.h"
  22:main.c        **** #include "rootdir.h"
  23:main.c        **** #include "sd_raw.h"
  24:main.c        **** 
  25:main.c        **** 
  26:main.c        **** /*******************************************************
  27:main.c        ****  * 		     Global Variables
  28:main.c        ****  ******************************************************/
  29:main.c        **** 
  30:main.c        **** #define ON	1
  31:main.c        **** #define OFF	0
  32:main.c        **** 
  33:main.c        **** char RX_array1[512];
  34:main.c        **** char RX_array2[512];
  35:main.c        **** char log_array1 = 0;
  36:main.c        **** char log_array2 = 0;
  37:main.c        **** short RX_in = 0;
  38:main.c        **** char get_frame = 0;
  39:main.c        **** 
  40:main.c        **** signed int stringSize;
  41:main.c        **** struct fat_file_struct* handle;
  42:main.c        **** struct fat_file_struct * fd;
  43:main.c        **** char stringBuf[256];
  44:main.c        **** 
  45:main.c        **** // Default Settings
  46:main.c        **** static char mode = 0;
  47:main.c        **** static char asc = 'N';
  48:main.c        **** static int baud = 9600;
  49:main.c        **** static int freq = 100;
  50:main.c        **** static char trig = '$';
  51:main.c        **** static short frame = 100;
  52:main.c        **** static char ad1_7 = 'N';
  53:main.c        **** static char ad1_6 = 'N';
  54:main.c        **** static char ad1_3 = 'N';
  55:main.c        **** static char ad1_2 = 'N';
  56:main.c        **** static char ad0_4 = 'N';
  57:main.c        **** static char ad0_3 = 'N';
  58:main.c        **** static char ad0_2 = 'N';
  59:main.c        **** static char ad0_1 = 'N';
  60:main.c        **** 
  61:main.c        **** 
  62:main.c        **** /*******************************************************
  63:main.c        ****  * 		 Function Declarations
  64:main.c        ****  ******************************************************/
  65:main.c        **** 
  66:main.c        **** void Initialize(void);
  67:main.c        **** 
  68:main.c        **** void setup_uart0(int newbaud, char want_ints);
  69:main.c        **** 
  70:main.c        **** void mode_0(void);
  71:main.c        **** void mode_1(void);
  72:main.c        **** void mode_2(void);
  73:main.c        **** void mode_action(void);
  74:main.c        **** 
  75:main.c        **** void Log_init(void);
  76:main.c        **** void test(void);
  77:main.c        **** void stat(int statnum, int onoff);
  78:main.c        **** void AD_conversion(int regbank);
  79:main.c        **** 
  80:main.c        **** void feed(void);
  81:main.c        **** 
  82:main.c        **** static void IRQ_Routine(void) __attribute__ ((interrupt("IRQ")));
  83:main.c        **** static void UART0ISR(void); //__attribute__ ((interrupt("IRQ")));
  84:main.c        **** static void UART0ISR_2(void); //__attribute__ ((interrupt("IRQ")));
  85:main.c        **** static void MODE2ISR(void); //__attribute__ ((interrupt("IRQ")));
  86:main.c        **** 
  87:main.c        **** void FIQ_Routine(void) __attribute__ ((interrupt("FIQ")));
  88:main.c        **** void SWI_Routine(void) __attribute__ ((interrupt("SWI")));
  89:main.c        **** void UNDEF_Routine(void) __attribute__ ((interrupt("UNDEF")));
  90:main.c        **** 
  91:main.c        **** void fat_initialize(void);
  92:main.c        **** 
  93:main.c        **** void delay_ms(int count);
  94:main.c        **** 
  95:main.c        **** 
  96:main.c        **** /*******************************************************
  97:main.c        ****  * 		     	MAIN
  98:main.c        ****  ******************************************************/
  99:main.c        **** 
 100:main.c        **** int main (void)
 101:main.c        **** {
 102:main.c        **** 	int i;
 103:main.c        **** 	char name[32];
 104:main.c        **** 	int count = 0;
 105:main.c        **** 	
 106:main.c        **** 	enableFIQ();
 107:main.c        **** 	
 108:main.c        **** 	Initialize();
 109:main.c        **** 	
 110:main.c        **** 	setup_uart0(9600, 0);
 111:main.c        **** 
 112:main.c        **** 	fat_initialize();		
 113:main.c        **** 
 114:main.c        **** 
 115:main.c        **** 	// Flash Status Lights
 116:main.c        **** 	for(i = 0; i < 5; i++)
 117:main.c        **** 	{
 118:main.c        **** 		stat(0,ON);
 119:main.c        **** 		delay_ms(50);
 120:main.c        **** 		stat(0,OFF);
 121:main.c        **** 		stat(1,ON);
 122:main.c        **** 		delay_ms(50);
 123:main.c        **** 		stat(1,OFF);
 124:main.c        **** 	}
 125:main.c        **** 	
 126:main.c        **** 	Log_init();
 127:main.c        **** 
 128:main.c        **** 	count++;
 129:main.c        **** 	string_printf(name,"LOG%02d.txt",count);
 130:main.c        **** 	while(root_file_exists(name))
 131:main.c        **** 	{
 132:main.c        **** 		count++;
 133:main.c        **** 		if(count == 250) 
 134:main.c        **** 		{
 135:main.c        **** 			rprintf("Too Many Logs!\n\r");
 136:main.c        **** 			while(1)
 137:main.c        **** 			{
 138:main.c        **** 				stat(0,ON);
 139:main.c        **** 				stat(1,ON);
 140:main.c        **** 				delay_ms(1000);
 141:main.c        **** 				stat(0,OFF);
 142:main.c        **** 				stat(1,OFF);
 143:main.c        **** 				delay_ms(1000);
 144:main.c        **** 			}
 145:main.c        **** 
 146:main.c        **** 		}
 147:main.c        **** 		string_printf(name,"LOG%02d.txt",count);
 148:main.c        **** 	}
 149:main.c        **** 	
 150:main.c        **** 	handle = root_open_new(name);
 151:main.c        **** 		
 152:main.c        **** 
 153:main.c        **** 	sd_raw_sync();	
 154:main.c        **** 	
 155:main.c        **** 	// if mode = 2 (ADC) then write out the ADC pins in use
 156:main.c        **** 	if(mode == 2)
 157:main.c        **** 	{
 158:main.c        **** 		char mybuf[10];	// eight pins + CR/LF
 159:main.c        **** 		mybuf[0] = ad1_3;
 160:main.c        **** 		mybuf[1] = ad0_3;
 161:main.c        **** 		mybuf[2] = ad0_2;
 162:main.c        **** 		mybuf[3] = ad0_1;
 163:main.c        **** 		mybuf[4] = ad1_2;
 164:main.c        **** 		mybuf[5] = ad0_4;
 165:main.c        **** 		mybuf[6] = ad1_7;
 166:main.c        **** 		mybuf[7] = ad1_6;
 167:main.c        **** 		mybuf[8] = 13;
 168:main.c        **** 		mybuf[9] = 10;	
 169:main.c        **** 	
 170:main.c        **** 		stat(0,ON);
 171:main.c        **** 				
 172:main.c        **** 		if(fat_write_file(handle,(unsigned char *)mybuf, 10) < 0)
 173:main.c        **** 		{
 174:main.c        **** 			while(1)
 175:main.c        **** 			{
 176:main.c        **** 				stat(0,ON);
 177:main.c        **** 				for(int j = 0; j < 500000; j++)
 178:main.c        **** 				stat(0,OFF);
 179:main.c        **** 				stat(1,ON);
 180:main.c        **** 				for(int j = 0; j < 500000; j++)
 181:main.c        **** 				stat(1,OFF);
 182:main.c        **** 			}
 183:main.c        **** 		}
 184:main.c        **** 			
 185:main.c        **** 		sd_raw_sync();
 186:main.c        **** 		stat(0,OFF);
 187:main.c        **** 	}	
 188:main.c        **** 	
 189:main.c        **** 	if(mode == 0){ mode_0(); }
 190:main.c        **** 	else if(mode == 1){ mode_1(); }
 191:main.c        **** 	else if(mode == 2){ mode_2(); }
 192:main.c        **** 
 193:main.c        ****     	return 0;
 194:main.c        **** }
 195:main.c        **** 
 196:main.c        **** 
 197:main.c        **** /*******************************************************
 198:main.c        ****  * 		     Initialize
 199:main.c        ****  ******************************************************/
 200:main.c        **** 
 201:main.c        **** #define PLOCK 0x400
 202:main.c        **** 
 203:main.c        **** void Initialize(void)
 204:main.c        **** {
 205:main.c        **** 	rprintf_devopen(putc_serial0);
 206:main.c        **** 	
 207:main.c        **** 	PINSEL0 = 0xCF351505;
 208:main.c        **** 	PINSEL1 = 0x15441801;
 209:main.c        **** 	IODIR0 |= 0x00000884;
 210:main.c        **** 	IOSET0 = 0x00000080;
 211:main.c        **** 
 212:main.c        **** 	S0SPCR = 0x08;  // SPI clk to be pclk/8
 213:main.c        **** 	S0SPCR = 0x30;  // master, msb, first clk edge, active high, no ints
 214:main.c        **** 
 215:main.c        **** }
 216:main.c        **** 
 217:main.c        **** void feed(void)
 218:main.c        **** {
 219:main.c        **** 	PLLFEED=0xAA;
 220:main.c        **** 	PLLFEED=0x55;
 221:main.c        **** }
 222:main.c        **** 
 223:main.c        **** static void UART0ISR(void)
 224:main.c        **** {
  10              		.loc 1 224 0
  11              		.cfi_startproc
  12              		@ Function supports interworking.
  13              		@ args = 0, pretend = 0, frame = 0
  14              		@ frame_needed = 0, uses_anonymous_args = 0
  15              		@ link register save eliminated.
 225:main.c        **** 	char temp;
 226:main.c        **** 
 227:main.c        **** 
 228:main.c        **** 	if(RX_in < 512)
  16              		.loc 1 228 0
  17 0000 88309FE5 		ldr	r3, .L6
  18 0004 B020D3E1 		ldrh	r2, [r3, #0]
  19 0008 02C8A0E1 		mov	ip, r2, asl #16
  20 000c 4C18A0E1 		mov	r1, ip, asr #16
  21 0010 7C009FE5 		ldr	r0, .L6+4
  22 0014 020C51E3 		cmp	r1, #512
 229:main.c        **** 	{
 230:main.c        **** 		RX_array1[RX_in] = U0RBR;
  23              		.loc 1 230 0
  24 0018 0000D0E5 		ldrb	r0, [r0, #0]	@ zero_extendqisi2
 228:main.c        **** 	{
  25              		.loc 1 228 0
  26 001c 090000AA 		bge	.L2
 231:main.c        **** 	
 232:main.c        **** 		RX_in++;
  27              		.loc 1 232 0
  28 0020 012082E2 		add	r2, r2, #1
  29 0024 0228A0E1 		mov	r2, r2, asl #16
  30 0028 2228A0E1 		mov	r2, r2, lsr #16
 233:main.c        **** 
 234:main.c        **** 		if(RX_in == 512) log_array1 = 1;
  31              		.loc 1 234 0
  32 002c 020C52E3 		cmp	r2, #512
 230:main.c        **** 	
  33              		.loc 1 230 0
  34 0030 60109FE5 		ldr	r1, .L6+8
 232:main.c        **** 
  35              		.loc 1 232 0
  36 0034 B020C3E1 		strh	r2, [r3, #0]	@ movhi
  37              		.loc 1 234 0
  38 0038 0120A003 		moveq	r2, #1
 230:main.c        **** 	
  39              		.loc 1 230 0
  40 003c 4C08C1E7 		strb	r0, [r1, ip, asr #16]
  41              		.loc 1 234 0
  42 0040 0220C305 		streqb	r2, [r3, #2]
  43 0044 0B0000EA 		b	.L4
  44              	.L2:
 235:main.c        **** 	}
 236:main.c        **** 	else if(RX_in >= 512)
 237:main.c        **** 	{
 238:main.c        **** 		RX_array2[RX_in-512] = U0RBR;
 239:main.c        **** 		RX_in++;
  45              		.loc 1 239 0
  46 0048 012082E2 		add	r2, r2, #1
  47 004c 0228A0E1 		mov	r2, r2, asl #16
  48 0050 2228A0E1 		mov	r2, r2, lsr #16
 240:main.c        **** 
 241:main.c        **** 		if(RX_in == 1024)
  49              		.loc 1 241 0
  50 0054 010B52E3 		cmp	r2, #1024
 238:main.c        **** 		RX_in++;
  51              		.loc 1 238 0
  52 0058 3CC09FE5 		ldr	ip, .L6+12
 239:main.c        **** 
  53              		.loc 1 239 0
  54 005c B020C3E1 		strh	r2, [r3, #0]	@ movhi
 242:main.c        **** 		{
 243:main.c        **** 			log_array2 = 1;
  55              		.loc 1 243 0
  56 0060 0120A003 		moveq	r2, #1
 238:main.c        **** 		RX_in++;
  57              		.loc 1 238 0
  58 0064 01108CE0 		add	r1, ip, r1
  59              		.loc 1 243 0
  60 0068 0320C305 		streqb	r2, [r3, #3]
 244:main.c        **** 			RX_in = 0;
  61              		.loc 1 244 0
  62 006c 0020A003 		moveq	r2, #0
 238:main.c        **** 		RX_in++;
  63              		.loc 1 238 0
  64 0070 000241E5 		strb	r0, [r1, #-512]
  65              		.loc 1 244 0
  66 0074 B020C301 		streqh	r2, [r3, #0]	@ movhi
  67              	.L4:
 245:main.c        **** 		}
 246:main.c        **** 	}
 247:main.c        **** 
 248:main.c        **** 
 249:main.c        **** 	temp = U0IIR; // Have to read this to clear the interrupt 
  68              		.loc 1 249 0
  69 0078 14309FE5 		ldr	r3, .L6+4
 250:main.c        **** 
 251:main.c        **** 	VICVectAddr = 0;
  70              		.loc 1 251 0
  71 007c 0020A0E3 		mov	r2, #0
 249:main.c        **** 
  72              		.loc 1 249 0
  73 0080 0830D3E5 		ldrb	r3, [r3, #8]	@ zero_extendqisi2
  74              	.LVL0:
  75              		.loc 1 251 0
  76 0084 0030E0E3 		mvn	r3, #0
  77 0088 CF2F03E5 		str	r2, [r3, #-4047]
  78 008c 1EFF2FE1 		bx	lr
  79              	.L7:
  80              		.align	2
  81              	.L6:
  82 0090 00000000 		.word	.LANCHOR0
  83 0094 00C000E0 		.word	-536821760
  84 0098 00000000 		.word	RX_array1
  85 009c 00000000 		.word	RX_array2
  86              		.cfi_endproc
  87              	.LFE3:
  89              		.align	2
  91              	UART0ISR_2:
  92              	.LFB4:
 252:main.c        **** 	
 253:main.c        **** }
 254:main.c        **** 
 255:main.c        **** static void UART0ISR_2(void)
 256:main.c        **** {
  93              		.loc 1 256 0
  94              		.cfi_startproc
  95              		@ Function supports interworking.
  96              		@ args = 0, pretend = 0, frame = 0
  97              		@ frame_needed = 0, uses_anonymous_args = 0
  98              		@ link register save eliminated.
  99 00a0 30002DE9 		stmfd	sp!, {r4, r5}
 100              	.LCFI0:
 101              		.cfi_def_cfa_offset 8
 102              		.cfi_offset 4, -8
 103              		.cfi_offset 5, -4
 257:main.c        **** 	char temp;
 258:main.c        **** 	temp = U0RBR;
 104              		.loc 1 258 0
 105 00a4 0C319FE5 		ldr	r3, .L14
 106 00a8 00C0D3E5 		ldrb	ip, [r3, #0]	@ zero_extendqisi2
 259:main.c        **** 
 260:main.c        **** 	if(temp == trig){ get_frame = 1; }
 107              		.loc 1 260 0
 108 00ac 08319FE5 		ldr	r3, .L14+4
 109 00b0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 258:main.c        **** 
 110              		.loc 1 258 0
 111 00b4 FFC00CE2 		and	ip, ip, #255
 112              	.LVL1:
 113              		.loc 1 260 0
 114 00b8 0C0053E1 		cmp	r3, ip
 115 00bc FC209FE5 		ldr	r2, .L14+8
 116 00c0 0130A003 		moveq	r3, #1
 117 00c4 0430C205 		streqb	r3, [r2, #4]
 261:main.c        **** 	
 262:main.c        **** 	if(get_frame)
 118              		.loc 1 262 0
 119 00c8 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 120 00cc 000052E3 		cmp	r2, #0
 121 00d0 E8309FE5 		ldr	r3, .L14+8
 122 00d4 3000000A 		beq	.L11
 263:main.c        **** 	{
 264:main.c        **** 		if(RX_in < frame)
 123              		.loc 1 264 0
 124 00d8 B000D3E1 		ldrh	r0, [r3, #0]
 125 00dc D8209FE5 		ldr	r2, .L14+4
 126 00e0 0058A0E1 		mov	r5, r0, asl #16
 127 00e4 F220D2E1 		ldrsh	r2, [r2, #2]
 128 00e8 4548A0E1 		mov	r4, r5, asr #16
 129 00ec 020054E1 		cmp	r4, r2
 130 00f0 010080E2 		add	r0, r0, #1
 131 00f4 120000AA 		bge	.L12
 265:main.c        **** 		{
 266:main.c        **** 			RX_array1[RX_in] = temp;
 267:main.c        **** 			RX_in++;
 132              		.loc 1 267 0
 133 00f8 0008A0E1 		mov	r0, r0, asl #16
 134 00fc 2008A0E1 		mov	r0, r0, lsr #16
 266:main.c        **** 			RX_in++;
 135              		.loc 1 266 0
 136 0100 BC109FE5 		ldr	r1, .L14+12
 137              		.loc 1 267 0
 138 0104 B000C3E1 		strh	r0, [r3, #0]	@ movhi
 268:main.c        **** 
 269:main.c        **** 			if(RX_in == frame)
 139              		.loc 1 269 0
 140 0108 0008A0E1 		mov	r0, r0, asl #16
 266:main.c        **** 			RX_in++;
 141              		.loc 1 266 0
 142 010c 45C8C1E7 		strb	ip, [r1, r5, asr #16]
 143              		.loc 1 269 0
 144 0110 40C8A0E1 		mov	ip, r0, asr #16
 145              	.LVL2:
 146 0114 02005CE1 		cmp	ip, r2
 147 0118 1F00001A 		bne	.L11
 270:main.c        **** 			{
 271:main.c        **** 				RX_array1[RX_in] = 10; // delimiters
 148              		.loc 1 271 0
 149 011c 0A20A0E3 		mov	r2, #10
 150 0120 4028C1E7 		strb	r2, [r1, r0, asr #16]
 272:main.c        **** 				RX_array1[RX_in + 1] = 13;
 151              		.loc 1 272 0
 152 0124 0D20A0E3 		mov	r2, #13
 153 0128 0C1081E0 		add	r1, r1, ip
 154 012c 0120C1E5 		strb	r2, [r1, #1]
 273:main.c        **** 				log_array1 = 1;
 155              		.loc 1 273 0
 156 0130 0120A0E3 		mov	r2, #1
 157 0134 0220C3E5 		strb	r2, [r3, #2]
 274:main.c        **** 				get_frame = 0;
 158              		.loc 1 274 0
 159 0138 0020A0E3 		mov	r2, #0
 160 013c 0420C3E5 		strb	r2, [r3, #4]
 161 0140 150000EA 		b	.L11
 162              	.LVL3:
 163              	.L12:
 275:main.c        **** 			}
 276:main.c        **** 		}
 277:main.c        **** 		else if(RX_in >= frame)
 278:main.c        **** 		{
 279:main.c        **** 			RX_array2[RX_in - frame] = temp;
 280:main.c        **** 			RX_in++;
 164              		.loc 1 280 0
 165 0144 0008A0E1 		mov	r0, r0, asl #16
 166 0148 2008A0E1 		mov	r0, r0, lsr #16
 167 014c B000C3E1 		strh	r0, [r3, #0]	@ movhi
 281:main.c        **** 
 282:main.c        **** 			if(RX_in == 2*frame)
 168              		.loc 1 282 0
 169 0150 0008A0E1 		mov	r0, r0, asl #16
 279:main.c        **** 			RX_in++;
 170              		.loc 1 279 0
 171 0154 6C109FE5 		ldr	r1, .L14+16
 172              		.loc 1 282 0
 173 0158 4008A0E1 		mov	r0, r0, asr #16
 279:main.c        **** 			RX_in++;
 174              		.loc 1 279 0
 175 015c 044062E0 		rsb	r4, r2, r4
 176              		.loc 1 282 0
 177 0160 820050E1 		cmp	r0, r2, asl #1
 279:main.c        **** 			RX_in++;
 178              		.loc 1 279 0
 179 0164 04C0C1E7 		strb	ip, [r1, r4]
 180              		.loc 1 282 0
 181 0168 0B00001A 		bne	.L11
 283:main.c        **** 			{
 284:main.c        **** 				RX_array2[RX_in - frame] = 10; // delimiters
 182              		.loc 1 284 0
 183 016c 00C062E0 		rsb	ip, r2, r0
 184              	.LVL4:
 285:main.c        **** 				RX_array2[RX_in + 1 - frame] = 13;
 185              		.loc 1 285 0
 186 0170 010080E2 		add	r0, r0, #1
 187 0174 002062E0 		rsb	r2, r2, r0
 284:main.c        **** 				RX_array2[RX_in + 1 - frame] = 13;
 188              		.loc 1 284 0
 189 0178 0A40A0E3 		mov	r4, #10
 190              		.loc 1 285 0
 191 017c 0D00A0E3 		mov	r0, #13
 284:main.c        **** 				RX_array2[RX_in + 1 - frame] = 13;
 192              		.loc 1 284 0
 193 0180 0C40C1E7 		strb	r4, [r1, ip]
 194              		.loc 1 285 0
 195 0184 0200C1E7 		strb	r0, [r1, r2]
 286:main.c        **** 				log_array2 = 1;
 196              		.loc 1 286 0
 197 0188 0120A0E3 		mov	r2, #1
 198 018c 0320C3E5 		strb	r2, [r3, #3]
 287:main.c        **** 				get_frame = 0;
 199              		.loc 1 287 0
 200 0190 0020A0E3 		mov	r2, #0
 201 0194 0420C3E5 		strb	r2, [r3, #4]
 288:main.c        **** 				RX_in = 0;
 202              		.loc 1 288 0
 203 0198 B020C3E1 		strh	r2, [r3, #0]	@ movhi
 204              	.L11:
 289:main.c        **** 			}
 290:main.c        **** 		}
 291:main.c        **** 	}
 292:main.c        **** 
 293:main.c        **** 	temp = U0IIR; // have to read this to clear the interrupt
 205              		.loc 1 293 0
 206 019c 14309FE5 		ldr	r3, .L14
 294:main.c        **** 
 295:main.c        **** 	VICVectAddr = 0;
 207              		.loc 1 295 0
 208 01a0 0020A0E3 		mov	r2, #0
 293:main.c        **** 
 209              		.loc 1 293 0
 210 01a4 0830D3E5 		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 211              		.loc 1 295 0
 212 01a8 0030E0E3 		mvn	r3, #0
 213 01ac CF2F03E5 		str	r2, [r3, #-4047]
 296:main.c        **** }
 214              		.loc 1 296 0
 215 01b0 3000BDE8 		ldmfd	sp!, {r4, r5}
 216 01b4 1EFF2FE1 		bx	lr
 217              	.L15:
 218              		.align	2
 219              	.L14:
 220 01b8 00C000E0 		.word	-536821760
 221 01bc 00000000 		.word	.LANCHOR1
 222 01c0 00000000 		.word	.LANCHOR0
 223 01c4 00000000 		.word	RX_array1
 224 01c8 00000000 		.word	RX_array2
 225              		.cfi_endproc
 226              	.LFE4:
 228              		.align	2
 230              	MODE2ISR:
 231              	.LFB5:
 297:main.c        **** 		
 298:main.c        **** static void MODE2ISR(void)
 299:main.c        **** {
 232              		.loc 1 299 0
 233              		.cfi_startproc
 234              		@ Function supports interworking.
 235              		@ args = 0, pretend = 0, frame = 56
 236              		@ frame_needed = 0, uses_anonymous_args = 0
 237              	.LVL5:
 238 01cc F0472DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 239              	.LCFI1:
 240              		.cfi_def_cfa_offset 32
 241              		.cfi_offset 4, -32
 242              		.cfi_offset 5, -28
 243              		.cfi_offset 6, -24
 244              		.cfi_offset 7, -20
 245              		.cfi_offset 8, -16
 246              		.cfi_offset 9, -12
 247              		.cfi_offset 10, -8
 248              		.cfi_offset 14, -4
 300:main.c        **** 	int temp = 0, temp2 = 0, ind = 0;
 301:main.c        **** 	int j;
 302:main.c        **** 	short a;
 303:main.c        **** 	char q[50], temp_buff[4];
 304:main.c        **** 
 305:main.c        **** 
 306:main.c        **** 	T0IR = 1; // reset TMR0 interrupt
 249              		.loc 1 306 0
 250 01d0 FC3B9FE5 		ldr	r3, .L152
 251 01d4 0120A0E3 		mov	r2, #1
 252 01d8 002083E5 		str	r2, [r3, #0]
 253              	.LVL6:
 307:main.c        **** 	
 308:main.c        **** 	for(j = 0; j < 50; j++)
 254              		.loc 1 308 0
 255 01dc 0030A0E3 		mov	r3, #0
 299:main.c        **** 	int temp = 0, temp2 = 0, ind = 0;
 256              		.loc 1 299 0
 257 01e0 38D04DE2 		sub	sp, sp, #56
 258              	.LCFI2:
 259              		.cfi_def_cfa_offset 88
 309:main.c        **** 	{
 310:main.c        **** 		q[j] = 0;
 260              		.loc 1 310 0
 261 01e4 0310A0E1 		mov	r1, r3
 262              	.LVL7:
 263              	.L17:
 264              		.loc 1 310 0 is_stmt 0 discriminator 2
 265 01e8 04208DE2 		add	r2, sp, #4
 266 01ec 0210C3E7 		strb	r1, [r3, r2]
 308:main.c        **** 	{
 267              		.loc 1 308 0 is_stmt 1 discriminator 2
 268 01f0 013083E2 		add	r3, r3, #1
 269              	.LVL8:
 270 01f4 320053E3 		cmp	r3, #50
 271 01f8 FAFFFF1A 		bne	.L17
 311:main.c        **** 	}
 312:main.c        **** 
 313:main.c        **** 
 314:main.c        **** 	// Get AD1.3
 315:main.c        **** 	if(ad1_3 == 'Y')
 272              		.loc 1 315 0
 273 01fc D43B9FE5 		ldr	r3, .L152+4
 274              	.LVL9:
 275 0200 0430D3E5 		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 276 0204 590053E3 		cmp	r3, #89
 277 0208 0100000A 		beq	.L18
 278              	.LVL10:
 279              	.L28:
 300:main.c        **** 	int j;
 280              		.loc 1 300 0
 281 020c 0040A0E3 		mov	r4, #0
 282 0210 440000EA 		b	.L19
 283              	.LVL11:
 284              	.L18:
 316:main.c        **** 	{
 317:main.c        **** 		AD1CR = 0x00020FF08; // AD1.3
 285              		.loc 1 317 0
 286 0214 C03B9FE5 		ldr	r3, .L152+8
 287 0218 C02B9FE5 		ldr	r2, .L152+12
 288 021c 002083E5 		str	r2, [r3, #0]
 318:main.c        **** 		AD1CR |= 0x01000000; // start conversion
 289              		.loc 1 318 0
 290 0220 002093E5 		ldr	r2, [r3, #0]
 291 0224 012482E3 		orr	r2, r2, #16777216
 292 0228 002083E5 		str	r2, [r3, #0]
 293              	.LVL12:
 294              	.L20:
 319:main.c        **** 		while((temp & 0x80000000) == 0)
 320:main.c        **** 		{
 321:main.c        **** 			temp = AD1DR;
 295              		.loc 1 321 0
 296 022c 042093E5 		ldr	r2, [r3, #4]
 297              	.LVL13:
 319:main.c        **** 		while((temp & 0x80000000) == 0)
 298              		.loc 1 319 0
 299 0230 000052E3 		cmp	r2, #0
 300 0234 FCFFFFAA 		bge	.L20
 301              	.LVL14:
 322:main.c        **** 		}
 323:main.c        **** 		temp &= 0x0000FFC0;
 324:main.c        **** 		temp2 = temp / 0x00000040;
 325:main.c        **** 
 326:main.c        **** 		AD1CR = 0x00000000;
 302              		.loc 1 326 0
 303 0238 9C3B9FE5 		ldr	r3, .L152+8
 304 023c 0040A0E3 		mov	r4, #0
 305 0240 004083E5 		str	r4, [r3, #0]
 327:main.c        **** 
 328:main.c        **** 		if(asc == 'Y' || asc == ',')
 306              		.loc 1 328 0
 307 0244 8C3B9FE5 		ldr	r3, .L152+4
 323:main.c        **** 		temp2 = temp / 0x00000040;
 308              		.loc 1 323 0
 309 0248 940B9FE5 		ldr	r0, .L152+16
 310              		.loc 1 328 0
 311 024c 0530D3E5 		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 323:main.c        **** 		temp2 = temp / 0x00000040;
 312              		.loc 1 323 0
 313 0250 000002E0 		and	r0, r2, r0
 314              	.LVL15:
 315              		.loc 1 328 0
 316 0254 590053E3 		cmp	r3, #89
 317 0258 2C005313 		cmpne	r3, #44
 324:main.c        **** 
 318              		.loc 1 324 0
 319 025c 4003A0E1 		mov	r0, r0, asr #6
 320              	.LVL16:
 321              		.loc 1 328 0
 322 0260 2A00001A 		bne	.L21
 329:main.c        **** 		{
 330:main.c        **** 			itoa(temp2, 10, temp_buff);
 323              		.loc 1 330 0
 324 0264 0A10A0E3 		mov	r1, #10
 325 0268 0D20A0E1 		mov	r2, sp
 326              	.LVL17:
 327 026c FEFFFFEB 		bl	itoa
 328              	.LVL18:
 331:main.c        **** 			if(temp_buff[0] >= 48 && temp_buff[0] <= 57)
 329              		.loc 1 331 0
 330 0270 0030DDE5 		ldrb	r3, [sp, #0]	@ zero_extendqisi2
 331 0274 302043E2 		sub	r2, r3, #48
 332 0278 090052E3 		cmp	r2, #9
 332:main.c        **** 			{
 333:main.c        **** 				q[ind] = temp_buff[0];
 333              		.loc 1 333 0
 334 027c 0430CD95 		strlsb	r3, [sp, #4]
 335              	.LVL19:
 334:main.c        **** 				ind++;
 335:main.c        **** 			}
 336:main.c        **** 			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
 336              		.loc 1 336 0
 337 0280 0130DDE5 		ldrb	r3, [sp, #1]	@ zero_extendqisi2
 338 0284 302043E2 		sub	r2, r3, #48
 334:main.c        **** 				ind++;
 339              		.loc 1 334 0
 340 0288 0140A093 		movls	r4, #1
 341              	.LVL20:
 342              		.loc 1 336 0
 343 028c 090052E3 		cmp	r2, #9
 337:main.c        **** 			{
 338:main.c        **** 				q[ind] = temp_buff[1];
 344              		.loc 1 338 0
 345 0290 38108D92 		addls	r1, sp, #56
 346 0294 04208190 		addls	r2, r1, r4
 347 0298 34304295 		strlsb	r3, [r2, #-52]
 339:main.c        **** 				ind++;
 340:main.c        **** 			}
 341:main.c        **** 			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
 348              		.loc 1 341 0
 349 029c 0230DDE5 		ldrb	r3, [sp, #2]	@ zero_extendqisi2
 350 02a0 302043E2 		sub	r2, r3, #48
 339:main.c        **** 				ind++;
 351              		.loc 1 339 0
 352 02a4 01408492 		addls	r4, r4, #1
 353              	.LVL21:
 354              		.loc 1 341 0
 355 02a8 090052E3 		cmp	r2, #9
 342:main.c        **** 			{
 343:main.c        **** 				q[ind] = temp_buff[2];
 356              		.loc 1 343 0
 357 02ac 38108D92 		addls	r1, sp, #56
 358 02b0 04208190 		addls	r2, r1, r4
 359 02b4 34304295 		strlsb	r3, [r2, #-52]
 344:main.c        **** 				ind++;
 345:main.c        **** 			}
 346:main.c        **** 			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
 360              		.loc 1 346 0
 361 02b8 0330DDE5 		ldrb	r3, [sp, #3]	@ zero_extendqisi2
 362 02bc 302043E2 		sub	r2, r3, #48
 344:main.c        **** 				ind++;
 363              		.loc 1 344 0
 364 02c0 01408492 		addls	r4, r4, #1
 365              	.LVL22:
 366              		.loc 1 346 0
 367 02c4 090052E3 		cmp	r2, #9
 347:main.c        **** 			{
 348:main.c        **** 				q[ind] = temp_buff[3];
 368              		.loc 1 348 0
 369 02c8 38108D92 		addls	r1, sp, #56
 370 02cc 04208190 		addls	r2, r1, r4
 371 02d0 34304295 		strlsb	r3, [r2, #-52]
 349:main.c        **** 				ind++;
 350:main.c        **** 			}
 351:main.c        **** 	
 352:main.c        **** 			if(asc == ',')
 372              		.loc 1 352 0
 373 02d4 FC3A9FE5 		ldr	r3, .L152+4
 374 02d8 0520D3E5 		ldrb	r2, [r3, #5]	@ zero_extendqisi2
 349:main.c        **** 				ind++;
 375              		.loc 1 349 0
 376 02dc 01408492 		addls	r4, r4, #1
 377              	.LVL23:
 378 02e0 38108DE2 		add	r1, sp, #56
 379              		.loc 1 352 0
 380 02e4 2C0052E3 		cmp	r2, #44
 381 02e8 043081E0 		add	r3, r1, r4
 353:main.c        **** 			{
 354:main.c        **** 				q[ind] = ',';
 355:main.c        **** 			}
 356:main.c        **** 			else
 357:main.c        **** 			{
 358:main.c        **** 				q[ind] = 0;
 382              		.loc 1 358 0
 383 02ec 0020A013 		movne	r2, #0
 384 02f0 342043E5 		strb	r2, [r3, #-52]
 359:main.c        **** 			}
 360:main.c        **** 			ind++;
 361:main.c        **** 			temp = 0; 
 362:main.c        **** 			temp2 = 0;
 363:main.c        **** 			temp_buff[0] = 0;
 385              		.loc 1 363 0
 386 02f4 0030A0E3 		mov	r3, #0
 360:main.c        **** 			temp = 0; 
 387              		.loc 1 360 0
 388 02f8 014084E2 		add	r4, r4, #1
 389              	.LVL24:
 390              		.loc 1 363 0
 391 02fc 0030CDE5 		strb	r3, [sp, #0]
 364:main.c        **** 			temp_buff[1] = 0;
 392              		.loc 1 364 0
 393 0300 0130CDE5 		strb	r3, [sp, #1]
 365:main.c        **** 			temp_buff[2] = 0;
 394              		.loc 1 365 0
 395 0304 0230CDE5 		strb	r3, [sp, #2]
 366:main.c        **** 			temp_buff[3] = 0;
 396              		.loc 1 366 0
 397 0308 0330CDE5 		strb	r3, [sp, #3]
 398 030c 050000EA 		b	.L19
 399              	.LVL25:
 400              	.L21:
 367:main.c        **** 
 368:main.c        **** 		}
 369:main.c        **** 
 370:main.c        **** 		else if(asc == 'N')
 401              		.loc 1 370 0
 402 0310 4E0053E3 		cmp	r3, #78
 403 0314 BCFFFF1A 		bne	.L28
 404              	.LVL26:
 371:main.c        **** 		{
 372:main.c        **** 			a = ((short)temp2 & 0xFF00) / 0x00000100;
 405              		.loc 1 372 0
 406 0318 2034A0E1 		mov	r3, r0, lsr #8
 373:main.c        **** 			q[ind] = (char)a;
 407              		.loc 1 373 0
 408 031c 0430CDE5 		strb	r3, [sp, #4]
 374:main.c        **** 			
 375:main.c        **** 			q[ind+1]  = (char)temp2 & 0xFF;
 409              		.loc 1 375 0
 410 0320 0500CDE5 		strb	r0, [sp, #5]
 411              	.LVL27:
 376:main.c        **** 			ind += 2;
 412              		.loc 1 376 0
 413 0324 0240A0E3 		mov	r4, #2
 414              	.LVL28:
 415              	.L19:
 377:main.c        **** 			temp = 0;
 378:main.c        **** 		}
 379:main.c        **** 	}
 380:main.c        **** 	// Get AD0.3
 381:main.c        **** 	if(ad0_3 == 'Y')
 416              		.loc 1 381 0
 417 0328 A83A9FE5 		ldr	r3, .L152+4
 418 032c 0630D3E5 		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 419 0330 590053E3 		cmp	r3, #89
 420 0334 4800001A 		bne	.L29
 382:main.c        **** 	{
 383:main.c        **** 		AD0CR = 0x00020FF08; // AD0.3
 421              		.loc 1 383 0
 422 0338 A83A9FE5 		ldr	r3, .L152+20
 423 033c 9C2A9FE5 		ldr	r2, .L152+12
 424 0340 002083E5 		str	r2, [r3, #0]
 384:main.c        **** 		AD0CR |= 0x01000000; // start conversion
 425              		.loc 1 384 0
 426 0344 002093E5 		ldr	r2, [r3, #0]
 427 0348 012482E3 		orr	r2, r2, #16777216
 428 034c 002083E5 		str	r2, [r3, #0]
 429              	.L30:
 385:main.c        **** 		while((temp & 0x80000000) == 0)
 386:main.c        **** 		{
 387:main.c        **** 			temp = AD0DR;
 430              		.loc 1 387 0
 431 0350 042093E5 		ldr	r2, [r3, #4]
 432              	.LVL29:
 385:main.c        **** 		while((temp & 0x80000000) == 0)
 433              		.loc 1 385 0
 434 0354 000052E3 		cmp	r2, #0
 435 0358 FCFFFFAA 		bge	.L30
 436              	.LVL30:
 388:main.c        **** 		}
 389:main.c        **** 		temp &= 0x0000FFC0;
 437              		.loc 1 389 0
 438 035c 800A9FE5 		ldr	r0, .L152+16
 390:main.c        **** 		temp2 = temp / 0x00000040;
 391:main.c        **** 
 392:main.c        **** 		AD0CR = 0x00000000;
 439              		.loc 1 392 0
 440 0360 803A9FE5 		ldr	r3, .L152+20
 389:main.c        **** 		temp2 = temp / 0x00000040;
 441              		.loc 1 389 0
 442 0364 000002E0 		and	r0, r2, r0
 443              	.LVL31:
 444              		.loc 1 392 0
 445 0368 0020A0E3 		mov	r2, #0
 446 036c 002083E5 		str	r2, [r3, #0]
 393:main.c        **** 
 394:main.c        **** 		if(asc == 'Y' || asc ==',')
 447              		.loc 1 394 0
 448 0370 603A9FE5 		ldr	r3, .L152+4
 449 0374 0530D3E5 		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 450 0378 590053E3 		cmp	r3, #89
 451 037c 2C005313 		cmpne	r3, #44
 390:main.c        **** 
 452              		.loc 1 390 0
 453 0380 4003A0E1 		mov	r0, r0, asr #6
 454              	.LVL32:
 455              		.loc 1 394 0
 456 0384 2C00001A 		bne	.L31
 395:main.c        **** 		{
 396:main.c        **** 			itoa(temp2, 10, temp_buff);
 457              		.loc 1 396 0
 458 0388 0A10A0E3 		mov	r1, #10
 459 038c 0D20A0E1 		mov	r2, sp
 460 0390 FEFFFFEB 		bl	itoa
 461              	.LVL33:
 397:main.c        **** 			if(temp_buff[0] >= 48 && temp_buff[0] <= 57)
 462              		.loc 1 397 0
 463 0394 0030DDE5 		ldrb	r3, [sp, #0]	@ zero_extendqisi2
 464 0398 302043E2 		sub	r2, r3, #48
 465 039c 090052E3 		cmp	r2, #9
 398:main.c        **** 			{
 399:main.c        **** 				q[ind] = temp_buff[0];
 466              		.loc 1 399 0
 467 03a0 38108D92 		addls	r1, sp, #56
 468 03a4 04208190 		addls	r2, r1, r4
 469 03a8 34304295 		strlsb	r3, [r2, #-52]
 400:main.c        **** 				ind++;
 401:main.c        **** 			}
 402:main.c        **** 			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
 470              		.loc 1 402 0
 471 03ac 0130DDE5 		ldrb	r3, [sp, #1]	@ zero_extendqisi2
 472 03b0 302043E2 		sub	r2, r3, #48
 400:main.c        **** 				ind++;
 473              		.loc 1 400 0
 474 03b4 01408492 		addls	r4, r4, #1
 475              	.LVL34:
 476              		.loc 1 402 0
 477 03b8 090052E3 		cmp	r2, #9
 403:main.c        **** 			{
 404:main.c        **** 				q[ind] = temp_buff[1];
 478              		.loc 1 404 0
 479 03bc 38108D92 		addls	r1, sp, #56
 480 03c0 04208190 		addls	r2, r1, r4
 481 03c4 34304295 		strlsb	r3, [r2, #-52]
 405:main.c        **** 				ind++;
 406:main.c        **** 			}
 407:main.c        **** 			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
 482              		.loc 1 407 0
 483 03c8 0230DDE5 		ldrb	r3, [sp, #2]	@ zero_extendqisi2
 484 03cc 302043E2 		sub	r2, r3, #48
 405:main.c        **** 				ind++;
 485              		.loc 1 405 0
 486 03d0 01408492 		addls	r4, r4, #1
 487              	.LVL35:
 488              		.loc 1 407 0
 489 03d4 090052E3 		cmp	r2, #9
 408:main.c        **** 			{
 409:main.c        **** 				q[ind] = temp_buff[2];
 490              		.loc 1 409 0
 491 03d8 38108D92 		addls	r1, sp, #56
 492 03dc 04208190 		addls	r2, r1, r4
 493 03e0 34304295 		strlsb	r3, [r2, #-52]
 410:main.c        **** 				ind++;
 411:main.c        **** 			}
 412:main.c        **** 			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
 494              		.loc 1 412 0
 495 03e4 0330DDE5 		ldrb	r3, [sp, #3]	@ zero_extendqisi2
 496 03e8 302043E2 		sub	r2, r3, #48
 410:main.c        **** 				ind++;
 497              		.loc 1 410 0
 498 03ec 01408492 		addls	r4, r4, #1
 499              	.LVL36:
 500              		.loc 1 412 0
 501 03f0 090052E3 		cmp	r2, #9
 413:main.c        **** 			{
 414:main.c        **** 				q[ind] = temp_buff[3];
 502              		.loc 1 414 0
 503 03f4 38108D92 		addls	r1, sp, #56
 504 03f8 04208190 		addls	r2, r1, r4
 505 03fc 34304295 		strlsb	r3, [r2, #-52]
 415:main.c        **** 				ind++;
 416:main.c        **** 			}
 417:main.c        **** 
 418:main.c        **** 			if(asc == ',')
 506              		.loc 1 418 0
 507 0400 D0399FE5 		ldr	r3, .L152+4
 508 0404 0520D3E5 		ldrb	r2, [r3, #5]	@ zero_extendqisi2
 415:main.c        **** 				ind++;
 509              		.loc 1 415 0
 510 0408 01408492 		addls	r4, r4, #1
 511              	.LVL37:
 512 040c 38108DE2 		add	r1, sp, #56
 513              		.loc 1 418 0
 514 0410 2C0052E3 		cmp	r2, #44
 515 0414 043081E0 		add	r3, r1, r4
 419:main.c        **** 			{
 420:main.c        **** 				q[ind] = ',';
 421:main.c        **** 			}
 422:main.c        **** 			else
 423:main.c        **** 			{
 424:main.c        **** 				q[ind] = 0;
 516              		.loc 1 424 0
 517 0418 0020A013 		movne	r2, #0
 518 041c 342043E5 		strb	r2, [r3, #-52]
 425:main.c        **** 			}
 426:main.c        **** 			ind++;
 427:main.c        **** 			temp = 0; 
 428:main.c        **** 			temp2 = 0;
 429:main.c        **** 			temp_buff[0] = 0;
 519              		.loc 1 429 0
 520 0420 0030A0E3 		mov	r3, #0
 426:main.c        **** 			temp = 0; 
 521              		.loc 1 426 0
 522 0424 014084E2 		add	r4, r4, #1
 523              	.LVL38:
 524              		.loc 1 429 0
 525 0428 0030CDE5 		strb	r3, [sp, #0]
 430:main.c        **** 			temp_buff[1] = 0;
 526              		.loc 1 430 0
 527 042c 0130CDE5 		strb	r3, [sp, #1]
 431:main.c        **** 			temp_buff[2] = 0;
 528              		.loc 1 431 0
 529 0430 0230CDE5 		strb	r3, [sp, #2]
 432:main.c        **** 			temp_buff[3] = 0;
 530              		.loc 1 432 0
 531 0434 0330CDE5 		strb	r3, [sp, #3]
 532 0438 070000EA 		b	.L29
 533              	.LVL39:
 534              	.L31:
 433:main.c        **** 
 434:main.c        **** 		}
 435:main.c        **** 
 436:main.c        **** 		else if(asc == 'N')
 535              		.loc 1 436 0
 536 043c 4E0053E3 		cmp	r3, #78
 537 0440 0500001A 		bne	.L29
 538              	.LVL40:
 437:main.c        **** 		{
 438:main.c        **** 			a = ((short)temp2 & 0xFF00) / 0x00000100;
 439:main.c        **** 			q[ind] = (char)a;
 539              		.loc 1 439 0
 540 0444 38208DE2 		add	r2, sp, #56
 541 0448 043082E0 		add	r3, r2, r4
 438:main.c        **** 			q[ind] = (char)a;
 542              		.loc 1 438 0
 543 044c 2024A0E1 		mov	r2, r0, lsr #8
 544              		.loc 1 439 0
 545 0450 342043E5 		strb	r2, [r3, #-52]
 440:main.c        **** 			
 441:main.c        **** 			q[ind+1]  = (char)temp2 & 0xFF;
 546              		.loc 1 441 0
 547 0454 330043E5 		strb	r0, [r3, #-51]
 442:main.c        **** 			ind += 2;
 548              		.loc 1 442 0
 549 0458 024084E2 		add	r4, r4, #2
 550              	.LVL41:
 551              	.L29:
 443:main.c        **** 			temp = 0;
 444:main.c        **** 		}
 445:main.c        **** 	}
 446:main.c        **** 	// Get AD0.2
 447:main.c        **** 	if(ad0_2 == 'Y')
 552              		.loc 1 447 0
 553 045c 74399FE5 		ldr	r3, .L152+4
 554 0460 0730D3E5 		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 555 0464 590053E3 		cmp	r3, #89
 556 0468 4800001A 		bne	.L38
 448:main.c        **** 	{
 449:main.c        **** 		AD0CR = 0x00020FF04; // AD1.2
 557              		.loc 1 449 0
 558 046c 74399FE5 		ldr	r3, .L152+20
 559 0470 74299FE5 		ldr	r2, .L152+24
 560 0474 002083E5 		str	r2, [r3, #0]
 450:main.c        **** 		AD0CR |= 0x01000000; // start conversion
 561              		.loc 1 450 0
 562 0478 002093E5 		ldr	r2, [r3, #0]
 563 047c 012482E3 		orr	r2, r2, #16777216
 564 0480 002083E5 		str	r2, [r3, #0]
 565              	.L39:
 451:main.c        **** 		while((temp & 0x80000000) == 0)
 452:main.c        **** 		{
 453:main.c        **** 			temp = AD0DR;
 566              		.loc 1 453 0
 567 0484 042093E5 		ldr	r2, [r3, #4]
 568              	.LVL42:
 451:main.c        **** 		while((temp & 0x80000000) == 0)
 569              		.loc 1 451 0
 570 0488 000052E3 		cmp	r2, #0
 571 048c FCFFFFAA 		bge	.L39
 572              	.LVL43:
 454:main.c        **** 		}
 455:main.c        **** 		temp &= 0x0000FFC0;
 573              		.loc 1 455 0
 574 0490 4C099FE5 		ldr	r0, .L152+16
 456:main.c        **** 		temp2 = temp / 0x00000040;
 457:main.c        **** 
 458:main.c        **** 		AD0CR = 0x00000000;
 575              		.loc 1 458 0
 576 0494 4C399FE5 		ldr	r3, .L152+20
 455:main.c        **** 		temp2 = temp / 0x00000040;
 577              		.loc 1 455 0
 578 0498 000002E0 		and	r0, r2, r0
 579              	.LVL44:
 580              		.loc 1 458 0
 581 049c 0020A0E3 		mov	r2, #0
 582 04a0 002083E5 		str	r2, [r3, #0]
 459:main.c        **** 
 460:main.c        **** 		if(asc == 'Y' || asc == ',')
 583              		.loc 1 460 0
 584 04a4 2C399FE5 		ldr	r3, .L152+4
 585 04a8 0530D3E5 		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 586 04ac 590053E3 		cmp	r3, #89
 587 04b0 2C005313 		cmpne	r3, #44
 456:main.c        **** 
 588              		.loc 1 456 0
 589 04b4 4003A0E1 		mov	r0, r0, asr #6
 590              	.LVL45:
 591              		.loc 1 460 0
 592 04b8 2C00001A 		bne	.L40
 461:main.c        **** 		{
 462:main.c        **** 			itoa(temp2, 10, temp_buff);
 593              		.loc 1 462 0
 594 04bc 0A10A0E3 		mov	r1, #10
 595 04c0 0D20A0E1 		mov	r2, sp
 596 04c4 FEFFFFEB 		bl	itoa
 597              	.LVL46:
 463:main.c        **** 			if(temp_buff[0] >= 48 && temp_buff[0] <= 57)
 598              		.loc 1 463 0
 599 04c8 0030DDE5 		ldrb	r3, [sp, #0]	@ zero_extendqisi2
 600 04cc 302043E2 		sub	r2, r3, #48
 601 04d0 090052E3 		cmp	r2, #9
 464:main.c        **** 			{
 465:main.c        **** 				q[ind] = temp_buff[0];
 602              		.loc 1 465 0
 603 04d4 38108D92 		addls	r1, sp, #56
 604 04d8 04208190 		addls	r2, r1, r4
 605 04dc 34304295 		strlsb	r3, [r2, #-52]
 466:main.c        **** 				ind++;
 467:main.c        **** 			}
 468:main.c        **** 			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
 606              		.loc 1 468 0
 607 04e0 0130DDE5 		ldrb	r3, [sp, #1]	@ zero_extendqisi2
 608 04e4 302043E2 		sub	r2, r3, #48
 466:main.c        **** 				ind++;
 609              		.loc 1 466 0
 610 04e8 01408492 		addls	r4, r4, #1
 611              	.LVL47:
 612              		.loc 1 468 0
 613 04ec 090052E3 		cmp	r2, #9
 469:main.c        **** 			{
 470:main.c        **** 				q[ind] = temp_buff[1];
 614              		.loc 1 470 0
 615 04f0 38108D92 		addls	r1, sp, #56
 616 04f4 04208190 		addls	r2, r1, r4
 617 04f8 34304295 		strlsb	r3, [r2, #-52]
 471:main.c        **** 				ind++;
 472:main.c        **** 			}
 473:main.c        **** 			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
 618              		.loc 1 473 0
 619 04fc 0230DDE5 		ldrb	r3, [sp, #2]	@ zero_extendqisi2
 620 0500 302043E2 		sub	r2, r3, #48
 471:main.c        **** 				ind++;
 621              		.loc 1 471 0
 622 0504 01408492 		addls	r4, r4, #1
 623              	.LVL48:
 624              		.loc 1 473 0
 625 0508 090052E3 		cmp	r2, #9
 474:main.c        **** 			{
 475:main.c        **** 				q[ind] = temp_buff[2];
 626              		.loc 1 475 0
 627 050c 38108D92 		addls	r1, sp, #56
 628 0510 04208190 		addls	r2, r1, r4
 629 0514 34304295 		strlsb	r3, [r2, #-52]
 476:main.c        **** 				ind++;
 477:main.c        **** 			}
 478:main.c        **** 			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
 630              		.loc 1 478 0
 631 0518 0330DDE5 		ldrb	r3, [sp, #3]	@ zero_extendqisi2
 632 051c 302043E2 		sub	r2, r3, #48
 476:main.c        **** 				ind++;
 633              		.loc 1 476 0
 634 0520 01408492 		addls	r4, r4, #1
 635              	.LVL49:
 636              		.loc 1 478 0
 637 0524 090052E3 		cmp	r2, #9
 479:main.c        **** 			{
 480:main.c        **** 				q[ind] = temp_buff[3];
 638              		.loc 1 480 0
 639 0528 38108D92 		addls	r1, sp, #56
 640 052c 04208190 		addls	r2, r1, r4
 641 0530 34304295 		strlsb	r3, [r2, #-52]
 481:main.c        **** 				ind++;
 482:main.c        **** 			}
 483:main.c        **** 
 484:main.c        **** 			if(asc == ',')
 642              		.loc 1 484 0
 643 0534 9C389FE5 		ldr	r3, .L152+4
 644 0538 0520D3E5 		ldrb	r2, [r3, #5]	@ zero_extendqisi2
 481:main.c        **** 				ind++;
 645              		.loc 1 481 0
 646 053c 01408492 		addls	r4, r4, #1
 647              	.LVL50:
 648 0540 38108DE2 		add	r1, sp, #56
 649              		.loc 1 484 0
 650 0544 2C0052E3 		cmp	r2, #44
 651 0548 043081E0 		add	r3, r1, r4
 485:main.c        **** 			{
 486:main.c        **** 				q[ind] = ',';
 487:main.c        **** 			}
 488:main.c        **** 			else
 489:main.c        **** 			{
 490:main.c        **** 				q[ind] = 0;
 652              		.loc 1 490 0
 653 054c 0020A013 		movne	r2, #0
 654 0550 342043E5 		strb	r2, [r3, #-52]
 491:main.c        **** 			}
 492:main.c        **** 			ind++;
 493:main.c        **** 			temp = 0; 
 494:main.c        **** 			temp2 = 0;
 495:main.c        **** 			temp_buff[0] = 0;
 655              		.loc 1 495 0
 656 0554 0030A0E3 		mov	r3, #0
 492:main.c        **** 			temp = 0; 
 657              		.loc 1 492 0
 658 0558 014084E2 		add	r4, r4, #1
 659              	.LVL51:
 660              		.loc 1 495 0
 661 055c 0030CDE5 		strb	r3, [sp, #0]
 496:main.c        **** 			temp_buff[1] = 0;
 662              		.loc 1 496 0
 663 0560 0130CDE5 		strb	r3, [sp, #1]
 497:main.c        **** 			temp_buff[2] = 0;
 664              		.loc 1 497 0
 665 0564 0230CDE5 		strb	r3, [sp, #2]
 498:main.c        **** 			temp_buff[3] = 0;
 666              		.loc 1 498 0
 667 0568 0330CDE5 		strb	r3, [sp, #3]
 668 056c 070000EA 		b	.L38
 669              	.LVL52:
 670              	.L40:
 499:main.c        **** 
 500:main.c        **** 		}
 501:main.c        **** 
 502:main.c        **** 		else if(asc == 'N')
 671              		.loc 1 502 0
 672 0570 4E0053E3 		cmp	r3, #78
 673 0574 0500001A 		bne	.L38
 674              	.LVL53:
 503:main.c        **** 		{
 504:main.c        **** 			a = ((short)temp2 & 0xFF00) / 0x00000100;
 505:main.c        **** 			q[ind] = (char)a;
 675              		.loc 1 505 0
 676 0578 38208DE2 		add	r2, sp, #56
 677 057c 043082E0 		add	r3, r2, r4
 504:main.c        **** 			q[ind] = (char)a;
 678              		.loc 1 504 0
 679 0580 2024A0E1 		mov	r2, r0, lsr #8
 680              		.loc 1 505 0
 681 0584 342043E5 		strb	r2, [r3, #-52]
 506:main.c        **** 			
 507:main.c        **** 			q[ind+1]  = (char)temp2 & 0xFF;
 682              		.loc 1 507 0
 683 0588 330043E5 		strb	r0, [r3, #-51]
 508:main.c        **** 			ind += 2;
 684              		.loc 1 508 0
 685 058c 024084E2 		add	r4, r4, #2
 686              	.LVL54:
 687              	.L38:
 509:main.c        **** 			temp = 0;
 510:main.c        **** 		}
 511:main.c        **** 	}
 512:main.c        **** 	// Get AD0.1
 513:main.c        **** 	if(ad0_1 == 'Y')
 688              		.loc 1 513 0
 689 0590 40389FE5 		ldr	r3, .L152+4
 690 0594 0830D3E5 		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 691 0598 590053E3 		cmp	r3, #89
 692 059c 4800001A 		bne	.L47
 514:main.c        **** 	{
 515:main.c        **** 		AD0CR = 0x00020FF02; // AD0.1
 693              		.loc 1 515 0
 694 05a0 40389FE5 		ldr	r3, .L152+20
 695 05a4 44289FE5 		ldr	r2, .L152+28
 696 05a8 002083E5 		str	r2, [r3, #0]
 516:main.c        **** 		AD0CR |= 0x01000000; // start conversion
 697              		.loc 1 516 0
 698 05ac 002093E5 		ldr	r2, [r3, #0]
 699 05b0 012482E3 		orr	r2, r2, #16777216
 700 05b4 002083E5 		str	r2, [r3, #0]
 701              	.L48:
 517:main.c        **** 		while((temp & 0x80000000) == 0)
 518:main.c        **** 		{
 519:main.c        **** 			temp = AD0DR;
 702              		.loc 1 519 0
 703 05b8 042093E5 		ldr	r2, [r3, #4]
 704              	.LVL55:
 517:main.c        **** 		while((temp & 0x80000000) == 0)
 705              		.loc 1 517 0
 706 05bc 000052E3 		cmp	r2, #0
 707 05c0 FCFFFFAA 		bge	.L48
 708              	.LVL56:
 520:main.c        **** 		}
 521:main.c        **** 		temp &= 0x0000FFC0;
 709              		.loc 1 521 0
 710 05c4 18089FE5 		ldr	r0, .L152+16
 522:main.c        **** 		temp2 = temp / 0x00000040;
 523:main.c        **** 
 524:main.c        **** 		AD0CR = 0x00000000;
 711              		.loc 1 524 0
 712 05c8 18389FE5 		ldr	r3, .L152+20
 521:main.c        **** 		temp2 = temp / 0x00000040;
 713              		.loc 1 521 0
 714 05cc 000002E0 		and	r0, r2, r0
 715              	.LVL57:
 716              		.loc 1 524 0
 717 05d0 0020A0E3 		mov	r2, #0
 718 05d4 002083E5 		str	r2, [r3, #0]
 525:main.c        **** 
 526:main.c        **** 		if(asc == 'Y' || asc == ',')
 719              		.loc 1 526 0
 720 05d8 F8379FE5 		ldr	r3, .L152+4
 721 05dc 0530D3E5 		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 722 05e0 590053E3 		cmp	r3, #89
 723 05e4 2C005313 		cmpne	r3, #44
 522:main.c        **** 
 724              		.loc 1 522 0
 725 05e8 4003A0E1 		mov	r0, r0, asr #6
 726              	.LVL58:
 727              		.loc 1 526 0
 728 05ec 2C00001A 		bne	.L49
 527:main.c        **** 		{
 528:main.c        **** 			itoa(temp2, 10, temp_buff);
 729              		.loc 1 528 0
 730 05f0 0A10A0E3 		mov	r1, #10
 731 05f4 0D20A0E1 		mov	r2, sp
 732 05f8 FEFFFFEB 		bl	itoa
 733              	.LVL59:
 529:main.c        **** 			if(temp_buff[0] >= 48 && temp_buff[0] <= 57)
 734              		.loc 1 529 0
 735 05fc 0030DDE5 		ldrb	r3, [sp, #0]	@ zero_extendqisi2
 736 0600 302043E2 		sub	r2, r3, #48
 737 0604 090052E3 		cmp	r2, #9
 530:main.c        **** 			{
 531:main.c        **** 				q[ind] = temp_buff[0];
 738              		.loc 1 531 0
 739 0608 38108D92 		addls	r1, sp, #56
 740 060c 04208190 		addls	r2, r1, r4
 741 0610 34304295 		strlsb	r3, [r2, #-52]
 532:main.c        **** 				ind++;
 533:main.c        **** 			}
 534:main.c        **** 			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
 742              		.loc 1 534 0
 743 0614 0130DDE5 		ldrb	r3, [sp, #1]	@ zero_extendqisi2
 744 0618 302043E2 		sub	r2, r3, #48
 532:main.c        **** 				ind++;
 745              		.loc 1 532 0
 746 061c 01408492 		addls	r4, r4, #1
 747              	.LVL60:
 748              		.loc 1 534 0
 749 0620 090052E3 		cmp	r2, #9
 535:main.c        **** 			{
 536:main.c        **** 				q[ind] = temp_buff[1];
 750              		.loc 1 536 0
 751 0624 38108D92 		addls	r1, sp, #56
 752 0628 04208190 		addls	r2, r1, r4
 753 062c 34304295 		strlsb	r3, [r2, #-52]
 537:main.c        **** 				ind++;
 538:main.c        **** 			}
 539:main.c        **** 			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
 754              		.loc 1 539 0
 755 0630 0230DDE5 		ldrb	r3, [sp, #2]	@ zero_extendqisi2
 756 0634 302043E2 		sub	r2, r3, #48
 537:main.c        **** 				ind++;
 757              		.loc 1 537 0
 758 0638 01408492 		addls	r4, r4, #1
 759              	.LVL61:
 760              		.loc 1 539 0
 761 063c 090052E3 		cmp	r2, #9
 540:main.c        **** 			{
 541:main.c        **** 				q[ind] = temp_buff[2];
 762              		.loc 1 541 0
 763 0640 38108D92 		addls	r1, sp, #56
 764 0644 04208190 		addls	r2, r1, r4
 765 0648 34304295 		strlsb	r3, [r2, #-52]
 542:main.c        **** 				ind++;
 543:main.c        **** 			}
 544:main.c        **** 			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
 766              		.loc 1 544 0
 767 064c 0330DDE5 		ldrb	r3, [sp, #3]	@ zero_extendqisi2
 768 0650 302043E2 		sub	r2, r3, #48
 542:main.c        **** 				ind++;
 769              		.loc 1 542 0
 770 0654 01408492 		addls	r4, r4, #1
 771              	.LVL62:
 772              		.loc 1 544 0
 773 0658 090052E3 		cmp	r2, #9
 545:main.c        **** 			{
 546:main.c        **** 				q[ind] = temp_buff[3];
 774              		.loc 1 546 0
 775 065c 38108D92 		addls	r1, sp, #56
 776 0660 04208190 		addls	r2, r1, r4
 777 0664 34304295 		strlsb	r3, [r2, #-52]
 547:main.c        **** 				ind++;
 548:main.c        **** 			}
 549:main.c        **** 
 550:main.c        **** 			if(asc == ',')
 778              		.loc 1 550 0
 779 0668 68379FE5 		ldr	r3, .L152+4
 780 066c 0520D3E5 		ldrb	r2, [r3, #5]	@ zero_extendqisi2
 547:main.c        **** 				ind++;
 781              		.loc 1 547 0
 782 0670 01408492 		addls	r4, r4, #1
 783              	.LVL63:
 784 0674 38108DE2 		add	r1, sp, #56
 785              		.loc 1 550 0
 786 0678 2C0052E3 		cmp	r2, #44
 787 067c 043081E0 		add	r3, r1, r4
 551:main.c        **** 			{
 552:main.c        **** 				q[ind] = ',';
 553:main.c        **** 			}
 554:main.c        **** 			else
 555:main.c        **** 			{
 556:main.c        **** 				q[ind] = 0;
 788              		.loc 1 556 0
 789 0680 0020A013 		movne	r2, #0
 790 0684 342043E5 		strb	r2, [r3, #-52]
 557:main.c        **** 			}
 558:main.c        **** 			ind++;
 559:main.c        **** 			temp = 0; 
 560:main.c        **** 			temp2 = 0;
 561:main.c        **** 			temp_buff[0] = 0;
 791              		.loc 1 561 0
 792 0688 0030A0E3 		mov	r3, #0
 558:main.c        **** 			temp = 0; 
 793              		.loc 1 558 0
 794 068c 014084E2 		add	r4, r4, #1
 795              	.LVL64:
 796              		.loc 1 561 0
 797 0690 0030CDE5 		strb	r3, [sp, #0]
 562:main.c        **** 			temp_buff[1] = 0;
 798              		.loc 1 562 0
 799 0694 0130CDE5 		strb	r3, [sp, #1]
 563:main.c        **** 			temp_buff[2] = 0;
 800              		.loc 1 563 0
 801 0698 0230CDE5 		strb	r3, [sp, #2]
 564:main.c        **** 			temp_buff[3] = 0;
 802              		.loc 1 564 0
 803 069c 0330CDE5 		strb	r3, [sp, #3]
 804 06a0 070000EA 		b	.L47
 805              	.LVL65:
 806              	.L49:
 565:main.c        **** 
 566:main.c        **** 		}
 567:main.c        **** 
 568:main.c        **** 		else if(asc == 'N')
 807              		.loc 1 568 0
 808 06a4 4E0053E3 		cmp	r3, #78
 809 06a8 0500001A 		bne	.L47
 810              	.LVL66:
 569:main.c        **** 		{
 570:main.c        **** 			a = ((short)temp2 & 0xFF00) / 0x00000100;
 571:main.c        **** 			q[ind] = (char)a;
 811              		.loc 1 571 0
 812 06ac 38208DE2 		add	r2, sp, #56
 813 06b0 043082E0 		add	r3, r2, r4
 570:main.c        **** 			q[ind] = (char)a;
 814              		.loc 1 570 0
 815 06b4 2024A0E1 		mov	r2, r0, lsr #8
 816              		.loc 1 571 0
 817 06b8 342043E5 		strb	r2, [r3, #-52]
 572:main.c        **** 			
 573:main.c        **** 			q[ind+1]  = (char)temp2 & 0xFF;
 818              		.loc 1 573 0
 819 06bc 330043E5 		strb	r0, [r3, #-51]
 574:main.c        **** 			ind += 2;
 820              		.loc 1 574 0
 821 06c0 024084E2 		add	r4, r4, #2
 822              	.LVL67:
 823              	.L47:
 575:main.c        **** 			temp = 0;
 576:main.c        **** 		}
 577:main.c        **** 	}
 578:main.c        **** 	// Get AD1.2
 579:main.c        **** 	if(ad1_2 == 'Y')
 824              		.loc 1 579 0
 825 06c4 0C379FE5 		ldr	r3, .L152+4
 826 06c8 0930D3E5 		ldrb	r3, [r3, #9]	@ zero_extendqisi2
 827 06cc 590053E3 		cmp	r3, #89
 828 06d0 4800001A 		bne	.L56
 580:main.c        **** 	{
 581:main.c        **** 		AD1CR = 0x00020FF04; // AD1.2
 829              		.loc 1 581 0
 830 06d4 00379FE5 		ldr	r3, .L152+8
 831 06d8 0C279FE5 		ldr	r2, .L152+24
 832 06dc 002083E5 		str	r2, [r3, #0]
 582:main.c        **** 		AD1CR |= 0x01000000; // start conversion
 833              		.loc 1 582 0
 834 06e0 002093E5 		ldr	r2, [r3, #0]
 835 06e4 012482E3 		orr	r2, r2, #16777216
 836 06e8 002083E5 		str	r2, [r3, #0]
 837              	.L57:
 583:main.c        **** 		while((temp & 0x80000000) == 0)
 584:main.c        **** 		{
 585:main.c        **** 			temp = AD1DR;
 838              		.loc 1 585 0
 839 06ec 042093E5 		ldr	r2, [r3, #4]
 840              	.LVL68:
 583:main.c        **** 		while((temp & 0x80000000) == 0)
 841              		.loc 1 583 0
 842 06f0 000052E3 		cmp	r2, #0
 843 06f4 FCFFFFAA 		bge	.L57
 844              	.LVL69:
 586:main.c        **** 		}
 587:main.c        **** 		temp &= 0x0000FFC0;
 845              		.loc 1 587 0
 846 06f8 E4069FE5 		ldr	r0, .L152+16
 588:main.c        **** 		temp2 = temp / 0x00000040;
 589:main.c        **** 
 590:main.c        **** 		AD1CR = 0x00000000;
 847              		.loc 1 590 0
 848 06fc D8369FE5 		ldr	r3, .L152+8
 587:main.c        **** 		temp2 = temp / 0x00000040;
 849              		.loc 1 587 0
 850 0700 000002E0 		and	r0, r2, r0
 851              	.LVL70:
 852              		.loc 1 590 0
 853 0704 0020A0E3 		mov	r2, #0
 854 0708 002083E5 		str	r2, [r3, #0]
 591:main.c        **** 
 592:main.c        **** 		if(asc == 'Y' || asc == ',')
 855              		.loc 1 592 0
 856 070c C4369FE5 		ldr	r3, .L152+4
 857 0710 0530D3E5 		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 858 0714 590053E3 		cmp	r3, #89
 859 0718 2C005313 		cmpne	r3, #44
 588:main.c        **** 
 860              		.loc 1 588 0
 861 071c 4003A0E1 		mov	r0, r0, asr #6
 862              	.LVL71:
 863              		.loc 1 592 0
 864 0720 2C00001A 		bne	.L58
 593:main.c        **** 		{
 594:main.c        **** 			itoa(temp2, 10, temp_buff);
 865              		.loc 1 594 0
 866 0724 0A10A0E3 		mov	r1, #10
 867 0728 0D20A0E1 		mov	r2, sp
 868 072c FEFFFFEB 		bl	itoa
 869              	.LVL72:
 595:main.c        **** 			if(temp_buff[0] >= 48 && temp_buff[0] <= 57)
 870              		.loc 1 595 0
 871 0730 0030DDE5 		ldrb	r3, [sp, #0]	@ zero_extendqisi2
 872 0734 302043E2 		sub	r2, r3, #48
 873 0738 090052E3 		cmp	r2, #9
 596:main.c        **** 			{
 597:main.c        **** 				q[ind] = temp_buff[0];
 874              		.loc 1 597 0
 875 073c 38108D92 		addls	r1, sp, #56
 876 0740 04208190 		addls	r2, r1, r4
 877 0744 34304295 		strlsb	r3, [r2, #-52]
 598:main.c        **** 				ind++;
 599:main.c        **** 			}
 600:main.c        **** 			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
 878              		.loc 1 600 0
 879 0748 0130DDE5 		ldrb	r3, [sp, #1]	@ zero_extendqisi2
 880 074c 302043E2 		sub	r2, r3, #48
 598:main.c        **** 				ind++;
 881              		.loc 1 598 0
 882 0750 01408492 		addls	r4, r4, #1
 883              	.LVL73:
 884              		.loc 1 600 0
 885 0754 090052E3 		cmp	r2, #9
 601:main.c        **** 			{
 602:main.c        **** 				q[ind] = temp_buff[1];
 886              		.loc 1 602 0
 887 0758 38108D92 		addls	r1, sp, #56
 888 075c 04208190 		addls	r2, r1, r4
 889 0760 34304295 		strlsb	r3, [r2, #-52]
 603:main.c        **** 				ind++;
 604:main.c        **** 			}
 605:main.c        **** 			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
 890              		.loc 1 605 0
 891 0764 0230DDE5 		ldrb	r3, [sp, #2]	@ zero_extendqisi2
 892 0768 302043E2 		sub	r2, r3, #48
 603:main.c        **** 				ind++;
 893              		.loc 1 603 0
 894 076c 01408492 		addls	r4, r4, #1
 895              	.LVL74:
 896              		.loc 1 605 0
 897 0770 090052E3 		cmp	r2, #9
 606:main.c        **** 			{
 607:main.c        **** 				q[ind] = temp_buff[2];
 898              		.loc 1 607 0
 899 0774 38108D92 		addls	r1, sp, #56
 900 0778 04208190 		addls	r2, r1, r4
 901 077c 34304295 		strlsb	r3, [r2, #-52]
 608:main.c        **** 				ind++;
 609:main.c        **** 			}
 610:main.c        **** 			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
 902              		.loc 1 610 0
 903 0780 0330DDE5 		ldrb	r3, [sp, #3]	@ zero_extendqisi2
 904 0784 302043E2 		sub	r2, r3, #48
 608:main.c        **** 				ind++;
 905              		.loc 1 608 0
 906 0788 01408492 		addls	r4, r4, #1
 907              	.LVL75:
 908              		.loc 1 610 0
 909 078c 090052E3 		cmp	r2, #9
 611:main.c        **** 			{
 612:main.c        **** 				q[ind] = temp_buff[3];
 910              		.loc 1 612 0
 911 0790 38108D92 		addls	r1, sp, #56
 912 0794 04208190 		addls	r2, r1, r4
 913 0798 34304295 		strlsb	r3, [r2, #-52]
 613:main.c        **** 				ind++;
 614:main.c        **** 			}
 615:main.c        **** 
 616:main.c        **** 			if(asc == ',')
 914              		.loc 1 616 0
 915 079c 34369FE5 		ldr	r3, .L152+4
 916 07a0 0520D3E5 		ldrb	r2, [r3, #5]	@ zero_extendqisi2
 613:main.c        **** 				ind++;
 917              		.loc 1 613 0
 918 07a4 01408492 		addls	r4, r4, #1
 919              	.LVL76:
 920 07a8 38108DE2 		add	r1, sp, #56
 921              		.loc 1 616 0
 922 07ac 2C0052E3 		cmp	r2, #44
 923 07b0 043081E0 		add	r3, r1, r4
 617:main.c        **** 			{
 618:main.c        **** 				q[ind] = ',';
 619:main.c        **** 			}
 620:main.c        **** 			else
 621:main.c        **** 			{
 622:main.c        **** 				q[ind] = 0;
 924              		.loc 1 622 0
 925 07b4 0020A013 		movne	r2, #0
 926 07b8 342043E5 		strb	r2, [r3, #-52]
 623:main.c        **** 			}
 624:main.c        **** 			ind++;
 625:main.c        **** 			temp = 0; 
 626:main.c        **** 			temp2 = 0;
 627:main.c        **** 			temp_buff[0] = 0;
 927              		.loc 1 627 0
 928 07bc 0030A0E3 		mov	r3, #0
 624:main.c        **** 			temp = 0; 
 929              		.loc 1 624 0
 930 07c0 014084E2 		add	r4, r4, #1
 931              	.LVL77:
 932              		.loc 1 627 0
 933 07c4 0030CDE5 		strb	r3, [sp, #0]
 628:main.c        **** 			temp_buff[1] = 0;
 934              		.loc 1 628 0
 935 07c8 0130CDE5 		strb	r3, [sp, #1]
 629:main.c        **** 			temp_buff[2] = 0;
 936              		.loc 1 629 0
 937 07cc 0230CDE5 		strb	r3, [sp, #2]
 630:main.c        **** 			temp_buff[3] = 0;
 938              		.loc 1 630 0
 939 07d0 0330CDE5 		strb	r3, [sp, #3]
 940 07d4 070000EA 		b	.L56
 941              	.LVL78:
 942              	.L58:
 631:main.c        **** 
 632:main.c        **** 		}
 633:main.c        **** 
 634:main.c        **** 		else if(asc == 'N')
 943              		.loc 1 634 0
 944 07d8 4E0053E3 		cmp	r3, #78
 945 07dc 0500001A 		bne	.L56
 946              	.LVL79:
 635:main.c        **** 		{
 636:main.c        **** 			a = ((short)temp2 & 0xFF00) / 0x00000100;
 637:main.c        **** 			q[ind] = (char)a;
 947              		.loc 1 637 0
 948 07e0 38208DE2 		add	r2, sp, #56
 949 07e4 043082E0 		add	r3, r2, r4
 636:main.c        **** 			q[ind] = (char)a;
 950              		.loc 1 636 0
 951 07e8 2024A0E1 		mov	r2, r0, lsr #8
 952              		.loc 1 637 0
 953 07ec 342043E5 		strb	r2, [r3, #-52]
 638:main.c        **** 			
 639:main.c        **** 			q[ind+1]  = (char)temp2 & 0xFF;
 954              		.loc 1 639 0
 955 07f0 330043E5 		strb	r0, [r3, #-51]
 640:main.c        **** 			ind += 2;
 956              		.loc 1 640 0
 957 07f4 024084E2 		add	r4, r4, #2
 958              	.LVL80:
 959              	.L56:
 641:main.c        **** 			temp = 0;
 642:main.c        **** 		}
 643:main.c        **** 	}
 644:main.c        **** 	// Get AD0.4
 645:main.c        **** 	if(ad0_4 == 'Y')
 960              		.loc 1 645 0
 961 07f8 D8359FE5 		ldr	r3, .L152+4
 962 07fc 0A30D3E5 		ldrb	r3, [r3, #10]	@ zero_extendqisi2
 963 0800 590053E3 		cmp	r3, #89
 964 0804 4800001A 		bne	.L65
 646:main.c        **** 	{
 647:main.c        **** 		AD0CR = 0x00020FF10; // AD0.4
 965              		.loc 1 647 0
 966 0808 D8359FE5 		ldr	r3, .L152+20
 967 080c E0259FE5 		ldr	r2, .L152+32
 968 0810 002083E5 		str	r2, [r3, #0]
 648:main.c        **** 		AD0CR |= 0x01000000; // start conversion
 969              		.loc 1 648 0
 970 0814 002093E5 		ldr	r2, [r3, #0]
 971 0818 012482E3 		orr	r2, r2, #16777216
 972 081c 002083E5 		str	r2, [r3, #0]
 973              	.L66:
 649:main.c        **** 		while((temp & 0x80000000) == 0)
 650:main.c        **** 		{
 651:main.c        **** 			temp = AD0DR;
 974              		.loc 1 651 0
 975 0820 042093E5 		ldr	r2, [r3, #4]
 976              	.LVL81:
 649:main.c        **** 		while((temp & 0x80000000) == 0)
 977              		.loc 1 649 0
 978 0824 000052E3 		cmp	r2, #0
 979 0828 FCFFFFAA 		bge	.L66
 980              	.LVL82:
 652:main.c        **** 		}
 653:main.c        **** 		temp &= 0x0000FFC0;
 981              		.loc 1 653 0
 982 082c B0059FE5 		ldr	r0, .L152+16
 654:main.c        **** 		temp2 = temp / 0x00000040;
 655:main.c        **** 
 656:main.c        **** 		AD0CR = 0x00000000;
 983              		.loc 1 656 0
 984 0830 B0359FE5 		ldr	r3, .L152+20
 653:main.c        **** 		temp2 = temp / 0x00000040;
 985              		.loc 1 653 0
 986 0834 000002E0 		and	r0, r2, r0
 987              	.LVL83:
 988              		.loc 1 656 0
 989 0838 0020A0E3 		mov	r2, #0
 990 083c 002083E5 		str	r2, [r3, #0]
 657:main.c        **** 
 658:main.c        **** 		if(asc == 'Y' || asc == ',')
 991              		.loc 1 658 0
 992 0840 90359FE5 		ldr	r3, .L152+4
 993 0844 0530D3E5 		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 994 0848 590053E3 		cmp	r3, #89
 995 084c 2C005313 		cmpne	r3, #44
 654:main.c        **** 
 996              		.loc 1 654 0
 997 0850 4003A0E1 		mov	r0, r0, asr #6
 998              	.LVL84:
 999              		.loc 1 658 0
 1000 0854 2C00001A 		bne	.L67
 659:main.c        **** 		{
 660:main.c        **** 			itoa(temp2, 10, temp_buff);
 1001              		.loc 1 660 0
 1002 0858 0A10A0E3 		mov	r1, #10
 1003 085c 0D20A0E1 		mov	r2, sp
 1004 0860 FEFFFFEB 		bl	itoa
 1005              	.LVL85:
 661:main.c        **** 			if(temp_buff[0] >= 48 && temp_buff[0] <= 57)
 1006              		.loc 1 661 0
 1007 0864 0030DDE5 		ldrb	r3, [sp, #0]	@ zero_extendqisi2
 1008 0868 302043E2 		sub	r2, r3, #48
 1009 086c 090052E3 		cmp	r2, #9
 662:main.c        **** 			{
 663:main.c        **** 				q[ind] = temp_buff[0];
 1010              		.loc 1 663 0
 1011 0870 38108D92 		addls	r1, sp, #56
 1012 0874 04208190 		addls	r2, r1, r4
 1013 0878 34304295 		strlsb	r3, [r2, #-52]
 664:main.c        **** 				ind++;
 665:main.c        **** 			}
 666:main.c        **** 			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
 1014              		.loc 1 666 0
 1015 087c 0130DDE5 		ldrb	r3, [sp, #1]	@ zero_extendqisi2
 1016 0880 302043E2 		sub	r2, r3, #48
 664:main.c        **** 				ind++;
 1017              		.loc 1 664 0
 1018 0884 01408492 		addls	r4, r4, #1
 1019              	.LVL86:
 1020              		.loc 1 666 0
 1021 0888 090052E3 		cmp	r2, #9
 667:main.c        **** 			{
 668:main.c        **** 				q[ind] = temp_buff[1];
 1022              		.loc 1 668 0
 1023 088c 38108D92 		addls	r1, sp, #56
 1024 0890 04208190 		addls	r2, r1, r4
 1025 0894 34304295 		strlsb	r3, [r2, #-52]
 669:main.c        **** 				ind++;
 670:main.c        **** 			}
 671:main.c        **** 			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
 1026              		.loc 1 671 0
 1027 0898 0230DDE5 		ldrb	r3, [sp, #2]	@ zero_extendqisi2
 1028 089c 302043E2 		sub	r2, r3, #48
 669:main.c        **** 				ind++;
 1029              		.loc 1 669 0
 1030 08a0 01408492 		addls	r4, r4, #1
 1031              	.LVL87:
 1032              		.loc 1 671 0
 1033 08a4 090052E3 		cmp	r2, #9
 672:main.c        **** 			{
 673:main.c        **** 				q[ind] = temp_buff[2];
 1034              		.loc 1 673 0
 1035 08a8 38108D92 		addls	r1, sp, #56
 1036 08ac 04208190 		addls	r2, r1, r4
 1037 08b0 34304295 		strlsb	r3, [r2, #-52]
 674:main.c        **** 				ind++;
 675:main.c        **** 			}
 676:main.c        **** 			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
 1038              		.loc 1 676 0
 1039 08b4 0330DDE5 		ldrb	r3, [sp, #3]	@ zero_extendqisi2
 1040 08b8 302043E2 		sub	r2, r3, #48
 674:main.c        **** 				ind++;
 1041              		.loc 1 674 0
 1042 08bc 01408492 		addls	r4, r4, #1
 1043              	.LVL88:
 1044              		.loc 1 676 0
 1045 08c0 090052E3 		cmp	r2, #9
 677:main.c        **** 			{
 678:main.c        **** 				q[ind] = temp_buff[3];
 1046              		.loc 1 678 0
 1047 08c4 38108D92 		addls	r1, sp, #56
 1048 08c8 04208190 		addls	r2, r1, r4
 1049 08cc 34304295 		strlsb	r3, [r2, #-52]
 679:main.c        **** 				ind++;
 680:main.c        **** 			}
 681:main.c        **** 
 682:main.c        **** 			if(asc == ',')
 1050              		.loc 1 682 0
 1051 08d0 00359FE5 		ldr	r3, .L152+4
 1052 08d4 0520D3E5 		ldrb	r2, [r3, #5]	@ zero_extendqisi2
 679:main.c        **** 				ind++;
 1053              		.loc 1 679 0
 1054 08d8 01408492 		addls	r4, r4, #1
 1055              	.LVL89:
 1056 08dc 38108DE2 		add	r1, sp, #56
 1057              		.loc 1 682 0
 1058 08e0 2C0052E3 		cmp	r2, #44
 1059 08e4 043081E0 		add	r3, r1, r4
 683:main.c        **** 			{
 684:main.c        **** 				q[ind] = ',';
 685:main.c        **** 			}
 686:main.c        **** 			else
 687:main.c        **** 			{
 688:main.c        **** 				q[ind] = 0;
 1060              		.loc 1 688 0
 1061 08e8 0020A013 		movne	r2, #0
 1062 08ec 342043E5 		strb	r2, [r3, #-52]
 689:main.c        **** 			}
 690:main.c        **** 			ind++;
 691:main.c        **** 			temp = 0; 
 692:main.c        **** 			temp2 = 0;
 693:main.c        **** 			temp_buff[0] = 0;
 1063              		.loc 1 693 0
 1064 08f0 0030A0E3 		mov	r3, #0
 690:main.c        **** 			temp = 0; 
 1065              		.loc 1 690 0
 1066 08f4 014084E2 		add	r4, r4, #1
 1067              	.LVL90:
 1068              		.loc 1 693 0
 1069 08f8 0030CDE5 		strb	r3, [sp, #0]
 694:main.c        **** 			temp_buff[1] = 0;
 1070              		.loc 1 694 0
 1071 08fc 0130CDE5 		strb	r3, [sp, #1]
 695:main.c        **** 			temp_buff[2] = 0;
 1072              		.loc 1 695 0
 1073 0900 0230CDE5 		strb	r3, [sp, #2]
 696:main.c        **** 			temp_buff[3] = 0;
 1074              		.loc 1 696 0
 1075 0904 0330CDE5 		strb	r3, [sp, #3]
 1076 0908 070000EA 		b	.L65
 1077              	.LVL91:
 1078              	.L67:
 697:main.c        **** 
 698:main.c        **** 		}
 699:main.c        **** 
 700:main.c        **** 		else if(asc == 'N')
 1079              		.loc 1 700 0
 1080 090c 4E0053E3 		cmp	r3, #78
 1081 0910 0500001A 		bne	.L65
 1082              	.LVL92:
 701:main.c        **** 		{
 702:main.c        **** 			a = ((short)temp2 & 0xFF00) / 0x00000100;
 703:main.c        **** 			q[ind] = (char)a;
 1083              		.loc 1 703 0
 1084 0914 38208DE2 		add	r2, sp, #56
 1085 0918 043082E0 		add	r3, r2, r4
 702:main.c        **** 			q[ind] = (char)a;
 1086              		.loc 1 702 0
 1087 091c 2024A0E1 		mov	r2, r0, lsr #8
 1088              		.loc 1 703 0
 1089 0920 342043E5 		strb	r2, [r3, #-52]
 704:main.c        **** 			
 705:main.c        **** 			q[ind+1]  = (char)temp2 & 0xFF;
 1090              		.loc 1 705 0
 1091 0924 330043E5 		strb	r0, [r3, #-51]
 706:main.c        **** 			ind += 2;
 1092              		.loc 1 706 0
 1093 0928 024084E2 		add	r4, r4, #2
 1094              	.LVL93:
 1095              	.L65:
 707:main.c        **** 			temp = 0;
 708:main.c        **** 		}
 709:main.c        **** 	}
 710:main.c        **** 	// Get AD1.7
 711:main.c        **** 	if(ad1_7 == 'Y')
 1096              		.loc 1 711 0
 1097 092c A4349FE5 		ldr	r3, .L152+4
 1098 0930 0B30D3E5 		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 1099 0934 590053E3 		cmp	r3, #89
 1100 0938 4800001A 		bne	.L74
 712:main.c        **** 	{
 713:main.c        **** 		AD1CR = 0x00020FF80; // AD1.7
 1101              		.loc 1 713 0
 1102 093c 98349FE5 		ldr	r3, .L152+8
 1103 0940 B0249FE5 		ldr	r2, .L152+36
 1104 0944 002083E5 		str	r2, [r3, #0]
 714:main.c        **** 		AD1CR |= 0x01000000; // start conversion
 1105              		.loc 1 714 0
 1106 0948 002093E5 		ldr	r2, [r3, #0]
 1107 094c 012482E3 		orr	r2, r2, #16777216
 1108 0950 002083E5 		str	r2, [r3, #0]
 1109              	.L75:
 715:main.c        **** 		while((temp & 0x80000000) == 0)
 716:main.c        **** 		{
 717:main.c        **** 			temp = AD1DR;
 1110              		.loc 1 717 0
 1111 0954 042093E5 		ldr	r2, [r3, #4]
 1112              	.LVL94:
 715:main.c        **** 		while((temp & 0x80000000) == 0)
 1113              		.loc 1 715 0
 1114 0958 000052E3 		cmp	r2, #0
 1115 095c FCFFFFAA 		bge	.L75
 1116              	.LVL95:
 718:main.c        **** 		}
 719:main.c        **** 		temp &= 0x0000FFC0;
 1117              		.loc 1 719 0
 1118 0960 7C049FE5 		ldr	r0, .L152+16
 720:main.c        **** 		temp2 = temp / 0x00000040;
 721:main.c        **** 
 722:main.c        **** 		AD1CR = 0x00000000;
 1119              		.loc 1 722 0
 1120 0964 70349FE5 		ldr	r3, .L152+8
 719:main.c        **** 		temp2 = temp / 0x00000040;
 1121              		.loc 1 719 0
 1122 0968 000002E0 		and	r0, r2, r0
 1123              	.LVL96:
 1124              		.loc 1 722 0
 1125 096c 0020A0E3 		mov	r2, #0
 1126 0970 002083E5 		str	r2, [r3, #0]
 723:main.c        **** 
 724:main.c        **** 		if(asc == 'Y' || asc == ',')
 1127              		.loc 1 724 0
 1128 0974 5C349FE5 		ldr	r3, .L152+4
 1129 0978 0530D3E5 		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 1130 097c 590053E3 		cmp	r3, #89
 1131 0980 2C005313 		cmpne	r3, #44
 720:main.c        **** 
 1132              		.loc 1 720 0
 1133 0984 4003A0E1 		mov	r0, r0, asr #6
 1134              	.LVL97:
 1135              		.loc 1 724 0
 1136 0988 2C00001A 		bne	.L76
 725:main.c        **** 		{
 726:main.c        **** 			itoa(temp2, 10, temp_buff);
 1137              		.loc 1 726 0
 1138 098c 0A10A0E3 		mov	r1, #10
 1139 0990 0D20A0E1 		mov	r2, sp
 1140 0994 FEFFFFEB 		bl	itoa
 1141              	.LVL98:
 727:main.c        **** 			if(temp_buff[0] >= 48 && temp_buff[0] <= 57)
 1142              		.loc 1 727 0
 1143 0998 0030DDE5 		ldrb	r3, [sp, #0]	@ zero_extendqisi2
 1144 099c 302043E2 		sub	r2, r3, #48
 1145 09a0 090052E3 		cmp	r2, #9
 728:main.c        **** 			{
 729:main.c        **** 				q[ind] = temp_buff[0];
 1146              		.loc 1 729 0
 1147 09a4 38108D92 		addls	r1, sp, #56
 1148 09a8 04208190 		addls	r2, r1, r4
 1149 09ac 34304295 		strlsb	r3, [r2, #-52]
 730:main.c        **** 				ind++;
 731:main.c        **** 			}
 732:main.c        **** 			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
 1150              		.loc 1 732 0
 1151 09b0 0130DDE5 		ldrb	r3, [sp, #1]	@ zero_extendqisi2
 1152 09b4 302043E2 		sub	r2, r3, #48
 730:main.c        **** 				ind++;
 1153              		.loc 1 730 0
 1154 09b8 01408492 		addls	r4, r4, #1
 1155              	.LVL99:
 1156              		.loc 1 732 0
 1157 09bc 090052E3 		cmp	r2, #9
 733:main.c        **** 			{
 734:main.c        **** 				q[ind] = temp_buff[1];
 1158              		.loc 1 734 0
 1159 09c0 38108D92 		addls	r1, sp, #56
 1160 09c4 04208190 		addls	r2, r1, r4
 1161 09c8 34304295 		strlsb	r3, [r2, #-52]
 735:main.c        **** 				ind++;
 736:main.c        **** 			}
 737:main.c        **** 			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
 1162              		.loc 1 737 0
 1163 09cc 0230DDE5 		ldrb	r3, [sp, #2]	@ zero_extendqisi2
 1164 09d0 302043E2 		sub	r2, r3, #48
 735:main.c        **** 				ind++;
 1165              		.loc 1 735 0
 1166 09d4 01408492 		addls	r4, r4, #1
 1167              	.LVL100:
 1168              		.loc 1 737 0
 1169 09d8 090052E3 		cmp	r2, #9
 738:main.c        **** 			{
 739:main.c        **** 				q[ind] = temp_buff[2];
 1170              		.loc 1 739 0
 1171 09dc 38108D92 		addls	r1, sp, #56
 1172 09e0 04208190 		addls	r2, r1, r4
 1173 09e4 34304295 		strlsb	r3, [r2, #-52]
 740:main.c        **** 				ind++;
 741:main.c        **** 			}
 742:main.c        **** 			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
 1174              		.loc 1 742 0
 1175 09e8 0330DDE5 		ldrb	r3, [sp, #3]	@ zero_extendqisi2
 1176 09ec 302043E2 		sub	r2, r3, #48
 740:main.c        **** 				ind++;
 1177              		.loc 1 740 0
 1178 09f0 01408492 		addls	r4, r4, #1
 1179              	.LVL101:
 1180              		.loc 1 742 0
 1181 09f4 090052E3 		cmp	r2, #9
 743:main.c        **** 			{
 744:main.c        **** 				q[ind] = temp_buff[3];
 1182              		.loc 1 744 0
 1183 09f8 38108D92 		addls	r1, sp, #56
 1184 09fc 04208190 		addls	r2, r1, r4
 1185 0a00 34304295 		strlsb	r3, [r2, #-52]
 745:main.c        **** 				ind++;
 746:main.c        **** 			}
 747:main.c        **** 
 748:main.c        **** 			if(asc == ',')
 1186              		.loc 1 748 0
 1187 0a04 CC339FE5 		ldr	r3, .L152+4
 1188 0a08 0520D3E5 		ldrb	r2, [r3, #5]	@ zero_extendqisi2
 745:main.c        **** 				ind++;
 1189              		.loc 1 745 0
 1190 0a0c 01408492 		addls	r4, r4, #1
 1191              	.LVL102:
 1192 0a10 38108DE2 		add	r1, sp, #56
 1193              		.loc 1 748 0
 1194 0a14 2C0052E3 		cmp	r2, #44
 1195 0a18 043081E0 		add	r3, r1, r4
 749:main.c        **** 			{
 750:main.c        **** 				q[ind] = ',';
 751:main.c        **** 			}
 752:main.c        **** 			else
 753:main.c        **** 			{
 754:main.c        **** 				q[ind] = 0;
 1196              		.loc 1 754 0
 1197 0a1c 0020A013 		movne	r2, #0
 1198 0a20 342043E5 		strb	r2, [r3, #-52]
 755:main.c        **** 			}
 756:main.c        **** 			ind++;
 757:main.c        **** 			temp = 0; 
 758:main.c        **** 			temp2 = 0;
 759:main.c        **** 			temp_buff[0] = 0;
 1199              		.loc 1 759 0
 1200 0a24 0030A0E3 		mov	r3, #0
 756:main.c        **** 			temp = 0; 
 1201              		.loc 1 756 0
 1202 0a28 014084E2 		add	r4, r4, #1
 1203              	.LVL103:
 1204              		.loc 1 759 0
 1205 0a2c 0030CDE5 		strb	r3, [sp, #0]
 760:main.c        **** 			temp_buff[1] = 0;
 1206              		.loc 1 760 0
 1207 0a30 0130CDE5 		strb	r3, [sp, #1]
 761:main.c        **** 			temp_buff[2] = 0;
 1208              		.loc 1 761 0
 1209 0a34 0230CDE5 		strb	r3, [sp, #2]
 762:main.c        **** 			temp_buff[3] = 0;
 1210              		.loc 1 762 0
 1211 0a38 0330CDE5 		strb	r3, [sp, #3]
 1212 0a3c 070000EA 		b	.L74
 1213              	.LVL104:
 1214              	.L76:
 763:main.c        **** 
 764:main.c        **** 		}
 765:main.c        **** 
 766:main.c        **** 		else if(asc == 'N')
 1215              		.loc 1 766 0
 1216 0a40 4E0053E3 		cmp	r3, #78
 1217 0a44 0500001A 		bne	.L74
 1218              	.LVL105:
 767:main.c        **** 		{
 768:main.c        **** 			a = ((short)temp2 & 0xFF00) / 0x00000100;
 769:main.c        **** 			q[ind] = (char)a;
 1219              		.loc 1 769 0
 1220 0a48 38208DE2 		add	r2, sp, #56
 1221 0a4c 043082E0 		add	r3, r2, r4
 768:main.c        **** 			q[ind] = (char)a;
 1222              		.loc 1 768 0
 1223 0a50 2024A0E1 		mov	r2, r0, lsr #8
 1224              		.loc 1 769 0
 1225 0a54 342043E5 		strb	r2, [r3, #-52]
 770:main.c        **** 			
 771:main.c        **** 			q[ind+1]  = (char)temp2 & 0xFF;
 1226              		.loc 1 771 0
 1227 0a58 330043E5 		strb	r0, [r3, #-51]
 772:main.c        **** 			ind += 2;
 1228              		.loc 1 772 0
 1229 0a5c 024084E2 		add	r4, r4, #2
 1230              	.LVL106:
 1231              	.L74:
 773:main.c        **** 			temp = 0;
 774:main.c        **** 		}
 775:main.c        **** 	}
 776:main.c        **** 	// Get AD1.6
 777:main.c        **** 	if(ad1_6 == 'Y')
 1232              		.loc 1 777 0
 1233 0a60 70339FE5 		ldr	r3, .L152+4
 1234 0a64 0C30D3E5 		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1235 0a68 590053E3 		cmp	r3, #89
 1236 0a6c 4800001A 		bne	.L83
 778:main.c        **** 	{
 779:main.c        **** 		AD1CR = 0x00020FF40; // AD1.3
 1237              		.loc 1 779 0
 1238 0a70 64339FE5 		ldr	r3, .L152+8
 1239 0a74 80239FE5 		ldr	r2, .L152+40
 1240 0a78 002083E5 		str	r2, [r3, #0]
 780:main.c        **** 		AD1CR |= 0x01000000; // start conversion
 1241              		.loc 1 780 0
 1242 0a7c 002093E5 		ldr	r2, [r3, #0]
 1243 0a80 012482E3 		orr	r2, r2, #16777216
 1244 0a84 002083E5 		str	r2, [r3, #0]
 1245              	.L84:
 781:main.c        **** 		while((temp & 0x80000000) == 0)
 782:main.c        **** 		{
 783:main.c        **** 			temp = AD1DR;
 1246              		.loc 1 783 0
 1247 0a88 042093E5 		ldr	r2, [r3, #4]
 1248              	.LVL107:
 781:main.c        **** 		while((temp & 0x80000000) == 0)
 1249              		.loc 1 781 0
 1250 0a8c 000052E3 		cmp	r2, #0
 1251 0a90 FCFFFFAA 		bge	.L84
 1252              	.LVL108:
 784:main.c        **** 		}
 785:main.c        **** 		temp &= 0x0000FFC0;
 1253              		.loc 1 785 0
 1254 0a94 48039FE5 		ldr	r0, .L152+16
 786:main.c        **** 		temp2 = temp / 0x00000040;
 787:main.c        **** 
 788:main.c        **** 		AD1CR = 0x00000000;
 1255              		.loc 1 788 0
 1256 0a98 3C339FE5 		ldr	r3, .L152+8
 785:main.c        **** 		temp2 = temp / 0x00000040;
 1257              		.loc 1 785 0
 1258 0a9c 000002E0 		and	r0, r2, r0
 1259              	.LVL109:
 1260              		.loc 1 788 0
 1261 0aa0 0020A0E3 		mov	r2, #0
 1262 0aa4 002083E5 		str	r2, [r3, #0]
 789:main.c        **** 
 790:main.c        **** 		if(asc == 'Y' || asc == ',')
 1263              		.loc 1 790 0
 1264 0aa8 28339FE5 		ldr	r3, .L152+4
 1265 0aac 0530D3E5 		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 1266 0ab0 590053E3 		cmp	r3, #89
 1267 0ab4 2C005313 		cmpne	r3, #44
 786:main.c        **** 
 1268              		.loc 1 786 0
 1269 0ab8 4003A0E1 		mov	r0, r0, asr #6
 1270              	.LVL110:
 1271              		.loc 1 790 0
 1272 0abc 2C00001A 		bne	.L85
 791:main.c        **** 		{
 792:main.c        **** 			itoa(temp2, 10, temp_buff);
 1273              		.loc 1 792 0
 1274 0ac0 0A10A0E3 		mov	r1, #10
 1275 0ac4 0D20A0E1 		mov	r2, sp
 1276 0ac8 FEFFFFEB 		bl	itoa
 1277              	.LVL111:
 793:main.c        **** 			if(temp_buff[0] >= 48 && temp_buff[0] <= 57)
 1278              		.loc 1 793 0
 1279 0acc 0030DDE5 		ldrb	r3, [sp, #0]	@ zero_extendqisi2
 1280 0ad0 302043E2 		sub	r2, r3, #48
 1281 0ad4 090052E3 		cmp	r2, #9
 794:main.c        **** 			{
 795:main.c        **** 				q[ind] = temp_buff[0];
 1282              		.loc 1 795 0
 1283 0ad8 38108D92 		addls	r1, sp, #56
 1284 0adc 04208190 		addls	r2, r1, r4
 1285 0ae0 34304295 		strlsb	r3, [r2, #-52]
 796:main.c        **** 				ind++;
 797:main.c        **** 			}
 798:main.c        **** 			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
 1286              		.loc 1 798 0
 1287 0ae4 0130DDE5 		ldrb	r3, [sp, #1]	@ zero_extendqisi2
 1288 0ae8 302043E2 		sub	r2, r3, #48
 796:main.c        **** 				ind++;
 1289              		.loc 1 796 0
 1290 0aec 01408492 		addls	r4, r4, #1
 1291              	.LVL112:
 1292              		.loc 1 798 0
 1293 0af0 090052E3 		cmp	r2, #9
 799:main.c        **** 			{
 800:main.c        **** 				q[ind] = temp_buff[1];
 1294              		.loc 1 800 0
 1295 0af4 38108D92 		addls	r1, sp, #56
 1296 0af8 04208190 		addls	r2, r1, r4
 1297 0afc 34304295 		strlsb	r3, [r2, #-52]
 801:main.c        **** 				ind++;
 802:main.c        **** 			}
 803:main.c        **** 			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
 1298              		.loc 1 803 0
 1299 0b00 0230DDE5 		ldrb	r3, [sp, #2]	@ zero_extendqisi2
 1300 0b04 302043E2 		sub	r2, r3, #48
 801:main.c        **** 				ind++;
 1301              		.loc 1 801 0
 1302 0b08 01408492 		addls	r4, r4, #1
 1303              	.LVL113:
 1304              		.loc 1 803 0
 1305 0b0c 090052E3 		cmp	r2, #9
 804:main.c        **** 			{
 805:main.c        **** 				q[ind] = temp_buff[2];
 1306              		.loc 1 805 0
 1307 0b10 38108D92 		addls	r1, sp, #56
 1308 0b14 04208190 		addls	r2, r1, r4
 1309 0b18 34304295 		strlsb	r3, [r2, #-52]
 806:main.c        **** 				ind++;
 807:main.c        **** 			}
 808:main.c        **** 			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
 1310              		.loc 1 808 0
 1311 0b1c 0330DDE5 		ldrb	r3, [sp, #3]	@ zero_extendqisi2
 1312 0b20 302043E2 		sub	r2, r3, #48
 806:main.c        **** 				ind++;
 1313              		.loc 1 806 0
 1314 0b24 01408492 		addls	r4, r4, #1
 1315              	.LVL114:
 1316              		.loc 1 808 0
 1317 0b28 090052E3 		cmp	r2, #9
 809:main.c        **** 			{
 810:main.c        **** 				q[ind] = temp_buff[3];
 1318              		.loc 1 810 0
 1319 0b2c 38108D92 		addls	r1, sp, #56
 1320 0b30 04208190 		addls	r2, r1, r4
 1321 0b34 34304295 		strlsb	r3, [r2, #-52]
 811:main.c        **** 				ind++;
 812:main.c        **** 			}
 813:main.c        **** 
 814:main.c        **** 			if(asc == ',')
 1322              		.loc 1 814 0
 1323 0b38 98329FE5 		ldr	r3, .L152+4
 1324 0b3c 0520D3E5 		ldrb	r2, [r3, #5]	@ zero_extendqisi2
 811:main.c        **** 				ind++;
 1325              		.loc 1 811 0
 1326 0b40 01408492 		addls	r4, r4, #1
 1327              	.LVL115:
 1328 0b44 38108DE2 		add	r1, sp, #56
 1329              		.loc 1 814 0
 1330 0b48 2C0052E3 		cmp	r2, #44
 1331 0b4c 043081E0 		add	r3, r1, r4
 815:main.c        **** 			{
 816:main.c        **** 				q[ind] = ',';
 817:main.c        **** 			}
 818:main.c        **** 			else
 819:main.c        **** 			{
 820:main.c        **** 				q[ind] = 0;
 1332              		.loc 1 820 0
 1333 0b50 0020A013 		movne	r2, #0
 1334 0b54 342043E5 		strb	r2, [r3, #-52]
 821:main.c        **** 			}
 822:main.c        **** 			ind++;
 823:main.c        **** 			temp = 0; 
 824:main.c        **** 			temp2 = 0;
 825:main.c        **** 			temp_buff[0] = 0;
 1335              		.loc 1 825 0
 1336 0b58 0030A0E3 		mov	r3, #0
 822:main.c        **** 			temp = 0; 
 1337              		.loc 1 822 0
 1338 0b5c 014084E2 		add	r4, r4, #1
 1339              	.LVL116:
 1340              		.loc 1 825 0
 1341 0b60 0030CDE5 		strb	r3, [sp, #0]
 826:main.c        **** 			temp_buff[1] = 0;
 1342              		.loc 1 826 0
 1343 0b64 0130CDE5 		strb	r3, [sp, #1]
 827:main.c        **** 			temp_buff[2] = 0;
 1344              		.loc 1 827 0
 1345 0b68 0230CDE5 		strb	r3, [sp, #2]
 828:main.c        **** 			temp_buff[3] = 0;
 1346              		.loc 1 828 0
 1347 0b6c 0330CDE5 		strb	r3, [sp, #3]
 1348 0b70 070000EA 		b	.L83
 1349              	.LVL117:
 1350              	.L85:
 829:main.c        **** 
 830:main.c        **** 		}
 831:main.c        **** 
 832:main.c        **** 		else if(asc == 'N')
 1351              		.loc 1 832 0
 1352 0b74 4E0053E3 		cmp	r3, #78
 1353 0b78 0500001A 		bne	.L83
 1354              	.LVL118:
 833:main.c        **** 		{
 834:main.c        **** 			a = ((short)temp2 & 0xFF00) / 0x00000100;
 835:main.c        **** 			q[ind] = (char)a;
 1355              		.loc 1 835 0
 1356 0b7c 38208DE2 		add	r2, sp, #56
 1357 0b80 043082E0 		add	r3, r2, r4
 834:main.c        **** 			q[ind] = (char)a;
 1358              		.loc 1 834 0
 1359 0b84 2024A0E1 		mov	r2, r0, lsr #8
 1360              		.loc 1 835 0
 1361 0b88 342043E5 		strb	r2, [r3, #-52]
 836:main.c        **** 			
 837:main.c        **** 			q[ind+1]  = (char)temp2 & 0xFF;
 1362              		.loc 1 837 0
 1363 0b8c 330043E5 		strb	r0, [r3, #-51]
 838:main.c        **** 			ind += 2;
 1364              		.loc 1 838 0
 1365 0b90 024084E2 		add	r4, r4, #2
 1366              	.LVL119:
 1367              	.L83:
 839:main.c        **** 			temp = 0;
 840:main.c        **** 		}
 841:main.c        **** 	}
 842:main.c        **** 	
 843:main.c        **** 	if(asc == ',')	// remove final comma, replace with zero (NULL)
 1368              		.loc 1 843 0
 1369 0b94 3C329FE5 		ldr	r3, .L152+4
 1370 0b98 0530D3E5 		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 1371 0b9c 2C0053E3 		cmp	r3, #44
 1372 0ba0 0400001A 		bne	.L92
 844:main.c        **** 	{
 845:main.c        **** 		if(ind > 0)	// sanity check, maybe no ADCs were marked to be read
 1373              		.loc 1 845 0
 1374 0ba4 000054E3 		cmp	r4, #0
 846:main.c        **** 		{
 847:main.c        **** 			q[ind-1] = 0;
 1375              		.loc 1 847 0
 1376 0ba8 38108D12 		addne	r1, sp, #56
 1377 0bac 04208110 		addne	r2, r1, r4
 1378 0bb0 0010A013 		movne	r1, #0
 1379 0bb4 35104215 		strneb	r1, [r2, #-53]
 1380              	.L92:
 1381 0bb8 40129FE5 		ldr	r1, .L152+44
 1382 0bbc 40729FE5 		ldr	r7, .L152+48
 1383 0bc0 B020D1E1 		ldrh	r2, [r1, #0]
 1384 0bc4 02C0D1E5 		ldrb	ip, [r1, #2]	@ zero_extendqisi2
 1385 0bc8 0300D1E5 		ldrb	r0, [r1, #3]	@ zero_extendqisi2
 848:main.c        **** 		}
 849:main.c        **** 	}
 850:main.c        **** 	
 851:main.c        **** 	for(j = 0; j < ind; j++)
 852:main.c        **** 	{
 853:main.c        **** 		if(RX_in < 512)
 854:main.c        **** 		{
 855:main.c        **** 			RX_array1[RX_in] = q[j];
 856:main.c        **** 			RX_in++;
 857:main.c        **** 
 858:main.c        **** 			if(RX_in == 512) log_array1 = 1;
 859:main.c        **** 		}
 860:main.c        **** 		else if(RX_in >= 512)
 861:main.c        **** 		{
 862:main.c        **** 			RX_array2[RX_in - 512] = q[j];
 1386              		.loc 1 862 0 discriminator 1
 1387 0bcc 34829FE5 		ldr	r8, .L152+52
 863:main.c        **** 			RX_in++;
 864:main.c        **** 
 865:main.c        **** 			if(RX_in == 1024)
 866:main.c        **** 			{
 867:main.c        **** 				log_array2 = 1;
 868:main.c        **** 				RX_in = 0;
 1388              		.loc 1 868 0 discriminator 1
 1389 0bd0 0010A0E3 		mov	r1, #0
 855:main.c        **** 			RX_in++;
 1390              		.loc 1 855 0 discriminator 1
 1391 0bd4 30A29FE5 		ldr	sl, .L152+56
 1392 0bd8 170000EA 		b	.L93
 1393              	.LVL120:
 1394              	.L97:
 853:main.c        **** 		{
 1395              		.loc 1 853 0
 1396 0bdc 0298A0E1 		mov	r9, r2, asl #16
 1397 0be0 4968A0E1 		mov	r6, r9, asr #16
 1398 0be4 070056E1 		cmp	r6, r7
 1399 0be8 04508DE2 		add	r5, sp, #4
 1400 0bec 070000CA 		bgt	.L94
 855:main.c        **** 			RX_in++;
 1401              		.loc 1 855 0
 1402 0bf0 0150D5E7 		ldrb	r5, [r5, r1]	@ zero_extendqisi2
 856:main.c        **** 
 1403              		.loc 1 856 0
 1404 0bf4 012082E2 		add	r2, r2, #1
 855:main.c        **** 			RX_in++;
 1405              		.loc 1 855 0
 1406 0bf8 4958CAE7 		strb	r5, [sl, r9, asr #16]
 856:main.c        **** 
 1407              		.loc 1 856 0
 1408 0bfc 0258A0E1 		mov	r5, r2, asl #16
 858:main.c        **** 		}
 1409              		.loc 1 858 0
 1410 0c00 020455E3 		cmp	r5, #33554432
 1411 0c04 2528A0E1 		mov	r2, r5, lsr #16
 1412 0c08 01C0A003 		moveq	ip, #1
 1413 0c0c 090000EA 		b	.L95
 1414              	.L94:
 862:main.c        **** 			RX_in++;
 1415              		.loc 1 862 0
 1416 0c10 0150D5E7 		ldrb	r5, [r5, r1]	@ zero_extendqisi2
 863:main.c        **** 
 1417              		.loc 1 863 0
 1418 0c14 012082E2 		add	r2, r2, #1
 1419 0c18 0228A0E1 		mov	r2, r2, asl #16
 862:main.c        **** 			RX_in++;
 1420              		.loc 1 862 0
 1421 0c1c 066088E0 		add	r6, r8, r6
 1422 0c20 005246E5 		strb	r5, [r6, #-512]
 865:main.c        **** 			{
 1423              		.loc 1 865 0
 1424 0c24 4258A0E1 		mov	r5, r2, asr #16
 867:main.c        **** 				RX_in = 0;
 1425              		.loc 1 867 0
 1426 0c28 010B55E3 		cmp	r5, #1024
 1427 0c2c 0100A003 		moveq	r0, #1
 1428 0c30 0020A003 		moveq	r2, #0
 1429 0c34 2228A011 		movne	r2, r2, lsr #16
 1430              	.L95:
 851:main.c        **** 	{
 1431              		.loc 1 851 0
 1432 0c38 011081E2 		add	r1, r1, #1
 1433              	.LVL121:
 1434              	.L93:
 851:main.c        **** 	{
 1435              		.loc 1 851 0 is_stmt 0 discriminator 1
 1436 0c3c 040051E1 		cmp	r1, r4
 1437 0c40 E5FFFFBA 		blt	.L97
 1438 0c44 B4119FE5 		ldr	r1, .L152+44
 1439              	.LVL122:
 1440 0c48 02C0C1E5 		strb	ip, [r1, #2]
 1441 0c4c 0300C1E5 		strb	r0, [r1, #3]
 869:main.c        **** 			}
 870:main.c        **** 		}
 871:main.c        **** 	}
 872:main.c        **** 	if(RX_in < 512)
 1442              		.loc 1 872 0 is_stmt 1
 1443 0c50 ACC19FE5 		ldr	ip, .L152+48
 1444 0c54 0208A0E1 		mov	r0, r2, asl #16
 1445 0c58 4018A0E1 		mov	r1, r0, asr #16
 1446 0c5c 0C0051E1 		cmp	r1, ip
 1447 0c60 110000CA 		bgt	.L98
 873:main.c        **** 	{
 874:main.c        **** 		if(asc == 'N') { RX_array1[RX_in] = '$'; }
 1448              		.loc 1 874 0
 1449 0c64 4E0053E3 		cmp	r3, #78
 1450 0c68 24C0A003 		moveq	ip, #36
 1451 0c6c 0300000A 		beq	.L148
 1452              	.L99:
 875:main.c        **** 		else if(asc == 'Y' || asc == ','){ RX_array1[RX_in] = 13; }
 1453              		.loc 1 875 0
 1454 0c70 590053E3 		cmp	r3, #89
 1455 0c74 2C005313 		cmpne	r3, #44
 1456 0c78 0200001A 		bne	.L100
 1457              		.loc 1 875 0 is_stmt 0 discriminator 1
 1458 0c7c 0DC0A0E3 		mov	ip, #13
 1459              	.L148:
 1460 0c80 84119FE5 		ldr	r1, .L152+56
 1461 0c84 40C8C1E7 		strb	ip, [r1, r0, asr #16]
 1462              	.L100:
 876:main.c        **** 		RX_in++;
 1463              		.loc 1 876 0 is_stmt 1
 1464 0c88 012082E2 		add	r2, r2, #1
 1465 0c8c 0228A0E1 		mov	r2, r2, asl #16
 1466 0c90 2228A0E1 		mov	r2, r2, lsr #16
 1467 0c94 64119FE5 		ldr	r1, .L152+44
 877:main.c        **** 
 878:main.c        **** 		if(RX_in == 512) log_array1 = 1;
 1468              		.loc 1 878 0
 1469 0c98 020C52E3 		cmp	r2, #512
 876:main.c        **** 		RX_in++;
 1470              		.loc 1 876 0
 1471 0c9c B020C1E1 		strh	r2, [r1, #0]	@ movhi
 1472              		.loc 1 878 0
 1473 0ca0 0120A003 		moveq	r2, #1
 1474 0ca4 0220C105 		streqb	r2, [r1, #2]
 1475 0ca8 150000EA 		b	.L102
 1476              	.L98:
 879:main.c        **** 	}
 880:main.c        **** 	else if(RX_in >= 512)
 881:main.c        **** 	{
 882:main.c        **** 		
 883:main.c        **** 		if(asc == 'N') RX_array2[RX_in - 512] = '$';
 1477              		.loc 1 883 0
 1478 0cac 4E0053E3 		cmp	r3, #78
 1479              		.loc 1 883 0 is_stmt 0 discriminator 1
 1480 0cb0 50019F05 		ldreq	r0, .L152+52
 1481 0cb4 01108000 		addeq	r1, r0, r1
 1482 0cb8 2400A003 		moveq	r0, #36
 1483 0cbc 0500000A 		beq	.L149
 1484              	.L103:
 884:main.c        **** 		else if(asc == 'Y' || asc == ','){ RX_array2[RX_in - 512] = 13; }
 1485              		.loc 1 884 0 is_stmt 1
 1486 0cc0 590053E3 		cmp	r3, #89
 1487 0cc4 2C005313 		cmpne	r3, #44
 1488 0cc8 0300001A 		bne	.L104
 1489              		.loc 1 884 0 is_stmt 0 discriminator 1
 1490 0ccc 34019FE5 		ldr	r0, .L152+52
 1491 0cd0 011080E0 		add	r1, r0, r1
 1492 0cd4 0D00A0E3 		mov	r0, #13
 1493              	.L149:
 1494 0cd8 000241E5 		strb	r0, [r1, #-512]
 1495              	.L104:
 885:main.c        **** 		RX_in++;
 1496              		.loc 1 885 0 is_stmt 1
 1497 0cdc 012082E2 		add	r2, r2, #1
 1498 0ce0 0228A0E1 		mov	r2, r2, asl #16
 1499 0ce4 2228A0E1 		mov	r2, r2, lsr #16
 1500 0ce8 10119FE5 		ldr	r1, .L152+44
 886:main.c        **** 		
 887:main.c        **** 		if(RX_in == 1024)
 1501              		.loc 1 887 0
 1502 0cec 010B52E3 		cmp	r2, #1024
 885:main.c        **** 		RX_in++;
 1503              		.loc 1 885 0
 1504 0cf0 B020C1E1 		strh	r2, [r1, #0]	@ movhi
 888:main.c        **** 		{
 889:main.c        **** 			log_array2 = 1;
 1505              		.loc 1 889 0
 1506 0cf4 0120A003 		moveq	r2, #1
 1507 0cf8 0320C105 		streqb	r2, [r1, #3]
 890:main.c        **** 			RX_in = 0;
 1508              		.loc 1 890 0
 1509 0cfc 0020A003 		moveq	r2, #0
 1510 0d00 B020C101 		streqh	r2, [r1, #0]	@ movhi
 1511              	.L102:
 891:main.c        **** 		}
 892:main.c        **** 	}
 893:main.c        **** 	if(RX_in < 512)
 1512              		.loc 1 893 0
 1513 0d04 F4209FE5 		ldr	r2, .L152+44
 1514 0d08 B020D2E1 		ldrh	r2, [r2, #0]
 1515 0d0c 0208A0E1 		mov	r0, r2, asl #16
 1516 0d10 4018A0E1 		mov	r1, r0, asr #16
 1517 0d14 020C51E3 		cmp	r1, #512
 1518 0d18 110000AA 		bge	.L106
 894:main.c        **** 	{
 895:main.c        **** 		if(asc == 'N') RX_array1[RX_in] = '$';
 1519              		.loc 1 895 0
 1520 0d1c 4E0053E3 		cmp	r3, #78
 1521 0d20 2410A003 		moveq	r1, #36
 1522 0d24 0300000A 		beq	.L150
 1523              	.L107:
 896:main.c        **** 		else if(asc == 'Y' || asc == ','){ RX_array1[RX_in] = 10; }
 1524              		.loc 1 896 0
 1525 0d28 590053E3 		cmp	r3, #89
 1526 0d2c 2C005313 		cmpne	r3, #44
 1527 0d30 0200001A 		bne	.L108
 1528              		.loc 1 896 0 is_stmt 0 discriminator 1
 1529 0d34 0A10A0E3 		mov	r1, #10
 1530              	.L150:
 1531 0d38 CC309FE5 		ldr	r3, .L152+56
 1532 0d3c 4018C3E7 		strb	r1, [r3, r0, asr #16]
 1533              	.L108:
 897:main.c        **** 		RX_in++;
 1534              		.loc 1 897 0 is_stmt 1
 1535 0d40 012082E2 		add	r2, r2, #1
 1536 0d44 0228A0E1 		mov	r2, r2, asl #16
 1537 0d48 2228A0E1 		mov	r2, r2, lsr #16
 1538 0d4c AC309FE5 		ldr	r3, .L152+44
 898:main.c        **** 
 899:main.c        **** 		if(RX_in == 512) log_array1 = 1;
 1539              		.loc 1 899 0
 1540 0d50 020C52E3 		cmp	r2, #512
 897:main.c        **** 		RX_in++;
 1541              		.loc 1 897 0
 1542 0d54 B020C3E1 		strh	r2, [r3, #0]	@ movhi
 1543              		.loc 1 899 0
 1544 0d58 0120A003 		moveq	r2, #1
 1545 0d5c 0220C305 		streqb	r2, [r3, #2]
 1546 0d60 150000EA 		b	.L110
 1547              	.L106:
 900:main.c        **** 	}
 901:main.c        **** 	else if(RX_in >= 512)
 902:main.c        **** 	{
 903:main.c        **** 		
 904:main.c        **** 		if(asc == 'N') RX_array2[RX_in - 512] = '$';
 1548              		.loc 1 904 0
 1549 0d64 4E0053E3 		cmp	r3, #78
 1550              		.loc 1 904 0 is_stmt 0 discriminator 1
 1551 0d68 98309F05 		ldreq	r3, .L152+52
 1552 0d6c 01108300 		addeq	r1, r3, r1
 1553 0d70 2430A003 		moveq	r3, #36
 1554 0d74 0500000A 		beq	.L151
 1555              	.L111:
 905:main.c        **** 		else if(asc == 'Y' || asc == ','){ RX_array2[RX_in - 512] = 10; }
 1556              		.loc 1 905 0 is_stmt 1
 1557 0d78 590053E3 		cmp	r3, #89
 1558 0d7c 2C005313 		cmpne	r3, #44
 1559 0d80 0300001A 		bne	.L112
 1560              		.loc 1 905 0 is_stmt 0 discriminator 1
 1561 0d84 7C309FE5 		ldr	r3, .L152+52
 1562 0d88 011083E0 		add	r1, r3, r1
 1563 0d8c 0A30A0E3 		mov	r3, #10
 1564              	.L151:
 1565 0d90 003241E5 		strb	r3, [r1, #-512]
 1566              	.L112:
 906:main.c        **** 		RX_in++;
 1567              		.loc 1 906 0 is_stmt 1
 1568 0d94 012082E2 		add	r2, r2, #1
 1569 0d98 0228A0E1 		mov	r2, r2, asl #16
 1570 0d9c 2228A0E1 		mov	r2, r2, lsr #16
 1571 0da0 58309FE5 		ldr	r3, .L152+44
 907:main.c        **** 		
 908:main.c        **** 		if(RX_in == 1024)
 1572              		.loc 1 908 0
 1573 0da4 010B52E3 		cmp	r2, #1024
 906:main.c        **** 		RX_in++;
 1574              		.loc 1 906 0
 1575 0da8 B020C3E1 		strh	r2, [r3, #0]	@ movhi
 909:main.c        **** 		{
 910:main.c        **** 			log_array2 = 1;
 1576              		.loc 1 910 0
 1577 0dac 0120A003 		moveq	r2, #1
 1578 0db0 0320C305 		streqb	r2, [r3, #3]
 911:main.c        **** 			RX_in = 0;
 1579              		.loc 1 911 0
 1580 0db4 0020A003 		moveq	r2, #0
 1581 0db8 B020C301 		streqh	r2, [r3, #0]	@ movhi
 1582              	.L110:
 912:main.c        **** 		}
 913:main.c        **** 	}
 914:main.c        **** 
 915:main.c        **** 	VICVectAddr= 0;
 1583              		.loc 1 915 0
 1584 0dbc 0020A0E3 		mov	r2, #0
 1585 0dc0 0030E0E3 		mvn	r3, #0
 1586 0dc4 CF2F03E5 		str	r2, [r3, #-4047]
 916:main.c        **** }
 1587              		.loc 1 916 0
 1588 0dc8 38D08DE2 		add	sp, sp, #56
 1589 0dcc F047BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 1590 0dd0 1EFF2FE1 		bx	lr
 1591              	.L153:
 1592              		.align	2
 1593              	.L152:
 1594 0dd4 004000E0 		.word	-536854528
 1595 0dd8 00000000 		.word	.LANCHOR1
 1596 0ddc 000006E0 		.word	-536477696
 1597 0de0 08FF2000 		.word	2162440
 1598 0de4 C0FF0000 		.word	65472
 1599 0de8 004003E0 		.word	-536657920
 1600 0dec 04FF2000 		.word	2162436
 1601 0df0 02FF2000 		.word	2162434
 1602 0df4 10FF2000 		.word	2162448
 1603 0df8 80FF2000 		.word	2162560
 1604 0dfc 40FF2000 		.word	2162496
 1605 0e00 00000000 		.word	.LANCHOR0
 1606 0e04 FF010000 		.word	511
 1607 0e08 00000000 		.word	RX_array2
 1608 0e0c 00000000 		.word	RX_array1
 1609              		.cfi_endproc
 1610              	.LFE5:
 1612              		.align	2
 1613              		.global	Initialize
 1615              	Initialize:
 1616              	.LFB1:
 204:main.c        **** 	rprintf_devopen(putc_serial0);
 1617              		.loc 1 204 0
 1618              		.cfi_startproc
 1619              		@ Function supports interworking.
 1620              		@ args = 0, pretend = 0, frame = 0
 1621              		@ frame_needed = 0, uses_anonymous_args = 0
 1622 0e10 04E02DE5 		str	lr, [sp, #-4]!
 1623              	.LCFI3:
 1624              		.cfi_def_cfa_offset 4
 1625              		.cfi_offset 14, -4
 205:main.c        **** 	
 1626              		.loc 1 205 0
 1627 0e14 4C009FE5 		ldr	r0, .L155
 1628 0e18 FEFFFFEB 		bl	rprintf_devopen
 1629              	.LVL123:
 207:main.c        **** 	PINSEL1 = 0x15441801;
 1630              		.loc 1 207 0
 1631 0e1c 48309FE5 		ldr	r3, .L155+4
 1632 0e20 48209FE5 		ldr	r2, .L155+8
 1633 0e24 002083E5 		str	r2, [r3, #0]
 208:main.c        **** 	IODIR0 |= 0x00000884;
 1634              		.loc 1 208 0
 1635 0e28 44209FE5 		ldr	r2, .L155+12
 1636 0e2c 042083E5 		str	r2, [r3, #4]
 209:main.c        **** 	IOSET0 = 0x00000080;
 1637              		.loc 1 209 0
 1638 0e30 013943E2 		sub	r3, r3, #16384
 1639 0e34 082093E5 		ldr	r2, [r3, #8]
 1640 0e38 222D82E3 		orr	r2, r2, #2176
 1641 0e3c 042082E3 		orr	r2, r2, #4
 1642 0e40 082083E5 		str	r2, [r3, #8]
 210:main.c        **** 
 1643              		.loc 1 210 0
 1644 0e44 8020A0E3 		mov	r2, #128
 1645 0e48 042083E5 		str	r2, [r3, #4]
 212:main.c        **** 	S0SPCR = 0x30;  // master, msb, first clk edge, active high, no ints
 1646              		.loc 1 212 0
 1647 0e4c 023943E2 		sub	r3, r3, #32768
 1648 0e50 0820A0E3 		mov	r2, #8
 1649 0e54 0020C3E5 		strb	r2, [r3, #0]
 213:main.c        **** 
 1650              		.loc 1 213 0
 1651 0e58 3020A0E3 		mov	r2, #48
 1652 0e5c 0020C3E5 		strb	r2, [r3, #0]
 215:main.c        **** 
 1653              		.loc 1 215 0
 1654 0e60 04E09DE4 		ldr	lr, [sp], #4
 1655 0e64 1EFF2FE1 		bx	lr
 1656              	.L156:
 1657              		.align	2
 1658              	.L155:
 1659 0e68 00000000 		.word	putc_serial0
 1660 0e6c 00C002E0 		.word	-536690688
 1661 0e70 051535CF 		.word	-818604795
 1662 0e74 01184415 		.word	356784129
 1663              		.cfi_endproc
 1664              	.LFE1:
 1666              		.align	2
 1667              		.global	feed
 1669              	feed:
 1670              	.LFB2:
 218:main.c        **** 	PLLFEED=0xAA;
 1671              		.loc 1 218 0
 1672              		.cfi_startproc
 1673              		@ Function supports interworking.
 1674              		@ args = 0, pretend = 0, frame = 0
 1675              		@ frame_needed = 0, uses_anonymous_args = 0
 1676              		@ link register save eliminated.
 219:main.c        **** 	PLLFEED=0x55;
 1677              		.loc 1 219 0
 1678 0e78 10309FE5 		ldr	r3, .L158
 1679 0e7c 5520E0E3 		mvn	r2, #85
 1680 0e80 8C20C3E5 		strb	r2, [r3, #140]
 220:main.c        **** }
 1681              		.loc 1 220 0
 1682 0e84 5520A0E3 		mov	r2, #85
 1683 0e88 8C20C3E5 		strb	r2, [r3, #140]
 1684 0e8c 1EFF2FE1 		bx	lr
 1685              	.L159:
 1686              		.align	2
 1687              	.L158:
 1688 0e90 00C01FE0 		.word	-534790144
 1689              		.cfi_endproc
 1690              	.LFE2:
 1692              		.align	2
 1693              		.global	FIQ_Routine
 1695              	FIQ_Routine:
 1696              	.LFB6:
 917:main.c        **** 
 918:main.c        **** void FIQ_Routine(void)
 919:main.c        **** {
 1697              		.loc 1 919 0
 1698              		.cfi_startproc
 1699              		@ Fast Interrupt Service Routine.
 1700              		@ args = 0, pretend = 0, frame = 0
 1701              		@ frame_needed = 0, uses_anonymous_args = 0
 1702              		@ link register save eliminated.
 1703              	.LVL124:
 1704 0e94 0C002DE9 		stmfd	sp!, {r2, r3}
 1705              	.LCFI4:
 1706              		.cfi_def_cfa_offset 8
 1707              		.cfi_offset 2, -8
 1708              		.cfi_offset 3, -4
 1709              	.LBB10:
 1710              	.LBB11:
 920:main.c        **** 	char a;
 921:main.c        **** 	int j;
 922:main.c        **** 
 923:main.c        **** 	stat(0,ON);
 924:main.c        **** 	for(j = 0; j < 5000000; j++);
 925:main.c        **** 	stat(0,OFF);
 926:main.c        **** 	a = U0RBR;
 927:main.c        **** 
 928:main.c        **** 	a = U0IIR;  // have to read this to clear the interrupt
 929:main.c        **** }
 930:main.c        **** 
 931:main.c        **** void SWI_Routine(void)
 932:main.c        **** {
 933:main.c        **** 	while(1);
 934:main.c        **** }
 935:main.c        **** 
 936:main.c        **** void UNDEF_Routine(void)
 937:main.c        **** {
 938:main.c        **** 	stat(0,ON);
 939:main.c        **** }
 940:main.c        **** 
 941:main.c        **** void setup_uart0(int newbaud, char want_ints)
 942:main.c        **** {
 943:main.c        **** 	baud = newbaud;
 944:main.c        **** 	U0LCR = 0x83;   // 8 bits, no parity, 1 stop bit, DLAB = 1
 945:main.c        **** 	
 946:main.c        **** 	if(baud == 1200)
 947:main.c        **** 	{
 948:main.c        **** 		U0DLM = 0x0C;
 949:main.c        **** 		U0DLL = 0x00;
 950:main.c        **** 	}
 951:main.c        **** 	else if(baud == 2400)
 952:main.c        **** 	{
 953:main.c        **** 		U0DLM = 0x06;
 954:main.c        **** 		U0DLL = 0x00;
 955:main.c        **** 	}
 956:main.c        **** 	else if(baud == 4800)
 957:main.c        **** 	{
 958:main.c        **** 		U0DLM = 0x03;
 959:main.c        **** 		U0DLL = 0x00;
 960:main.c        **** 	}
 961:main.c        **** 	else if(baud == 9600)
 962:main.c        **** 	{
 963:main.c        **** 		U0DLM = 0x01;
 964:main.c        **** 		U0DLL = 0x80;
 965:main.c        **** 	}
 966:main.c        **** 	else if(baud == 19200)
 967:main.c        **** 	{
 968:main.c        **** 		U0DLM = 0x00;
 969:main.c        **** 		U0DLL = 0xC0;
 970:main.c        **** 	}
 971:main.c        **** 	else if(baud == 38400)
 972:main.c        **** 	{
 973:main.c        **** 		U0DLM = 0x00;
 974:main.c        **** 		U0DLL = 0x60;
 975:main.c        **** 	}
 976:main.c        **** 	else if(baud == 57600)
 977:main.c        **** 	{
 978:main.c        **** 		U0DLM = 0x00;
 979:main.c        **** 		U0DLL = 0x40;
 980:main.c        **** 	}
 981:main.c        **** 	else if(baud == 115200)
 982:main.c        **** 	{
 983:main.c        **** 		U0DLM = 0x00;
 984:main.c        **** 		U0DLL = 0x20;
 985:main.c        **** 	}
 986:main.c        **** 
 987:main.c        **** 	U0FCR = 0x01;
 988:main.c        **** 	U0LCR = 0x03;   
 989:main.c        **** 
 990:main.c        **** 	if(want_ints == 1)
 991:main.c        **** 	{
 992:main.c        **** 		enableIRQ();
 993:main.c        **** 		VICIntSelect &= ~0x00000040;
 994:main.c        **** 		VICIntEnable |= 0x00000040;
 995:main.c        **** 		VICVectCntl1 = 0x26;
 996:main.c        **** 		VICVectAddr1 = (unsigned int)UART0ISR;
 997:main.c        **** 		U0IER = 0x01;
 998:main.c        **** 	}
 999:main.c        **** 	else if(want_ints == 2)
1000:main.c        **** 	{
1001:main.c        **** 		enableIRQ();
1002:main.c        **** 		VICIntSelect &= ~0x00000040;
1003:main.c        **** 		VICIntEnable |= 0x00000040;
1004:main.c        **** 		VICVectCntl2 = 0x26;
1005:main.c        **** 		VICVectAddr2 = (unsigned int)UART0ISR_2;
1006:main.c        **** 		U0IER = 0X01;
1007:main.c        **** 	}
1008:main.c        **** 	else if(want_ints == 0)
1009:main.c        **** 	{
1010:main.c        **** 		VICIntEnClr = 0x00000040;
1011:main.c        **** 		U0IER = 0x00;
1012:main.c        **** 	}
1013:main.c        **** }
1014:main.c        **** void stat(int statnum, int onoff)
1015:main.c        **** {
1016:main.c        **** 	if(statnum) // Stat 1
1017:main.c        **** 	{
1018:main.c        **** 		if(onoff){ IOCLR0 = 0x00000800; } // On
1019:main.c        **** 		else { IOSET0 = 0x00000800; } // Off
1020:main.c        **** 	}
1021:main.c        **** 	else // Stat 0 
1022:main.c        **** 	{
1023:main.c        **** 		if(onoff){ IOCLR0 = 0x00000004; } // On
 1711              		.loc 1 1023 0
 1712 0e98 1C309FE5 		ldr	r3, .L161
 1713 0e9c 0420A0E3 		mov	r2, #4
 1714 0ea0 0C2083E5 		str	r2, [r3, #12]
 1715              	.LVL125:
 1716              	.LBE11:
 1717              	.LBE10:
 1718              	.LBB12:
 1719              	.LBB13:
1024:main.c        **** 		else { IOSET0 = 0x00000004; } // Off
 1720              		.loc 1 1024 0
 1721 0ea4 042083E5 		str	r2, [r3, #4]
 1722              	.LBE13:
 1723              	.LBE12:
 926:main.c        **** 
 1724              		.loc 1 926 0
 1725 0ea8 073943E2 		sub	r3, r3, #114688
 1726 0eac 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1727              	.LVL126:
 928:main.c        **** }
 1728              		.loc 1 928 0
 1729 0eb0 0830D3E5 		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 929:main.c        **** 
 1730              		.loc 1 929 0
 1731 0eb4 0C00BDE8 		ldmfd	sp!, {r2, r3}
 1732 0eb8 04F05EE2 		subs	pc, lr, #4
 1733              	.L162:
 1734              		.align	2
 1735              	.L161:
 1736 0ebc 008002E0 		.word	-536707072
 1737              		.cfi_endproc
 1738              	.LFE6:
 1740              		.align	2
 1741              		.global	SWI_Routine
 1743              	SWI_Routine:
 1744              	.LFB7:
 932:main.c        **** 	while(1);
 1745              		.loc 1 932 0
 1746              		.cfi_startproc
 1747              		@ ARM Exception Handler.
 1748              		@ Volatile: function does not return.
 1749              		@ args = 0, pretend = 0, frame = 0
 1750              		@ frame_needed = 0, uses_anonymous_args = 0
 1751              		@ link register save eliminated.
 1752              	.L164:
 1753 0ec0 FEFFFFEA 		b	.L164
 1754              		.cfi_endproc
 1755              	.LFE7:
 1757              		.align	2
 1758              		.global	UNDEF_Routine
 1760              	UNDEF_Routine:
 1761              	.LFB8:
 937:main.c        **** 	stat(0,ON);
 1762              		.loc 1 937 0
 1763              		.cfi_startproc
 1764              		@ ARM Exception Handler.
 1765              		@ args = 0, pretend = 0, frame = 0
 1766              		@ frame_needed = 0, uses_anonymous_args = 0
 1767              		@ link register save eliminated.
 1768              	.LVL127:
 937:main.c        **** 	stat(0,ON);
 1769              		.loc 1 937 0
 1770 0ec4 0C002DE9 		stmfd	sp!, {r2, r3}
 1771              	.LCFI5:
 1772              		.cfi_def_cfa_offset 8
 1773              		.cfi_offset 2, -8
 1774              		.cfi_offset 3, -4
 1775              	.LBB18:
 1776              	.LBB19:
1023:main.c        **** 		else { IOSET0 = 0x00000004; } // Off
 1777              		.loc 1 1023 0
 1778 0ec8 0C309FE5 		ldr	r3, .L166
 1779 0ecc 0420A0E3 		mov	r2, #4
 1780 0ed0 0C2083E5 		str	r2, [r3, #12]
 1781              	.LBE19:
 1782              	.LBE18:
 939:main.c        **** 
 1783              		.loc 1 939 0
 1784 0ed4 0C00BDE8 		ldmfd	sp!, {r2, r3}
 1785 0ed8 0EF0B0E1 		movs	pc, lr
 1786              	.L167:
 1787              		.align	2
 1788              	.L166:
 1789 0edc 008002E0 		.word	-536707072
 1790              		.cfi_endproc
 1791              	.LFE8:
 1793              		.align	2
 1794              		.global	setup_uart0
 1796              	setup_uart0:
 1797              	.LFB9:
 942:main.c        **** 	baud = newbaud;
 1798              		.loc 1 942 0
 1799              		.cfi_startproc
 1800              		@ Function supports interworking.
 1801              		@ args = 0, pretend = 0, frame = 0
 1802              		@ frame_needed = 0, uses_anonymous_args = 0
 1803              	.LVL128:
 943:main.c        **** 	U0LCR = 0x83;   // 8 bits, no parity, 1 stop bit, DLAB = 1
 1804              		.loc 1 943 0
 1805 0ee0 60319FE5 		ldr	r3, .L183
 942:main.c        **** 	baud = newbaud;
 1806              		.loc 1 942 0
 1807 0ee4 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 1808              	.LCFI6:
 1809              		.cfi_def_cfa_offset 16
 1810              		.cfi_offset 4, -16
 1811              		.cfi_offset 5, -12
 1812              		.cfi_offset 6, -8
 1813              		.cfi_offset 14, -4
 943:main.c        **** 	U0LCR = 0x83;   // 8 bits, no parity, 1 stop bit, DLAB = 1
 1814              		.loc 1 943 0
 1815 0ee8 100083E5 		str	r0, [r3, #16]
 944:main.c        **** 	
 1816              		.loc 1 944 0
 1817 0eec 58319FE5 		ldr	r3, .L183+4
 1818 0ef0 7C20E0E3 		mvn	r2, #124
 946:main.c        **** 	{
 1819              		.loc 1 946 0
 1820 0ef4 4B0E50E3 		cmp	r0, #1200
 944:main.c        **** 	
 1821              		.loc 1 944 0
 1822 0ef8 0C20C3E5 		strb	r2, [r3, #12]
 942:main.c        **** 	baud = newbaud;
 1823              		.loc 1 942 0
 1824 0efc FF4001E2 		and	r4, r1, #255
 948:main.c        **** 		U0DLL = 0x00;
 1825              		.loc 1 948 0
 1826 0f00 0C20A003 		moveq	r2, #12
 946:main.c        **** 	{
 1827              		.loc 1 946 0
 1828 0f04 0200000A 		beq	.L182
 1829              	.L169:
 951:main.c        **** 	{
 1830              		.loc 1 951 0
 1831 0f08 960E50E3 		cmp	r0, #2400
 1832 0f0c 0300001A 		bne	.L171
 953:main.c        **** 		U0DLL = 0x00;
 1833              		.loc 1 953 0
 1834 0f10 0620A0E3 		mov	r2, #6
 1835              	.L182:
 1836 0f14 0420C3E5 		strb	r2, [r3, #4]
 954:main.c        **** 	}
 1837              		.loc 1 954 0
 1838 0f18 0020A0E3 		mov	r2, #0
 1839 0f1c 1C0000EA 		b	.L180
 1840              	.L171:
 956:main.c        **** 	{
 1841              		.loc 1 956 0
 1842 0f20 4B0D50E3 		cmp	r0, #4800
 958:main.c        **** 		U0DLL = 0x00;
 1843              		.loc 1 958 0
 1844 0f24 0320A003 		moveq	r2, #3
 956:main.c        **** 	{
 1845              		.loc 1 956 0
 1846 0f28 F9FFFF0A 		beq	.L182
 1847              	.L172:
 961:main.c        **** 	{
 1848              		.loc 1 961 0
 1849 0f2c 960D50E3 		cmp	r0, #9600
 963:main.c        **** 		U0DLL = 0x80;
 1850              		.loc 1 963 0
 1851 0f30 0120A003 		moveq	r2, #1
 1852 0f34 0420C305 		streqb	r2, [r3, #4]
 964:main.c        **** 	}
 1853              		.loc 1 964 0
 1854 0f38 7F20E003 		mvneq	r2, #127
 961:main.c        **** 	{
 1855              		.loc 1 961 0
 1856 0f3c 1400000A 		beq	.L180
 1857              	.L173:
 966:main.c        **** 	{
 1858              		.loc 1 966 0
 1859 0f40 4B0C50E3 		cmp	r0, #19200
 968:main.c        **** 		U0DLL = 0xC0;
 1860              		.loc 1 968 0
 1861 0f44 0020A003 		moveq	r2, #0
 1862 0f48 0420C305 		streqb	r2, [r3, #4]
 969:main.c        **** 	}
 1863              		.loc 1 969 0
 1864 0f4c 3F20E003 		mvneq	r2, #63
 966:main.c        **** 	{
 1865              		.loc 1 966 0
 1866 0f50 0F00000A 		beq	.L180
 1867              	.L174:
 971:main.c        **** 	{
 1868              		.loc 1 971 0
 1869 0f54 960C50E3 		cmp	r0, #38400
 973:main.c        **** 		U0DLL = 0x60;
 1870              		.loc 1 973 0
 1871 0f58 0020A003 		moveq	r2, #0
 1872 0f5c 0420C305 		streqb	r2, [r3, #4]
 974:main.c        **** 	}
 1873              		.loc 1 974 0
 1874 0f60 6020A003 		moveq	r2, #96
 971:main.c        **** 	{
 1875              		.loc 1 971 0
 1876 0f64 0A00000A 		beq	.L180
 1877              	.L175:
 976:main.c        **** 	{
 1878              		.loc 1 976 0
 1879 0f68 E10C50E3 		cmp	r0, #57600
 978:main.c        **** 		U0DLL = 0x40;
 1880              		.loc 1 978 0
 1881 0f6c 0020A003 		moveq	r2, #0
 1882 0f70 0420C305 		streqb	r2, [r3, #4]
 979:main.c        **** 	}
 1883              		.loc 1 979 0
 1884 0f74 4020A003 		moveq	r2, #64
 976:main.c        **** 	{
 1885              		.loc 1 976 0
 1886 0f78 0500000A 		beq	.L180
 1887              	.L176:
 981:main.c        **** 	{
 1888              		.loc 1 981 0
 1889 0f7c CC209FE5 		ldr	r2, .L183+8
 1890 0f80 020050E1 		cmp	r0, r2
 1891 0f84 0300001A 		bne	.L170
 983:main.c        **** 		U0DLL = 0x20;
 1892              		.loc 1 983 0
 1893 0f88 0020A0E3 		mov	r2, #0
 1894 0f8c 0420C3E5 		strb	r2, [r3, #4]
 984:main.c        **** 	}
 1895              		.loc 1 984 0
 1896 0f90 2020A0E3 		mov	r2, #32
 1897              	.L180:
 1898 0f94 0020C3E5 		strb	r2, [r3, #0]
 1899              	.L170:
 987:main.c        **** 	U0LCR = 0x03;   
 1900              		.loc 1 987 0
 1901 0f98 0160A0E3 		mov	r6, #1
 988:main.c        **** 
 1902              		.loc 1 988 0
 1903 0f9c 0320A0E3 		mov	r2, #3
 990:main.c        **** 	{
 1904              		.loc 1 990 0
 1905 0fa0 060054E1 		cmp	r4, r6
 987:main.c        **** 	U0LCR = 0x03;   
 1906              		.loc 1 987 0
 1907 0fa4 0860C3E5 		strb	r6, [r3, #8]
 1908 0fa8 9C509FE5 		ldr	r5, .L183+4
 988:main.c        **** 
 1909              		.loc 1 988 0
 1910 0fac 0C20C3E5 		strb	r2, [r3, #12]
 990:main.c        **** 	{
 1911              		.loc 1 990 0
 1912 0fb0 0C00001A 		bne	.L177
 992:main.c        **** 		VICIntSelect &= ~0x00000040;
 1913              		.loc 1 992 0
 1914 0fb4 FEFFFFEB 		bl	enableIRQ
 1915              	.LVL129:
 993:main.c        **** 		VICIntEnable |= 0x00000040;
 1916              		.loc 1 993 0
 1917 0fb8 0030E0E3 		mvn	r3, #0
 1918 0fbc F32F13E5 		ldr	r2, [r3, #-4083]
 1919 0fc0 4020C2E3 		bic	r2, r2, #64
 1920 0fc4 F32F03E5 		str	r2, [r3, #-4083]
 994:main.c        **** 		VICVectCntl1 = 0x26;
 1921              		.loc 1 994 0
 1922 0fc8 EF2F13E5 		ldr	r2, [r3, #-4079]
 1923 0fcc 402082E3 		orr	r2, r2, #64
 1924 0fd0 EF2F03E5 		str	r2, [r3, #-4079]
 995:main.c        **** 		VICVectAddr1 = (unsigned int)UART0ISR;
 1925              		.loc 1 995 0
 1926 0fd4 2620A0E3 		mov	r2, #38
 1927 0fd8 FB2D03E5 		str	r2, [r3, #-3579]
 996:main.c        **** 		U0IER = 0x01;
 1928              		.loc 1 996 0
 1929 0fdc 70209FE5 		ldr	r2, .L183+12
 1930 0fe0 FB2E03E5 		str	r2, [r3, #-3835]
 1931 0fe4 140000EA 		b	.L181
 1932              	.LVL130:
 1933              	.L177:
 999:main.c        **** 	{
 1934              		.loc 1 999 0
 1935 0fe8 020054E3 		cmp	r4, #2
 1936 0fec 0D00001A 		bne	.L179
1001:main.c        **** 		VICIntSelect &= ~0x00000040;
 1937              		.loc 1 1001 0
 1938 0ff0 FEFFFFEB 		bl	enableIRQ
 1939              	.LVL131:
1002:main.c        **** 		VICIntEnable |= 0x00000040;
 1940              		.loc 1 1002 0
 1941 0ff4 0030E0E3 		mvn	r3, #0
 1942 0ff8 F32F13E5 		ldr	r2, [r3, #-4083]
 1943 0ffc 4020C2E3 		bic	r2, r2, #64
 1944 1000 F32F03E5 		str	r2, [r3, #-4083]
1003:main.c        **** 		VICVectCntl2 = 0x26;
 1945              		.loc 1 1003 0
 1946 1004 EF2F13E5 		ldr	r2, [r3, #-4079]
 1947 1008 402082E3 		orr	r2, r2, #64
 1948 100c EF2F03E5 		str	r2, [r3, #-4079]
1004:main.c        **** 		VICVectAddr2 = (unsigned int)UART0ISR_2;
 1949              		.loc 1 1004 0
 1950 1010 2620A0E3 		mov	r2, #38
 1951 1014 F72D03E5 		str	r2, [r3, #-3575]
1005:main.c        **** 		U0IER = 0X01;
 1952              		.loc 1 1005 0
 1953 1018 38209FE5 		ldr	r2, .L183+16
 1954 101c F72E03E5 		str	r2, [r3, #-3831]
1006:main.c        **** 	}
 1955              		.loc 1 1006 0
 1956 1020 0460C5E5 		strb	r6, [r5, #4]
 1957 1024 050000EA 		b	.L168
 1958              	.LVL132:
 1959              	.L179:
1008:main.c        **** 	{
 1960              		.loc 1 1008 0
 1961 1028 000054E3 		cmp	r4, #0
 1962 102c 0300001A 		bne	.L168
1010:main.c        **** 		U0IER = 0x00;
 1963              		.loc 1 1010 0
 1964 1030 4020A0E3 		mov	r2, #64
 1965 1034 0030E0E3 		mvn	r3, #0
 1966 1038 EB2F03E5 		str	r2, [r3, #-4075]
 1967              	.LVL133:
 1968              	.L181:
1011:main.c        **** 	}
 1969              		.loc 1 1011 0
 1970 103c 0440C5E5 		strb	r4, [r5, #4]
 1971              	.L168:
1013:main.c        **** void stat(int statnum, int onoff)
 1972              		.loc 1 1013 0
 1973 1040 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 1974 1044 1EFF2FE1 		bx	lr
 1975              	.L184:
 1976              		.align	2
 1977              	.L183:
 1978 1048 00000000 		.word	.LANCHOR1
 1979 104c 00C000E0 		.word	-536821760
 1980 1050 00C20100 		.word	115200
 1981 1054 00000000 		.word	UART0ISR
 1982 1058 00000000 		.word	UART0ISR_2
 1983              		.cfi_endproc
 1984              	.LFE9:
 1986              		.align	2
 1987              		.global	stat
 1989              	stat:
 1990              	.LFB10:
1015:main.c        **** 	if(statnum) // Stat 1
 1991              		.loc 1 1015 0
 1992              		.cfi_startproc
 1993              		@ Function supports interworking.
 1994              		@ args = 0, pretend = 0, frame = 0
 1995              		@ frame_needed = 0, uses_anonymous_args = 0
 1996              		@ link register save eliminated.
 1997              	.LVL134:
1016:main.c        **** 	{
 1998              		.loc 1 1016 0
 1999 105c 000050E3 		cmp	r0, #0
 2000 1060 20309FE5 		ldr	r3, .L193
 2001 1064 0200000A 		beq	.L186
 2002              	.LVL135:
 2003              	.LBB22:
 2004              	.LBB23:
1018:main.c        **** 		else { IOSET0 = 0x00000800; } // Off
 2005              		.loc 1 1018 0
 2006 1068 000051E3 		cmp	r1, #0
 2007 106c 022BA0E3 		mov	r2, #2048
 2008 1070 010000EA 		b	.L192
 2009              	.LVL136:
 2010              	.L186:
 2011              	.LBE23:
 2012              	.LBE22:
1023:main.c        **** 		else { IOSET0 = 0x00000004; } // Off
 2013              		.loc 1 1023 0
 2014 1074 000051E3 		cmp	r1, #0
 2015 1078 0420A0E3 		mov	r2, #4
 2016              	.L192:
 2017 107c 0C208315 		strne	r2, [r3, #12]
 2018              		.loc 1 1024 0
 2019 1080 04208305 		streq	r2, [r3, #4]
 2020 1084 1EFF2FE1 		bx	lr
 2021              	.L194:
 2022              		.align	2
 2023              	.L193:
 2024 1088 008002E0 		.word	-536707072
 2025              		.cfi_endproc
 2026              	.LFE10:
 2028              		.align	2
 2029              		.global	mode_action
 2031              	mode_action:
 2032              	.LFB15:
1025:main.c        **** 	}
1026:main.c        **** }
1027:main.c        **** 
1028:main.c        **** void Log_init(void)
1029:main.c        **** {
1030:main.c        **** 	int x, mark = 0, ind = 0;
1031:main.c        **** 	char temp, temp2 = 0, safety = 0;
1032:main.c        **** //	signed char handle;
1033:main.c        **** 
1034:main.c        **** 	if(root_file_exists("LOGCON.txt"))
1035:main.c        **** 	{
1036:main.c        **** 		//rprintf("\n\rFound LOGcon.txt\n");
1037:main.c        **** 		fd = root_open("LOGCON.txt");
1038:main.c        **** 		stringSize = fat_read_file(fd, (unsigned char *)stringBuf, 512);
1039:main.c        **** 		stringBuf[stringSize] = '\0';
1040:main.c        **** 		fat_close_file(fd);
1041:main.c        **** 	}
1042:main.c        **** 	else
1043:main.c        **** 	{
1044:main.c        **** 		//rprintf("Couldn't find LOGcon.txt, creating...\n");
1045:main.c        **** 		fd = root_open_new("LOGCON.txt");
1046:main.c        **** 		if(fd == NULL)
1047:main.c        **** 		{
1048:main.c        **** 		 	rprintf("Error creating LOGCON.txt, locking up...\n\r");
1049:main.c        **** 		 	while(1)
1050:main.c        **** 			{
1051:main.c        **** 				stat(0,ON);
1052:main.c        **** 				delay_ms(50);
1053:main.c        **** 				stat(0,OFF);
1054:main.c        **** 				stat(1,ON);
1055:main.c        **** 				delay_ms(50);
1056:main.c        **** 				stat(1,OFF);
1057:main.c        **** 			}
1058:main.c        **** 		}
1059:main.c        **** 
1060:main.c        **** 		strcpy(stringBuf, "MODE = 0\r\nASCII = N\r\nBaud = 4\r\nFrequency = 100\r\nTrigger Character = $\
1061:main.c        **** 		stringSize = strlen(stringBuf);
1062:main.c        **** 		fat_write_file(fd, (unsigned char*)stringBuf, stringSize);
1063:main.c        **** 		sd_raw_sync();
1064:main.c        **** 	}
1065:main.c        **** 
1066:main.c        **** 	for(x = 0; x < stringSize; x++)
1067:main.c        **** 	{
1068:main.c        **** 		temp = stringBuf[x];
1069:main.c        **** 		if(temp == 10)
1070:main.c        **** 		{
1071:main.c        **** 			mark = x;
1072:main.c        **** 			ind++;
1073:main.c        **** 			if(ind == 1)
1074:main.c        **** 			{
1075:main.c        **** 				mode = stringBuf[mark-2]-48; // 0 = auto uart, 1 = trigger uart, 2 = adc
1076:main.c        **** 				rprintf("mode = %d\n\r",mode);
1077:main.c        **** 			}
1078:main.c        **** 			else if(ind == 2)
1079:main.c        **** 			{
1080:main.c        **** 				asc = stringBuf[mark-2]; // default is 'N'
1081:main.c        **** 				rprintf("asc = %c\n\r",asc);
1082:main.c        **** 			}
1083:main.c        **** 			else if(ind == 3)
1084:main.c        **** 			{
1085:main.c        **** 				if(stringBuf[mark-2] == '1'){ baud = 1200; }
1086:main.c        **** 				else if(stringBuf[mark-2] == '2'){ baud = 2400; }
1087:main.c        **** 				else if(stringBuf[mark-2] == '3'){ baud = 4800; }
1088:main.c        **** 				else if(stringBuf[mark-2] == '4'){ baud = 9600; }
1089:main.c        **** 				else if(stringBuf[mark-2] == '5'){ baud = 19200; }
1090:main.c        **** 				else if(stringBuf[mark-2] == '6'){ baud = 38400; }
1091:main.c        **** 				else if(stringBuf[mark-2] == '7'){ baud = 57600; }
1092:main.c        **** 				else if(stringBuf[mark-2] == '8'){ baud = 115200; }
1093:main.c        **** 
1094:main.c        **** 				rprintf("baud = %d\n\r",baud);
1095:main.c        **** 			}
1096:main.c        **** 			else if(ind == 4)
1097:main.c        **** 			{
1098:main.c        **** 				freq = (stringBuf[mark-2]-48) + (stringBuf[mark-3]-48) * 10;
1099:main.c        **** 				if((stringBuf[mark-4] >= 48) && (stringBuf[mark-4] < 58))
1100:main.c        **** 				{
1101:main.c        **** 					freq+= (stringBuf[mark-4]-48) * 100;
1102:main.c        **** 					if((stringBuf[mark-5] >= 48) && (stringBuf[mark-5] < 58)){ freq += (stringBuf[mark-5]-48)*1000
1103:main.c        **** 				}
1104:main.c        **** 				rprintf("freq = %d\n\r",freq);
1105:main.c        **** 			}
1106:main.c        **** 			else if(ind == 5)
1107:main.c        **** 			{
1108:main.c        **** 				trig = stringBuf[mark-2]; // default is $
1109:main.c        **** 				
1110:main.c        **** 				rprintf("trig = %c\n\r",trig);
1111:main.c        **** 			}
1112:main.c        **** 			else if(ind == 6)
1113:main.c        **** 			{
1114:main.c        **** 				frame = (stringBuf[mark-2]-48) + (stringBuf[mark-3]-48) * 10 + (stringBuf[mark-4]-48)*100;
1115:main.c        **** 				if(frame > 510){ frame = 510; } // up to 510 characters
1116:main.c        **** 				rprintf("frame = %d\n\r",frame);
1117:main.c        **** 			}
1118:main.c        **** 			else if(ind == 7)
1119:main.c        **** 			{
1120:main.c        **** 				ad1_3 = stringBuf[mark-2]; // default is 'N'
1121:main.c        **** 				if(ad1_3 == 'Y'){ temp2++; }
1122:main.c        **** 				rprintf("ad1_3 = %c\n\r",ad1_3);
1123:main.c        **** 			}
1124:main.c        **** 			else if(ind == 8)
1125:main.c        **** 			{
1126:main.c        **** 				ad0_3 = stringBuf[mark-2]; // default is 'N'
1127:main.c        **** 				if(ad0_3 == 'Y'){ temp2++; }
1128:main.c        **** 				rprintf("ad0_3 = %c\n\r",ad0_3);
1129:main.c        **** 			}
1130:main.c        **** 			else if(ind == 9)
1131:main.c        **** 			{
1132:main.c        **** 				ad0_2 = stringBuf[mark-2]; // default is 'N'
1133:main.c        **** 				if(ad0_2 == 'Y'){ temp2++; }
1134:main.c        **** 				rprintf("ad0_2 = %c\n\r",ad0_2);
1135:main.c        **** 			}
1136:main.c        **** 			else if(ind == 10)
1137:main.c        **** 			{
1138:main.c        **** 				ad0_1 = stringBuf[mark-2]; // default is 'N'
1139:main.c        **** 				if(ad0_1 == 'Y'){ temp2++; }
1140:main.c        **** 				rprintf("ad0_1 = %c\n\r",ad0_1);
1141:main.c        **** 			}
1142:main.c        **** 			else if(ind == 11)
1143:main.c        **** 			{
1144:main.c        **** 				ad1_2 = stringBuf[mark-2]; // default is 'N'
1145:main.c        **** 				if(ad1_2 == 'Y'){ temp2++; }
1146:main.c        **** 				rprintf("ad1_2 = %c\n\r",ad1_2);
1147:main.c        **** 			}
1148:main.c        **** 			else if(ind == 12)
1149:main.c        **** 			{
1150:main.c        **** 				ad0_4 = stringBuf[mark-2]; // default is 'N'
1151:main.c        **** 				if(ad0_4 == 'Y'){ temp2++; }
1152:main.c        **** 				rprintf("ad0_4 = %c\n\r",ad0_4);
1153:main.c        **** 			}
1154:main.c        **** 			else if(ind == 13)
1155:main.c        **** 			{
1156:main.c        **** 				ad1_7 = stringBuf[mark-2]; // default is 'N'
1157:main.c        **** 				if(ad1_7 == 'Y'){ temp2++; }
1158:main.c        **** 				rprintf("ad1_7 = %c\n\r",ad1_7);
1159:main.c        **** 			}
1160:main.c        **** 			else if(ind == 14)
1161:main.c        **** 			{
1162:main.c        **** 				ad1_6 = stringBuf[mark-2]; // default is 'N'
1163:main.c        **** 				if(ad1_6 == 'Y'){ temp2++; }
1164:main.c        **** 				rprintf("ad1_6 = %c\n\r",ad1_6);
1165:main.c        **** 			}
1166:main.c        **** 			else if(ind == 15)
1167:main.c        **** 			{
1168:main.c        **** 				safety = stringBuf[mark-2]; // default is 'Y'
1169:main.c        **** 				rprintf("safety = %c\n\r",safety);
1170:main.c        **** 			}
1171:main.c        **** 		}
1172:main.c        **** 	}
1173:main.c        **** 
1174:main.c        **** 	if(safety == 'Y')
1175:main.c        **** 	{
1176:main.c        **** 		if((temp2 ==10) && (freq > 150)){ freq = 150; }
1177:main.c        **** 		else if((temp2 == 9) && (freq > 166)){ freq = 166; }
1178:main.c        **** 		else if((temp2 == 8) && (freq > 187)){ freq = 187; }
1179:main.c        **** 		else if((temp2 == 7) && (freq > 214)){ freq = 214; }
1180:main.c        **** 		else if((temp2 == 6) && (freq > 250)){ freq = 250; }
1181:main.c        **** 		else if((temp2 == 5) && (freq > 300)){ freq = 300; }
1182:main.c        **** 		else if((temp2 == 4) && (freq > 375)){ freq = 375; }
1183:main.c        **** 		else if((temp2 == 3) && (freq > 500)){ freq = 500; }
1184:main.c        **** 		else if((temp2 == 2) && (freq > 750)){ freq = 750; }
1185:main.c        **** 		else if((temp2 == 1) && (freq > 1500)){ freq = 1500; }
1186:main.c        **** 		else if((temp2 == 0)){ freq = 100; }
1187:main.c        **** 	}
1188:main.c        **** 	
1189:main.c        **** 	if(safety == 'T'){ test(); }
1190:main.c        **** 
1191:main.c        **** }
1192:main.c        **** 
1193:main.c        **** 
1194:main.c        **** void mode_0(void) // Auto UART mode
1195:main.c        **** {
1196:main.c        **** 	rprintf("MODE 0\n\r");
1197:main.c        **** 	setup_uart0(baud,1);
1198:main.c        **** 	stringSize = 512;
1199:main.c        **** 	mode_action();
1200:main.c        **** 	//rprintf("Exit mode 0\n\r");
1201:main.c        **** 
1202:main.c        **** }
1203:main.c        **** 
1204:main.c        **** void mode_1(void)
1205:main.c        **** {
1206:main.c        **** 	rprintf("MODE 1\n\r");	
1207:main.c        **** 
1208:main.c        **** 	setup_uart0(baud,2);
1209:main.c        **** 	stringSize = frame + 2;
1210:main.c        **** 
1211:main.c        **** 	mode_action();
1212:main.c        **** }
1213:main.c        **** 
1214:main.c        **** void mode_2(void)
1215:main.c        **** {
1216:main.c        **** 	rprintf("MODE 2\n\r");	
1217:main.c        **** 	enableIRQ();
1218:main.c        **** 	// Timer0  interrupt is an IRQ interrupt
1219:main.c        **** 	VICIntSelect &= ~0x00000010;
1220:main.c        **** 	// Enable Timer0 interrupt
1221:main.c        **** 	VICIntEnable |= 0x00000010;
1222:main.c        **** 	// Use slot 2 for UART0 interrupt
1223:main.c        **** 	VICVectCntl2 = 0x24;
1224:main.c        **** 	// Set the address of ISR for slot 1
1225:main.c        **** 	VICVectAddr2 = (unsigned int)MODE2ISR;
1226:main.c        **** 
1227:main.c        **** 	T0TCR = 0x00000002;	// Reset counter and prescaler
1228:main.c        **** 	T0MCR = 0x00000003;	// On match reset the counter and generate interrupt
1229:main.c        **** 	T0MR0 = 58982400 / freq;
1230:main.c        **** 
1231:main.c        **** 	T0PR = 0x00000000;
1232:main.c        **** 
1233:main.c        **** 	T0TCR = 0x00000001; // enable timer
1234:main.c        **** 
1235:main.c        **** 	stringSize = 512;
1236:main.c        **** 	mode_action();
1237:main.c        **** }
1238:main.c        **** 
1239:main.c        **** void mode_action(void)
1240:main.c        **** {
 2033              		.loc 1 1240 0
 2034              		.cfi_startproc
 2035              		@ Function supports interworking.
 2036              		@ args = 0, pretend = 0, frame = 0
 2037              		@ frame_needed = 0, uses_anonymous_args = 0
 2038 108c F0402DE9 		stmfd	sp!, {r4, r5, r6, r7, lr}
 2039              	.LCFI7:
 2040              		.cfi_def_cfa_offset 20
 2041              		.cfi_offset 4, -20
 2042              		.cfi_offset 5, -16
 2043              		.cfi_offset 6, -12
 2044              		.cfi_offset 7, -8
 2045              		.cfi_offset 14, -4
1241:main.c        **** 	int j;
1242:main.c        **** 	while(1)
1243:main.c        **** 	{
1244:main.c        **** 		
1245:main.c        **** 		if(log_array1 == 1)
 2046              		.loc 1 1245 0
 2047 1090 50519FE5 		ldr	r5, .L219
 2048              	.LBB88:
 2049              	.LBB89:
1023:main.c        **** 		else { IOSET0 = 0x00000004; } // Off
 2050              		.loc 1 1023 0
 2051 1094 50419FE5 		ldr	r4, .L219+4
 2052              	.LBE89:
 2053              	.LBE88:
1246:main.c        **** 		{
1247:main.c        **** 			stat(0,ON);
1248:main.c        **** 				
1249:main.c        **** 			if(fat_write_file(handle,(unsigned char *)RX_array1, stringSize) < 0)
 2054              		.loc 1 1249 0
 2055 1098 50719FE5 		ldr	r7, .L219+8
 2056              	.L206:
1245:main.c        **** 		{
 2057              		.loc 1 1245 0
 2058 109c 0230D5E5 		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 2059 10a0 010053E3 		cmp	r3, #1
 2060 10a4 1A00001A 		bne	.L196
 2061              	.LVL137:
 2062              		.loc 1 1249 0
 2063 10a8 44319FE5 		ldr	r3, .L219+12
 2064              	.LBB91:
 2065              	.LBB90:
1023:main.c        **** 		else { IOSET0 = 0x00000004; } // Off
 2066              		.loc 1 1023 0
 2067 10ac 0460A0E3 		mov	r6, #4
 2068 10b0 0C6084E5 		str	r6, [r4, #12]
 2069              	.LBE90:
 2070              	.LBE91:
 2071              		.loc 1 1249 0
 2072 10b4 000097E5 		ldr	r0, [r7, #0]
 2073 10b8 38119FE5 		ldr	r1, .L219+16
 2074 10bc 002093E5 		ldr	r2, [r3, #0]
 2075 10c0 FEFFFFEB 		bl	fat_write_file
 2076              	.LVL138:
 2077 10c4 000050E3 		cmp	r0, #0
 2078 10c8 0D0000AA 		bge	.L197
 2079              	.LBB92:
 2080              	.LBB93:
1023:main.c        **** 		else { IOSET0 = 0x00000004; } // Off
 2081              		.loc 1 1023 0
 2082 10cc 18319FE5 		ldr	r3, .L219+4
 2083              	.LBE93:
 2084              	.LBE92:
 2085              	.LBB95:
 2086              	.LBB96:
 2087              	.LBB97:
1018:main.c        **** 		else { IOSET0 = 0x00000800; } // Off
 2088              		.loc 1 1018 0
 2089 10d0 020BA0E3 		mov	r0, #2048
 2090 10d4 0310A0E1 		mov	r1, r3
 2091              	.L215:
 2092              	.LVL139:
 2093              	.LBE97:
 2094              	.LBE96:
 2095              	.LBE95:
 2096              	.LBB100:
 2097              	.LBB94:
1023:main.c        **** 		else { IOSET0 = 0x00000004; } // Off
 2098              		.loc 1 1023 0
 2099 10d8 0C6083E5 		str	r6, [r3, #12]
 2100              	.LVL140:
 2101 10dc 18219FE5 		ldr	r2, .L219+20
 2102              	.LVL141:
 2103              	.L198:
 2104              	.LBE94:
 2105              	.LBE100:
1250:main.c        **** 			{
1251:main.c        **** 				while(1)
1252:main.c        **** 				{
1253:main.c        **** 					stat(0,ON);
1254:main.c        **** 					for(j = 0; j < 500000; j++)
 2106              		.loc 1 1254 0
 2107 10e0 012052E2 		subs	r2, r2, #1
 2108              	.LBB101:
 2109              	.LBB102:
1024:main.c        **** 	}
 2110              		.loc 1 1024 0
 2111 10e4 046081E5 		str	r6, [r1, #4]
 2112              	.LBE102:
 2113              	.LBE101:
 2114              		.loc 1 1254 0
 2115 10e8 FCFFFF1A 		bne	.L198
 2116              	.LVL142:
 2117              	.LBB103:
 2118              	.LBB99:
 2119              	.LBB98:
1018:main.c        **** 		else { IOSET0 = 0x00000800; } // Off
 2120              		.loc 1 1018 0
 2121 10ec 0C0081E5 		str	r0, [r1, #12]
 2122              	.LVL143:
 2123 10f0 04219FE5 		ldr	r2, .L219+20
 2124              	.LVL144:
 2125              	.L199:
 2126              	.LBE98:
 2127              	.LBE99:
 2128              	.LBE103:
1255:main.c        **** 					stat(0,OFF);
1256:main.c        **** 					stat(1,ON);
1257:main.c        **** 					for(j = 0; j < 500000; j++)
 2129              		.loc 1 1257 0
 2130 10f4 012052E2 		subs	r2, r2, #1
 2131              	.LBB104:
 2132              	.LBB105:
 2133              	.LBB106:
1019:main.c        **** 	}
 2134              		.loc 1 1019 0
 2135 10f8 040083E5 		str	r0, [r3, #4]
 2136              	.LBE106:
 2137              	.LBE105:
 2138              	.LBE104:
 2139              		.loc 1 1257 0
 2140 10fc FCFFFF1A 		bne	.L199
 2141 1100 F4FFFFEA 		b	.L215
 2142              	.LVL145:
 2143              	.L197:
1258:main.c        **** 					stat(1,OFF);
1259:main.c        **** 				}
1260:main.c        **** 			}
1261:main.c        **** 			
1262:main.c        **** 			sd_raw_sync();
 2144              		.loc 1 1262 0
 2145 1104 FEFFFFEB 		bl	sd_raw_sync
 2146              	.LVL146:
1263:main.c        **** 			stat(0,OFF);
1264:main.c        **** 			log_array1 = 0;
 2147              		.loc 1 1264 0
 2148 1108 0030A0E3 		mov	r3, #0
 2149              	.LBB107:
 2150              	.LBB108:
1024:main.c        **** 	}
 2151              		.loc 1 1024 0
 2152 110c 046084E5 		str	r6, [r4, #4]
 2153              	.LBE108:
 2154              	.LBE107:
 2155              		.loc 1 1264 0
 2156 1110 0230C5E5 		strb	r3, [r5, #2]
 2157              	.LVL147:
 2158              	.L196:
1265:main.c        **** 		}
1266:main.c        **** 
1267:main.c        **** 		if(log_array2 == 1)
 2159              		.loc 1 1267 0
 2160 1114 0330D5E5 		ldrb	r3, [r5, #3]	@ zero_extendqisi2
 2161 1118 010053E3 		cmp	r3, #1
 2162 111c 1A00001A 		bne	.L201
 2163              	.LVL148:
1268:main.c        **** 		{
1269:main.c        **** 			stat(1,ON);
1270:main.c        **** 			
1271:main.c        **** 			if(fat_write_file(handle,(unsigned char *)RX_array2, stringSize) < 0)
 2164              		.loc 1 1271 0
 2165 1120 CC309FE5 		ldr	r3, .L219+12
 2166              	.LBB109:
 2167              	.LBB110:
 2168              	.LBB111:
1018:main.c        **** 		else { IOSET0 = 0x00000800; } // Off
 2169              		.loc 1 1018 0
 2170 1124 026BA0E3 		mov	r6, #2048
 2171 1128 0C6084E5 		str	r6, [r4, #12]
 2172              	.LBE111:
 2173              	.LBE110:
 2174              	.LBE109:
 2175              		.loc 1 1271 0
 2176 112c 000097E5 		ldr	r0, [r7, #0]
 2177 1130 C8109FE5 		ldr	r1, .L219+24
 2178 1134 002093E5 		ldr	r2, [r3, #0]
 2179 1138 FEFFFFEB 		bl	fat_write_file
 2180              	.LVL149:
 2181 113c 000050E3 		cmp	r0, #0
 2182 1140 0D0000AA 		bge	.L202
 2183              	.LBB112:
 2184              	.LBB113:
1023:main.c        **** 		else { IOSET0 = 0x00000004; } // Off
 2185              		.loc 1 1023 0
 2186 1144 A0309FE5 		ldr	r3, .L219+4
 2187 1148 0410A0E3 		mov	r1, #4
 2188 114c 0300A0E1 		mov	r0, r3
 2189              	.L216:
 2190              	.LVL150:
 2191 1150 0C1083E5 		str	r1, [r3, #12]
 2192              	.LVL151:
 2193 1154 A0209FE5 		ldr	r2, .L219+20
 2194              	.LVL152:
 2195              	.L203:
 2196              	.LBE113:
 2197              	.LBE112:
1272:main.c        **** 			{
1273:main.c        **** 				while(1)
1274:main.c        **** 				{
1275:main.c        **** 					stat(0,ON);
1276:main.c        **** 					for(j = 0; j < 500000; j++)
 2198              		.loc 1 1276 0
 2199 1158 012052E2 		subs	r2, r2, #1
 2200              	.LBB114:
 2201              	.LBB115:
1024:main.c        **** 	}
 2202              		.loc 1 1024 0
 2203 115c 041080E5 		str	r1, [r0, #4]
 2204              	.LBE115:
 2205              	.LBE114:
 2206              		.loc 1 1276 0
 2207 1160 FCFFFF1A 		bne	.L203
 2208              	.LVL153:
 2209              	.LBB116:
 2210              	.LBB117:
 2211              	.LBB118:
1018:main.c        **** 		else { IOSET0 = 0x00000800; } // Off
 2212              		.loc 1 1018 0
 2213 1164 0C6080E5 		str	r6, [r0, #12]
 2214              	.LVL154:
 2215 1168 8C209FE5 		ldr	r2, .L219+20
 2216              	.LVL155:
 2217              	.L204:
 2218              	.LBE118:
 2219              	.LBE117:
 2220              	.LBE116:
1277:main.c        **** 					stat(0,OFF);
1278:main.c        **** 					stat(1,ON);
1279:main.c        **** 					for(j = 0; j < 500000; j++)
 2221              		.loc 1 1279 0
 2222 116c 012052E2 		subs	r2, r2, #1
 2223              	.LBB119:
 2224              	.LBB120:
 2225              	.LBB121:
1019:main.c        **** 	}
 2226              		.loc 1 1019 0
 2227 1170 046083E5 		str	r6, [r3, #4]
 2228              	.LBE121:
 2229              	.LBE120:
 2230              	.LBE119:
 2231              		.loc 1 1279 0
 2232 1174 FCFFFF1A 		bne	.L204
 2233 1178 F4FFFFEA 		b	.L216
 2234              	.LVL156:
 2235              	.L202:
1280:main.c        **** 					stat(1,OFF);
1281:main.c        **** 				}
1282:main.c        **** 			}
1283:main.c        **** 			
1284:main.c        **** 			sd_raw_sync();
 2236              		.loc 1 1284 0
 2237 117c FEFFFFEB 		bl	sd_raw_sync
 2238              	.LVL157:
1285:main.c        **** 			stat(1,OFF);
1286:main.c        **** 			log_array2 = 0;
 2239              		.loc 1 1286 0
 2240 1180 0030A0E3 		mov	r3, #0
 2241              	.LBB122:
 2242              	.LBB123:
 2243              	.LBB124:
1019:main.c        **** 	}
 2244              		.loc 1 1019 0
 2245 1184 046084E5 		str	r6, [r4, #4]
 2246              	.LBE124:
 2247              	.LBE123:
 2248              	.LBE122:
 2249              		.loc 1 1286 0
 2250 1188 0330C5E5 		strb	r3, [r5, #3]
 2251              	.LVL158:
 2252              	.L201:
1287:main.c        **** 		}
1288:main.c        **** 
1289:main.c        **** 		if((IOPIN0 & 0x00000008) == 0) // if button pushed, log file & quit
 2253              		.loc 1 1289 0
 2254 118c 003094E5 		ldr	r3, [r4, #0]
 2255 1190 080013E3 		tst	r3, #8
 2256 1194 C0FFFF1A 		bne	.L206
1290:main.c        **** 		{
1291:main.c        **** 			VICIntEnClr = 0xFFFFFFFF;
 2257              		.loc 1 1291 0
 2258 1198 0030E0E3 		mvn	r3, #0
 2259 119c EB3F03E5 		str	r3, [r3, #-4075]
1292:main.c        **** 
1293:main.c        **** 			if(RX_in < 512)
 2260              		.loc 1 1293 0
 2261 11a0 40309FE5 		ldr	r3, .L219
 2262 11a4 F020D3E1 		ldrsh	r2, [r3, #0]
 2263 11a8 40309FE5 		ldr	r3, .L219+8
 2264 11ac 020C52E3 		cmp	r2, #512
1294:main.c        **** 			{
1295:main.c        **** 				fat_write_file(handle, (unsigned char *)RX_array1, RX_in);
 2265              		.loc 1 1295 0
 2266 11b0 000093E5 		ldr	r0, [r3, #0]
 2267 11b4 3C109FB5 		ldrlt	r1, .L219+16
1296:main.c        **** 				sd_raw_sync();
1297:main.c        **** 			}
1298:main.c        **** 			else if(RX_in >= 512)
1299:main.c        **** 			{
1300:main.c        **** 				fat_write_file(handle, (unsigned char *)RX_array2, RX_in - 512);
 2268              		.loc 1 1300 0
 2269 11b8 40109FA5 		ldrge	r1, .L219+24
 2270 11bc 022C42A2 		subge	r2, r2, #512
 2271 11c0 FEFFFFEB 		bl	fat_write_file
 2272              	.LVL159:
1301:main.c        **** 				sd_raw_sync();
 2273              		.loc 1 1301 0
 2274 11c4 FEFFFFEB 		bl	sd_raw_sync
 2275              	.LVL160:
 2276              	.LBB125:
 2277              	.LBB126:
1023:main.c        **** 		else { IOSET0 = 0x00000004; } // Off
 2278              		.loc 1 1023 0
 2279 11c8 1C309FE5 		ldr	r3, .L219+4
 2280 11cc 0410A0E3 		mov	r1, #4
 2281              	.LBE126:
 2282              	.LBE125:
 2283              	.LBB128:
 2284              	.LBB129:
 2285              	.LBB130:
1018:main.c        **** 		else { IOSET0 = 0x00000800; } // Off
 2286              		.loc 1 1018 0
 2287 11d0 022BA0E3 		mov	r2, #2048
 2288              	.L217:
 2289              	.LVL161:
 2290              	.LBE130:
 2291              	.LBE129:
 2292              	.LBE128:
 2293              	.LBB133:
 2294              	.LBB127:
1023:main.c        **** 		else { IOSET0 = 0x00000004; } // Off
 2295              		.loc 1 1023 0
 2296 11d4 0C1083E5 		str	r1, [r3, #12]
 2297              	.LVL162:
 2298              	.LBE127:
 2299              	.LBE133:
 2300              	.LBB134:
 2301              	.LBB135:
1024:main.c        **** 	}
 2302              		.loc 1 1024 0
 2303 11d8 041083E5 		str	r1, [r3, #4]
 2304              	.LVL163:
 2305              	.LBE135:
 2306              	.LBE134:
 2307              	.LBB136:
 2308              	.LBB132:
 2309              	.LBB131:
1018:main.c        **** 		else { IOSET0 = 0x00000800; } // Off
 2310              		.loc 1 1018 0
 2311 11dc 0C2083E5 		str	r2, [r3, #12]
 2312              	.LVL164:
 2313              	.LBE131:
 2314              	.LBE132:
 2315              	.LBE136:
 2316              	.LBB137:
 2317              	.LBB138:
 2318              	.LBB139:
1019:main.c        **** 	}
 2319              		.loc 1 1019 0
 2320 11e0 042083E5 		str	r2, [r3, #4]
 2321 11e4 FAFFFFEA 		b	.L217
 2322              	.L220:
 2323              		.align	2
 2324              	.L219:
 2325 11e8 00000000 		.word	.LANCHOR0
 2326 11ec 008002E0 		.word	-536707072
 2327 11f0 00000000 		.word	handle
 2328 11f4 00000000 		.word	stringSize
 2329 11f8 00000000 		.word	RX_array1
 2330 11fc 20A10700 		.word	500000
 2331 1200 00000000 		.word	RX_array2
 2332              	.LBE139:
 2333              	.LBE138:
 2334              	.LBE137:
 2335              		.cfi_endproc
 2336              	.LFE15:
 2338              		.global	__divsi3
 2339              		.align	2
 2340              		.global	mode_2
 2342              	mode_2:
 2343              	.LFB14:
1215:main.c        **** 	rprintf("MODE 2\n\r");	
 2344              		.loc 1 1215 0
 2345              		.cfi_startproc
 2346              		@ Function supports interworking.
 2347              		@ args = 0, pretend = 0, frame = 0
 2348              		@ frame_needed = 0, uses_anonymous_args = 0
 2349 1204 10402DE9 		stmfd	sp!, {r4, lr}
 2350              	.LCFI8:
 2351              		.cfi_def_cfa_offset 8
 2352              		.cfi_offset 4, -8
 2353              		.cfi_offset 14, -4
1216:main.c        **** 	enableIRQ();
 2354              		.loc 1 1216 0
 2355 1208 78009FE5 		ldr	r0, .L222
 2356 120c FEFFFFEB 		bl	rprintf
 2357              	.LVL165:
1217:main.c        **** 	// Timer0  interrupt is an IRQ interrupt
 2358              		.loc 1 1217 0
 2359 1210 FEFFFFEB 		bl	enableIRQ
 2360              	.LVL166:
1219:main.c        **** 	// Enable Timer0 interrupt
 2361              		.loc 1 1219 0
 2362 1214 0030E0E3 		mvn	r3, #0
 2363 1218 F32F13E5 		ldr	r2, [r3, #-4083]
 2364 121c 1020C2E3 		bic	r2, r2, #16
 2365 1220 F32F03E5 		str	r2, [r3, #-4083]
1221:main.c        **** 	// Use slot 2 for UART0 interrupt
 2366              		.loc 1 1221 0
 2367 1224 EF2F13E5 		ldr	r2, [r3, #-4079]
 2368 1228 102082E3 		orr	r2, r2, #16
 2369 122c EF2F03E5 		str	r2, [r3, #-4079]
1223:main.c        **** 	// Set the address of ISR for slot 1
 2370              		.loc 1 1223 0
 2371 1230 2420A0E3 		mov	r2, #36
 2372 1234 F72D03E5 		str	r2, [r3, #-3575]
1225:main.c        **** 
 2373              		.loc 1 1225 0
 2374 1238 4C209FE5 		ldr	r2, .L222+4
1227:main.c        **** 	T0MCR = 0x00000003;	// On match reset the counter and generate interrupt
 2375              		.loc 1 1227 0
 2376 123c 4C409FE5 		ldr	r4, .L222+8
1225:main.c        **** 
 2377              		.loc 1 1225 0
 2378 1240 F72E03E5 		str	r2, [r3, #-3831]
1227:main.c        **** 	T0MCR = 0x00000003;	// On match reset the counter and generate interrupt
 2379              		.loc 1 1227 0
 2380 1244 0230A0E3 		mov	r3, #2
 2381 1248 043084E5 		str	r3, [r4, #4]
1228:main.c        **** 	T0MR0 = 58982400 / freq;
 2382              		.loc 1 1228 0
 2383 124c 0330A0E3 		mov	r3, #3
 2384 1250 143084E5 		str	r3, [r4, #20]
1229:main.c        **** 
 2385              		.loc 1 1229 0
 2386 1254 38309FE5 		ldr	r3, .L222+12
 2387 1258 E107A0E3 		mov	r0, #58982400
 2388 125c 141093E5 		ldr	r1, [r3, #20]
 2389 1260 FEFFFFEB 		bl	__divsi3
 2390              	.LVL167:
1231:main.c        **** 
 2391              		.loc 1 1231 0
 2392 1264 0030A0E3 		mov	r3, #0
1229:main.c        **** 
 2393              		.loc 1 1229 0
 2394 1268 180084E5 		str	r0, [r4, #24]
1231:main.c        **** 
 2395              		.loc 1 1231 0
 2396 126c 0C3084E5 		str	r3, [r4, #12]
1233:main.c        **** 
 2397              		.loc 1 1233 0
 2398 1270 0130A0E3 		mov	r3, #1
 2399 1274 043084E5 		str	r3, [r4, #4]
1235:main.c        **** 	mode_action();
 2400              		.loc 1 1235 0
 2401 1278 18309FE5 		ldr	r3, .L222+16
 2402 127c 022CA0E3 		mov	r2, #512
 2403 1280 002083E5 		str	r2, [r3, #0]
1236:main.c        **** }
 2404              		.loc 1 1236 0
 2405 1284 FEFFFFEB 		bl	mode_action
 2406              	.LVL168:
 2407              	.L223:
 2408              		.align	2
 2409              	.L222:
 2410 1288 00000000 		.word	.LC0
 2411 128c 00000000 		.word	MODE2ISR
 2412 1290 004000E0 		.word	-536854528
 2413 1294 00000000 		.word	.LANCHOR1
 2414 1298 00000000 		.word	stringSize
 2415              		.cfi_endproc
 2416              	.LFE14:
 2418              		.align	2
 2419              		.global	mode_1
 2421              	mode_1:
 2422              	.LFB13:
1205:main.c        **** 	rprintf("MODE 1\n\r");	
 2423              		.loc 1 1205 0
 2424              		.cfi_startproc
 2425              		@ Function supports interworking.
 2426              		@ args = 0, pretend = 0, frame = 0
 2427              		@ frame_needed = 0, uses_anonymous_args = 0
 2428 129c 10402DE9 		stmfd	sp!, {r4, lr}
 2429              	.LCFI9:
 2430              		.cfi_def_cfa_offset 8
 2431              		.cfi_offset 4, -8
 2432              		.cfi_offset 14, -4
1208:main.c        **** 	stringSize = frame + 2;
 2433              		.loc 1 1208 0
 2434 12a0 24409FE5 		ldr	r4, .L225
1206:main.c        **** 
 2435              		.loc 1 1206 0
 2436 12a4 24009FE5 		ldr	r0, .L225+4
 2437 12a8 FEFFFFEB 		bl	rprintf
 2438              	.LVL169:
1208:main.c        **** 	stringSize = frame + 2;
 2439              		.loc 1 1208 0
 2440 12ac 100094E5 		ldr	r0, [r4, #16]
 2441 12b0 0210A0E3 		mov	r1, #2
 2442 12b4 FEFFFFEB 		bl	setup_uart0
 2443              	.LVL170:
1209:main.c        **** 
 2444              		.loc 1 1209 0
 2445 12b8 F220D4E1 		ldrsh	r2, [r4, #2]
 2446 12bc 10309FE5 		ldr	r3, .L225+8
 2447 12c0 022082E2 		add	r2, r2, #2
 2448 12c4 002083E5 		str	r2, [r3, #0]
1211:main.c        **** }
 2449              		.loc 1 1211 0
 2450 12c8 FEFFFFEB 		bl	mode_action
 2451              	.LVL171:
 2452              	.L226:
 2453              		.align	2
 2454              	.L225:
 2455 12cc 00000000 		.word	.LANCHOR1
 2456 12d0 09000000 		.word	.LC1
 2457 12d4 00000000 		.word	stringSize
 2458              		.cfi_endproc
 2459              	.LFE13:
 2461              		.align	2
 2462              		.global	mode_0
 2464              	mode_0:
 2465              	.LFB12:
1195:main.c        **** 	rprintf("MODE 0\n\r");
 2466              		.loc 1 1195 0
 2467              		.cfi_startproc
 2468              		@ Function supports interworking.
 2469              		@ args = 0, pretend = 0, frame = 0
 2470              		@ frame_needed = 0, uses_anonymous_args = 0
 2471 12d8 04E02DE5 		str	lr, [sp, #-4]!
 2472              	.LCFI10:
 2473              		.cfi_def_cfa_offset 4
 2474              		.cfi_offset 14, -4
1196:main.c        **** 	setup_uart0(baud,1);
 2475              		.loc 1 1196 0
 2476 12dc 20009FE5 		ldr	r0, .L228
 2477 12e0 FEFFFFEB 		bl	rprintf
 2478              	.LVL172:
1197:main.c        **** 	stringSize = 512;
 2479              		.loc 1 1197 0
 2480 12e4 1C309FE5 		ldr	r3, .L228+4
 2481 12e8 0110A0E3 		mov	r1, #1
 2482 12ec 100093E5 		ldr	r0, [r3, #16]
 2483 12f0 FEFFFFEB 		bl	setup_uart0
 2484              	.LVL173:
1198:main.c        **** 	mode_action();
 2485              		.loc 1 1198 0
 2486 12f4 10309FE5 		ldr	r3, .L228+8
 2487 12f8 022CA0E3 		mov	r2, #512
 2488 12fc 002083E5 		str	r2, [r3, #0]
1199:main.c        **** 	//rprintf("Exit mode 0\n\r");
 2489              		.loc 1 1199 0
 2490 1300 FEFFFFEB 		bl	mode_action
 2491              	.LVL174:
 2492              	.L229:
 2493              		.align	2
 2494              	.L228:
 2495 1304 12000000 		.word	.LC2
 2496 1308 00000000 		.word	.LANCHOR1
 2497 130c 00000000 		.word	stringSize
 2498              		.cfi_endproc
 2499              	.LFE12:
 2501              		.align	2
 2502              		.global	AD_conversion
 2504              	AD_conversion:
 2505              	.LFB17:
1302:main.c        **** 			}
1303:main.c        **** 			while(1)
1304:main.c        **** 			{
1305:main.c        **** 				stat(0,ON);
1306:main.c        **** 				for(j = 0; j < 500000; j++);
1307:main.c        **** 				stat(0,OFF);
1308:main.c        **** 				stat(1,ON);
1309:main.c        **** 				for(j = 0; j < 500000; j++);
1310:main.c        **** 				stat(1,OFF);
1311:main.c        **** 			}
1312:main.c        **** 		}
1313:main.c        **** 	}
1314:main.c        **** 
1315:main.c        **** }
1316:main.c        **** 
1317:main.c        **** void test(void)
1318:main.c        **** {
1319:main.c        **** 
1320:main.c        **** 	rprintf("\n\rLogomatic V2 Test Code:\n\r");
1321:main.c        **** 	rprintf("ADC Test will begin in 5 seconds, hit stop button to terminate the test.\r\n\n");
1322:main.c        **** 
1323:main.c        **** 	delay_ms(5000);
1324:main.c        **** 
1325:main.c        **** 	while((IOPIN0 & 0x00000008) == 0x00000008)
1326:main.c        **** 	{
1327:main.c        **** 		// Get AD1.3
1328:main.c        **** 		AD1CR = 0x0020FF08;
1329:main.c        **** 		AD_conversion(1);
1330:main.c        **** 
1331:main.c        **** 		// Get AD0.3
1332:main.c        **** 		AD0CR = 0x0020FF08;
1333:main.c        **** 		AD_conversion(0);
1334:main.c        **** 		
1335:main.c        **** 		// Get AD0.2
1336:main.c        **** 		AD0CR = 0x0020FF04;
1337:main.c        **** 		AD_conversion(0);
1338:main.c        **** 
1339:main.c        **** 		// Get AD0.1
1340:main.c        **** 		AD0CR = 0x0020FF02;
1341:main.c        **** 		AD_conversion(0);
1342:main.c        **** 
1343:main.c        **** 		// Get AD1.2
1344:main.c        **** 		AD1CR = 0x0020FF04;
1345:main.c        **** 		AD_conversion(1);
1346:main.c        **** 		
1347:main.c        **** 		// Get AD0.4
1348:main.c        **** 		AD0CR = 0x0020FF10;
1349:main.c        **** 		AD_conversion(0);
1350:main.c        **** 
1351:main.c        **** 		// Get AD1.7
1352:main.c        **** 		AD1CR = 0x0020FF80;
1353:main.c        **** 		AD_conversion(1);
1354:main.c        **** 
1355:main.c        **** 		// Get AD1.6
1356:main.c        **** 		AD1CR = 0x0020FF40;
1357:main.c        **** 		AD_conversion(1);
1358:main.c        **** 
1359:main.c        **** 		delay_ms(1000);
1360:main.c        **** 		rprintf("\n\r");
1361:main.c        **** 	}
1362:main.c        **** 
1363:main.c        **** 	rprintf("\n\rTest complete, locking up...\n\r");
1364:main.c        **** 	while(1);
1365:main.c        **** 		
1366:main.c        **** }
1367:main.c        **** 
1368:main.c        **** void AD_conversion(int regbank)
1369:main.c        **** {
 2506              		.loc 1 1369 0
 2507              		.cfi_startproc
 2508              		@ Function supports interworking.
 2509              		@ args = 0, pretend = 0, frame = 0
 2510              		@ frame_needed = 0, uses_anonymous_args = 0
 2511              	.LVL175:
1370:main.c        **** 	int temp = 0, temp2;
1371:main.c        **** 
1372:main.c        **** 	if(!regbank) // bank 0
 2512              		.loc 1 1372 0
 2513 1310 000050E3 		cmp	r0, #0
1369:main.c        **** 	int temp = 0, temp2;
 2514              		.loc 1 1369 0
 2515 1314 04E02DE5 		str	lr, [sp, #-4]!
 2516              	.LCFI11:
 2517              		.cfi_def_cfa_offset 4
 2518              		.cfi_offset 14, -4
 2519              		.loc 1 1372 0
 2520 1318 0C00001A 		bne	.L231
1373:main.c        **** 	{
1374:main.c        **** 		AD0CR |= 0x01000000; // start conversion
 2521              		.loc 1 1374 0
 2522 131c 78309FE5 		ldr	r3, .L238
 2523 1320 002093E5 		ldr	r2, [r3, #0]
 2524 1324 012482E3 		orr	r2, r2, #16777216
 2525 1328 002083E5 		str	r2, [r3, #0]
 2526              	.LVL176:
 2527              	.L232:
1375:main.c        **** 		while((temp & 0x80000000) == 0)
1376:main.c        **** 		{
1377:main.c        **** 			temp = AD0DR;
 2528              		.loc 1 1377 0
 2529 132c 042093E5 		ldr	r2, [r3, #4]
 2530              	.LVL177:
1375:main.c        **** 		while((temp & 0x80000000) == 0)
 2531              		.loc 1 1375 0
 2532 1330 000052E3 		cmp	r2, #0
 2533 1334 FCFFFFAA 		bge	.L232
 2534              	.LVL178:
1378:main.c        **** 		}
1379:main.c        **** 		temp &= 0x0000FFC0;
 2535              		.loc 1 1379 0
 2536 1338 60109FE5 		ldr	r1, .L238+4
 2537 133c 011002E0 		and	r1, r2, r1
 2538              	.LVL179:
1380:main.c        **** 		temp2 = temp / 0x00000040;
 2539              		.loc 1 1380 0
 2540 1340 4113A0E1 		mov	r1, r1, asr #6
 2541              	.LVL180:
1381:main.c        **** 
1382:main.c        **** 		AD0CR = 0x00000000;
 2542              		.loc 1 1382 0
 2543 1344 0020A0E3 		mov	r2, #0
 2544              	.LVL181:
 2545 1348 4C309FE5 		ldr	r3, .L238
 2546 134c 0B0000EA 		b	.L237
 2547              	.LVL182:
 2548              	.L231:
1383:main.c        **** 	}
1384:main.c        **** 	else	    // bank 1
1385:main.c        **** 	{
1386:main.c        **** 		AD1CR |= 0x01000000; // start conversion
 2549              		.loc 1 1386 0
 2550 1350 4C309FE5 		ldr	r3, .L238+8
 2551 1354 002093E5 		ldr	r2, [r3, #0]
 2552 1358 012482E3 		orr	r2, r2, #16777216
 2553 135c 002083E5 		str	r2, [r3, #0]
 2554              	.LVL183:
 2555              	.L234:
1387:main.c        **** 		while((temp & 0x80000000) == 0)
1388:main.c        **** 		{
1389:main.c        **** 			temp = AD1DR;
 2556              		.loc 1 1389 0
 2557 1360 042093E5 		ldr	r2, [r3, #4]
 2558              	.LVL184:
1387:main.c        **** 		while((temp & 0x80000000) == 0)
 2559              		.loc 1 1387 0
 2560 1364 000052E3 		cmp	r2, #0
 2561 1368 FCFFFFAA 		bge	.L234
 2562              	.LVL185:
1390:main.c        **** 		}
1391:main.c        **** 		temp &= 0x0000FFC0;
 2563              		.loc 1 1391 0
 2564 136c 2C109FE5 		ldr	r1, .L238+4
1392:main.c        **** 		temp2 = temp / 0x00000040;
1393:main.c        **** 
1394:main.c        **** 		AD1CR = 0x00000000;
 2565              		.loc 1 1394 0
 2566 1370 2C309FE5 		ldr	r3, .L238+8
1391:main.c        **** 		temp2 = temp / 0x00000040;
 2567              		.loc 1 1391 0
 2568 1374 011002E0 		and	r1, r2, r1
 2569              	.LVL186:
1392:main.c        **** 		temp2 = temp / 0x00000040;
 2570              		.loc 1 1392 0
 2571 1378 4113A0E1 		mov	r1, r1, asr #6
 2572              	.LVL187:
 2573              		.loc 1 1394 0
 2574 137c 0020A0E3 		mov	r2, #0
 2575              	.LVL188:
 2576              	.L237:
 2577 1380 002083E5 		str	r2, [r3, #0]
1395:main.c        **** 	}
1396:main.c        **** 
1397:main.c        **** 	rprintf("%d", temp2);
 2578              		.loc 1 1397 0
 2579 1384 1C009FE5 		ldr	r0, .L238+12
 2580              	.LVL189:
 2581 1388 FEFFFFEB 		bl	rprintf
 2582              	.LVL190:
1398:main.c        **** 	rprintf("   ");
 2583              		.loc 1 1398 0
 2584 138c 18009FE5 		ldr	r0, .L238+16
 2585 1390 FEFFFFEB 		bl	rprintf
 2586              	.LVL191:
1399:main.c        **** 	
1400:main.c        **** }
 2587              		.loc 1 1400 0
 2588 1394 04E09DE4 		ldr	lr, [sp], #4
 2589 1398 1EFF2FE1 		bx	lr
 2590              	.L239:
 2591              		.align	2
 2592              	.L238:
 2593 139c 004003E0 		.word	-536657920
 2594 13a0 C0FF0000 		.word	65472
 2595 13a4 000006E0 		.word	-536477696
 2596 13a8 1B000000 		.word	.LC3
 2597 13ac 1E000000 		.word	.LC4
 2598              		.cfi_endproc
 2599              	.LFE17:
 2601              		.align	2
 2602              		.global	fat_initialize
 2604              	fat_initialize:
 2605              	.LFB18:
1401:main.c        **** 
1402:main.c        **** void fat_initialize(void)
1403:main.c        **** {
 2606              		.loc 1 1403 0
 2607              		.cfi_startproc
 2608              		@ Function supports interworking.
 2609              		@ args = 0, pretend = 0, frame = 0
 2610              		@ frame_needed = 0, uses_anonymous_args = 0
 2611 13b0 04E02DE5 		str	lr, [sp, #-4]!
 2612              	.LCFI12:
 2613              		.cfi_def_cfa_offset 4
 2614              		.cfi_offset 14, -4
1404:main.c        **** 	if(!sd_raw_init())
 2615              		.loc 1 1404 0
 2616 13b4 FEFFFFEB 		bl	sd_raw_init
 2617              	.LVL192:
 2618 13b8 000050E3 		cmp	r0, #0
 2619 13bc 0200001A 		bne	.L241
1405:main.c        **** 	{
1406:main.c        **** 		rprintf("SD Init Error\n\r");
 2620              		.loc 1 1406 0
 2621 13c0 1C009FE5 		ldr	r0, .L247
 2622 13c4 FEFFFFEB 		bl	rprintf
 2623              	.LVL193:
 2624              	.L242:
 2625 13c8 FEFFFFEA 		b	.L242
 2626              	.L241:
1407:main.c        **** 		while(1);
1408:main.c        **** 	}
1409:main.c        **** 
1410:main.c        **** 	if(openroot())
 2627              		.loc 1 1410 0
 2628 13cc FEFFFFEB 		bl	openroot
 2629              	.LVL194:
 2630 13d0 000050E3 		cmp	r0, #0
1411:main.c        **** 	{ 
1412:main.c        **** 		rprintf("SD OpenRoot Error\n\r");
 2631              		.loc 1 1412 0
 2632 13d4 0C009F15 		ldrne	r0, .L247+4
 2633 13d8 FEFFFF1B 		blne	rprintf
 2634              	.LVL195:
 2635              	.L240:
1413:main.c        **** 	}
1414:main.c        **** }
 2636              		.loc 1 1414 0
 2637 13dc 04E09DE4 		ldr	lr, [sp], #4
 2638 13e0 1EFF2FE1 		bx	lr
 2639              	.L248:
 2640              		.align	2
 2641              	.L247:
 2642 13e4 22000000 		.word	.LC5
 2643 13e8 32000000 		.word	.LC6
 2644              		.cfi_endproc
 2645              	.LFE18:
 2647              		.align	2
 2648              		.global	delay_ms
 2650              	delay_ms:
 2651              	.LFB19:
1415:main.c        **** 
1416:main.c        **** void delay_ms(int count)
1417:main.c        **** {
 2652              		.loc 1 1417 0
 2653              		.cfi_startproc
 2654              		@ Function supports interworking.
 2655              		@ args = 0, pretend = 0, frame = 0
 2656              		@ frame_needed = 0, uses_anonymous_args = 0
 2657              		@ link register save eliminated.
 2658              	.LVL196:
1418:main.c        **** 	int i;
1419:main.c        **** 	count *= 10000;
 2659              		.loc 1 1419 0
 2660 13ec 1C309FE5 		ldr	r3, .L252
 2661 13f0 930000E0 		mul	r0, r3, r0
 2662              	.LVL197:
1420:main.c        **** 	for(i = 0; i < count; i++)
 2663              		.loc 1 1420 0
 2664 13f4 0030A0E3 		mov	r3, #0
 2665 13f8 010000EA 		b	.L250
 2666              	.LVL198:
 2667              	.L251:
1421:main.c        **** 		asm volatile ("nop");
 2668              		.loc 1 1421 0 discriminator 2
 2669              	@ 1421 "main.c" 1
 2670 13fc 0000A0E1 		nop
 2671              	@ 0 "" 2
1420:main.c        **** 	for(i = 0; i < count; i++)
 2672              		.loc 1 1420 0 discriminator 2
 2673 1400 013083E2 		add	r3, r3, #1
 2674              	.LVL199:
 2675              	.L250:
1420:main.c        **** 	for(i = 0; i < count; i++)
 2676              		.loc 1 1420 0 is_stmt 0 discriminator 1
 2677 1404 000053E1 		cmp	r3, r0
 2678 1408 FBFFFFBA 		blt	.L251
1422:main.c        **** }
 2679              		.loc 1 1422 0 is_stmt 1
 2680 140c 1EFF2FE1 		bx	lr
 2681              	.L253:
 2682              		.align	2
 2683              	.L252:
 2684 1410 10270000 		.word	10000
 2685              		.cfi_endproc
 2686              	.LFE19:
 2688              		.align	2
 2689              		.global	test
 2691              	test:
 2692              	.LFB16:
1318:main.c        **** 
 2693              		.loc 1 1318 0
 2694              		.cfi_startproc
 2695              		@ Function supports interworking.
 2696              		@ args = 0, pretend = 0, frame = 0
 2697              		@ frame_needed = 0, uses_anonymous_args = 0
 2698 1414 F0412DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, lr}
 2699              	.LCFI13:
 2700              		.cfi_def_cfa_offset 24
 2701              		.cfi_offset 4, -24
 2702              		.cfi_offset 5, -20
 2703              		.cfi_offset 6, -16
 2704              		.cfi_offset 7, -12
 2705              		.cfi_offset 8, -8
 2706              		.cfi_offset 14, -4
1320:main.c        **** 	rprintf("ADC Test will begin in 5 seconds, hit stop button to terminate the test.\r\n\n");
 2707              		.loc 1 1320 0
 2708 1418 C0009FE5 		ldr	r0, .L258
 2709 141c FEFFFFEB 		bl	rprintf
 2710              	.LVL200:
1321:main.c        **** 
 2711              		.loc 1 1321 0
 2712 1420 BC009FE5 		ldr	r0, .L258+4
 2713 1424 FEFFFFEB 		bl	rprintf
 2714              	.LVL201:
1323:main.c        **** 
 2715              		.loc 1 1323 0
 2716 1428 B8009FE5 		ldr	r0, .L258+8
 2717 142c FEFFFFEB 		bl	delay_ms
 2718              	.LVL202:
1325:main.c        **** 	{
 2719              		.loc 1 1325 0
 2720 1430 B4809FE5 		ldr	r8, .L258+12
1328:main.c        **** 		AD_conversion(1);
 2721              		.loc 1 1328 0
 2722 1434 B4409FE5 		ldr	r4, .L258+16
 2723 1438 B4609FE5 		ldr	r6, .L258+20
1325:main.c        **** 	{
 2724              		.loc 1 1325 0
 2725 143c 210000EA 		b	.L255
 2726              	.L256:
1332:main.c        **** 		AD_conversion(0);
 2727              		.loc 1 1332 0
 2728 1440 B0509FE5 		ldr	r5, .L258+24
1329:main.c        **** 
 2729              		.loc 1 1329 0
 2730 1444 0100A0E3 		mov	r0, #1
1336:main.c        **** 		AD_conversion(0);
 2731              		.loc 1 1336 0
 2732 1448 AC709FE5 		ldr	r7, .L258+28
1328:main.c        **** 		AD_conversion(1);
 2733              		.loc 1 1328 0
 2734 144c 006084E5 		str	r6, [r4, #0]
1329:main.c        **** 
 2735              		.loc 1 1329 0
 2736 1450 FEFFFFEB 		bl	AD_conversion
 2737              	.LVL203:
1333:main.c        **** 		
 2738              		.loc 1 1333 0
 2739 1454 0000A0E3 		mov	r0, #0
1332:main.c        **** 		AD_conversion(0);
 2740              		.loc 1 1332 0
 2741 1458 006085E5 		str	r6, [r5, #0]
1333:main.c        **** 		
 2742              		.loc 1 1333 0
 2743 145c FEFFFFEB 		bl	AD_conversion
 2744              	.LVL204:
1337:main.c        **** 
 2745              		.loc 1 1337 0
 2746 1460 0000A0E3 		mov	r0, #0
1336:main.c        **** 		AD_conversion(0);
 2747              		.loc 1 1336 0
 2748 1464 007085E5 		str	r7, [r5, #0]
1337:main.c        **** 
 2749              		.loc 1 1337 0
 2750 1468 FEFFFFEB 		bl	AD_conversion
 2751              	.LVL205:
1340:main.c        **** 		AD_conversion(0);
 2752              		.loc 1 1340 0
 2753 146c 8C309FE5 		ldr	r3, .L258+32
1341:main.c        **** 
 2754              		.loc 1 1341 0
 2755 1470 0000A0E3 		mov	r0, #0
1340:main.c        **** 		AD_conversion(0);
 2756              		.loc 1 1340 0
 2757 1474 003085E5 		str	r3, [r5, #0]
1341:main.c        **** 
 2758              		.loc 1 1341 0
 2759 1478 FEFFFFEB 		bl	AD_conversion
 2760              	.LVL206:
1345:main.c        **** 		
 2761              		.loc 1 1345 0
 2762 147c 0100A0E3 		mov	r0, #1
1344:main.c        **** 		AD_conversion(1);
 2763              		.loc 1 1344 0
 2764 1480 007084E5 		str	r7, [r4, #0]
1345:main.c        **** 		
 2765              		.loc 1 1345 0
 2766 1484 FEFFFFEB 		bl	AD_conversion
 2767              	.LVL207:
1348:main.c        **** 		AD_conversion(0);
 2768              		.loc 1 1348 0
 2769 1488 74309FE5 		ldr	r3, .L258+36
1349:main.c        **** 
 2770              		.loc 1 1349 0
 2771 148c 0000A0E3 		mov	r0, #0
1348:main.c        **** 		AD_conversion(0);
 2772              		.loc 1 1348 0
 2773 1490 003085E5 		str	r3, [r5, #0]
1349:main.c        **** 
 2774              		.loc 1 1349 0
 2775 1494 FEFFFFEB 		bl	AD_conversion
 2776              	.LVL208:
1352:main.c        **** 		AD_conversion(1);
 2777              		.loc 1 1352 0
 2778 1498 68309FE5 		ldr	r3, .L258+40
1353:main.c        **** 
 2779              		.loc 1 1353 0
 2780 149c 0100A0E3 		mov	r0, #1
1352:main.c        **** 		AD_conversion(1);
 2781              		.loc 1 1352 0
 2782 14a0 003084E5 		str	r3, [r4, #0]
1353:main.c        **** 
 2783              		.loc 1 1353 0
 2784 14a4 FEFFFFEB 		bl	AD_conversion
 2785              	.LVL209:
1356:main.c        **** 		AD_conversion(1);
 2786              		.loc 1 1356 0
 2787 14a8 5C309FE5 		ldr	r3, .L258+44
1357:main.c        **** 
 2788              		.loc 1 1357 0
 2789 14ac 0100A0E3 		mov	r0, #1
1356:main.c        **** 		AD_conversion(1);
 2790              		.loc 1 1356 0
 2791 14b0 003084E5 		str	r3, [r4, #0]
1357:main.c        **** 
 2792              		.loc 1 1357 0
 2793 14b4 FEFFFFEB 		bl	AD_conversion
 2794              	.LVL210:
1359:main.c        **** 		rprintf("\n\r");
 2795              		.loc 1 1359 0
 2796 14b8 FA0FA0E3 		mov	r0, #1000
 2797 14bc FEFFFFEB 		bl	delay_ms
 2798              	.LVL211:
1360:main.c        **** 	}
 2799              		.loc 1 1360 0
 2800 14c0 48009FE5 		ldr	r0, .L258+48
 2801 14c4 FEFFFFEB 		bl	rprintf
 2802              	.LVL212:
 2803              	.L255:
1325:main.c        **** 	{
 2804              		.loc 1 1325 0 discriminator 1
 2805 14c8 003098E5 		ldr	r3, [r8, #0]
 2806 14cc 080013E3 		tst	r3, #8
 2807 14d0 DAFFFF1A 		bne	.L256
1363:main.c        **** 	while(1);
 2808              		.loc 1 1363 0
 2809 14d4 38009FE5 		ldr	r0, .L258+52
 2810 14d8 FEFFFFEB 		bl	rprintf
 2811              	.LVL213:
 2812              	.L257:
 2813 14dc FEFFFFEA 		b	.L257
 2814              	.L259:
 2815              		.align	2
 2816              	.L258:
 2817 14e0 46000000 		.word	.LC7
 2818 14e4 62000000 		.word	.LC8
 2819 14e8 88130000 		.word	5000
 2820 14ec 008002E0 		.word	-536707072
 2821 14f0 000006E0 		.word	-536477696
 2822 14f4 08FF2000 		.word	2162440
 2823 14f8 004003E0 		.word	-536657920
 2824 14fc 04FF2000 		.word	2162436
 2825 1500 02FF2000 		.word	2162434
 2826 1504 10FF2000 		.word	2162448
 2827 1508 80FF2000 		.word	2162560
 2828 150c 40FF2000 		.word	2162496
 2829 1510 AE000000 		.word	.LC9
 2830 1514 B1000000 		.word	.LC10
 2831              		.cfi_endproc
 2832              	.LFE16:
 2834              		.align	2
 2835              		.global	Log_init
 2837              	Log_init:
 2838              	.LFB11:
1029:main.c        **** 	int x, mark = 0, ind = 0;
 2839              		.loc 1 1029 0
 2840              		.cfi_startproc
 2841              		@ Function supports interworking.
 2842              		@ args = 0, pretend = 0, frame = 0
 2843              		@ frame_needed = 0, uses_anonymous_args = 0
 2844              	.LVL214:
 2845 1518 F04F2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 2846              	.LCFI14:
 2847              		.cfi_def_cfa_offset 36
 2848              		.cfi_offset 4, -36
 2849              		.cfi_offset 5, -32
 2850              		.cfi_offset 6, -28
 2851              		.cfi_offset 7, -24
 2852              		.cfi_offset 8, -20
 2853              		.cfi_offset 9, -16
 2854              		.cfi_offset 10, -12
 2855              		.cfi_offset 11, -8
 2856              		.cfi_offset 14, -4
1034:main.c        **** 	{
 2857              		.loc 1 1034 0
 2858 151c 08059FE5 		ldr	r0, .L328
 2859 1520 FEFFFFEB 		bl	root_file_exists
 2860              	.LVL215:
 2861 1524 000050E3 		cmp	r0, #0
 2862 1528 00459FE5 		ldr	r4, .L328+4
1037:main.c        **** 		stringSize = fat_read_file(fd, (unsigned char *)stringBuf, 512);
 2863              		.loc 1 1037 0
 2864 152c F8049FE5 		ldr	r0, .L328
1034:main.c        **** 	{
 2865              		.loc 1 1034 0
 2866 1530 0C00000A 		beq	.L261
1037:main.c        **** 		stringSize = fat_read_file(fd, (unsigned char *)stringBuf, 512);
 2867              		.loc 1 1037 0
 2868 1534 FEFFFFEB 		bl	root_open
 2869              	.LVL216:
1038:main.c        **** 		stringBuf[stringSize] = '\0';
 2870              		.loc 1 1038 0
 2871 1538 F4549FE5 		ldr	r5, .L328+8
 2872 153c 022CA0E3 		mov	r2, #512
 2873 1540 0510A0E1 		mov	r1, r5
1037:main.c        **** 		stringSize = fat_read_file(fd, (unsigned char *)stringBuf, 512);
 2874              		.loc 1 1037 0
 2875 1544 000084E5 		str	r0, [r4, #0]
1038:main.c        **** 		stringBuf[stringSize] = '\0';
 2876              		.loc 1 1038 0
 2877 1548 FEFFFFEB 		bl	fat_read_file
 2878              	.LVL217:
 2879 154c E4349FE5 		ldr	r3, .L328+12
 2880 1550 000083E5 		str	r0, [r3, #0]
1039:main.c        **** 		fat_close_file(fd);
 2881              		.loc 1 1039 0
 2882 1554 0030A0E3 		mov	r3, #0
 2883 1558 0030C5E7 		strb	r3, [r5, r0]
1040:main.c        **** 	}
 2884              		.loc 1 1040 0
 2885 155c 000094E5 		ldr	r0, [r4, #0]
 2886 1560 FEFFFFEB 		bl	fat_close_file
 2887              	.LVL218:
 2888 1564 1F0000EA 		b	.L262
 2889              	.L261:
1045:main.c        **** 		if(fd == NULL)
 2890              		.loc 1 1045 0
 2891 1568 FEFFFFEB 		bl	root_open_new
 2892              	.LVL219:
1046:main.c        **** 		{
 2893              		.loc 1 1046 0
 2894 156c 000050E3 		cmp	r0, #0
1045:main.c        **** 		if(fd == NULL)
 2895              		.loc 1 1045 0
 2896 1570 0050A0E1 		mov	r5, r0
 2897 1574 000084E5 		str	r0, [r4, #0]
1046:main.c        **** 		{
 2898              		.loc 1 1046 0
 2899 1578 0E00001A 		bne	.L263
1048:main.c        **** 		 	while(1)
 2900              		.loc 1 1048 0
 2901 157c B8049FE5 		ldr	r0, .L328+16
 2902 1580 FEFFFFEB 		bl	rprintf
 2903              	.LVL220:
 2904              	.LBB156:
 2905              	.LBB157:
1023:main.c        **** 		else { IOSET0 = 0x00000004; } // Off
 2906              		.loc 1 1023 0
 2907 1584 0450A0E3 		mov	r5, #4
 2908 1588 B0449FE5 		ldr	r4, .L328+20
 2909 158c 0570A0E1 		mov	r7, r5
 2910              	.L264:
 2911              	.LVL221:
 2912              	.LBE157:
 2913              	.LBE156:
1052:main.c        **** 				stat(0,OFF);
 2914              		.loc 1 1052 0 discriminator 1
 2915 1590 3200A0E3 		mov	r0, #50
 2916              	.LBB159:
 2917              	.LBB160:
 2918              	.LBB161:
1018:main.c        **** 		else { IOSET0 = 0x00000800; } // Off
 2919              		.loc 1 1018 0 discriminator 1
 2920 1594 026BA0E3 		mov	r6, #2048
 2921              	.LBE161:
 2922              	.LBE160:
 2923              	.LBE159:
 2924              	.LBB164:
 2925              	.LBB158:
1023:main.c        **** 		else { IOSET0 = 0x00000004; } // Off
 2926              		.loc 1 1023 0 discriminator 1
 2927 1598 0C7084E5 		str	r7, [r4, #12]
 2928              	.LBE158:
 2929              	.LBE164:
1052:main.c        **** 				stat(0,OFF);
 2930              		.loc 1 1052 0 discriminator 1
 2931 159c FEFFFFEB 		bl	delay_ms
 2932              	.LVL222:
 2933              	.LBB165:
 2934              	.LBB166:
1024:main.c        **** 	}
 2935              		.loc 1 1024 0 discriminator 1
 2936 15a0 045084E5 		str	r5, [r4, #4]
 2937              	.LVL223:
 2938              	.LBE166:
 2939              	.LBE165:
1055:main.c        **** 				stat(1,OFF);
 2940              		.loc 1 1055 0 discriminator 1
 2941 15a4 3200A0E3 		mov	r0, #50
 2942              	.LBB167:
 2943              	.LBB163:
 2944              	.LBB162:
1018:main.c        **** 		else { IOSET0 = 0x00000800; } // Off
 2945              		.loc 1 1018 0 discriminator 1
 2946 15a8 0C6084E5 		str	r6, [r4, #12]
 2947              	.LBE162:
 2948              	.LBE163:
 2949              	.LBE167:
1055:main.c        **** 				stat(1,OFF);
 2950              		.loc 1 1055 0 discriminator 1
 2951 15ac FEFFFFEB 		bl	delay_ms
 2952              	.LVL224:
 2953              	.LBB168:
 2954              	.LBB169:
 2955              	.LBB170:
1019:main.c        **** 	}
 2956              		.loc 1 1019 0 discriminator 1
 2957 15b0 046084E5 		str	r6, [r4, #4]
 2958 15b4 F5FFFFEA 		b	.L264
 2959              	.LVL225:
 2960              	.L263:
 2961              	.LBE170:
 2962              	.LBE169:
 2963              	.LBE168:
1060:main.c        **** 		stringSize = strlen(stringBuf);
 2964              		.loc 1 1060 0
 2965 15b8 84149FE5 		ldr	r1, .L328+24
 2966 15bc 70049FE5 		ldr	r0, .L328+8
 2967 15c0 FEFFFFEB 		bl	strcpy
 2968              	.LVL226:
1061:main.c        **** 		fat_write_file(fd, (unsigned char*)stringBuf, stringSize);
 2969              		.loc 1 1061 0
 2970 15c4 68049FE5 		ldr	r0, .L328+8
 2971 15c8 FEFFFFEB 		bl	strlen
 2972              	.LVL227:
 2973 15cc 64349FE5 		ldr	r3, .L328+12
 2974 15d0 0020A0E1 		mov	r2, r0
 2975 15d4 000083E5 		str	r0, [r3, #0]
1062:main.c        **** 		sd_raw_sync();
 2976              		.loc 1 1062 0
 2977 15d8 54149FE5 		ldr	r1, .L328+8
 2978 15dc 0500A0E1 		mov	r0, r5
 2979 15e0 FEFFFFEB 		bl	fat_write_file
 2980              	.LVL228:
1063:main.c        **** 	}
 2981              		.loc 1 1063 0
 2982 15e4 FEFFFFEB 		bl	sd_raw_sync
 2983              	.LVL229:
 2984              	.L262:
1029:main.c        **** 	int x, mark = 0, ind = 0;
 2985              		.loc 1 1029 0 discriminator 1
 2986 15e8 0080A0E3 		mov	r8, #0
 2987 15ec 54649FE5 		ldr	r6, .L328+28
 2988 15f0 0840A0E1 		mov	r4, r8
 2989 15f4 0870A0E1 		mov	r7, r8
 2990 15f8 08A0A0E1 		mov	sl, r8
1066:main.c        **** 	{
 2991              		.loc 1 1066 0 discriminator 1
 2992 15fc 34B49FE5 		ldr	fp, .L328+12
1162:main.c        **** 				if(ad1_6 == 'Y'){ temp2++; }
 2993              		.loc 1 1162 0 discriminator 1
 2994 1600 44549FE5 		ldr	r5, .L328+32
1115:main.c        **** 				rprintf("frame = %d\n\r",frame);
 2995              		.loc 1 1115 0 discriminator 1
 2996 1604 44949FE5 		ldr	r9, .L328+36
 2997 1608 B00000EA 		b	.L265
 2998              	.LVL230:
 2999              	.L302:
1069:main.c        **** 		{
 3000              		.loc 1 1069 0
 3001 160c 0130F6E5 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
 3002              	.LVL231:
 3003 1610 0A0053E3 		cmp	r3, #10
 3004 1614 AC00001A 		bne	.L266
 3005              	.LVL232:
1072:main.c        **** 			if(ind == 1)
 3006              		.loc 1 1072 0
 3007 1618 017087E2 		add	r7, r7, #1
 3008              	.LVL233:
1073:main.c        **** 			{
 3009              		.loc 1 1073 0
 3010 161c 010057E3 		cmp	r7, #1
 3011 1620 0600001A 		bne	.L267
1075:main.c        **** 				rprintf("mode = %d\n\r",mode);
 3012              		.loc 1 1075 0
 3013 1624 021056E5 		ldrb	r1, [r6, #-2]	@ zero_extendqisi2
 3014 1628 24349FE5 		ldr	r3, .L328+40
 3015 162c 301041E2 		sub	r1, r1, #48
 3016 1630 FF1001E2 		and	r1, r1, #255
 3017 1634 0510C3E5 		strb	r1, [r3, #5]
1076:main.c        **** 			}
 3018              		.loc 1 1076 0
 3019 1638 18049FE5 		ldr	r0, .L328+44
 3020 163c A10000EA 		b	.L323
 3021              	.L267:
1078:main.c        **** 			{
 3022              		.loc 1 1078 0
 3023 1640 020057E3 		cmp	r7, #2
1080:main.c        **** 				rprintf("asc = %c\n\r",asc);
 3024              		.loc 1 1080 0
 3025 1644 02105605 		ldreqb	r1, [r6, #-2]	@ zero_extendqisi2
1081:main.c        **** 			}
 3026              		.loc 1 1081 0
 3027 1648 0C049F05 		ldreq	r0, .L328+48
1080:main.c        **** 				rprintf("asc = %c\n\r",asc);
 3028              		.loc 1 1080 0
 3029 164c 0510C505 		streqb	r1, [r5, #5]
 3030 1650 9C00000A 		beq	.L323
 3031              	.L268:
1083:main.c        **** 			{
 3032              		.loc 1 1083 0
 3033 1654 030057E3 		cmp	r7, #3
 3034 1658 1C00001A 		bne	.L269
1085:main.c        **** 				else if(stringBuf[mark-2] == '2'){ baud = 2400; }
 3035              		.loc 1 1085 0
 3036 165c 023056E5 		ldrb	r3, [r6, #-2]	@ zero_extendqisi2
 3037 1660 310053E3 		cmp	r3, #49
 3038 1664 4B3EA003 		moveq	r3, #1200
 3039 1668 1400000A 		beq	.L322
 3040              	.L270:
1086:main.c        **** 				else if(stringBuf[mark-2] == '3'){ baud = 4800; }
 3041              		.loc 1 1086 0
 3042 166c 320053E3 		cmp	r3, #50
 3043 1670 963EA003 		moveq	r3, #2400
 3044 1674 1100000A 		beq	.L322
 3045              	.L272:
1087:main.c        **** 				else if(stringBuf[mark-2] == '4'){ baud = 9600; }
 3046              		.loc 1 1087 0
 3047 1678 330053E3 		cmp	r3, #51
 3048 167c 4B3DA003 		moveq	r3, #4800
 3049 1680 0E00000A 		beq	.L322
 3050              	.L273:
1088:main.c        **** 				else if(stringBuf[mark-2] == '5'){ baud = 19200; }
 3051              		.loc 1 1088 0
 3052 1684 340053E3 		cmp	r3, #52
 3053 1688 963DA003 		moveq	r3, #9600
 3054 168c 0B00000A 		beq	.L322
 3055              	.L274:
1089:main.c        **** 				else if(stringBuf[mark-2] == '6'){ baud = 38400; }
 3056              		.loc 1 1089 0
 3057 1690 350053E3 		cmp	r3, #53
 3058 1694 4B3CA003 		moveq	r3, #19200
 3059 1698 0800000A 		beq	.L322
 3060              	.L275:
1090:main.c        **** 				else if(stringBuf[mark-2] == '7'){ baud = 57600; }
 3061              		.loc 1 1090 0
 3062 169c 360053E3 		cmp	r3, #54
 3063 16a0 963CA003 		moveq	r3, #38400
 3064 16a4 0500000A 		beq	.L322
 3065              	.L276:
1091:main.c        **** 				else if(stringBuf[mark-2] == '8'){ baud = 115200; }
 3066              		.loc 1 1091 0
 3067 16a8 370053E3 		cmp	r3, #55
 3068 16ac E13CA003 		moveq	r3, #57600
 3069 16b0 0200000A 		beq	.L322
 3070              	.L277:
1092:main.c        **** 
 3071              		.loc 1 1092 0
 3072 16b4 380053E3 		cmp	r3, #56
 3073 16b8 0100001A 		bne	.L271
1092:main.c        **** 
 3074              		.loc 1 1092 0 is_stmt 0 discriminator 1
 3075 16bc 9C339FE5 		ldr	r3, .L328+52
 3076              	.L322:
 3077 16c0 103085E5 		str	r3, [r5, #16]
 3078              	.L271:
1094:main.c        **** 			}
 3079              		.loc 1 1094 0 is_stmt 1
 3080 16c4 98039FE5 		ldr	r0, .L328+56
 3081 16c8 101095E5 		ldr	r1, [r5, #16]
 3082 16cc 7D0000EA 		b	.L323
 3083              	.L269:
1096:main.c        **** 			{
 3084              		.loc 1 1096 0
 3085 16d0 040057E3 		cmp	r7, #4
 3086 16d4 1700001A 		bne	.L278
1098:main.c        **** 				if((stringBuf[mark-4] >= 48) && (stringBuf[mark-4] < 58))
 3087              		.loc 1 1098 0
 3088 16d8 022056E5 		ldrb	r2, [r6, #-2]	@ zero_extendqisi2
 3089 16dc 031056E5 		ldrb	r1, [r6, #-3]	@ zero_extendqisi2
 3090 16e0 912323E0 		mla	r3, r1, r3, r2
1099:main.c        **** 				{
 3091              		.loc 1 1099 0
 3092 16e4 042056E5 		ldrb	r2, [r6, #-4]	@ zero_extendqisi2
 3093 16e8 301042E2 		sub	r1, r2, #48
1098:main.c        **** 				if((stringBuf[mark-4] >= 48) && (stringBuf[mark-4] < 58))
 3094              		.loc 1 1098 0
 3095 16ec 213E43E2 		sub	r3, r3, #528
1099:main.c        **** 				{
 3096              		.loc 1 1099 0
 3097 16f0 090051E3 		cmp	r1, #9
1098:main.c        **** 				if((stringBuf[mark-4] >= 48) && (stringBuf[mark-4] < 58))
 3098              		.loc 1 1098 0
 3099 16f4 143085E5 		str	r3, [r5, #20]
1099:main.c        **** 				{
 3100              		.loc 1 1099 0
 3101 16f8 0B00008A 		bhi	.L280
1101:main.c        **** 					if((stringBuf[mark-5] >= 48) && (stringBuf[mark-5] < 58)){ freq += (stringBuf[mark-5]-48)*1000
 3102              		.loc 1 1101 0
 3103 16fc 6410A0E3 		mov	r1, #100
 3104 1700 913222E0 		mla	r2, r1, r2, r3
1102:main.c        **** 				}
 3105              		.loc 1 1102 0
 3106 1704 053056E5 		ldrb	r3, [r6, #-5]	@ zero_extendqisi2
 3107 1708 301043E2 		sub	r1, r3, #48
 3108 170c 090051E3 		cmp	r1, #9
1101:main.c        **** 					if((stringBuf[mark-5] >= 48) && (stringBuf[mark-5] < 58)){ freq += (stringBuf[mark-5]-48)*1000
 3109              		.loc 1 1101 0
 3110 1710 4B2D42E2 		sub	r2, r2, #4800
1102:main.c        **** 				}
 3111              		.loc 1 1102 0
 3112 1714 FA1FA093 		movls	r1, #1000
 3113 1718 91232390 		mlals	r3, r1, r3, r2
 3114 171c BB3C4392 		subls	r3, r3, #47872
 3115 1720 80304392 		subls	r3, r3, #128
1101:main.c        **** 					if((stringBuf[mark-5] >= 48) && (stringBuf[mark-5] < 58)){ freq += (stringBuf[mark-5]-48)*1000
 3116              		.loc 1 1101 0
 3117 1724 142085E5 		str	r2, [r5, #20]
1102:main.c        **** 				}
 3118              		.loc 1 1102 0
 3119 1728 14308595 		strls	r3, [r5, #20]
 3120              	.L280:
1104:main.c        **** 			}
 3121              		.loc 1 1104 0
 3122 172c 34039FE5 		ldr	r0, .L328+60
 3123 1730 141095E5 		ldr	r1, [r5, #20]
 3124 1734 630000EA 		b	.L323
 3125              	.L278:
1106:main.c        **** 			{
 3126              		.loc 1 1106 0
 3127 1738 050057E3 		cmp	r7, #5
1108:main.c        **** 				
 3128              		.loc 1 1108 0
 3129 173c 02105605 		ldreqb	r1, [r6, #-2]	@ zero_extendqisi2
1110:main.c        **** 			}
 3130              		.loc 1 1110 0
 3131 1740 24039F05 		ldreq	r0, .L328+64
1108:main.c        **** 				
 3132              		.loc 1 1108 0
 3133 1744 0010C505 		streqb	r1, [r5, #0]
 3134 1748 5E00000A 		beq	.L323
 3135              	.L282:
1112:main.c        **** 			{
 3136              		.loc 1 1112 0
 3137 174c 060057E3 		cmp	r7, #6
 3138 1750 0F00001A 		bne	.L283
1114:main.c        **** 				if(frame > 510){ frame = 510; } // up to 510 characters
 3139              		.loc 1 1114 0
 3140 1754 022056E5 		ldrb	r2, [r6, #-2]	@ zero_extendqisi2
 3141 1758 031056E5 		ldrb	r1, [r6, #-3]	@ zero_extendqisi2
 3142 175c 532D42E2 		sub	r2, r2, #5312
 3143 1760 102042E2 		sub	r2, r2, #16
 3144 1764 932122E0 		mla	r2, r3, r1, r2
 3145 1768 043056E5 		ldrb	r3, [r6, #-4]	@ zero_extendqisi2
 3146 176c 6410A0E3 		mov	r1, #100
 3147 1770 912323E0 		mla	r3, r1, r3, r2
 3148 1774 0338A0E1 		mov	r3, r3, asl #16
1115:main.c        **** 				rprintf("frame = %d\n\r",frame);
 3149              		.loc 1 1115 0
 3150 1778 430859E1 		cmp	r9, r3, asr #16
 3151 177c 2328A0E1 		mov	r2, r3, lsr #16
1114:main.c        **** 				if(frame > 510){ frame = 510; } // up to 510 characters
 3152              		.loc 1 1114 0
 3153 1780 B220C5A1 		strgeh	r2, [r5, #2]	@ movhi
1115:main.c        **** 				rprintf("frame = %d\n\r",frame);
 3154              		.loc 1 1115 0
 3155 1784 B290C5B1 		strlth	r9, [r5, #2]	@ movhi
1116:main.c        **** 			}
 3156              		.loc 1 1116 0
 3157 1788 E0029FE5 		ldr	r0, .L328+68
 3158 178c F210D5E1 		ldrsh	r1, [r5, #2]
 3159 1790 4C0000EA 		b	.L323
 3160              	.L283:
1118:main.c        **** 			{
 3161              		.loc 1 1118 0
 3162 1794 070057E3 		cmp	r7, #7
 3163 1798 0600001A 		bne	.L286
1120:main.c        **** 				if(ad1_3 == 'Y'){ temp2++; }
 3164              		.loc 1 1120 0
 3165 179c 021056E5 		ldrb	r1, [r6, #-2]	@ zero_extendqisi2
1121:main.c        **** 				rprintf("ad1_3 = %c\n\r",ad1_3);
 3166              		.loc 1 1121 0
 3167 17a0 590051E3 		cmp	r1, #89
 3168 17a4 01408402 		addeq	r4, r4, #1
 3169              	.LVL234:
1120:main.c        **** 				if(ad1_3 == 'Y'){ temp2++; }
 3170              		.loc 1 1120 0
 3171 17a8 0410C5E5 		strb	r1, [r5, #4]
1121:main.c        **** 				rprintf("ad1_3 = %c\n\r",ad1_3);
 3172              		.loc 1 1121 0
 3173 17ac FF400402 		andeq	r4, r4, #255
 3174              	.LVL235:
1122:main.c        **** 			}
 3175              		.loc 1 1122 0
 3176 17b0 BC029FE5 		ldr	r0, .L328+72
 3177 17b4 430000EA 		b	.L323
 3178              	.L286:
1124:main.c        **** 			{
 3179              		.loc 1 1124 0
 3180 17b8 080057E3 		cmp	r7, #8
 3181 17bc 0600001A 		bne	.L288
1126:main.c        **** 				if(ad0_3 == 'Y'){ temp2++; }
 3182              		.loc 1 1126 0
 3183 17c0 021056E5 		ldrb	r1, [r6, #-2]	@ zero_extendqisi2
1127:main.c        **** 				rprintf("ad0_3 = %c\n\r",ad0_3);
 3184              		.loc 1 1127 0
 3185 17c4 590051E3 		cmp	r1, #89
 3186 17c8 01408402 		addeq	r4, r4, #1
 3187              	.LVL236:
1126:main.c        **** 				if(ad0_3 == 'Y'){ temp2++; }
 3188              		.loc 1 1126 0
 3189 17cc 0610C5E5 		strb	r1, [r5, #6]
1127:main.c        **** 				rprintf("ad0_3 = %c\n\r",ad0_3);
 3190              		.loc 1 1127 0
 3191 17d0 FF400402 		andeq	r4, r4, #255
 3192              	.LVL237:
1128:main.c        **** 			}
 3193              		.loc 1 1128 0
 3194 17d4 9C029FE5 		ldr	r0, .L328+76
 3195 17d8 3A0000EA 		b	.L323
 3196              	.L288:
1130:main.c        **** 			{
 3197              		.loc 1 1130 0
 3198 17dc 090057E3 		cmp	r7, #9
 3199 17e0 0600001A 		bne	.L290
1132:main.c        **** 				if(ad0_2 == 'Y'){ temp2++; }
 3200              		.loc 1 1132 0
 3201 17e4 021056E5 		ldrb	r1, [r6, #-2]	@ zero_extendqisi2
1133:main.c        **** 				rprintf("ad0_2 = %c\n\r",ad0_2);
 3202              		.loc 1 1133 0
 3203 17e8 590051E3 		cmp	r1, #89
 3204 17ec 01408402 		addeq	r4, r4, #1
 3205              	.LVL238:
1132:main.c        **** 				if(ad0_2 == 'Y'){ temp2++; }
 3206              		.loc 1 1132 0
 3207 17f0 0710C5E5 		strb	r1, [r5, #7]
1133:main.c        **** 				rprintf("ad0_2 = %c\n\r",ad0_2);
 3208              		.loc 1 1133 0
 3209 17f4 FF400402 		andeq	r4, r4, #255
 3210              	.LVL239:
1134:main.c        **** 			}
 3211              		.loc 1 1134 0
 3212 17f8 7C029FE5 		ldr	r0, .L328+80
 3213 17fc 310000EA 		b	.L323
 3214              	.L290:
1136:main.c        **** 			{
 3215              		.loc 1 1136 0
 3216 1800 0A0057E3 		cmp	r7, #10
 3217 1804 0600001A 		bne	.L292
1138:main.c        **** 				if(ad0_1 == 'Y'){ temp2++; }
 3218              		.loc 1 1138 0
 3219 1808 021056E5 		ldrb	r1, [r6, #-2]	@ zero_extendqisi2
1139:main.c        **** 				rprintf("ad0_1 = %c\n\r",ad0_1);
 3220              		.loc 1 1139 0
 3221 180c 590051E3 		cmp	r1, #89
 3222 1810 01408402 		addeq	r4, r4, #1
 3223              	.LVL240:
1138:main.c        **** 				if(ad0_1 == 'Y'){ temp2++; }
 3224              		.loc 1 1138 0
 3225 1814 0810C5E5 		strb	r1, [r5, #8]
1139:main.c        **** 				rprintf("ad0_1 = %c\n\r",ad0_1);
 3226              		.loc 1 1139 0
 3227 1818 FF400402 		andeq	r4, r4, #255
 3228              	.LVL241:
1140:main.c        **** 			}
 3229              		.loc 1 1140 0
 3230 181c 5C029FE5 		ldr	r0, .L328+84
 3231 1820 280000EA 		b	.L323
 3232              	.L292:
1142:main.c        **** 			{
 3233              		.loc 1 1142 0
 3234 1824 0B0057E3 		cmp	r7, #11
 3235 1828 0600001A 		bne	.L294
1144:main.c        **** 				if(ad1_2 == 'Y'){ temp2++; }
 3236              		.loc 1 1144 0
 3237 182c 021056E5 		ldrb	r1, [r6, #-2]	@ zero_extendqisi2
1145:main.c        **** 				rprintf("ad1_2 = %c\n\r",ad1_2);
 3238              		.loc 1 1145 0
 3239 1830 590051E3 		cmp	r1, #89
 3240 1834 01408402 		addeq	r4, r4, #1
 3241              	.LVL242:
1144:main.c        **** 				if(ad1_2 == 'Y'){ temp2++; }
 3242              		.loc 1 1144 0
 3243 1838 0910C5E5 		strb	r1, [r5, #9]
1145:main.c        **** 				rprintf("ad1_2 = %c\n\r",ad1_2);
 3244              		.loc 1 1145 0
 3245 183c FF400402 		andeq	r4, r4, #255
 3246              	.LVL243:
1146:main.c        **** 			}
 3247              		.loc 1 1146 0
 3248 1840 3C029FE5 		ldr	r0, .L328+88
 3249 1844 1F0000EA 		b	.L323
 3250              	.L294:
1148:main.c        **** 			{
 3251              		.loc 1 1148 0
 3252 1848 0C0057E3 		cmp	r7, #12
 3253 184c 0600001A 		bne	.L296
1150:main.c        **** 				if(ad0_4 == 'Y'){ temp2++; }
 3254              		.loc 1 1150 0
 3255 1850 021056E5 		ldrb	r1, [r6, #-2]	@ zero_extendqisi2
1151:main.c        **** 				rprintf("ad0_4 = %c\n\r",ad0_4);
 3256              		.loc 1 1151 0
 3257 1854 590051E3 		cmp	r1, #89
 3258 1858 01408402 		addeq	r4, r4, #1
 3259              	.LVL244:
1150:main.c        **** 				if(ad0_4 == 'Y'){ temp2++; }
 3260              		.loc 1 1150 0
 3261 185c 0A10C5E5 		strb	r1, [r5, #10]
1151:main.c        **** 				rprintf("ad0_4 = %c\n\r",ad0_4);
 3262              		.loc 1 1151 0
 3263 1860 FF400402 		andeq	r4, r4, #255
 3264              	.LVL245:
1152:main.c        **** 			}
 3265              		.loc 1 1152 0
 3266 1864 1C029FE5 		ldr	r0, .L328+92
 3267 1868 160000EA 		b	.L323
 3268              	.L296:
1154:main.c        **** 			{
 3269              		.loc 1 1154 0
 3270 186c 0D0057E3 		cmp	r7, #13
 3271 1870 0600001A 		bne	.L298
1156:main.c        **** 				if(ad1_7 == 'Y'){ temp2++; }
 3272              		.loc 1 1156 0
 3273 1874 021056E5 		ldrb	r1, [r6, #-2]	@ zero_extendqisi2
1157:main.c        **** 				rprintf("ad1_7 = %c\n\r",ad1_7);
 3274              		.loc 1 1157 0
 3275 1878 590051E3 		cmp	r1, #89
 3276 187c 01408402 		addeq	r4, r4, #1
 3277              	.LVL246:
1156:main.c        **** 				if(ad1_7 == 'Y'){ temp2++; }
 3278              		.loc 1 1156 0
 3279 1880 0B10C5E5 		strb	r1, [r5, #11]
1157:main.c        **** 				rprintf("ad1_7 = %c\n\r",ad1_7);
 3280              		.loc 1 1157 0
 3281 1884 FF400402 		andeq	r4, r4, #255
 3282              	.LVL247:
1158:main.c        **** 			}
 3283              		.loc 1 1158 0
 3284 1888 FC019FE5 		ldr	r0, .L328+96
 3285 188c 0D0000EA 		b	.L323
 3286              	.L298:
1160:main.c        **** 			{
 3287              		.loc 1 1160 0
 3288 1890 0E0057E3 		cmp	r7, #14
 3289 1894 0600001A 		bne	.L300
1162:main.c        **** 				if(ad1_6 == 'Y'){ temp2++; }
 3290              		.loc 1 1162 0
 3291 1898 021056E5 		ldrb	r1, [r6, #-2]	@ zero_extendqisi2
1163:main.c        **** 				rprintf("ad1_6 = %c\n\r",ad1_6);
 3292              		.loc 1 1163 0
 3293 189c 590051E3 		cmp	r1, #89
 3294 18a0 01408402 		addeq	r4, r4, #1
 3295              	.LVL248:
1162:main.c        **** 				if(ad1_6 == 'Y'){ temp2++; }
 3296              		.loc 1 1162 0
 3297 18a4 0C10C5E5 		strb	r1, [r5, #12]
1163:main.c        **** 				rprintf("ad1_6 = %c\n\r",ad1_6);
 3298              		.loc 1 1163 0
 3299 18a8 FF400402 		andeq	r4, r4, #255
 3300              	.LVL249:
1164:main.c        **** 			}
 3301              		.loc 1 1164 0
 3302 18ac DC019FE5 		ldr	r0, .L328+100
 3303 18b0 040000EA 		b	.L323
 3304              	.L300:
1166:main.c        **** 			{
 3305              		.loc 1 1166 0
 3306 18b4 0F0057E3 		cmp	r7, #15
 3307 18b8 0300001A 		bne	.L266
1168:main.c        **** 				rprintf("safety = %c\n\r",safety);
 3308              		.loc 1 1168 0
 3309 18bc 028056E5 		ldrb	r8, [r6, #-2]	@ zero_extendqisi2
 3310              	.LVL250:
1169:main.c        **** 			}
 3311              		.loc 1 1169 0
 3312 18c0 CC019FE5 		ldr	r0, .L328+104
 3313 18c4 0810A0E1 		mov	r1, r8
 3314              	.LVL251:
 3315              	.L323:
 3316 18c8 FEFFFFEB 		bl	rprintf
 3317              	.LVL252:
 3318              	.L266:
1066:main.c        **** 	{
 3319              		.loc 1 1066 0
 3320 18cc 01A08AE2 		add	sl, sl, #1
 3321              	.LVL253:
 3322              	.L265:
1066:main.c        **** 	{
 3323              		.loc 1 1066 0 is_stmt 0 discriminator 1
 3324 18d0 00309BE5 		ldr	r3, [fp, #0]
 3325 18d4 03005AE1 		cmp	sl, r3
 3326 18d8 4BFFFFBA 		blt	.L302
1174:main.c        **** 	{
 3327              		.loc 1 1174 0 is_stmt 1
 3328 18dc 590058E3 		cmp	r8, #89
 3329 18e0 4D00001A 		bne	.L303
1176:main.c        **** 		else if((temp2 == 9) && (freq > 166)){ freq = 166; }
 3330              		.loc 1 1176 0
 3331 18e4 0A0054E3 		cmp	r4, #10
 3332 18e8 0500001A 		bne	.L304
1176:main.c        **** 		else if((temp2 == 9) && (freq > 166)){ freq = 166; }
 3333              		.loc 1 1176 0 is_stmt 0 discriminator 1
 3334 18ec 58319FE5 		ldr	r3, .L328+32
 3335 18f0 142093E5 		ldr	r2, [r3, #20]
 3336 18f4 960052E3 		cmp	r2, #150
 3337 18f8 9620A0C3 		movgt	r2, #150
 3338 18fc 070000CA 		bgt	.L324
 3339 1900 470000EA 		b	.L260
 3340              	.L304:
1177:main.c        **** 		else if((temp2 == 8) && (freq > 187)){ freq = 187; }
 3341              		.loc 1 1177 0 is_stmt 1
 3342 1904 090054E3 		cmp	r4, #9
 3343 1908 0600001A 		bne	.L307
1177:main.c        **** 		else if((temp2 == 8) && (freq > 187)){ freq = 187; }
 3344              		.loc 1 1177 0 is_stmt 0 discriminator 1
 3345 190c 38319FE5 		ldr	r3, .L328+32
 3346 1910 142093E5 		ldr	r2, [r3, #20]
 3347 1914 A60052E3 		cmp	r2, #166
 3348 1918 410000DA 		ble	.L260
 3349 191c A620A0E3 		mov	r2, #166
 3350              	.L324:
 3351 1920 142083E5 		str	r2, [r3, #20]
 3352 1924 3E0000EA 		b	.L260
 3353              	.L307:
1178:main.c        **** 		else if((temp2 == 7) && (freq > 214)){ freq = 214; }
 3354              		.loc 1 1178 0 is_stmt 1
 3355 1928 080054E3 		cmp	r4, #8
 3356 192c 0500001A 		bne	.L308
1178:main.c        **** 		else if((temp2 == 7) && (freq > 214)){ freq = 214; }
 3357              		.loc 1 1178 0 is_stmt 0 discriminator 1
 3358 1930 14319FE5 		ldr	r3, .L328+32
 3359 1934 142093E5 		ldr	r2, [r3, #20]
 3360 1938 BB0052E3 		cmp	r2, #187
 3361 193c BB20A0C3 		movgt	r2, #187
 3362 1940 F6FFFFCA 		bgt	.L324
 3363 1944 360000EA 		b	.L260
 3364              	.L308:
1179:main.c        **** 		else if((temp2 == 6) && (freq > 250)){ freq = 250; }
 3365              		.loc 1 1179 0 is_stmt 1
 3366 1948 070054E3 		cmp	r4, #7
 3367 194c 0500001A 		bne	.L310
1179:main.c        **** 		else if((temp2 == 6) && (freq > 250)){ freq = 250; }
 3368              		.loc 1 1179 0 is_stmt 0 discriminator 1
 3369 1950 F4309FE5 		ldr	r3, .L328+32
 3370 1954 142093E5 		ldr	r2, [r3, #20]
 3371 1958 D60052E3 		cmp	r2, #214
 3372 195c D620A0C3 		movgt	r2, #214
 3373 1960 EEFFFFCA 		bgt	.L324
 3374 1964 2E0000EA 		b	.L260
 3375              	.L310:
1180:main.c        **** 		else if((temp2 == 5) && (freq > 300)){ freq = 300; }
 3376              		.loc 1 1180 0 is_stmt 1
 3377 1968 060054E3 		cmp	r4, #6
 3378 196c 0500001A 		bne	.L305
1180:main.c        **** 		else if((temp2 == 5) && (freq > 300)){ freq = 300; }
 3379              		.loc 1 1180 0 is_stmt 0 discriminator 1
 3380 1970 D4309FE5 		ldr	r3, .L328+32
 3381 1974 142093E5 		ldr	r2, [r3, #20]
 3382 1978 FA0052E3 		cmp	r2, #250
 3383 197c FA20A0C3 		movgt	r2, #250
 3384 1980 E6FFFFCA 		bgt	.L324
 3385 1984 260000EA 		b	.L260
 3386              	.L305:
1181:main.c        **** 		else if((temp2 == 4) && (freq > 375)){ freq = 375; }
 3387              		.loc 1 1181 0 is_stmt 1
 3388 1988 050054E3 		cmp	r4, #5
 3389 198c 0500001A 		bne	.L313
1181:main.c        **** 		else if((temp2 == 4) && (freq > 375)){ freq = 375; }
 3390              		.loc 1 1181 0 is_stmt 0 discriminator 1
 3391 1990 B4309FE5 		ldr	r3, .L328+32
 3392 1994 142093E5 		ldr	r2, [r3, #20]
 3393 1998 4B0F52E3 		cmp	r2, #300
 3394 199c 4B2FA0C3 		movgt	r2, #300
 3395 19a0 DEFFFFCA 		bgt	.L324
 3396 19a4 1E0000EA 		b	.L260
 3397              	.L313:
1182:main.c        **** 		else if((temp2 == 3) && (freq > 500)){ freq = 500; }
 3398              		.loc 1 1182 0 is_stmt 1
 3399 19a8 040054E3 		cmp	r4, #4
1182:main.c        **** 		else if((temp2 == 3) && (freq > 500)){ freq = 500; }
 3400              		.loc 1 1182 0 is_stmt 0 discriminator 1
 3401 19ac 98309F05 		ldreq	r3, .L328+32
 3402 19b0 E0209F05 		ldreq	r2, .L328+108
 3403 19b4 0F00000A 		beq	.L326
 3404              	.L309:
1183:main.c        **** 		else if((temp2 == 2) && (freq > 750)){ freq = 750; }
 3405              		.loc 1 1183 0 is_stmt 1
 3406 19b8 030054E3 		cmp	r4, #3
 3407 19bc 0500001A 		bne	.L311
1183:main.c        **** 		else if((temp2 == 2) && (freq > 750)){ freq = 750; }
 3408              		.loc 1 1183 0 is_stmt 0 discriminator 1
 3409 19c0 84309FE5 		ldr	r3, .L328+32
 3410 19c4 142093E5 		ldr	r2, [r3, #20]
 3411 19c8 7D0F52E3 		cmp	r2, #500
 3412 19cc 7D2FA0C3 		movgt	r2, #500
 3413 19d0 D2FFFFCA 		bgt	.L324
 3414 19d4 120000EA 		b	.L260
 3415              	.L311:
1184:main.c        **** 		else if((temp2 == 1) && (freq > 1500)){ freq = 1500; }
 3416              		.loc 1 1184 0 is_stmt 1
 3417 19d8 020054E3 		cmp	r4, #2
1184:main.c        **** 		else if((temp2 == 1) && (freq > 1500)){ freq = 1500; }
 3418              		.loc 1 1184 0 is_stmt 0 discriminator 1
 3419 19dc 68309F05 		ldreq	r3, .L328+32
 3420 19e0 B4209F05 		ldreq	r2, .L328+112
 3421 19e4 0300000A 		beq	.L326
 3422              	.L312:
1185:main.c        **** 		else if((temp2 == 0)){ freq = 100; }
 3423              		.loc 1 1185 0 is_stmt 1
 3424 19e8 010054E3 		cmp	r4, #1
 3425 19ec 0500001A 		bne	.L314
1185:main.c        **** 		else if((temp2 == 0)){ freq = 100; }
 3426              		.loc 1 1185 0 is_stmt 0 discriminator 1
 3427 19f0 54309FE5 		ldr	r3, .L328+32
 3428 19f4 A4209FE5 		ldr	r2, .L328+116
 3429              	.L326:
 3430 19f8 141093E5 		ldr	r1, [r3, #20]
 3431 19fc 020051E1 		cmp	r1, r2
 3432 1a00 070000DA 		ble	.L260
 3433 1a04 C5FFFFEA 		b	.L324
 3434              	.L314:
1186:main.c        **** 	}
 3435              		.loc 1 1186 0 is_stmt 1
 3436 1a08 000054E3 		cmp	r4, #0
 3437 1a0c 0400001A 		bne	.L260
1186:main.c        **** 	}
 3438              		.loc 1 1186 0 is_stmt 0 discriminator 1
 3439 1a10 6420A0E3 		mov	r2, #100
 3440 1a14 30309FE5 		ldr	r3, .L328+32
 3441 1a18 C0FFFFEA 		b	.L324
 3442              	.L303:
1189:main.c        **** 
 3443              		.loc 1 1189 0 is_stmt 1
 3444 1a1c 540058E3 		cmp	r8, #84
1189:main.c        **** 
 3445              		.loc 1 1189 0 is_stmt 0 discriminator 1
 3446 1a20 FEFFFF0B 		bleq	test
 3447              	.LVL254:
 3448              	.L260:
1191:main.c        **** 
 3449              		.loc 1 1191 0 is_stmt 1
 3450 1a24 F04FBDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 3451 1a28 1EFF2FE1 		bx	lr
 3452              	.L329:
 3453              		.align	2
 3454              	.L328:
 3455 1a2c D2000000 		.word	.LC11
 3456 1a30 00000000 		.word	fd
 3457 1a34 00000000 		.word	stringBuf
 3458 1a38 00000000 		.word	stringSize
 3459 1a3c DD000000 		.word	.LC12
 3460 1a40 008002E0 		.word	-536707072
 3461 1a44 08010000 		.word	.LC13
 3462 1a48 FFFFFFFF 		.word	stringBuf-1
 3463 1a4c 00000000 		.word	.LANCHOR1
 3464 1a50 FE010000 		.word	510
 3465 1a54 00000000 		.word	.LANCHOR0
 3466 1a58 C9010000 		.word	.LC14
 3467 1a5c D5010000 		.word	.LC15
 3468 1a60 00C20100 		.word	115200
 3469 1a64 E0010000 		.word	.LC16
 3470 1a68 EC010000 		.word	.LC17
 3471 1a6c F8010000 		.word	.LC18
 3472 1a70 04020000 		.word	.LC19
 3473 1a74 11020000 		.word	.LC20
 3474 1a78 1E020000 		.word	.LC21
 3475 1a7c 2B020000 		.word	.LC22
 3476 1a80 38020000 		.word	.LC23
 3477 1a84 45020000 		.word	.LC24
 3478 1a88 52020000 		.word	.LC25
 3479 1a8c 5F020000 		.word	.LC26
 3480 1a90 6C020000 		.word	.LC27
 3481 1a94 79020000 		.word	.LC28
 3482 1a98 77010000 		.word	375
 3483 1a9c EE020000 		.word	750
 3484 1aa0 DC050000 		.word	1500
 3485              		.cfi_endproc
 3486              	.LFE11:
 3488              		.section	.text.startup,"ax",%progbits
 3489              		.align	2
 3490              		.global	main
 3492              	main:
 3493              	.LFB0:
 101:main.c        **** 	int i;
 3494              		.loc 1 101 0
 3495              		.cfi_startproc
 3496              		@ Function supports interworking.
 3497              		@ args = 0, pretend = 0, frame = 44
 3498              		@ frame_needed = 0, uses_anonymous_args = 0
 3499              	.LVL255:
 3500 0000 F0412DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, lr}
 3501              	.LCFI15:
 3502              		.cfi_def_cfa_offset 24
 3503              		.cfi_offset 4, -24
 3504              		.cfi_offset 5, -20
 3505              		.cfi_offset 6, -16
 3506              		.cfi_offset 7, -12
 3507              		.cfi_offset 8, -8
 3508              		.cfi_offset 14, -4
 3509 0004 2CD04DE2 		sub	sp, sp, #44
 3510              	.LCFI16:
 3511              		.cfi_def_cfa_offset 68
 106:main.c        **** 	
 3512              		.loc 1 106 0
 3513 0008 FEFFFFEB 		bl	enableFIQ
 3514              	.LVL256:
 108:main.c        **** 	
 3515              		.loc 1 108 0
 3516 000c FEFFFFEB 		bl	Initialize
 3517              	.LVL257:
 110:main.c        **** 
 3518              		.loc 1 110 0
 3519 0010 960DA0E3 		mov	r0, #9600
 3520 0014 0010A0E3 		mov	r1, #0
 3521 0018 FEFFFFEB 		bl	setup_uart0
 3522              	.LVL258:
 112:main.c        **** 
 3523              		.loc 1 112 0
 3524 001c FEFFFFEB 		bl	fat_initialize
 3525              	.LVL259:
 3526              	.LBB230:
 3527              	.LBB231:
1023:main.c        **** 		else { IOSET0 = 0x00000004; } // Off
 3528              		.loc 1 1023 0
 3529 0020 0460A0E3 		mov	r6, #4
 3530 0024 BC419FE5 		ldr	r4, .L348
 3531              	.LBE231:
 3532              	.LBE230:
 112:main.c        **** 
 3533              		.loc 1 112 0
 3534 0028 0550A0E3 		mov	r5, #5
 3535              	.LBB234:
 3536              	.LBB232:
1023:main.c        **** 		else { IOSET0 = 0x00000004; } // Off
 3537              		.loc 1 1023 0
 3538 002c 0680A0E1 		mov	r8, r6
 3539              	.LVL260:
 3540              	.L331:
 3541              	.LBE232:
 3542              	.LBE234:
 119:main.c        **** 		stat(0,OFF);
 3543              		.loc 1 119 0
 3544 0030 3200A0E3 		mov	r0, #50
 3545              	.LBB235:
 3546              	.LBB236:
 3547              	.LBB237:
1018:main.c        **** 		else { IOSET0 = 0x00000800; } // Off
 3548              		.loc 1 1018 0
 3549 0034 027BA0E3 		mov	r7, #2048
 3550              	.LBE237:
 3551              	.LBE236:
 3552              	.LBE235:
 3553              	.LBB240:
 3554              	.LBB233:
1023:main.c        **** 		else { IOSET0 = 0x00000004; } // Off
 3555              		.loc 1 1023 0
 3556 0038 0C8084E5 		str	r8, [r4, #12]
 3557              	.LBE233:
 3558              	.LBE240:
 119:main.c        **** 		stat(0,OFF);
 3559              		.loc 1 119 0
 3560 003c FEFFFFEB 		bl	delay_ms
 3561              	.LVL261:
 3562              	.LBB241:
 3563              	.LBB242:
1024:main.c        **** 	}
 3564              		.loc 1 1024 0
 3565 0040 046084E5 		str	r6, [r4, #4]
 3566              	.LVL262:
 3567              	.LBE242:
 3568              	.LBE241:
 122:main.c        **** 		stat(1,OFF);
 3569              		.loc 1 122 0
 3570 0044 3200A0E3 		mov	r0, #50
 3571              	.LBB243:
 3572              	.LBB239:
 3573              	.LBB238:
1018:main.c        **** 		else { IOSET0 = 0x00000800; } // Off
 3574              		.loc 1 1018 0
 3575 0048 0C7084E5 		str	r7, [r4, #12]
 3576              	.LBE238:
 3577              	.LBE239:
 3578              	.LBE243:
 122:main.c        **** 		stat(1,OFF);
 3579              		.loc 1 122 0
 3580 004c FEFFFFEB 		bl	delay_ms
 3581              	.LVL263:
 116:main.c        **** 	{
 3582              		.loc 1 116 0
 3583 0050 015055E2 		subs	r5, r5, #1
 3584              	.LBB244:
 3585              	.LBB245:
 3586              	.LBB246:
1019:main.c        **** 	}
 3587              		.loc 1 1019 0
 3588 0054 047084E5 		str	r7, [r4, #4]
 3589              	.LBE246:
 3590              	.LBE245:
 3591              	.LBE244:
 116:main.c        **** 	{
 3592              		.loc 1 116 0
 3593 0058 F4FFFF1A 		bne	.L331
 129:main.c        **** 	while(root_file_exists(name))
 3594              		.loc 1 129 0
 3595 005c 0C508DE2 		add	r5, sp, #12
 126:main.c        **** 
 3596              		.loc 1 126 0
 3597 0060 FEFFFFEB 		bl	Log_init
 3598              	.LVL264:
 129:main.c        **** 	while(root_file_exists(name))
 3599              		.loc 1 129 0
 3600 0064 0500A0E1 		mov	r0, r5
 3601 0068 7C119FE5 		ldr	r1, .L348+4
 3602 006c 0120A0E3 		mov	r2, #1
 3603 0070 FEFFFFEB 		bl	string_printf
 3604              	.LVL265:
 128:main.c        **** 	string_printf(name,"LOG%02d.txt",count);
 3605              		.loc 1 128 0
 3606 0074 0140A0E3 		mov	r4, #1
 130:main.c        **** 	{
 3607              		.loc 1 130 0
 3608 0078 150000EA 		b	.L332
 3609              	.LVL266:
 3610              	.L335:
 132:main.c        **** 		if(count == 250) 
 3611              		.loc 1 132 0
 3612 007c 014084E2 		add	r4, r4, #1
 3613              	.LVL267:
 133:main.c        **** 		{
 3614              		.loc 1 133 0
 3615 0080 FA0054E3 		cmp	r4, #250
 3616 0084 0E00001A 		bne	.L333
 135:main.c        **** 			while(1)
 3617              		.loc 1 135 0
 3618 0088 60019FE5 		ldr	r0, .L348+8
 3619 008c FEFFFFEB 		bl	rprintf
 3620              	.LVL268:
 3621              	.LBB247:
 3622              	.LBB248:
1023:main.c        **** 		else { IOSET0 = 0x00000004; } // Off
 3623              		.loc 1 1023 0
 3624 0090 0450A0E3 		mov	r5, #4
 3625 0094 4C419FE5 		ldr	r4, .L348
 3626              	.LVL269:
 3627 0098 0570A0E1 		mov	r7, r5
 3628              	.L334:
 3629              	.LVL270:
 3630              	.LBE248:
 3631              	.LBE247:
 3632              	.LBB250:
 3633              	.LBB251:
 3634              	.LBB252:
1018:main.c        **** 		else { IOSET0 = 0x00000800; } // Off
 3635              		.loc 1 1018 0 discriminator 1
 3636 009c 026BA0E3 		mov	r6, #2048
 3637              	.LBE252:
 3638              	.LBE251:
 3639              	.LBE250:
 3640              	.LBB255:
 3641              	.LBB249:
1023:main.c        **** 		else { IOSET0 = 0x00000004; } // Off
 3642              		.loc 1 1023 0 discriminator 1
 3643 00a0 0C7084E5 		str	r7, [r4, #12]
 3644              	.LVL271:
 3645              	.LBE249:
 3646              	.LBE255:
 140:main.c        **** 				stat(0,OFF);
 3647              		.loc 1 140 0 discriminator 1
 3648 00a4 FA0FA0E3 		mov	r0, #1000
 3649              	.LBB256:
 3650              	.LBB254:
 3651              	.LBB253:
1018:main.c        **** 		else { IOSET0 = 0x00000800; } // Off
 3652              		.loc 1 1018 0 discriminator 1
 3653 00a8 0C6084E5 		str	r6, [r4, #12]
 3654              	.LBE253:
 3655              	.LBE254:
 3656              	.LBE256:
 140:main.c        **** 				stat(0,OFF);
 3657              		.loc 1 140 0 discriminator 1
 3658 00ac FEFFFFEB 		bl	delay_ms
 3659              	.LVL272:
 3660              	.LBB257:
 3661              	.LBB258:
1024:main.c        **** 	}
 3662              		.loc 1 1024 0 discriminator 1
 3663 00b0 045084E5 		str	r5, [r4, #4]
 3664              	.LVL273:
 3665              	.LBE258:
 3666              	.LBE257:
 143:main.c        **** 			}
 3667              		.loc 1 143 0 discriminator 1
 3668 00b4 FA0FA0E3 		mov	r0, #1000
 3669              	.LBB259:
 3670              	.LBB260:
 3671              	.LBB261:
1019:main.c        **** 	}
 3672              		.loc 1 1019 0 discriminator 1
 3673 00b8 046084E5 		str	r6, [r4, #4]
 3674              	.LBE261:
 3675              	.LBE260:
 3676              	.LBE259:
 143:main.c        **** 			}
 3677              		.loc 1 143 0 discriminator 1
 3678 00bc FEFFFFEB 		bl	delay_ms
 3679              	.LVL274:
 3680 00c0 F5FFFFEA 		b	.L334
 3681              	.LVL275:
 3682              	.L333:
 147:main.c        **** 	}
 3683              		.loc 1 147 0
 3684 00c4 0500A0E1 		mov	r0, r5
 3685 00c8 1C119FE5 		ldr	r1, .L348+4
 3686 00cc 0420A0E1 		mov	r2, r4
 3687 00d0 FEFFFFEB 		bl	string_printf
 3688              	.LVL276:
 3689              	.L332:
 130:main.c        **** 	{
 3690              		.loc 1 130 0 discriminator 1
 3691 00d4 0500A0E1 		mov	r0, r5
 3692 00d8 FEFFFFEB 		bl	root_file_exists
 3693              	.LVL277:
 3694 00dc 000050E3 		cmp	r0, #0
 3695 00e0 E5FFFF1A 		bne	.L335
 150:main.c        **** 		
 3696              		.loc 1 150 0
 3697 00e4 0500A0E1 		mov	r0, r5
 3698 00e8 FEFFFFEB 		bl	root_open_new
 3699              	.LVL278:
 3700 00ec 00619FE5 		ldr	r6, .L348+12
 3701 00f0 000086E5 		str	r0, [r6, #0]
 153:main.c        **** 	
 3702              		.loc 1 153 0
 3703 00f4 FEFFFFEB 		bl	sd_raw_sync
 3704              	.LVL279:
 156:main.c        **** 	{
 3705              		.loc 1 156 0
 3706 00f8 F8309FE5 		ldr	r3, .L348+16
 3707 00fc 0530D3E5 		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 3708 0100 020053E3 		cmp	r3, #2
 3709 0104 2B00001A 		bne	.L336
 3710              	.LBB262:
 159:main.c        **** 		mybuf[1] = ad0_3;
 3711              		.loc 1 159 0
 3712 0108 EC309FE5 		ldr	r3, .L348+20
 3713 010c 0420D3E5 		ldrb	r2, [r3, #4]	@ zero_extendqisi2
 3714 0110 0020CDE5 		strb	r2, [sp, #0]
 160:main.c        **** 		mybuf[2] = ad0_2;
 3715              		.loc 1 160 0
 3716 0114 0620D3E5 		ldrb	r2, [r3, #6]	@ zero_extendqisi2
 3717 0118 0120CDE5 		strb	r2, [sp, #1]
 161:main.c        **** 		mybuf[3] = ad0_1;
 3718              		.loc 1 161 0
 3719 011c 0720D3E5 		ldrb	r2, [r3, #7]	@ zero_extendqisi2
 3720 0120 0220CDE5 		strb	r2, [sp, #2]
 162:main.c        **** 		mybuf[4] = ad1_2;
 3721              		.loc 1 162 0
 3722 0124 0820D3E5 		ldrb	r2, [r3, #8]	@ zero_extendqisi2
 3723 0128 0320CDE5 		strb	r2, [sp, #3]
 163:main.c        **** 		mybuf[5] = ad0_4;
 3724              		.loc 1 163 0
 3725 012c 0920D3E5 		ldrb	r2, [r3, #9]	@ zero_extendqisi2
 3726 0130 0420CDE5 		strb	r2, [sp, #4]
 164:main.c        **** 		mybuf[6] = ad1_7;
 3727              		.loc 1 164 0
 3728 0134 0A20D3E5 		ldrb	r2, [r3, #10]	@ zero_extendqisi2
 3729 0138 0520CDE5 		strb	r2, [sp, #5]
 165:main.c        **** 		mybuf[7] = ad1_6;
 3730              		.loc 1 165 0
 3731 013c 0B20D3E5 		ldrb	r2, [r3, #11]	@ zero_extendqisi2
 166:main.c        **** 		mybuf[8] = 13;
 3732              		.loc 1 166 0
 3733 0140 0C30D3E5 		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 3734              	.LBB263:
 3735              	.LBB264:
1023:main.c        **** 		else { IOSET0 = 0x00000004; } // Off
 3736              		.loc 1 1023 0
 3737 0144 9C409FE5 		ldr	r4, .L348
 3738              	.LVL280:
 3739              	.LBE264:
 3740              	.LBE263:
 165:main.c        **** 		mybuf[7] = ad1_6;
 3741              		.loc 1 165 0
 3742 0148 0620CDE5 		strb	r2, [sp, #6]
 166:main.c        **** 		mybuf[8] = 13;
 3743              		.loc 1 166 0
 3744 014c 0730CDE5 		strb	r3, [sp, #7]
 168:main.c        **** 	
 3745              		.loc 1 168 0
 3746 0150 0A20A0E3 		mov	r2, #10
 167:main.c        **** 		mybuf[9] = 10;	
 3747              		.loc 1 167 0
 3748 0154 0D30A0E3 		mov	r3, #13
 3749              	.LBB267:
 3750              	.LBB265:
1023:main.c        **** 		else { IOSET0 = 0x00000004; } // Off
 3751              		.loc 1 1023 0
 3752 0158 0450A0E3 		mov	r5, #4
 3753              	.LBE265:
 3754              	.LBE267:
 167:main.c        **** 		mybuf[9] = 10;	
 3755              		.loc 1 167 0
 3756 015c 0830CDE5 		strb	r3, [sp, #8]
 168:main.c        **** 	
 3757              		.loc 1 168 0
 3758 0160 0920CDE5 		strb	r2, [sp, #9]
 3759              	.LVL281:
 172:main.c        **** 		{
 3760              		.loc 1 172 0
 3761 0164 000096E5 		ldr	r0, [r6, #0]
 3762              	.LBB268:
 3763              	.LBB266:
1023:main.c        **** 		else { IOSET0 = 0x00000004; } // Off
 3764              		.loc 1 1023 0
 3765 0168 0C5084E5 		str	r5, [r4, #12]
 3766              	.LBE266:
 3767              	.LBE268:
 172:main.c        **** 		{
 3768              		.loc 1 172 0
 3769 016c 0D10A0E1 		mov	r1, sp
 3770 0170 FEFFFFEB 		bl	fat_write_file
 3771              	.LVL282:
 3772 0174 000050E3 		cmp	r0, #0
 3773 0178 0C0000AA 		bge	.L337
 3774 017c 0420A0E1 		mov	r2, r4
 3775              	.LBB269:
 3776              	.LBB270:
 3777              	.LBB271:
1018:main.c        **** 		else { IOSET0 = 0x00000800; } // Off
 3778              		.loc 1 1018 0
 3779 0180 021BA0E3 		mov	r1, #2048
 3780              	.L347:
 3781              	.LVL283:
 3782              	.LBE271:
 3783              	.LBE270:
 3784              	.LBE269:
 3785              	.LBB274:
 3786              	.LBB275:
1023:main.c        **** 		else { IOSET0 = 0x00000004; } // Off
 3787              		.loc 1 1023 0
 3788 0184 0C5084E5 		str	r5, [r4, #12]
 3789              	.LVL284:
 3790 0188 70309FE5 		ldr	r3, .L348+24
 3791              	.LVL285:
 3792              	.L338:
 3793              	.LBE275:
 3794              	.LBE274:
 3795              	.LBB276:
 177:main.c        **** 				stat(0,OFF);
 3796              		.loc 1 177 0
 3797 018c 013053E2 		subs	r3, r3, #1
 3798              	.LBB277:
 3799              	.LBB278:
1024:main.c        **** 	}
 3800              		.loc 1 1024 0
 3801 0190 045082E5 		str	r5, [r2, #4]
 3802              	.LBE278:
 3803              	.LBE277:
 177:main.c        **** 				stat(0,OFF);
 3804              		.loc 1 177 0
 3805 0194 FCFFFF1A 		bne	.L338
 3806              	.LVL286:
 3807              	.LBE276:
 3808              	.LBB279:
 3809              	.LBB273:
 3810              	.LBB272:
1018:main.c        **** 		else { IOSET0 = 0x00000800; } // Off
 3811              		.loc 1 1018 0
 3812 0198 0C1082E5 		str	r1, [r2, #12]
 3813              	.LVL287:
 3814 019c 5C309FE5 		ldr	r3, .L348+24
 3815              	.LVL288:
 3816              	.L339:
 3817              	.LBE272:
 3818              	.LBE273:
 3819              	.LBE279:
 3820              	.LBB280:
 180:main.c        **** 				stat(1,OFF);
 3821              		.loc 1 180 0
 3822 01a0 013053E2 		subs	r3, r3, #1
 3823              	.LBB281:
 3824              	.LBB282:
 3825              	.LBB283:
1019:main.c        **** 	}
 3826              		.loc 1 1019 0
 3827 01a4 041084E5 		str	r1, [r4, #4]
 3828              	.LBE283:
 3829              	.LBE282:
 3830              	.LBE281:
 180:main.c        **** 				stat(1,OFF);
 3831              		.loc 1 180 0
 3832 01a8 FCFFFF1A 		bne	.L339
 3833 01ac F4FFFFEA 		b	.L347
 3834              	.LVL289:
 3835              	.L337:
 3836              	.LBE280:
 185:main.c        **** 		stat(0,OFF);
 3837              		.loc 1 185 0
 3838 01b0 FEFFFFEB 		bl	sd_raw_sync
 3839              	.LVL290:
 3840              	.LBB284:
 3841              	.LBB285:
1024:main.c        **** 	}
 3842              		.loc 1 1024 0
 3843 01b4 045084E5 		str	r5, [r4, #4]
 3844              	.LVL291:
 3845              	.L336:
 3846              	.LBE285:
 3847              	.LBE284:
 3848              	.LBE262:
 189:main.c        **** 	else if(mode == 1){ mode_1(); }
 3849              		.loc 1 189 0
 3850 01b8 38309FE5 		ldr	r3, .L348+16
 3851 01bc 0530D3E5 		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 3852 01c0 000053E3 		cmp	r3, #0
 189:main.c        **** 	else if(mode == 1){ mode_1(); }
 3853              		.loc 1 189 0 is_stmt 0 discriminator 1
 3854 01c4 FEFFFF0B 		bleq	mode_0
 3855              	.LVL292:
 3856              	.L341:
 190:main.c        **** 	else if(mode == 2){ mode_2(); }
 3857              		.loc 1 190 0 is_stmt 1
 3858 01c8 010053E3 		cmp	r3, #1
 190:main.c        **** 	else if(mode == 2){ mode_2(); }
 3859              		.loc 1 190 0 is_stmt 0 discriminator 1
 3860 01cc FEFFFF0B 		bleq	mode_1
 3861              	.LVL293:
 3862              	.L342:
 191:main.c        **** 
 3863              		.loc 1 191 0 is_stmt 1
 3864 01d0 020053E3 		cmp	r3, #2
 191:main.c        **** 
 3865              		.loc 1 191 0 is_stmt 0 discriminator 1
 3866 01d4 FEFFFF0B 		bleq	mode_2
 3867              	.LVL294:
 3868              	.L343:
 194:main.c        **** 
 3869              		.loc 1 194 0 is_stmt 1
 3870 01d8 0000A0E3 		mov	r0, #0
 3871 01dc 2CD08DE2 		add	sp, sp, #44
 3872 01e0 F041BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, lr}
 3873 01e4 1EFF2FE1 		bx	lr
 3874              	.L349:
 3875              		.align	2
 3876              	.L348:
 3877 01e8 008002E0 		.word	-536707072
 3878 01ec 87020000 		.word	.LC29
 3879 01f0 93020000 		.word	.LC30
 3880 01f4 00000000 		.word	handle
 3881 01f8 00000000 		.word	.LANCHOR0
 3882 01fc 00000000 		.word	.LANCHOR1
 3883 0200 20A10700 		.word	500000
 3884              		.cfi_endproc
 3885              	.LFE0:
 3887              		.comm	stringBuf,256,1
 3888              		.comm	fd,4,4
 3889              		.comm	handle,4,4
 3890              		.comm	stringSize,4,4
 3891              		.global	get_frame
 3892              		.global	RX_in
 3893              		.global	log_array2
 3894              		.global	log_array1
 3895              		.comm	RX_array2,512,1
 3896              		.comm	RX_array1,512,1
 3897              		.section	.rodata.str1.1,"aMS",%progbits,1
 3898              	.LC0:
 3899 0000 4D4F4445 		.ascii	"MODE 2\012\015\000"
 3899      20320A0D 
 3899      00
 3900              	.LC1:
 3901 0009 4D4F4445 		.ascii	"MODE 1\012\015\000"
 3901      20310A0D 
 3901      00
 3902              	.LC2:
 3903 0012 4D4F4445 		.ascii	"MODE 0\012\015\000"
 3903      20300A0D 
 3903      00
 3904              	.LC3:
 3905 001b 256400   		.ascii	"%d\000"
 3906              	.LC4:
 3907 001e 20202000 		.ascii	"   \000"
 3908              	.LC5:
 3909 0022 53442049 		.ascii	"SD Init Error\012\015\000"
 3909      6E697420 
 3909      4572726F 
 3909      720A0D00 
 3910              	.LC6:
 3911 0032 5344204F 		.ascii	"SD OpenRoot Error\012\015\000"
 3911      70656E52 
 3911      6F6F7420 
 3911      4572726F 
 3911      720A0D00 
 3912              	.LC7:
 3913 0046 0A0D4C6F 		.ascii	"\012\015Logomatic V2 Test Code:\012\015\000"
 3913      676F6D61 
 3913      74696320 
 3913      56322054 
 3913      65737420 
 3914              	.LC8:
 3915 0062 41444320 		.ascii	"ADC Test will begin in 5 seconds, hit stop button t"
 3915      54657374 
 3915      2077696C 
 3915      6C206265 
 3915      67696E20 
 3916 0095 6F207465 		.ascii	"o terminate the test.\015\012\012\000"
 3916      726D696E 
 3916      61746520 
 3916      74686520 
 3916      74657374 
 3917              	.LC9:
 3918 00ae 0A0D00   		.ascii	"\012\015\000"
 3919              	.LC10:
 3920 00b1 0A0D5465 		.ascii	"\012\015Test complete, locking up...\012\015\000"
 3920      73742063 
 3920      6F6D706C 
 3920      6574652C 
 3920      206C6F63 
 3921              	.LC11:
 3922 00d2 4C4F4743 		.ascii	"LOGCON.txt\000"
 3922      4F4E2E74 
 3922      787400
 3923              	.LC12:
 3924 00dd 4572726F 		.ascii	"Error creating LOGCON.txt, locking up...\012\015\000"
 3924      72206372 
 3924      65617469 
 3924      6E67204C 
 3924      4F47434F 
 3925              	.LC13:
 3926 0108 4D4F4445 		.ascii	"MODE = 0\015\012ASCII = N\015\012Baud = 4\015\012Fr"
 3926      203D2030 
 3926      0D0A4153 
 3926      43494920 
 3926      3D204E0D 
 3927 0129 65717565 		.ascii	"equency = 100\015\012Trigger Character = $\015\012T"
 3927      6E637920 
 3927      3D203130 
 3927      300D0A54 
 3927      72696767 
 3928 0150 65787420 		.ascii	"ext Frame = 100\015\012AD1.3 = N\015\012AD0.3 = N\015"
 3928      4672616D 
 3928      65203D20 
 3928      3130300D 
 3928      0A414431 
 3929 0176 0A414430 		.ascii	"\012AD0.2 = N\015\012AD0.1 = N\015\012AD1.2 = N\015"
 3929      2E32203D 
 3929      204E0D0A 
 3929      4144302E 
 3929      31203D20 
 3930 0197 0A414430 		.ascii	"\012AD0.4 = N\015\012AD1.7 = N\015\012AD1.6 = N\015"
 3930      2E34203D 
 3930      204E0D0A 
 3930      4144312E 
 3930      37203D20 
 3931 01b8 0A536166 		.ascii	"\012Saftey On = Y\015\012\000"
 3931      74657920 
 3931      4F6E203D 
 3931      20590D0A 
 3931      00
 3932              	.LC14:
 3933 01c9 6D6F6465 		.ascii	"mode = %d\012\015\000"
 3933      203D2025 
 3933      640A0D00 
 3934              	.LC15:
 3935 01d5 61736320 		.ascii	"asc = %c\012\015\000"
 3935      3D202563 
 3935      0A0D00
 3936              	.LC16:
 3937 01e0 62617564 		.ascii	"baud = %d\012\015\000"
 3937      203D2025 
 3937      640A0D00 
 3938              	.LC17:
 3939 01ec 66726571 		.ascii	"freq = %d\012\015\000"
 3939      203D2025 
 3939      640A0D00 
 3940              	.LC18:
 3941 01f8 74726967 		.ascii	"trig = %c\012\015\000"
 3941      203D2025 
 3941      630A0D00 
 3942              	.LC19:
 3943 0204 6672616D 		.ascii	"frame = %d\012\015\000"
 3943      65203D20 
 3943      25640A0D 
 3943      00
 3944              	.LC20:
 3945 0211 6164315F 		.ascii	"ad1_3 = %c\012\015\000"
 3945      33203D20 
 3945      25630A0D 
 3945      00
 3946              	.LC21:
 3947 021e 6164305F 		.ascii	"ad0_3 = %c\012\015\000"
 3947      33203D20 
 3947      25630A0D 
 3947      00
 3948              	.LC22:
 3949 022b 6164305F 		.ascii	"ad0_2 = %c\012\015\000"
 3949      32203D20 
 3949      25630A0D 
 3949      00
 3950              	.LC23:
 3951 0238 6164305F 		.ascii	"ad0_1 = %c\012\015\000"
 3951      31203D20 
 3951      25630A0D 
 3951      00
 3952              	.LC24:
 3953 0245 6164315F 		.ascii	"ad1_2 = %c\012\015\000"
 3953      32203D20 
 3953      25630A0D 
 3953      00
 3954              	.LC25:
 3955 0252 6164305F 		.ascii	"ad0_4 = %c\012\015\000"
 3955      34203D20 
 3955      25630A0D 
 3955      00
 3956              	.LC26:
 3957 025f 6164315F 		.ascii	"ad1_7 = %c\012\015\000"
 3957      37203D20 
 3957      25630A0D 
 3957      00
 3958              	.LC27:
 3959 026c 6164315F 		.ascii	"ad1_6 = %c\012\015\000"
 3959      36203D20 
 3959      25630A0D 
 3959      00
 3960              	.LC28:
 3961 0279 73616665 		.ascii	"safety = %c\012\015\000"
 3961      7479203D 
 3961      2025630A 
 3961      0D00
 3962              	.LC29:
 3963 0287 4C4F4725 		.ascii	"LOG%02d.txt\000"
 3963      3032642E 
 3963      74787400 
 3964              	.LC30:
 3965 0293 546F6F20 		.ascii	"Too Many Logs!\012\015\000"
 3965      4D616E79 
 3965      204C6F67 
 3965      73210A0D 
 3965      00
 3966              		.data
 3967              		.align	2
 3968              		.set	.LANCHOR1,. + 0
 3971              	trig:
 3972 0000 24       		.byte	36
 3973 0001 00       		.space	1
 3976              	frame:
 3977 0002 6400     		.short	100
 3980              	ad1_3:
 3981 0004 4E       		.byte	78
 3984              	asc:
 3985 0005 4E       		.byte	78
 3988              	ad0_3:
 3989 0006 4E       		.byte	78
 3992              	ad0_2:
 3993 0007 4E       		.byte	78
 3996              	ad0_1:
 3997 0008 4E       		.byte	78
 4000              	ad1_2:
 4001 0009 4E       		.byte	78
 4004              	ad0_4:
 4005 000a 4E       		.byte	78
 4008              	ad1_7:
 4009 000b 4E       		.byte	78
 4012              	ad1_6:
 4013 000c 4E       		.byte	78
 4014 000d 000000   		.space	3
 4017              	baud:
 4018 0010 80250000 		.word	9600
 4021              	freq:
 4022 0014 64000000 		.word	100
 4023              		.bss
 4024              		.align	1
 4025              		.set	.LANCHOR0,. + 0
 4028              	RX_in:
 4029 0000 0000     		.space	2
 4032              	log_array1:
 4033 0002 00       		.space	1
 4036              	log_array2:
 4037 0003 00       		.space	1
 4040              	get_frame:
 4041 0004 00       		.space	1
 4044              	mode:
 4045 0005 00       		.space	1
 4046              		.text
 4047              	.Letext0:
 4048              		.file 2 "/opt/local/lib/gcc/arm-elf/4.7.3/include/stddef.h"
 4049              		.file 3 "/opt/local/lib/gcc/arm-elf/4.7.3/../../../../arm-elf/include/stdint.h"
 4050              		.file 4 "../lib/rprintf.h"
 4051              		.file 5 "../lib/itoa.h"
 4052              		.file 6 "../lib/fat.h"
 4053              		.file 7 "../LPCUSB/armVIC.h"
 4054              		.file 8 "../lib/sd_raw.h"
 4055              		.file 9 "../lib/rootdir.h"
 4056              		.file 10 "/opt/local/lib/gcc/arm-elf/4.7.3/../../../../arm-elf/include/string.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:5      .text:0000000000000000 $a
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:7      .text:0000000000000000 UART0ISR
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:82     .text:0000000000000090 $d
                            *COM*:0000000000000200 RX_array1
                            *COM*:0000000000000200 RX_array2
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:89     .text:00000000000000a0 $a
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:91     .text:00000000000000a0 UART0ISR_2
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:220    .text:00000000000001b8 $d
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:228    .text:00000000000001cc $a
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:230    .text:00000000000001cc MODE2ISR
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:1594   .text:0000000000000dd4 $d
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:1612   .text:0000000000000e10 $a
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:1615   .text:0000000000000e10 Initialize
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:1659   .text:0000000000000e68 $d
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:1666   .text:0000000000000e78 $a
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:1669   .text:0000000000000e78 feed
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:1688   .text:0000000000000e90 $d
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:1692   .text:0000000000000e94 $a
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:1695   .text:0000000000000e94 FIQ_Routine
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:1736   .text:0000000000000ebc $d
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:1740   .text:0000000000000ec0 $a
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:1743   .text:0000000000000ec0 SWI_Routine
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:1760   .text:0000000000000ec4 UNDEF_Routine
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:1789   .text:0000000000000edc $d
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:1793   .text:0000000000000ee0 $a
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:1796   .text:0000000000000ee0 setup_uart0
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:1978   .text:0000000000001048 $d
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:1986   .text:000000000000105c $a
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:1989   .text:000000000000105c stat
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:2024   .text:0000000000001088 $d
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:2028   .text:000000000000108c $a
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:2031   .text:000000000000108c mode_action
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:2325   .text:00000000000011e8 $d
                            *COM*:0000000000000004 handle
                            *COM*:0000000000000004 stringSize
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:2339   .text:0000000000001204 $a
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:2342   .text:0000000000001204 mode_2
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:2410   .text:0000000000001288 $d
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:2418   .text:000000000000129c $a
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:2421   .text:000000000000129c mode_1
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:2455   .text:00000000000012cc $d
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:2461   .text:00000000000012d8 $a
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:2464   .text:00000000000012d8 mode_0
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:2495   .text:0000000000001304 $d
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:2501   .text:0000000000001310 $a
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:2504   .text:0000000000001310 AD_conversion
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:2593   .text:000000000000139c $d
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:2601   .text:00000000000013b0 $a
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:2604   .text:00000000000013b0 fat_initialize
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:2642   .text:00000000000013e4 $d
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:2647   .text:00000000000013ec $a
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:2650   .text:00000000000013ec delay_ms
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:2684   .text:0000000000001410 $d
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:2688   .text:0000000000001414 $a
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:2691   .text:0000000000001414 test
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:2817   .text:00000000000014e0 $d
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:2834   .text:0000000000001518 $a
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:2837   .text:0000000000001518 Log_init
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:3455   .text:0000000000001a2c $d
                            *COM*:0000000000000004 fd
                            *COM*:0000000000000100 stringBuf
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:3489   .text.startup:0000000000000000 $a
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:3492   .text.startup:0000000000000000 main
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:3877   .text.startup:00000000000001e8 $d
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:4040   .bss:0000000000000004 get_frame
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:4028   .bss:0000000000000000 RX_in
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:4036   .bss:0000000000000003 log_array2
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:4032   .bss:0000000000000002 log_array1
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:3967   .data:0000000000000000 $d
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:3971   .data:0000000000000000 trig
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:3976   .data:0000000000000002 frame
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:3980   .data:0000000000000004 ad1_3
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:3984   .data:0000000000000005 asc
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:3988   .data:0000000000000006 ad0_3
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:3992   .data:0000000000000007 ad0_2
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:3996   .data:0000000000000008 ad0_1
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:4000   .data:0000000000000009 ad1_2
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:4004   .data:000000000000000a ad0_4
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:4008   .data:000000000000000b ad1_7
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:4012   .data:000000000000000c ad1_6
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:4017   .data:0000000000000010 baud
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:4021   .data:0000000000000014 freq
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:4024   .bss:0000000000000000 $d
/var/folders/Jn/Jn5nG78rFb8fju5EIf+vh++++TM/-Tmp-//ccrcmNRs.s:4044   .bss:0000000000000005 mode
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
itoa
rprintf_devopen
putc_serial0
enableIRQ
fat_write_file
sd_raw_sync
__divsi3
rprintf
sd_raw_init
openroot
root_file_exists
root_open
fat_read_file
fat_close_file
root_open_new
strcpy
strlen
enableFIQ
string_printf
