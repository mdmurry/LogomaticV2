
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000c91c  00010000  00010000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ctors        00000000  0001c91c  0001c91c  000208cc  2**0
                  CONTENTS
  2 .dtors        00000000  0001c91c  0001c91c  000208cc  2**0
                  CONTENTS
  3 .data         000008cc  40000000  0001c91c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000af4  400008cc  0001d1e8  000208cc  2**2
                  ALLOC
  5 .stack        00000c00  40001400  40001400  000208d0  2**4
                  CONTENTS
  6 .comment      00000011  00000000  00000000  000214d0  2**0
                  CONTENTS, READONLY
  7 .ARM.attributes 00000010  00000000  00000000  000214e1  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000005e8  00000000  00000000  000214f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00013fc2  00000000  00000000  00021ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003aca  00000000  00000000  00035aa2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006862  00000000  00000000  0003956c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000015dc  00000000  00000000  0003fdd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000027bb  00000000  00000000  000413ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c164  00000000  00000000  00043b67  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000848  00000000  00000000  0004fcd0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00010000 <__Vectors>:

// Exception Vectors
// Mapped to Address 0.
// Absolute addressing mode must be used.

__Vectors:        LDR     PC,Reset_Addr         
   10000:	e59ff018 	ldr	pc, [pc, #24]	; 10020 <Reset_Addr>
                LDR     PC,Undef_Addr
   10004:	e59ff018 	ldr	pc, [pc, #24]	; 10024 <Undef_Addr>
                LDR     PC,SWI_Addr
   10008:	e59ff018 	ldr	pc, [pc, #24]	; 10028 <SWI_Addr>
                LDR     PC,PAbt_Addr
   1000c:	e59ff018 	ldr	pc, [pc, #24]	; 1002c <PAbt_Addr>
                LDR     PC,DAbt_Addr
   10010:	e59ff018 	ldr	pc, [pc, #24]	; 10030 <DAbt_Addr>
                NOP                            /* Reserved Vector */
   10014:	e1a00000 	nop			; (mov r0, r0)
//                LDR     PC,IRQ_Addr
//                LDR     PC,[PC, #-0x0FF0]      /* Vector from VicVectAddr */
                LDR     PC,IRQ_Wrapper_Addr
   10018:	e59ff018 	ldr	pc, [pc, #24]	; 10038 <IRQ_Wrapper_Addr>
                LDR     PC,FIQ_Addr
   1001c:	e59ff018 	ldr	pc, [pc, #24]	; 1003c <FIQ_Addr>

00010020 <Reset_Addr>:
   10020:	00010098 	.word	0x00010098

00010024 <Undef_Addr>:
   10024:	00010040 	.word	0x00010040

00010028 <SWI_Addr>:
   10028:	00000000 	.word	0x00000000

0001002c <PAbt_Addr>:
   1002c:	00010044 	.word	0x00010044

00010030 <DAbt_Addr>:
   10030:	00010048 	.word	0x00010048
   10034:	00000000 	.word	0x00000000

00010038 <IRQ_Wrapper_Addr>:
   10038:	00010050 	.word	0x00010050

0001003c <FIQ_Addr>:
   1003c:	0001004c 	.word	0x0001004c

00010040 <Undef_Handler>:
                  .word     0                      /* Reserved Address */
// IRQ_Addr:         .word     __IRQ_Handler
IRQ_Wrapper_Addr: .word    __IRQ_Wrapper
FIQ_Addr:         .word     FIQ_Handler

Undef_Handler:  B       Undef_Handler
   10040:	eafffffe 	b	10040 <Undef_Handler>

00010044 <PAbt_Handler>:
/* SWI_Handler:    B       SWI_Handler */
PAbt_Handler:   B       PAbt_Handler
   10044:	eafffffe 	b	10044 <PAbt_Handler>

00010048 <DAbt_Handler>:
DAbt_Handler:   B       DAbt_Handler
   10048:	eafffffe 	b	10048 <DAbt_Handler>

0001004c <FIQ_Handler>:
/* IRQ_Handler:    B       IRQ_Handler */
FIQ_Handler:    B       FIQ_Handler
   1004c:	eafffffe 	b	1004c <FIQ_Handler>

00010050 <__IRQ_Wrapper>:
        .global __IRQ_Wrapper
        .func   __IRQ_Wrapper
__IRQ_Wrapper:
/*- Manage Exception Entry  */
/*- Adjust and save LR_irq in IRQ stack  */
            sub         lr, lr, #4
   10050:	e24ee004 	sub	lr, lr, #4
            stmfd       sp!, {lr}
   10054:	e92d4000 	stmfd	sp!, {lr}

/*- Save SPSR need to be saved for nested interrupt */
            mrs         r14, SPSR
   10058:	e14fe000 	mrs	lr, SPSR
            stmfd       sp!, {r14}
   1005c:	e92d4000 	stmfd	sp!, {lr}

/*- Save and r0 in IRQ stack  */
            stmfd       sp!, {r0}
   10060:	e92d0001 	stmfd	sp!, {r0}

/*- Write in the IVR to support Protect Mode  */
/*- No effect in Normal Mode  */
/*- De-assert the NIRQ and clear the source in Protect Mode */
/* R14 = LR */
            ldr         r14, =VIC_base_addr
   10064:	e59fe028 	ldr	lr, [pc, #40]	; 10094 <__IRQ_Wrapper+0x44>
            ldr         r0 , [r14, #VIC_vect_offs]
   10068:	e59e0030 	ldr	r0, [lr, #48]	; 0x30
            /*str         r14, [r14, #VIC_vect_offs]*/

/*- Enable Interrupt and Switch in Supervisor Mode */
            msr         CPSR_c, #Mode_SVC
   1006c:	e321f013 	msr	CPSR_c, #19

/*- Save scratch/used registers and LR in User Stack */
            /*stmfd       sp!, { r1-r3, r12, r14}*/
            stmfd       sp!, { r1-r12, r14 }
   10070:	e92d5ffe 	push	{r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}

/*- Branch to the routine pointed by the VIC-Vector-Address  */
            mov         r14, pc
   10074:	e1a0e00f 	mov	lr, pc
            bx          r0
   10078:	e12fff10 	bx	r0
/*- Restore scratch/used registers and LR from User Stack*/
            /* ldmia       sp!, { r1-r3, r12, r14} */
            ldmia       sp!, { r1-r12, r14 }
   1007c:	e8bd5ffe 	pop	{r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}

/*- Disable Interrupt and switch back in IRQ mode */
            msr         CPSR_c, #I_Bit | Mode_IRQ
   10080:	e321f092 	msr	CPSR_c, #146	; 0x92
            ldr         r14, =VIC_base_addr
            str         r14, [r14, #VIC_vect_offs]
#endif

/*- Restore SPSR_irq and r0 from IRQ stack */
            ldmia       sp!, {r0}
   10084:	e8bd0001 	ldmfd	sp!, {r0}

/*- Restore SPSR_irq and r0 from IRQ stack */
            ldmia       sp!, {r14}
   10088:	e8bd4000 	ldmfd	sp!, {lr}
            msr         SPSR_cxsf, r14
   1008c:	e16ff00e 	msr	SPSR_fsxc, lr

/*- Restore adjusted  LR_irq from IRQ stack directly in the PC */
            ldmia       sp!, {pc}^
   10090:	e8fd8000 	ldm	sp!, {pc}^

/*- Write in the IVR to support Protect Mode  */
/*- No effect in Normal Mode  */
/*- De-assert the NIRQ and clear the source in Protect Mode */
/* R14 = LR */
            ldr         r14, =VIC_base_addr
   10094:	fffff000 	.word	0xfffff000

00010098 <__startup>:
.endif
                STR     R1, [R0]
.endif

// Setup Stack for each mode
                LDR     R0, =Top_Stack
   10098:	e59f00c8 	ldr	r0, [pc, #200]	; 10168 <__exit_THUMB+0x4>

// Enter Undefined Instruction Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_UND|I_Bit|F_Bit
   1009c:	e321f0db 	msr	CPSR_c, #219	; 0xdb
                MOV     SP, R0
   100a0:	e1a0d000 	mov	sp, r0
                SUB     R0, R0, #UND_Stack_Size
   100a4:	e2400080 	sub	r0, r0, #128	; 0x80

// Enter Abort Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_ABT|I_Bit|F_Bit
   100a8:	e321f0d7 	msr	CPSR_c, #215	; 0xd7
                MOV     SP, R0
   100ac:	e1a0d000 	mov	sp, r0
                SUB     R0, R0, #ABT_Stack_Size
   100b0:	e2400080 	sub	r0, r0, #128	; 0x80

// Enter FIQ Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_FIQ|I_Bit|F_Bit
   100b4:	e321f0d1 	msr	CPSR_c, #209	; 0xd1
                MOV     SP, R0
   100b8:	e1a0d000 	mov	sp, r0
                SUB     R0, R0, #FIQ_Stack_Size
   100bc:	e2400080 	sub	r0, r0, #128	; 0x80

// Enter IRQ Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_IRQ|I_Bit|F_Bit
   100c0:	e321f0d2 	msr	CPSR_c, #210	; 0xd2
                MOV     SP, R0
   100c4:	e1a0d000 	mov	sp, r0
                SUB     R0, R0, #IRQ_Stack_Size
   100c8:	e2400c02 	sub	r0, r0, #512	; 0x200

// Enter Supervisor Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_SVC|I_Bit|F_Bit
   100cc:	e321f0d3 	msr	CPSR_c, #211	; 0xd3
                MOV     SP, R0
   100d0:	e1a0d000 	mov	sp, r0
                SUB     R0, R0, #SVC_Stack_Size
   100d4:	e2400080 	sub	r0, r0, #128	; 0x80

// Enter User Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_SYS /* Interrupts enabled */
   100d8:	e321f01f 	msr	CPSR_c, #31
//				MSR     CPSR_c, #Mode_USR|I_Bit|F_Bit /* Interrupts disabled */
                MOV     SP, R0
   100dc:	e1a0d000 	mov	sp, r0


.if (RAM_MODE==0)
/* Relocate .data section (Copy from ROM to RAM) */
                LDR     R1, =_etext 
   100e0:	e59f1084 	ldr	r1, [pc, #132]	; 1016c <__exit_THUMB+0x8>
                LDR     R2, =_data 
   100e4:	e59f2084 	ldr	r2, [pc, #132]	; 10170 <__exit_THUMB+0xc>
                LDR     R3, =_edata 
   100e8:	e59f3084 	ldr	r3, [pc, #132]	; 10174 <__exit_THUMB+0x10>
                CMP     R2, R3
   100ec:	e1520003 	cmp	r2, r3
                BEQ     DataIsEmpty
   100f0:	0a000003 	beq	10104 <DataIsEmpty>

000100f4 <LoopRel>:
LoopRel:        CMP     R2, R3 
   100f4:	e1520003 	cmp	r2, r3
                LDRLO   R0, [R1], #4 
   100f8:	34910004 	ldrcc	r0, [r1], #4
                STRLO   R0, [R2], #4 
   100fc:	34820004 	strcc	r0, [r2], #4
                BLO     LoopRel 
   10100:	3afffffb 	bcc	100f4 <LoopRel>

00010104 <DataIsEmpty>:
DataIsEmpty:
.endif
 
/* Clear .bss section (Zero init) */
                MOV     R0, #0 
   10104:	e3a00000 	mov	r0, #0
                LDR     R1, =__bss_start__ 
   10108:	e59f1068 	ldr	r1, [pc, #104]	; 10178 <__exit_THUMB+0x14>
                LDR     R2, =__bss_end__ 
   1010c:	e59f2068 	ldr	r2, [pc, #104]	; 1017c <__exit_THUMB+0x18>
                CMP     R1,R2
   10110:	e1510002 	cmp	r1, r2
                BEQ     BSSIsEmpty
   10114:	0a000002 	beq	10124 <BSSIsEmpty>

00010118 <LoopZI>:
LoopZI:         CMP     R1, R2 
   10118:	e1510002 	cmp	r1, r2
                STRLO   R0, [R1], #4 
   1011c:	34810004 	strcc	r0, [r1], #4
                BLO     LoopZI 
   10120:	3afffffc 	bcc	10118 <LoopZI>

00010124 <BSSIsEmpty>:
BSSIsEmpty:


// call C++ constructors of global objects
		LDR 	r0, =__ctors_start__
   10124:	e59f0054 	ldr	r0, [pc, #84]	; 10180 <__exit_THUMB+0x1c>
		LDR 	r1, =__ctors_end__
   10128:	e59f1054 	ldr	r1, [pc, #84]	; 10184 <__exit_THUMB+0x20>

0001012c <ctor_loop>:
ctor_loop:
		CMP 	r0, r1
   1012c:	e1500001 	cmp	r0, r1
		BEQ 	ctor_end
   10130:	0a000005 	beq	1014c <ctor_end>
		LDR 	r2, [r0], #4
   10134:	e4902004 	ldr	r2, [r0], #4
		STMFD 	sp!, {r0-r1}
   10138:	e92d0003 	push	{r0, r1}
		MOV 	lr, pc
   1013c:	e1a0e00f 	mov	lr, pc
		MOV 	pc, r2
   10140:	e1a0f002 	mov	pc, r2
		LDMFD 	sp!, {r0-r1}
   10144:	e8bd0003 	pop	{r0, r1}
		B 		ctor_loop
   10148:	eafffff7 	b	1012c <ctor_loop>

0001014c <ctor_end>:
ctor_end:

// Enter the C code
                //LDR     R0,=INIT
                LDR     R0,=main
   1014c:	e59f0034 	ldr	r0, [pc, #52]	; 10188 <__exit_THUMB+0x24>
                TST     R0,#1             // Bit-0 set: main is Thumb
   10150:	e3100001 	tst	r0, #1
                LDREQ   LR,=__exit_ARM    // ARM Mode
   10154:	059fe030 	ldreq	lr, [pc, #48]	; 1018c <__exit_THUMB+0x28>
                LDRNE   LR,=__exit_THUMB  // Thumb Mode
   10158:	159fe030 	ldrne	lr, [pc, #48]	; 10190 <__exit_THUMB+0x2c>
                BX      R0
   1015c:	e12fff10 	bx	r0

00010160 <__exit_ARM>:

.arm
.global __exit_ARM
.func __exit_ARM
__exit_ARM:
                B       __exit_ARM
   10160:	eafffffe 	b	10160 <__exit_ARM>

00010164 <__exit_THUMB>:

.thumb
.global __exit_THUMB
.func __exit_THUMB
__exit_THUMB:
                B       __exit_THUMB
   10164:	e7fe      	b.n	10164 <__exit_THUMB>
   10166:	0000      	.short	0x0000
.endif
                STR     R1, [R0]
.endif

// Setup Stack for each mode
                LDR     R0, =Top_Stack
   10168:	40002000 	.word	0x40002000
                MOV     SP, R0


.if (RAM_MODE==0)
/* Relocate .data section (Copy from ROM to RAM) */
                LDR     R1, =_etext 
   1016c:	0001c91c 	.word	0x0001c91c
                LDR     R2, =_data 
   10170:	40000000 	.word	0x40000000
                LDR     R3, =_edata 
   10174:	400008cc 	.word	0x400008cc
DataIsEmpty:
.endif
 
/* Clear .bss section (Zero init) */
                MOV     R0, #0 
                LDR     R1, =__bss_start__ 
   10178:	400008cc 	.word	0x400008cc
                LDR     R2, =__bss_end__ 
   1017c:	400013c0 	.word	0x400013c0
                BLO     LoopZI 
BSSIsEmpty:


// call C++ constructors of global objects
		LDR 	r0, =__ctors_start__
   10180:	0001c91c 	.word	0x0001c91c
		LDR 	r1, =__ctors_end__
   10184:	0001c91c 	.word	0x0001c91c
		B 		ctor_loop
ctor_end:

// Enter the C code
                //LDR     R0,=INIT
                LDR     R0,=main
   10188:	0001247c 	.word	0x0001247c
                TST     R0,#1             // Bit-0 set: main is Thumb
                LDREQ   LR,=__exit_ARM    // ARM Mode
   1018c:	00010160 	.word	0x00010160
                LDRNE   LR,=__exit_THUMB  // Thumb Mode
   10190:	00010164 	.word	0x00010164

00010194 <DefaultVICHandler>:
**
******************************************************************************/
// mthomas: inserted static to avoid gcc-warning
static void DefaultVICHandler (void) __attribute__ ((interrupt("IRQ")));
static void DefaultVICHandler (void)
{
   10194:	e24ee004 	sub	lr, lr, #4
   10198:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
    /* if the IRQ is not installed into the VIC, and interrupt occurs, the
        default interrupt VIC address will be used. This could happen in a race
        condition. For debugging, use this endless loop to trace back. */
    /* For more details, see Philips appnote AN10414 */
    VICVectAddr = 0;        /* Acknowledge Interrupt */
   1019c:	e3a02000 	mov	r2, #0
   101a0:	e3e03000 	mvn	r3, #0
   101a4:	e5032fcf 	str	r2, [r3, #-4047]	; 0xfffff031
    rprintf("\nDefault VIC Stop");
   101a8:	e59f0004 	ldr	r0, [pc, #4]	; 101b4 <DefaultVICHandler+0x20>
   101ac:	eb000972 	bl	1277c <rprintf>
   101b0:	eafffffe 	b	101b0 <DefaultVICHandler+0x1c>
   101b4:	0001c4ec 	.word	0x0001c4ec

000101b8 <init_VIC>:
{
    DWORD i = 0;
    DWORD *vect_addr, *vect_cntl;

    /* initialize VIC*/
    VICIntEnClr = 0xffffffff;
   101b8:	e3e03000 	mvn	r3, #0
    VICVectAddr = 0;
   101bc:	e3a02000 	mov	r2, #0
{
    DWORD i = 0;
    DWORD *vect_addr, *vect_cntl;

    /* initialize VIC*/
    VICIntEnClr = 0xffffffff;
   101c0:	e5033feb 	str	r3, [r3, #-4075]	; 0xfffff015
    VICVectAddr = 0;
    VICIntSelect = 0;

    /* set all the vector and vector control register to 0 */
    for ( i = 0; i < VIC_SIZE; i++ )
   101c4:	e59f1028 	ldr	r1, [pc, #40]	; 101f4 <init_VIC+0x3c>
    DWORD i = 0;
    DWORD *vect_addr, *vect_cntl;

    /* initialize VIC*/
    VICIntEnClr = 0xffffffff;
    VICVectAddr = 0;
   101c8:	e5032fcf 	str	r2, [r3, #-4047]	; 0xfffff031
    VICIntSelect = 0;
   101cc:	e5032ff3 	str	r2, [r3, #-4083]	; 0xfffff00d
   101d0:	e59f3020 	ldr	r3, [pc, #32]	; 101f8 <init_VIC+0x40>
    /* set all the vector and vector control register to 0 */
    for ( i = 0; i < VIC_SIZE; i++ )
    {
        vect_addr = (DWORD *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + i*4);
        vect_cntl = (DWORD *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + i*4);
        *vect_addr = 0;
   101d4:	e5a32004 	str	r2, [r3, #4]!
    VICIntEnClr = 0xffffffff;
    VICVectAddr = 0;
    VICIntSelect = 0;

    /* set all the vector and vector control register to 0 */
    for ( i = 0; i < VIC_SIZE; i++ )
   101d8:	e1530001 	cmp	r3, r1
    {
        vect_addr = (DWORD *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + i*4);
        vect_cntl = (DWORD *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + i*4);
        *vect_addr = 0;
        *vect_cntl = 0;
   101dc:	e5832100 	str	r2, [r3, #256]	; 0x100
    VICIntEnClr = 0xffffffff;
    VICVectAddr = 0;
    VICIntSelect = 0;

    /* set all the vector and vector control register to 0 */
    for ( i = 0; i < VIC_SIZE; i++ )
   101e0:	1afffffb 	bne	101d4 <init_VIC+0x1c>
        *vect_addr = 0;
        *vect_cntl = 0;
    }

    /* Install the default VIC handler here */
    VICDefVectAddr = (DWORD)DefaultVICHandler;
   101e4:	e59f2010 	ldr	r2, [pc, #16]	; 101fc <init_VIC+0x44>
   101e8:	e3e03000 	mvn	r3, #0
   101ec:	e5032fcb 	str	r2, [r3, #-4043]	; 0xfffff035
   101f0:	e12fff1e 	bx	lr
   101f4:	fffff13c 	.word	0xfffff13c
   101f8:	fffff0fc 	.word	0xfffff0fc
   101fc:	00010194 	.word	0x00010194

00010200 <install_irq>:
{
    DWORD i;
    DWORD *vect_addr;
    DWORD *vect_cntl;

    VICIntEnClr = 1 << IntNumber;   /* Disable Interrupt */
   10200:	e3a0c001 	mov	ip, #1
   10204:	e1a0c01c 	lsl	ip, ip, r0
   10208:	e3e03000 	mvn	r3, #0
   1020c:	e59f2050 	ldr	r2, [pc, #80]	; 10264 <install_irq+0x64>
** parameters:          Interrupt number and interrupt handler address
** Returned value:      true or false, when the table is full, return false
**
******************************************************************************/
DWORD install_irq( DWORD IntNumber, void *HandlerAddr )
{
   10210:	e92d0030 	push	{r4, r5}
    DWORD i;
    DWORD *vect_addr;
    DWORD *vect_cntl;

    VICIntEnClr = 1 << IntNumber;   /* Disable Interrupt */
   10214:	e503cfeb 	str	ip, [r3, #-4075]	; 0xfffff015

    for ( i = 0; i < VIC_SIZE; i++ )
   10218:	e3a03000 	mov	r3, #0
    {
        /* find first un-assigned VIC address for the handler */

        vect_addr = (DWORD *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + i*4);
   1021c:	e1a04002 	mov	r4, r2
        vect_cntl = (DWORD *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + i*4);
        if ( *vect_addr == (DWORD)NULL )
   10220:	e4925004 	ldr	r5, [r2], #4
   10224:	e3550000 	cmp	r5, #0
   10228:	1a000007 	bne	1024c <install_irq+0x4c>
    for ( i = 0; i < VIC_SIZE; i++ )
    {
        /* find first un-assigned VIC address for the handler */

        vect_addr = (DWORD *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + i*4);
        vect_cntl = (DWORD *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + i*4);
   1022c:	e1a03103 	lsl	r3, r3, #2
        if ( *vect_addr == (DWORD)NULL )
        {
            *vect_addr = (DWORD)HandlerAddr;    /* set interrupt vector */
            *vect_cntl = (DWORD)(IRQ_SLOT_EN | IntNumber);
   10230:	e3800020 	orr	r0, r0, #32

        vect_addr = (DWORD *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + i*4);
        vect_cntl = (DWORD *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + i*4);
        if ( *vect_addr == (DWORD)NULL )
        {
            *vect_addr = (DWORD)HandlerAddr;    /* set interrupt vector */
   10234:	e5841000 	str	r1, [r4]
            *vect_cntl = (DWORD)(IRQ_SLOT_EN | IntNumber);
   10238:	e5030e00 	str	r0, [r3, #-3584]	; 0xfffff200
    }
    if ( i == VIC_SIZE )
    {
        return( FALSE );        /* fatal error, can't find empty vector slot */
    }
    VICIntEnable = 1 << IntNumber;  /* Enable Interrupt */
   1023c:	e3e03000 	mvn	r3, #0
   10240:	e503cfef 	str	ip, [r3, #-4079]	; 0xfffff011
    return( TRUE );
   10244:	e3a00001 	mov	r0, #1
   10248:	ea000003 	b	1025c <install_irq+0x5c>
    DWORD *vect_addr;
    DWORD *vect_cntl;

    VICIntEnClr = 1 << IntNumber;   /* Disable Interrupt */

    for ( i = 0; i < VIC_SIZE; i++ )
   1024c:	e2833001 	add	r3, r3, #1
   10250:	e3530010 	cmp	r3, #16
   10254:	1afffff0 	bne	1021c <install_irq+0x1c>
            break;
        }
    }
    if ( i == VIC_SIZE )
    {
        return( FALSE );        /* fatal error, can't find empty vector slot */
   10258:	e3a00000 	mov	r0, #0
    }
    VICIntEnable = 1 << IntNumber;  /* Enable Interrupt */
    return( TRUE );
}
   1025c:	e8bd0030 	pop	{r4, r5}
   10260:	e12fff1e 	bx	lr
   10264:	fffff100 	.word	0xfffff100

00010268 <uninstall_irq>:
{
    DWORD i;
    DWORD *vect_addr;
    DWORD *vect_cntl;

    VICIntEnClr = 1 << IntNumber;   /* Disable Interrupt */
   10268:	e3a01001 	mov	r1, #1
   1026c:	e1a01011 	lsl	r1, r1, r0
   10270:	e3e03000 	mvn	r3, #0
   10274:	e59f205c 	ldr	r2, [pc, #92]	; 102d8 <uninstall_irq+0x70>
** Returned value:      true or false, when the interrupt number is not found,
**              return false
**
******************************************************************************/
DWORD uninstall_irq( DWORD IntNumber )
{
   10278:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    DWORD i;
    DWORD *vect_addr;
    DWORD *vect_cntl;

    VICIntEnClr = 1 << IntNumber;   /* Disable Interrupt */
   1027c:	e5031feb 	str	r1, [r3, #-4075]	; 0xfffff015

    for ( i = 0; i < VIC_SIZE; i++ )
   10280:	e3a03000 	mov	r3, #0
    {
        /* find first un-assigned VIC address for the handler */
        vect_addr = (DWORD *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + i*4);
        vect_cntl = (DWORD *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + i*4);
   10284:	e1a0c002 	mov	ip, r2
        if ( (*vect_cntl & ~IRQ_SLOT_EN ) == IntNumber )
   10288:	e4924004 	ldr	r4, [r2], #4
   1028c:	e3c44020 	bic	r4, r4, #32
   10290:	e1540000 	cmp	r4, r0
   10294:	1a000009 	bne	102c0 <uninstall_irq+0x58>
    VICIntEnClr = 1 << IntNumber;   /* Disable Interrupt */

    for ( i = 0; i < VIC_SIZE; i++ )
    {
        /* find first un-assigned VIC address for the handler */
        vect_addr = (DWORD *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + i*4);
   10298:	e1a03103 	lsl	r3, r3, #2
        vect_cntl = (DWORD *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + i*4);
        if ( (*vect_cntl & ~IRQ_SLOT_EN ) == IntNumber )
        {
            *vect_addr = (DWORD)NULL;   /* clear the VIC entry in the VIC table */
   1029c:	e3a02000 	mov	r2, #0
   102a0:	e5032f00 	str	r2, [r3, #-3840]	; 0xfffff100
            *vect_cntl &= ~IRQ_SLOT_EN; /* disable SLOT_EN bit */
   102a4:	e59c3000 	ldr	r3, [ip]
   102a8:	e3c33020 	bic	r3, r3, #32
   102ac:	e58c3000 	str	r3, [ip]
    if ( i == VIC_SIZE )
    {
        return( FALSE );        /* fatal error, can't find interrupt number
                            in vector slot */
    }
    VICIntEnable = 1 << IntNumber;  /* Enable Interrupt */
   102b0:	e3e03000 	mvn	r3, #0
   102b4:	e5031fef 	str	r1, [r3, #-4079]	; 0xfffff011
    return( TRUE );
   102b8:	e3a00001 	mov	r0, #1
   102bc:	ea000003 	b	102d0 <uninstall_irq+0x68>
    DWORD *vect_addr;
    DWORD *vect_cntl;

    VICIntEnClr = 1 << IntNumber;   /* Disable Interrupt */

    for ( i = 0; i < VIC_SIZE; i++ )
   102c0:	e2833001 	add	r3, r3, #1
   102c4:	e3530010 	cmp	r3, #16
   102c8:	1affffed 	bne	10284 <uninstall_irq+0x1c>
            break;
        }
    }
    if ( i == VIC_SIZE )
    {
        return( FALSE );        /* fatal error, can't find interrupt number
   102cc:	e3a00000 	mov	r0, #0
                            in vector slot */
    }
    VICIntEnable = 1 << IntNumber;  /* Enable Interrupt */
    return( TRUE );
}
   102d0:	e8bd0010 	ldmfd	sp!, {r4}
   102d4:	e12fff1e 	bx	lr
   102d8:	fffff200 	.word	0xfffff200

000102dc <UART0ISR>:
static void UART0ISR(void)
{
	char temp;


	if(RX_in < 512)
   102dc:	e59f3088 	ldr	r3, [pc, #136]	; 1036c <UART0ISR+0x90>
   102e0:	e1d320b0 	ldrh	r2, [r3]
   102e4:	e1a0c802 	lsl	ip, r2, #16
   102e8:	e1a0184c 	asr	r1, ip, #16
   102ec:	e59f007c 	ldr	r0, [pc, #124]	; 10370 <UART0ISR+0x94>
   102f0:	e3510c02 	cmp	r1, #512	; 0x200
	{
		RX_array1[RX_in] = U0RBR;
   102f4:	e5d00000 	ldrb	r0, [r0]
static void UART0ISR(void)
{
	char temp;


	if(RX_in < 512)
   102f8:	aa000009 	bge	10324 <UART0ISR+0x48>
	{
		RX_array1[RX_in] = U0RBR;
	
		RX_in++;
   102fc:	e2822001 	add	r2, r2, #1
   10300:	e1a02802 	lsl	r2, r2, #16
   10304:	e1a02822 	lsr	r2, r2, #16

		if(RX_in == 512) log_array1 = 1;
   10308:	e3520c02 	cmp	r2, #512	; 0x200
	char temp;


	if(RX_in < 512)
	{
		RX_array1[RX_in] = U0RBR;
   1030c:	e59f1060 	ldr	r1, [pc, #96]	; 10374 <UART0ISR+0x98>
	
		RX_in++;
   10310:	e1c320b0 	strh	r2, [r3]

		if(RX_in == 512) log_array1 = 1;
   10314:	03a02001 	moveq	r2, #1
	char temp;


	if(RX_in < 512)
	{
		RX_array1[RX_in] = U0RBR;
   10318:	e7c1084c 	strb	r0, [r1, ip, asr #16]
	
		RX_in++;

		if(RX_in == 512) log_array1 = 1;
   1031c:	05c32002 	strbeq	r2, [r3, #2]
   10320:	ea00000b 	b	10354 <UART0ISR+0x78>
	}
	else if(RX_in >= 512)
	{
		RX_array2[RX_in-512] = U0RBR;
		RX_in++;
   10324:	e2822001 	add	r2, r2, #1
   10328:	e1a02802 	lsl	r2, r2, #16
   1032c:	e1a02822 	lsr	r2, r2, #16

		if(RX_in == 1024)
   10330:	e3520b01 	cmp	r2, #1024	; 0x400

		if(RX_in == 512) log_array1 = 1;
	}
	else if(RX_in >= 512)
	{
		RX_array2[RX_in-512] = U0RBR;
   10334:	e59fc03c 	ldr	ip, [pc, #60]	; 10378 <UART0ISR+0x9c>
		RX_in++;
   10338:	e1c320b0 	strh	r2, [r3]

		if(RX_in == 1024)
		{
			log_array2 = 1;
   1033c:	03a02001 	moveq	r2, #1

		if(RX_in == 512) log_array1 = 1;
	}
	else if(RX_in >= 512)
	{
		RX_array2[RX_in-512] = U0RBR;
   10340:	e08c1001 	add	r1, ip, r1
		RX_in++;

		if(RX_in == 1024)
		{
			log_array2 = 1;
   10344:	05c32003 	strbeq	r2, [r3, #3]
			RX_in = 0;
   10348:	03a02000 	moveq	r2, #0

		if(RX_in == 512) log_array1 = 1;
	}
	else if(RX_in >= 512)
	{
		RX_array2[RX_in-512] = U0RBR;
   1034c:	e5410200 	strb	r0, [r1, #-512]	; 0xfffffe00
		RX_in++;

		if(RX_in == 1024)
		{
			log_array2 = 1;
			RX_in = 0;
   10350:	01c320b0 	strheq	r2, [r3]
		}
	}


	temp = U0IIR; // Have to read this to clear the interrupt 
   10354:	e59f3014 	ldr	r3, [pc, #20]	; 10370 <UART0ISR+0x94>

	VICVectAddr = 0;
   10358:	e3a02000 	mov	r2, #0
			RX_in = 0;
		}
	}


	temp = U0IIR; // Have to read this to clear the interrupt 
   1035c:	e5d33008 	ldrb	r3, [r3, #8]

	VICVectAddr = 0;
   10360:	e3e03000 	mvn	r3, #0
   10364:	e5032fcf 	str	r2, [r3, #-4047]	; 0xfffff031
   10368:	e12fff1e 	bx	lr
   1036c:	400008cc 	.word	0x400008cc
   10370:	e000c000 	.word	0xe000c000
   10374:	40000f5c 	.word	0x40000f5c
   10378:	40000c58 	.word	0x40000c58

0001037c <UART0ISR_2>:
	
}

static void UART0ISR_2(void)
{
   1037c:	e92d0030 	push	{r4, r5}
	char temp;
	temp = U0RBR;
   10380:	e59f310c 	ldr	r3, [pc, #268]	; 10494 <UART0ISR_2+0x118>
   10384:	e5d3c000 	ldrb	ip, [r3]

	if(temp == trig){ get_frame = 1; }
   10388:	e59f3108 	ldr	r3, [pc, #264]	; 10498 <UART0ISR_2+0x11c>
   1038c:	e5d33000 	ldrb	r3, [r3]
}

static void UART0ISR_2(void)
{
	char temp;
	temp = U0RBR;
   10390:	e20cc0ff 	and	ip, ip, #255	; 0xff

	if(temp == trig){ get_frame = 1; }
   10394:	e153000c 	cmp	r3, ip
   10398:	e59f20fc 	ldr	r2, [pc, #252]	; 1049c <UART0ISR_2+0x120>
   1039c:	03a03001 	moveq	r3, #1
   103a0:	05c23004 	strbeq	r3, [r2, #4]
	
	if(get_frame)
   103a4:	e5d22004 	ldrb	r2, [r2, #4]
   103a8:	e3520000 	cmp	r2, #0
   103ac:	e59f30e8 	ldr	r3, [pc, #232]	; 1049c <UART0ISR_2+0x120>
   103b0:	0a000030 	beq	10478 <UART0ISR_2+0xfc>
	{
		if(RX_in < frame)
   103b4:	e1d300b0 	ldrh	r0, [r3]
   103b8:	e59f20d8 	ldr	r2, [pc, #216]	; 10498 <UART0ISR_2+0x11c>
   103bc:	e1a05800 	lsl	r5, r0, #16
   103c0:	e1d220f2 	ldrsh	r2, [r2, #2]
   103c4:	e1a04845 	asr	r4, r5, #16
   103c8:	e1540002 	cmp	r4, r2
   103cc:	e2800001 	add	r0, r0, #1
   103d0:	aa000012 	bge	10420 <UART0ISR_2+0xa4>
		{
			RX_array1[RX_in] = temp;
			RX_in++;
   103d4:	e1a00800 	lsl	r0, r0, #16
   103d8:	e1a00820 	lsr	r0, r0, #16
	
	if(get_frame)
	{
		if(RX_in < frame)
		{
			RX_array1[RX_in] = temp;
   103dc:	e59f10bc 	ldr	r1, [pc, #188]	; 104a0 <UART0ISR_2+0x124>
			RX_in++;
   103e0:	e1c300b0 	strh	r0, [r3]

			if(RX_in == frame)
   103e4:	e1a00800 	lsl	r0, r0, #16
	
	if(get_frame)
	{
		if(RX_in < frame)
		{
			RX_array1[RX_in] = temp;
   103e8:	e7c1c845 	strb	ip, [r1, r5, asr #16]
			RX_in++;

			if(RX_in == frame)
   103ec:	e1a0c840 	asr	ip, r0, #16
   103f0:	e15c0002 	cmp	ip, r2
   103f4:	1a00001f 	bne	10478 <UART0ISR_2+0xfc>
			{
				RX_array1[RX_in] = 10; // delimiters
   103f8:	e3a0200a 	mov	r2, #10
   103fc:	e7c12840 	strb	r2, [r1, r0, asr #16]
				RX_array1[RX_in + 1] = 13;
   10400:	e3a0200d 	mov	r2, #13
   10404:	e081100c 	add	r1, r1, ip
   10408:	e5c12001 	strb	r2, [r1, #1]
				log_array1 = 1;
   1040c:	e3a02001 	mov	r2, #1
   10410:	e5c32002 	strb	r2, [r3, #2]
				get_frame = 0;
   10414:	e3a02000 	mov	r2, #0
   10418:	e5c32004 	strb	r2, [r3, #4]
   1041c:	ea000015 	b	10478 <UART0ISR_2+0xfc>
			}
		}
		else if(RX_in >= frame)
		{
			RX_array2[RX_in - frame] = temp;
			RX_in++;
   10420:	e1a00800 	lsl	r0, r0, #16
   10424:	e1a00820 	lsr	r0, r0, #16
   10428:	e1c300b0 	strh	r0, [r3]

			if(RX_in == 2*frame)
   1042c:	e1a00800 	lsl	r0, r0, #16
				get_frame = 0;
			}
		}
		else if(RX_in >= frame)
		{
			RX_array2[RX_in - frame] = temp;
   10430:	e59f106c 	ldr	r1, [pc, #108]	; 104a4 <UART0ISR_2+0x128>
			RX_in++;

			if(RX_in == 2*frame)
   10434:	e1a00840 	asr	r0, r0, #16
				get_frame = 0;
			}
		}
		else if(RX_in >= frame)
		{
			RX_array2[RX_in - frame] = temp;
   10438:	e0624004 	rsb	r4, r2, r4
			RX_in++;

			if(RX_in == 2*frame)
   1043c:	e1500082 	cmp	r0, r2, lsl #1
				get_frame = 0;
			}
		}
		else if(RX_in >= frame)
		{
			RX_array2[RX_in - frame] = temp;
   10440:	e7c1c004 	strb	ip, [r1, r4]
			RX_in++;

			if(RX_in == 2*frame)
   10444:	1a00000b 	bne	10478 <UART0ISR_2+0xfc>
			{
				RX_array2[RX_in - frame] = 10; // delimiters
   10448:	e062c000 	rsb	ip, r2, r0
				RX_array2[RX_in + 1 - frame] = 13;
   1044c:	e2800001 	add	r0, r0, #1
   10450:	e0622000 	rsb	r2, r2, r0
			RX_array2[RX_in - frame] = temp;
			RX_in++;

			if(RX_in == 2*frame)
			{
				RX_array2[RX_in - frame] = 10; // delimiters
   10454:	e3a0400a 	mov	r4, #10
				RX_array2[RX_in + 1 - frame] = 13;
   10458:	e3a0000d 	mov	r0, #13
			RX_array2[RX_in - frame] = temp;
			RX_in++;

			if(RX_in == 2*frame)
			{
				RX_array2[RX_in - frame] = 10; // delimiters
   1045c:	e7c1400c 	strb	r4, [r1, ip]
				RX_array2[RX_in + 1 - frame] = 13;
   10460:	e7c10002 	strb	r0, [r1, r2]
				log_array2 = 1;
   10464:	e3a02001 	mov	r2, #1
   10468:	e5c32003 	strb	r2, [r3, #3]
				get_frame = 0;
   1046c:	e3a02000 	mov	r2, #0
   10470:	e5c32004 	strb	r2, [r3, #4]
				RX_in = 0;
   10474:	e1c320b0 	strh	r2, [r3]
			}
		}
	}

	temp = U0IIR; // have to read this to clear the interrupt
   10478:	e59f3014 	ldr	r3, [pc, #20]	; 10494 <UART0ISR_2+0x118>

	VICVectAddr = 0;
   1047c:	e3a02000 	mov	r2, #0
				RX_in = 0;
			}
		}
	}

	temp = U0IIR; // have to read this to clear the interrupt
   10480:	e5d33008 	ldrb	r3, [r3, #8]

	VICVectAddr = 0;
   10484:	e3e03000 	mvn	r3, #0
   10488:	e5032fcf 	str	r2, [r3, #-4047]	; 0xfffff031
}
   1048c:	e8bd0030 	pop	{r4, r5}
   10490:	e12fff1e 	bx	lr
   10494:	e000c000 	.word	0xe000c000
   10498:	40000000 	.word	0x40000000
   1049c:	400008cc 	.word	0x400008cc
   104a0:	40000f5c 	.word	0x40000f5c
   104a4:	40000c58 	.word	0x40000c58

000104a8 <MODE2ISR>:
		
static void MODE2ISR(void)
{
   104a8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
	int j;
	short a;
	char q[50], temp_buff[4];


	T0IR = 1; // reset TMR0 interrupt
   104ac:	e59f3bfc 	ldr	r3, [pc, #3068]	; 110b0 <MODE2ISR+0xc08>
   104b0:	e3a02001 	mov	r2, #1
   104b4:	e5832000 	str	r2, [r3]
	
	for(j = 0; j < 50; j++)
   104b8:	e3a03000 	mov	r3, #0

	VICVectAddr = 0;
}
		
static void MODE2ISR(void)
{
   104bc:	e24dd038 	sub	sp, sp, #56	; 0x38

	T0IR = 1; // reset TMR0 interrupt
	
	for(j = 0; j < 50; j++)
	{
		q[j] = 0;
   104c0:	e1a01003 	mov	r1, r3
   104c4:	e28d2004 	add	r2, sp, #4
   104c8:	e7c31002 	strb	r1, [r3, r2]
	char q[50], temp_buff[4];


	T0IR = 1; // reset TMR0 interrupt
	
	for(j = 0; j < 50; j++)
   104cc:	e2833001 	add	r3, r3, #1
   104d0:	e3530032 	cmp	r3, #50	; 0x32
   104d4:	1afffffa 	bne	104c4 <MODE2ISR+0x1c>
		q[j] = 0;
	}

	// ADC_1
	// Get AD0.3
	if(ad0_3 == 'Y')
   104d8:	e59f3bd4 	ldr	r3, [pc, #3028]	; 110b4 <MODE2ISR+0xc0c>
   104dc:	e5d33004 	ldrb	r3, [r3, #4]
   104e0:	e3530059 	cmp	r3, #89	; 0x59
   104e4:	0a000001 	beq	104f0 <MODE2ISR+0x48>
	VICVectAddr = 0;
}
		
static void MODE2ISR(void)
{
	int temp = 0, temp2 = 0, ind = 0;
   104e8:	e3a04000 	mov	r4, #0
   104ec:	ea000044 	b	10604 <MODE2ISR+0x15c>

	// ADC_1
	// Get AD0.3
	if(ad0_3 == 'Y')
	{
		AD0CR = 0x00020FF08; // AD0.3
   104f0:	e59f3bc0 	ldr	r3, [pc, #3008]	; 110b8 <MODE2ISR+0xc10>
   104f4:	e59f2bc0 	ldr	r2, [pc, #3008]	; 110bc <MODE2ISR+0xc14>
   104f8:	e5832000 	str	r2, [r3]
		AD0CR |= 0x01000000; // start conversion
   104fc:	e5932000 	ldr	r2, [r3]
   10500:	e3822401 	orr	r2, r2, #16777216	; 0x1000000
   10504:	e5832000 	str	r2, [r3]
		while((temp & 0x80000000) == 0)
		{
			temp = AD0DR;
   10508:	e5932004 	ldr	r2, [r3, #4]
	// Get AD0.3
	if(ad0_3 == 'Y')
	{
		AD0CR = 0x00020FF08; // AD0.3
		AD0CR |= 0x01000000; // start conversion
		while((temp & 0x80000000) == 0)
   1050c:	e3520000 	cmp	r2, #0
   10510:	aafffffc 	bge	10508 <MODE2ISR+0x60>
			temp = AD0DR;
		}
		temp &= 0x0000FFC0;
		temp2 = temp / 0x00000040;

		AD0CR = 0x00000000;
   10514:	e59f3b9c 	ldr	r3, [pc, #2972]	; 110b8 <MODE2ISR+0xc10>
   10518:	e3a04000 	mov	r4, #0
   1051c:	e5834000 	str	r4, [r3]

		if(asc == 'Y' || asc ==',')
   10520:	e59f3b8c 	ldr	r3, [pc, #2956]	; 110b4 <MODE2ISR+0xc0c>
		AD0CR |= 0x01000000; // start conversion
		while((temp & 0x80000000) == 0)
		{
			temp = AD0DR;
		}
		temp &= 0x0000FFC0;
   10524:	e59f0b94 	ldr	r0, [pc, #2964]	; 110c0 <MODE2ISR+0xc18>
		temp2 = temp / 0x00000040;

		AD0CR = 0x00000000;

		if(asc == 'Y' || asc ==',')
   10528:	e5d33005 	ldrb	r3, [r3, #5]
		AD0CR |= 0x01000000; // start conversion
		while((temp & 0x80000000) == 0)
		{
			temp = AD0DR;
		}
		temp &= 0x0000FFC0;
   1052c:	e0020000 	and	r0, r2, r0
		temp2 = temp / 0x00000040;

		AD0CR = 0x00000000;

		if(asc == 'Y' || asc ==',')
   10530:	e3530059 	cmp	r3, #89	; 0x59
   10534:	1353002c 	cmpne	r3, #44	; 0x2c
		while((temp & 0x80000000) == 0)
		{
			temp = AD0DR;
		}
		temp &= 0x0000FFC0;
		temp2 = temp / 0x00000040;
   10538:	e1a00340 	asr	r0, r0, #6

		AD0CR = 0x00000000;

		if(asc == 'Y' || asc ==',')
   1053c:	1a00002a 	bne	105ec <MODE2ISR+0x144>
		{
			itoa(temp2, 10, temp_buff);
   10540:	e3a0100a 	mov	r1, #10
   10544:	e1a0200d 	mov	r2, sp
   10548:	eb001625 	bl	15de4 <itoa>
			if(temp_buff[0] >= 48 && temp_buff[0] <= 57)
   1054c:	e5dd3000 	ldrb	r3, [sp]
   10550:	e2432030 	sub	r2, r3, #48	; 0x30
   10554:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[0];
   10558:	95cd3004 	strbls	r3, [sp, #4]
				ind++;
			}
			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
   1055c:	e5dd3001 	ldrb	r3, [sp, #1]
   10560:	e2432030 	sub	r2, r3, #48	; 0x30
		{
			itoa(temp2, 10, temp_buff);
			if(temp_buff[0] >= 48 && temp_buff[0] <= 57)
			{
				q[ind] = temp_buff[0];
				ind++;
   10564:	93a04001 	movls	r4, #1
			}
			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
   10568:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[1];
   1056c:	928d1038 	addls	r1, sp, #56	; 0x38
   10570:	90812004 	addls	r2, r1, r4
   10574:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}
			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
   10578:	e5dd3002 	ldrb	r3, [sp, #2]
   1057c:	e2432030 	sub	r2, r3, #48	; 0x30
				ind++;
			}
			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
			{
				q[ind] = temp_buff[1];
				ind++;
   10580:	92844001 	addls	r4, r4, #1
			}
			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
   10584:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[2];
   10588:	928d1038 	addls	r1, sp, #56	; 0x38
   1058c:	90812004 	addls	r2, r1, r4
   10590:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}
			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
   10594:	e5dd3003 	ldrb	r3, [sp, #3]
   10598:	e2432030 	sub	r2, r3, #48	; 0x30
				ind++;
			}
			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
			{
				q[ind] = temp_buff[2];
				ind++;
   1059c:	92844001 	addls	r4, r4, #1
			}
			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
   105a0:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[3];
   105a4:	928d1038 	addls	r1, sp, #56	; 0x38
   105a8:	90812004 	addls	r2, r1, r4
   105ac:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}

			if(asc == ',')
   105b0:	e59f3afc 	ldr	r3, [pc, #2812]	; 110b4 <MODE2ISR+0xc0c>
   105b4:	e5d32005 	ldrb	r2, [r3, #5]
				ind++;
			}
			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
			{
				q[ind] = temp_buff[3];
				ind++;
   105b8:	92844001 	addls	r4, r4, #1
   105bc:	e28d1038 	add	r1, sp, #56	; 0x38
			}

			if(asc == ',')
   105c0:	e352002c 	cmp	r2, #44	; 0x2c
   105c4:	e0813004 	add	r3, r1, r4
			{
				q[ind] = ',';
			}
			else
			{
				q[ind] = 0;
   105c8:	13a02000 	movne	r2, #0
   105cc:	e5432034 	strb	r2, [r3, #-52]	; 0xffffffcc
			}
			ind++;
			temp = 0; 
			temp2 = 0;
			temp_buff[0] = 0;
   105d0:	e3a03000 	mov	r3, #0
			}
			else
			{
				q[ind] = 0;
			}
			ind++;
   105d4:	e2844001 	add	r4, r4, #1
			temp = 0; 
			temp2 = 0;
			temp_buff[0] = 0;
   105d8:	e5cd3000 	strb	r3, [sp]
			temp_buff[1] = 0;
   105dc:	e5cd3001 	strb	r3, [sp, #1]
			temp_buff[2] = 0;
   105e0:	e5cd3002 	strb	r3, [sp, #2]
			temp_buff[3] = 0;
   105e4:	e5cd3003 	strb	r3, [sp, #3]
   105e8:	ea000005 	b	10604 <MODE2ISR+0x15c>

		}

		else if(asc == 'N')
   105ec:	e353004e 	cmp	r3, #78	; 0x4e
   105f0:	1affffbc 	bne	104e8 <MODE2ISR+0x40>
		{
			a = ((short)temp2 & 0xFF00) / 0x00000100;
   105f4:	e1a03420 	lsr	r3, r0, #8
			q[ind] = (char)a;
   105f8:	e5cd3004 	strb	r3, [sp, #4]
			
			q[ind+1]  = (char)temp2 & 0xFF;
   105fc:	e5cd0005 	strb	r0, [sp, #5]
			ind += 2;
   10600:	e3a04002 	mov	r4, #2
			temp = 0;
		}
	}
	// ADC_2
	// Get AD0.2
	if(ad0_2 == 'Y')
   10604:	e59f3aa8 	ldr	r3, [pc, #2728]	; 110b4 <MODE2ISR+0xc0c>
   10608:	e5d33006 	ldrb	r3, [r3, #6]
   1060c:	e3530059 	cmp	r3, #89	; 0x59
   10610:	1a000048 	bne	10738 <MODE2ISR+0x290>
	{
		AD0CR = 0x00020FF04; // AD1.2
   10614:	e59f3a9c 	ldr	r3, [pc, #2716]	; 110b8 <MODE2ISR+0xc10>
   10618:	e59f2aa4 	ldr	r2, [pc, #2724]	; 110c4 <MODE2ISR+0xc1c>
   1061c:	e5832000 	str	r2, [r3]
		AD0CR |= 0x01000000; // start conversion
   10620:	e5932000 	ldr	r2, [r3]
   10624:	e3822401 	orr	r2, r2, #16777216	; 0x1000000
   10628:	e5832000 	str	r2, [r3]
		while((temp & 0x80000000) == 0)
		{
			temp = AD0DR;
   1062c:	e5932004 	ldr	r2, [r3, #4]
	// Get AD0.2
	if(ad0_2 == 'Y')
	{
		AD0CR = 0x00020FF04; // AD1.2
		AD0CR |= 0x01000000; // start conversion
		while((temp & 0x80000000) == 0)
   10630:	e3520000 	cmp	r2, #0
   10634:	aafffffc 	bge	1062c <MODE2ISR+0x184>
		{
			temp = AD0DR;
		}
		temp &= 0x0000FFC0;
   10638:	e59f0a80 	ldr	r0, [pc, #2688]	; 110c0 <MODE2ISR+0xc18>
		temp2 = temp / 0x00000040;

		AD0CR = 0x00000000;
   1063c:	e59f3a74 	ldr	r3, [pc, #2676]	; 110b8 <MODE2ISR+0xc10>
		AD0CR |= 0x01000000; // start conversion
		while((temp & 0x80000000) == 0)
		{
			temp = AD0DR;
		}
		temp &= 0x0000FFC0;
   10640:	e0020000 	and	r0, r2, r0
		temp2 = temp / 0x00000040;

		AD0CR = 0x00000000;
   10644:	e3a02000 	mov	r2, #0
   10648:	e5832000 	str	r2, [r3]

		if(asc == 'Y' || asc == ',')
   1064c:	e59f3a60 	ldr	r3, [pc, #2656]	; 110b4 <MODE2ISR+0xc0c>
   10650:	e5d33005 	ldrb	r3, [r3, #5]
   10654:	e3530059 	cmp	r3, #89	; 0x59
   10658:	1353002c 	cmpne	r3, #44	; 0x2c
		while((temp & 0x80000000) == 0)
		{
			temp = AD0DR;
		}
		temp &= 0x0000FFC0;
		temp2 = temp / 0x00000040;
   1065c:	e1a00340 	asr	r0, r0, #6

		AD0CR = 0x00000000;

		if(asc == 'Y' || asc == ',')
   10660:	1a00002c 	bne	10718 <MODE2ISR+0x270>
		{
			itoa(temp2, 10, temp_buff);
   10664:	e3a0100a 	mov	r1, #10
   10668:	e1a0200d 	mov	r2, sp
   1066c:	eb0015dc 	bl	15de4 <itoa>
			if(temp_buff[0] >= 48 && temp_buff[0] <= 57)
   10670:	e5dd3000 	ldrb	r3, [sp]
   10674:	e2432030 	sub	r2, r3, #48	; 0x30
   10678:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[0];
   1067c:	928d1038 	addls	r1, sp, #56	; 0x38
   10680:	90812004 	addls	r2, r1, r4
   10684:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}
			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
   10688:	e5dd3001 	ldrb	r3, [sp, #1]
   1068c:	e2432030 	sub	r2, r3, #48	; 0x30
		{
			itoa(temp2, 10, temp_buff);
			if(temp_buff[0] >= 48 && temp_buff[0] <= 57)
			{
				q[ind] = temp_buff[0];
				ind++;
   10690:	92844001 	addls	r4, r4, #1
			}
			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
   10694:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[1];
   10698:	928d1038 	addls	r1, sp, #56	; 0x38
   1069c:	90812004 	addls	r2, r1, r4
   106a0:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}
			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
   106a4:	e5dd3002 	ldrb	r3, [sp, #2]
   106a8:	e2432030 	sub	r2, r3, #48	; 0x30
				ind++;
			}
			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
			{
				q[ind] = temp_buff[1];
				ind++;
   106ac:	92844001 	addls	r4, r4, #1
			}
			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
   106b0:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[2];
   106b4:	928d1038 	addls	r1, sp, #56	; 0x38
   106b8:	90812004 	addls	r2, r1, r4
   106bc:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}
			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
   106c0:	e5dd3003 	ldrb	r3, [sp, #3]
   106c4:	e2432030 	sub	r2, r3, #48	; 0x30
				ind++;
			}
			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
			{
				q[ind] = temp_buff[2];
				ind++;
   106c8:	92844001 	addls	r4, r4, #1
			}
			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
   106cc:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[3];
   106d0:	928d1038 	addls	r1, sp, #56	; 0x38
   106d4:	90812004 	addls	r2, r1, r4
   106d8:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}

			if(asc == ',')
   106dc:	e59f39d0 	ldr	r3, [pc, #2512]	; 110b4 <MODE2ISR+0xc0c>
   106e0:	e5d32005 	ldrb	r2, [r3, #5]
				ind++;
			}
			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
			{
				q[ind] = temp_buff[3];
				ind++;
   106e4:	92844001 	addls	r4, r4, #1
   106e8:	e28d1038 	add	r1, sp, #56	; 0x38
			}

			if(asc == ',')
   106ec:	e352002c 	cmp	r2, #44	; 0x2c
   106f0:	e0813004 	add	r3, r1, r4
			{
				q[ind] = ',';
			}
			else
			{
				q[ind] = 0;
   106f4:	13a02000 	movne	r2, #0
   106f8:	e5432034 	strb	r2, [r3, #-52]	; 0xffffffcc
			}
			ind++;
			temp = 0; 
			temp2 = 0;
			temp_buff[0] = 0;
   106fc:	e3a03000 	mov	r3, #0
			}
			else
			{
				q[ind] = 0;
			}
			ind++;
   10700:	e2844001 	add	r4, r4, #1
			temp = 0; 
			temp2 = 0;
			temp_buff[0] = 0;
   10704:	e5cd3000 	strb	r3, [sp]
			temp_buff[1] = 0;
   10708:	e5cd3001 	strb	r3, [sp, #1]
			temp_buff[2] = 0;
   1070c:	e5cd3002 	strb	r3, [sp, #2]
			temp_buff[3] = 0;
   10710:	e5cd3003 	strb	r3, [sp, #3]
   10714:	ea000007 	b	10738 <MODE2ISR+0x290>

		}

		else if(asc == 'N')
   10718:	e353004e 	cmp	r3, #78	; 0x4e
   1071c:	1a000005 	bne	10738 <MODE2ISR+0x290>
		{
			a = ((short)temp2 & 0xFF00) / 0x00000100;
			q[ind] = (char)a;
   10720:	e28d2038 	add	r2, sp, #56	; 0x38
   10724:	e0823004 	add	r3, r2, r4

		}

		else if(asc == 'N')
		{
			a = ((short)temp2 & 0xFF00) / 0x00000100;
   10728:	e1a02420 	lsr	r2, r0, #8
			q[ind] = (char)a;
   1072c:	e5432034 	strb	r2, [r3, #-52]	; 0xffffffcc
			
			q[ind+1]  = (char)temp2 & 0xFF;
   10730:	e5430033 	strb	r0, [r3, #-51]	; 0xffffffcd
			ind += 2;
   10734:	e2844002 	add	r4, r4, #2
			temp = 0;
		}
	}
	// ADC_3
	// Get AD0.1
	if(ad0_1 == 'Y')
   10738:	e59f3974 	ldr	r3, [pc, #2420]	; 110b4 <MODE2ISR+0xc0c>
   1073c:	e5d33007 	ldrb	r3, [r3, #7]
   10740:	e3530059 	cmp	r3, #89	; 0x59
   10744:	1a000048 	bne	1086c <MODE2ISR+0x3c4>
	{
		AD0CR = 0x00020FF02; // AD0.1
   10748:	e59f3968 	ldr	r3, [pc, #2408]	; 110b8 <MODE2ISR+0xc10>
   1074c:	e59f2974 	ldr	r2, [pc, #2420]	; 110c8 <MODE2ISR+0xc20>
   10750:	e5832000 	str	r2, [r3]
		AD0CR |= 0x01000000; // start conversion
   10754:	e5932000 	ldr	r2, [r3]
   10758:	e3822401 	orr	r2, r2, #16777216	; 0x1000000
   1075c:	e5832000 	str	r2, [r3]
		while((temp & 0x80000000) == 0)
		{
			temp = AD0DR;
   10760:	e5932004 	ldr	r2, [r3, #4]
	// Get AD0.1
	if(ad0_1 == 'Y')
	{
		AD0CR = 0x00020FF02; // AD0.1
		AD0CR |= 0x01000000; // start conversion
		while((temp & 0x80000000) == 0)
   10764:	e3520000 	cmp	r2, #0
   10768:	aafffffc 	bge	10760 <MODE2ISR+0x2b8>
		{
			temp = AD0DR;
		}
		temp &= 0x0000FFC0;
   1076c:	e59f094c 	ldr	r0, [pc, #2380]	; 110c0 <MODE2ISR+0xc18>
		temp2 = temp / 0x00000040;

		AD0CR = 0x00000000;
   10770:	e59f3940 	ldr	r3, [pc, #2368]	; 110b8 <MODE2ISR+0xc10>
		AD0CR |= 0x01000000; // start conversion
		while((temp & 0x80000000) == 0)
		{
			temp = AD0DR;
		}
		temp &= 0x0000FFC0;
   10774:	e0020000 	and	r0, r2, r0
		temp2 = temp / 0x00000040;

		AD0CR = 0x00000000;
   10778:	e3a02000 	mov	r2, #0
   1077c:	e5832000 	str	r2, [r3]

		if(asc == 'Y' || asc == ',')
   10780:	e59f392c 	ldr	r3, [pc, #2348]	; 110b4 <MODE2ISR+0xc0c>
   10784:	e5d33005 	ldrb	r3, [r3, #5]
   10788:	e3530059 	cmp	r3, #89	; 0x59
   1078c:	1353002c 	cmpne	r3, #44	; 0x2c
		while((temp & 0x80000000) == 0)
		{
			temp = AD0DR;
		}
		temp &= 0x0000FFC0;
		temp2 = temp / 0x00000040;
   10790:	e1a00340 	asr	r0, r0, #6

		AD0CR = 0x00000000;

		if(asc == 'Y' || asc == ',')
   10794:	1a00002c 	bne	1084c <MODE2ISR+0x3a4>
		{
			itoa(temp2, 10, temp_buff);
   10798:	e3a0100a 	mov	r1, #10
   1079c:	e1a0200d 	mov	r2, sp
   107a0:	eb00158f 	bl	15de4 <itoa>
			if(temp_buff[0] >= 48 && temp_buff[0] <= 57)
   107a4:	e5dd3000 	ldrb	r3, [sp]
   107a8:	e2432030 	sub	r2, r3, #48	; 0x30
   107ac:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[0];
   107b0:	928d1038 	addls	r1, sp, #56	; 0x38
   107b4:	90812004 	addls	r2, r1, r4
   107b8:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}
			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
   107bc:	e5dd3001 	ldrb	r3, [sp, #1]
   107c0:	e2432030 	sub	r2, r3, #48	; 0x30
		{
			itoa(temp2, 10, temp_buff);
			if(temp_buff[0] >= 48 && temp_buff[0] <= 57)
			{
				q[ind] = temp_buff[0];
				ind++;
   107c4:	92844001 	addls	r4, r4, #1
			}
			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
   107c8:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[1];
   107cc:	928d1038 	addls	r1, sp, #56	; 0x38
   107d0:	90812004 	addls	r2, r1, r4
   107d4:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}
			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
   107d8:	e5dd3002 	ldrb	r3, [sp, #2]
   107dc:	e2432030 	sub	r2, r3, #48	; 0x30
				ind++;
			}
			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
			{
				q[ind] = temp_buff[1];
				ind++;
   107e0:	92844001 	addls	r4, r4, #1
			}
			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
   107e4:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[2];
   107e8:	928d1038 	addls	r1, sp, #56	; 0x38
   107ec:	90812004 	addls	r2, r1, r4
   107f0:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}
			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
   107f4:	e5dd3003 	ldrb	r3, [sp, #3]
   107f8:	e2432030 	sub	r2, r3, #48	; 0x30
				ind++;
			}
			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
			{
				q[ind] = temp_buff[2];
				ind++;
   107fc:	92844001 	addls	r4, r4, #1
			}
			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
   10800:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[3];
   10804:	928d1038 	addls	r1, sp, #56	; 0x38
   10808:	90812004 	addls	r2, r1, r4
   1080c:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}

			if(asc == ',')
   10810:	e59f389c 	ldr	r3, [pc, #2204]	; 110b4 <MODE2ISR+0xc0c>
   10814:	e5d32005 	ldrb	r2, [r3, #5]
				ind++;
			}
			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
			{
				q[ind] = temp_buff[3];
				ind++;
   10818:	92844001 	addls	r4, r4, #1
   1081c:	e28d1038 	add	r1, sp, #56	; 0x38
			}

			if(asc == ',')
   10820:	e352002c 	cmp	r2, #44	; 0x2c
   10824:	e0813004 	add	r3, r1, r4
			{
				q[ind] = ',';
			}
			else
			{
				q[ind] = 0;
   10828:	13a02000 	movne	r2, #0
   1082c:	e5432034 	strb	r2, [r3, #-52]	; 0xffffffcc
			}
			ind++;
			temp = 0; 
			temp2 = 0;
			temp_buff[0] = 0;
   10830:	e3a03000 	mov	r3, #0
			}
			else
			{
				q[ind] = 0;
			}
			ind++;
   10834:	e2844001 	add	r4, r4, #1
			temp = 0; 
			temp2 = 0;
			temp_buff[0] = 0;
   10838:	e5cd3000 	strb	r3, [sp]
			temp_buff[1] = 0;
   1083c:	e5cd3001 	strb	r3, [sp, #1]
			temp_buff[2] = 0;
   10840:	e5cd3002 	strb	r3, [sp, #2]
			temp_buff[3] = 0;
   10844:	e5cd3003 	strb	r3, [sp, #3]
   10848:	ea000007 	b	1086c <MODE2ISR+0x3c4>

		}

		else if(asc == 'N')
   1084c:	e353004e 	cmp	r3, #78	; 0x4e
   10850:	1a000005 	bne	1086c <MODE2ISR+0x3c4>
		{
			a = ((short)temp2 & 0xFF00) / 0x00000100;
			q[ind] = (char)a;
   10854:	e28d2038 	add	r2, sp, #56	; 0x38
   10858:	e0823004 	add	r3, r2, r4

		}

		else if(asc == 'N')
		{
			a = ((short)temp2 & 0xFF00) / 0x00000100;
   1085c:	e1a02420 	lsr	r2, r0, #8
			q[ind] = (char)a;
   10860:	e5432034 	strb	r2, [r3, #-52]	; 0xffffffcc
			
			q[ind+1]  = (char)temp2 & 0xFF;
   10864:	e5430033 	strb	r0, [r3, #-51]	; 0xffffffcd
			ind += 2;
   10868:	e2844002 	add	r4, r4, #2
		}
	}

	// ADC_4
	// Get AD0.4
	if(ad0_4 == 'Y')
   1086c:	e59f3840 	ldr	r3, [pc, #2112]	; 110b4 <MODE2ISR+0xc0c>
   10870:	e5d33008 	ldrb	r3, [r3, #8]
   10874:	e3530059 	cmp	r3, #89	; 0x59
   10878:	1a000048 	bne	109a0 <MODE2ISR+0x4f8>
	{
		AD0CR = 0x00020FF10; // AD0.4
   1087c:	e59f3834 	ldr	r3, [pc, #2100]	; 110b8 <MODE2ISR+0xc10>
   10880:	e59f2844 	ldr	r2, [pc, #2116]	; 110cc <MODE2ISR+0xc24>
   10884:	e5832000 	str	r2, [r3]
		AD0CR |= 0x01000000; // start conversion
   10888:	e5932000 	ldr	r2, [r3]
   1088c:	e3822401 	orr	r2, r2, #16777216	; 0x1000000
   10890:	e5832000 	str	r2, [r3]
		while((temp & 0x80000000) == 0)
		{
			temp = AD0DR;
   10894:	e5932004 	ldr	r2, [r3, #4]
	// Get AD0.4
	if(ad0_4 == 'Y')
	{
		AD0CR = 0x00020FF10; // AD0.4
		AD0CR |= 0x01000000; // start conversion
		while((temp & 0x80000000) == 0)
   10898:	e3520000 	cmp	r2, #0
   1089c:	aafffffc 	bge	10894 <MODE2ISR+0x3ec>
		{
			temp = AD0DR;
		}
		temp &= 0x0000FFC0;
   108a0:	e59f0818 	ldr	r0, [pc, #2072]	; 110c0 <MODE2ISR+0xc18>
		temp2 = temp / 0x00000040;

		AD0CR = 0x00000000;
   108a4:	e59f380c 	ldr	r3, [pc, #2060]	; 110b8 <MODE2ISR+0xc10>
		AD0CR |= 0x01000000; // start conversion
		while((temp & 0x80000000) == 0)
		{
			temp = AD0DR;
		}
		temp &= 0x0000FFC0;
   108a8:	e0020000 	and	r0, r2, r0
		temp2 = temp / 0x00000040;

		AD0CR = 0x00000000;
   108ac:	e3a02000 	mov	r2, #0
   108b0:	e5832000 	str	r2, [r3]

		if(asc == 'Y' || asc == ',')
   108b4:	e59f37f8 	ldr	r3, [pc, #2040]	; 110b4 <MODE2ISR+0xc0c>
   108b8:	e5d33005 	ldrb	r3, [r3, #5]
   108bc:	e3530059 	cmp	r3, #89	; 0x59
   108c0:	1353002c 	cmpne	r3, #44	; 0x2c
		while((temp & 0x80000000) == 0)
		{
			temp = AD0DR;
		}
		temp &= 0x0000FFC0;
		temp2 = temp / 0x00000040;
   108c4:	e1a00340 	asr	r0, r0, #6

		AD0CR = 0x00000000;

		if(asc == 'Y' || asc == ',')
   108c8:	1a00002c 	bne	10980 <MODE2ISR+0x4d8>
		{
			itoa(temp2, 10, temp_buff);
   108cc:	e3a0100a 	mov	r1, #10
   108d0:	e1a0200d 	mov	r2, sp
   108d4:	eb001542 	bl	15de4 <itoa>
			if(temp_buff[0] >= 48 && temp_buff[0] <= 57)
   108d8:	e5dd3000 	ldrb	r3, [sp]
   108dc:	e2432030 	sub	r2, r3, #48	; 0x30
   108e0:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[0];
   108e4:	928d1038 	addls	r1, sp, #56	; 0x38
   108e8:	90812004 	addls	r2, r1, r4
   108ec:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}
			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
   108f0:	e5dd3001 	ldrb	r3, [sp, #1]
   108f4:	e2432030 	sub	r2, r3, #48	; 0x30
		{
			itoa(temp2, 10, temp_buff);
			if(temp_buff[0] >= 48 && temp_buff[0] <= 57)
			{
				q[ind] = temp_buff[0];
				ind++;
   108f8:	92844001 	addls	r4, r4, #1
			}
			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
   108fc:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[1];
   10900:	928d1038 	addls	r1, sp, #56	; 0x38
   10904:	90812004 	addls	r2, r1, r4
   10908:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}
			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
   1090c:	e5dd3002 	ldrb	r3, [sp, #2]
   10910:	e2432030 	sub	r2, r3, #48	; 0x30
				ind++;
			}
			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
			{
				q[ind] = temp_buff[1];
				ind++;
   10914:	92844001 	addls	r4, r4, #1
			}
			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
   10918:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[2];
   1091c:	928d1038 	addls	r1, sp, #56	; 0x38
   10920:	90812004 	addls	r2, r1, r4
   10924:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}
			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
   10928:	e5dd3003 	ldrb	r3, [sp, #3]
   1092c:	e2432030 	sub	r2, r3, #48	; 0x30
				ind++;
			}
			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
			{
				q[ind] = temp_buff[2];
				ind++;
   10930:	92844001 	addls	r4, r4, #1
			}
			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
   10934:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[3];
   10938:	928d1038 	addls	r1, sp, #56	; 0x38
   1093c:	90812004 	addls	r2, r1, r4
   10940:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}

			if(asc == ',')
   10944:	e59f3768 	ldr	r3, [pc, #1896]	; 110b4 <MODE2ISR+0xc0c>
   10948:	e5d32005 	ldrb	r2, [r3, #5]
				ind++;
			}
			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
			{
				q[ind] = temp_buff[3];
				ind++;
   1094c:	92844001 	addls	r4, r4, #1
   10950:	e28d1038 	add	r1, sp, #56	; 0x38
			}

			if(asc == ',')
   10954:	e352002c 	cmp	r2, #44	; 0x2c
   10958:	e0813004 	add	r3, r1, r4
			{
				q[ind] = ',';
			}
			else
			{
				q[ind] = 0;
   1095c:	13a02000 	movne	r2, #0
   10960:	e5432034 	strb	r2, [r3, #-52]	; 0xffffffcc
			}
			ind++;
			temp = 0; 
			temp2 = 0;
			temp_buff[0] = 0;
   10964:	e3a03000 	mov	r3, #0
			}
			else
			{
				q[ind] = 0;
			}
			ind++;
   10968:	e2844001 	add	r4, r4, #1
			temp = 0; 
			temp2 = 0;
			temp_buff[0] = 0;
   1096c:	e5cd3000 	strb	r3, [sp]
			temp_buff[1] = 0;
   10970:	e5cd3001 	strb	r3, [sp, #1]
			temp_buff[2] = 0;
   10974:	e5cd3002 	strb	r3, [sp, #2]
			temp_buff[3] = 0;
   10978:	e5cd3003 	strb	r3, [sp, #3]
   1097c:	ea000007 	b	109a0 <MODE2ISR+0x4f8>

		}

		else if(asc == 'N')
   10980:	e353004e 	cmp	r3, #78	; 0x4e
   10984:	1a000005 	bne	109a0 <MODE2ISR+0x4f8>
		{
			a = ((short)temp2 & 0xFF00) / 0x00000100;
			q[ind] = (char)a;
   10988:	e28d2038 	add	r2, sp, #56	; 0x38
   1098c:	e0823004 	add	r3, r2, r4

		}

		else if(asc == 'N')
		{
			a = ((short)temp2 & 0xFF00) / 0x00000100;
   10990:	e1a02420 	lsr	r2, r0, #8
			q[ind] = (char)a;
   10994:	e5432034 	strb	r2, [r3, #-52]	; 0xffffffcc
			
			q[ind+1]  = (char)temp2 & 0xFF;
   10998:	e5430033 	strb	r0, [r3, #-51]	; 0xffffffcd
			ind += 2;
   1099c:	e2844002 	add	r4, r4, #2
			temp = 0;
		}
	}
	// ADC_5
	// Get AD1.7
	if(ad1_7 == 'Y')
   109a0:	e59f370c 	ldr	r3, [pc, #1804]	; 110b4 <MODE2ISR+0xc0c>
   109a4:	e5d33009 	ldrb	r3, [r3, #9]
   109a8:	e3530059 	cmp	r3, #89	; 0x59
   109ac:	1a000048 	bne	10ad4 <MODE2ISR+0x62c>
	{
		AD1CR = 0x00020FF80; // AD1.7
   109b0:	e59f3718 	ldr	r3, [pc, #1816]	; 110d0 <MODE2ISR+0xc28>
   109b4:	e59f2718 	ldr	r2, [pc, #1816]	; 110d4 <MODE2ISR+0xc2c>
   109b8:	e5832000 	str	r2, [r3]
		AD1CR |= 0x01000000; // start conversion
   109bc:	e5932000 	ldr	r2, [r3]
   109c0:	e3822401 	orr	r2, r2, #16777216	; 0x1000000
   109c4:	e5832000 	str	r2, [r3]
		while((temp & 0x80000000) == 0)
		{
			temp = AD1DR;
   109c8:	e5932004 	ldr	r2, [r3, #4]
	// Get AD1.7
	if(ad1_7 == 'Y')
	{
		AD1CR = 0x00020FF80; // AD1.7
		AD1CR |= 0x01000000; // start conversion
		while((temp & 0x80000000) == 0)
   109cc:	e3520000 	cmp	r2, #0
   109d0:	aafffffc 	bge	109c8 <MODE2ISR+0x520>
		{
			temp = AD1DR;
		}
		temp &= 0x0000FFC0;
   109d4:	e59f06e4 	ldr	r0, [pc, #1764]	; 110c0 <MODE2ISR+0xc18>
		temp2 = temp / 0x00000040;

		AD1CR = 0x00000000;
   109d8:	e59f36f0 	ldr	r3, [pc, #1776]	; 110d0 <MODE2ISR+0xc28>
		AD1CR |= 0x01000000; // start conversion
		while((temp & 0x80000000) == 0)
		{
			temp = AD1DR;
		}
		temp &= 0x0000FFC0;
   109dc:	e0020000 	and	r0, r2, r0
		temp2 = temp / 0x00000040;

		AD1CR = 0x00000000;
   109e0:	e3a02000 	mov	r2, #0
   109e4:	e5832000 	str	r2, [r3]

		if(asc == 'Y' || asc == ',')
   109e8:	e59f36c4 	ldr	r3, [pc, #1732]	; 110b4 <MODE2ISR+0xc0c>
   109ec:	e5d33005 	ldrb	r3, [r3, #5]
   109f0:	e3530059 	cmp	r3, #89	; 0x59
   109f4:	1353002c 	cmpne	r3, #44	; 0x2c
		while((temp & 0x80000000) == 0)
		{
			temp = AD1DR;
		}
		temp &= 0x0000FFC0;
		temp2 = temp / 0x00000040;
   109f8:	e1a00340 	asr	r0, r0, #6

		AD1CR = 0x00000000;

		if(asc == 'Y' || asc == ',')
   109fc:	1a00002c 	bne	10ab4 <MODE2ISR+0x60c>
		{
			itoa(temp2, 10, temp_buff);
   10a00:	e3a0100a 	mov	r1, #10
   10a04:	e1a0200d 	mov	r2, sp
   10a08:	eb0014f5 	bl	15de4 <itoa>
			if(temp_buff[0] >= 48 && temp_buff[0] <= 57)
   10a0c:	e5dd3000 	ldrb	r3, [sp]
   10a10:	e2432030 	sub	r2, r3, #48	; 0x30
   10a14:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[0];
   10a18:	928d1038 	addls	r1, sp, #56	; 0x38
   10a1c:	90812004 	addls	r2, r1, r4
   10a20:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}
			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
   10a24:	e5dd3001 	ldrb	r3, [sp, #1]
   10a28:	e2432030 	sub	r2, r3, #48	; 0x30
		{
			itoa(temp2, 10, temp_buff);
			if(temp_buff[0] >= 48 && temp_buff[0] <= 57)
			{
				q[ind] = temp_buff[0];
				ind++;
   10a2c:	92844001 	addls	r4, r4, #1
			}
			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
   10a30:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[1];
   10a34:	928d1038 	addls	r1, sp, #56	; 0x38
   10a38:	90812004 	addls	r2, r1, r4
   10a3c:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}
			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
   10a40:	e5dd3002 	ldrb	r3, [sp, #2]
   10a44:	e2432030 	sub	r2, r3, #48	; 0x30
				ind++;
			}
			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
			{
				q[ind] = temp_buff[1];
				ind++;
   10a48:	92844001 	addls	r4, r4, #1
			}
			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
   10a4c:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[2];
   10a50:	928d1038 	addls	r1, sp, #56	; 0x38
   10a54:	90812004 	addls	r2, r1, r4
   10a58:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}
			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
   10a5c:	e5dd3003 	ldrb	r3, [sp, #3]
   10a60:	e2432030 	sub	r2, r3, #48	; 0x30
				ind++;
			}
			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
			{
				q[ind] = temp_buff[2];
				ind++;
   10a64:	92844001 	addls	r4, r4, #1
			}
			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
   10a68:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[3];
   10a6c:	928d1038 	addls	r1, sp, #56	; 0x38
   10a70:	90812004 	addls	r2, r1, r4
   10a74:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}

			if(asc == ',')
   10a78:	e59f3634 	ldr	r3, [pc, #1588]	; 110b4 <MODE2ISR+0xc0c>
   10a7c:	e5d32005 	ldrb	r2, [r3, #5]
				ind++;
			}
			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
			{
				q[ind] = temp_buff[3];
				ind++;
   10a80:	92844001 	addls	r4, r4, #1
   10a84:	e28d1038 	add	r1, sp, #56	; 0x38
			}

			if(asc == ',')
   10a88:	e352002c 	cmp	r2, #44	; 0x2c
   10a8c:	e0813004 	add	r3, r1, r4
			{
				q[ind] = ',';
			}
			else
			{
				q[ind] = 0;
   10a90:	13a02000 	movne	r2, #0
   10a94:	e5432034 	strb	r2, [r3, #-52]	; 0xffffffcc
			}
			ind++;
			temp = 0; 
			temp2 = 0;
			temp_buff[0] = 0;
   10a98:	e3a03000 	mov	r3, #0
			}
			else
			{
				q[ind] = 0;
			}
			ind++;
   10a9c:	e2844001 	add	r4, r4, #1
			temp = 0; 
			temp2 = 0;
			temp_buff[0] = 0;
   10aa0:	e5cd3000 	strb	r3, [sp]
			temp_buff[1] = 0;
   10aa4:	e5cd3001 	strb	r3, [sp, #1]
			temp_buff[2] = 0;
   10aa8:	e5cd3002 	strb	r3, [sp, #2]
			temp_buff[3] = 0;
   10aac:	e5cd3003 	strb	r3, [sp, #3]
   10ab0:	ea000007 	b	10ad4 <MODE2ISR+0x62c>

		}

		else if(asc == 'N')
   10ab4:	e353004e 	cmp	r3, #78	; 0x4e
   10ab8:	1a000005 	bne	10ad4 <MODE2ISR+0x62c>
		{
			a = ((short)temp2 & 0xFF00) / 0x00000100;
			q[ind] = (char)a;
   10abc:	e28d2038 	add	r2, sp, #56	; 0x38
   10ac0:	e0823004 	add	r3, r2, r4

		}

		else if(asc == 'N')
		{
			a = ((short)temp2 & 0xFF00) / 0x00000100;
   10ac4:	e1a02420 	lsr	r2, r0, #8
			q[ind] = (char)a;
   10ac8:	e5432034 	strb	r2, [r3, #-52]	; 0xffffffcc
			
			q[ind+1]  = (char)temp2 & 0xFF;
   10acc:	e5430033 	strb	r0, [r3, #-51]	; 0xffffffcd
			ind += 2;
   10ad0:	e2844002 	add	r4, r4, #2
			temp = 0;
		}
	}
	// ADC_6
	// Get AD1.6
	if(ad1_6 == 'Y')
   10ad4:	e59f35d8 	ldr	r3, [pc, #1496]	; 110b4 <MODE2ISR+0xc0c>
   10ad8:	e5d3300a 	ldrb	r3, [r3, #10]
   10adc:	e3530059 	cmp	r3, #89	; 0x59
   10ae0:	1a000048 	bne	10c08 <MODE2ISR+0x760>
	{
		AD1CR = 0x00020FF40; // AD1.3
   10ae4:	e59f35e4 	ldr	r3, [pc, #1508]	; 110d0 <MODE2ISR+0xc28>
   10ae8:	e59f25e8 	ldr	r2, [pc, #1512]	; 110d8 <MODE2ISR+0xc30>
   10aec:	e5832000 	str	r2, [r3]
		AD1CR |= 0x01000000; // start conversion
   10af0:	e5932000 	ldr	r2, [r3]
   10af4:	e3822401 	orr	r2, r2, #16777216	; 0x1000000
   10af8:	e5832000 	str	r2, [r3]
		while((temp & 0x80000000) == 0)
		{
			temp = AD1DR;
   10afc:	e5932004 	ldr	r2, [r3, #4]
	// Get AD1.6
	if(ad1_6 == 'Y')
	{
		AD1CR = 0x00020FF40; // AD1.3
		AD1CR |= 0x01000000; // start conversion
		while((temp & 0x80000000) == 0)
   10b00:	e3520000 	cmp	r2, #0
   10b04:	aafffffc 	bge	10afc <MODE2ISR+0x654>
		{
			temp = AD1DR;
		}
		temp &= 0x0000FFC0;
   10b08:	e59f05b0 	ldr	r0, [pc, #1456]	; 110c0 <MODE2ISR+0xc18>
		temp2 = temp / 0x00000040;

		AD1CR = 0x00000000;
   10b0c:	e59f35bc 	ldr	r3, [pc, #1468]	; 110d0 <MODE2ISR+0xc28>
		AD1CR |= 0x01000000; // start conversion
		while((temp & 0x80000000) == 0)
		{
			temp = AD1DR;
		}
		temp &= 0x0000FFC0;
   10b10:	e0020000 	and	r0, r2, r0
		temp2 = temp / 0x00000040;

		AD1CR = 0x00000000;
   10b14:	e3a02000 	mov	r2, #0
   10b18:	e5832000 	str	r2, [r3]

		if(asc == 'Y' || asc == ',')
   10b1c:	e59f3590 	ldr	r3, [pc, #1424]	; 110b4 <MODE2ISR+0xc0c>
   10b20:	e5d33005 	ldrb	r3, [r3, #5]
   10b24:	e3530059 	cmp	r3, #89	; 0x59
   10b28:	1353002c 	cmpne	r3, #44	; 0x2c
		while((temp & 0x80000000) == 0)
		{
			temp = AD1DR;
		}
		temp &= 0x0000FFC0;
		temp2 = temp / 0x00000040;
   10b2c:	e1a00340 	asr	r0, r0, #6

		AD1CR = 0x00000000;

		if(asc == 'Y' || asc == ',')
   10b30:	1a00002c 	bne	10be8 <MODE2ISR+0x740>
		{
			itoa(temp2, 10, temp_buff);
   10b34:	e3a0100a 	mov	r1, #10
   10b38:	e1a0200d 	mov	r2, sp
   10b3c:	eb0014a8 	bl	15de4 <itoa>
			if(temp_buff[0] >= 48 && temp_buff[0] <= 57)
   10b40:	e5dd3000 	ldrb	r3, [sp]
   10b44:	e2432030 	sub	r2, r3, #48	; 0x30
   10b48:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[0];
   10b4c:	928d1038 	addls	r1, sp, #56	; 0x38
   10b50:	90812004 	addls	r2, r1, r4
   10b54:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}
			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
   10b58:	e5dd3001 	ldrb	r3, [sp, #1]
   10b5c:	e2432030 	sub	r2, r3, #48	; 0x30
		{
			itoa(temp2, 10, temp_buff);
			if(temp_buff[0] >= 48 && temp_buff[0] <= 57)
			{
				q[ind] = temp_buff[0];
				ind++;
   10b60:	92844001 	addls	r4, r4, #1
			}
			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
   10b64:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[1];
   10b68:	928d1038 	addls	r1, sp, #56	; 0x38
   10b6c:	90812004 	addls	r2, r1, r4
   10b70:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}
			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
   10b74:	e5dd3002 	ldrb	r3, [sp, #2]
   10b78:	e2432030 	sub	r2, r3, #48	; 0x30
				ind++;
			}
			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
			{
				q[ind] = temp_buff[1];
				ind++;
   10b7c:	92844001 	addls	r4, r4, #1
			}
			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
   10b80:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[2];
   10b84:	928d1038 	addls	r1, sp, #56	; 0x38
   10b88:	90812004 	addls	r2, r1, r4
   10b8c:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}
			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
   10b90:	e5dd3003 	ldrb	r3, [sp, #3]
   10b94:	e2432030 	sub	r2, r3, #48	; 0x30
				ind++;
			}
			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
			{
				q[ind] = temp_buff[2];
				ind++;
   10b98:	92844001 	addls	r4, r4, #1
			}
			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
   10b9c:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[3];
   10ba0:	928d1038 	addls	r1, sp, #56	; 0x38
   10ba4:	90812004 	addls	r2, r1, r4
   10ba8:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}

			if(asc == ',')
   10bac:	e59f3500 	ldr	r3, [pc, #1280]	; 110b4 <MODE2ISR+0xc0c>
   10bb0:	e5d32005 	ldrb	r2, [r3, #5]
				ind++;
			}
			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
			{
				q[ind] = temp_buff[3];
				ind++;
   10bb4:	92844001 	addls	r4, r4, #1
   10bb8:	e28d1038 	add	r1, sp, #56	; 0x38
			}

			if(asc == ',')
   10bbc:	e352002c 	cmp	r2, #44	; 0x2c
   10bc0:	e0813004 	add	r3, r1, r4
			{
				q[ind] = ',';
			}
			else
			{
				q[ind] = 0;
   10bc4:	13a02000 	movne	r2, #0
   10bc8:	e5432034 	strb	r2, [r3, #-52]	; 0xffffffcc
			}
			ind++;
			temp = 0; 
			temp2 = 0;
			temp_buff[0] = 0;
   10bcc:	e3a03000 	mov	r3, #0
			}
			else
			{
				q[ind] = 0;
			}
			ind++;
   10bd0:	e2844001 	add	r4, r4, #1
			temp = 0; 
			temp2 = 0;
			temp_buff[0] = 0;
   10bd4:	e5cd3000 	strb	r3, [sp]
			temp_buff[1] = 0;
   10bd8:	e5cd3001 	strb	r3, [sp, #1]
			temp_buff[2] = 0;
   10bdc:	e5cd3002 	strb	r3, [sp, #2]
			temp_buff[3] = 0;
   10be0:	e5cd3003 	strb	r3, [sp, #3]
   10be4:	ea000007 	b	10c08 <MODE2ISR+0x760>

		}

		else if(asc == 'N')
   10be8:	e353004e 	cmp	r3, #78	; 0x4e
   10bec:	1a000005 	bne	10c08 <MODE2ISR+0x760>
		{
			a = ((short)temp2 & 0xFF00) / 0x00000100;
			q[ind] = (char)a;
   10bf0:	e28d2038 	add	r2, sp, #56	; 0x38
   10bf4:	e0823004 	add	r3, r2, r4

		}

		else if(asc == 'N')
		{
			a = ((short)temp2 & 0xFF00) / 0x00000100;
   10bf8:	e1a02420 	lsr	r2, r0, #8
			q[ind] = (char)a;
   10bfc:	e5432034 	strb	r2, [r3, #-52]	; 0xffffffcc
			
			q[ind+1]  = (char)temp2 & 0xFF;
   10c00:	e5430033 	strb	r0, [r3, #-51]	; 0xffffffcd
			ind += 2;
   10c04:	e2844002 	add	r4, r4, #2
			temp = 0;
		}
	}
	// ADC_7
	// Get AD1.2
	if(ad1_2 == 'Y')
   10c08:	e59f34a4 	ldr	r3, [pc, #1188]	; 110b4 <MODE2ISR+0xc0c>
   10c0c:	e5d3300b 	ldrb	r3, [r3, #11]
   10c10:	e3530059 	cmp	r3, #89	; 0x59
   10c14:	1a000048 	bne	10d3c <MODE2ISR+0x894>
	{
		AD1CR = 0x00020FF04; // AD1.2
   10c18:	e59f34b0 	ldr	r3, [pc, #1200]	; 110d0 <MODE2ISR+0xc28>
   10c1c:	e59f24a0 	ldr	r2, [pc, #1184]	; 110c4 <MODE2ISR+0xc1c>
   10c20:	e5832000 	str	r2, [r3]
		AD1CR |= 0x01000000; // start conversion
   10c24:	e5932000 	ldr	r2, [r3]
   10c28:	e3822401 	orr	r2, r2, #16777216	; 0x1000000
   10c2c:	e5832000 	str	r2, [r3]
		while((temp & 0x80000000) == 0)
		{
			temp = AD1DR;
   10c30:	e5932004 	ldr	r2, [r3, #4]
	// Get AD1.2
	if(ad1_2 == 'Y')
	{
		AD1CR = 0x00020FF04; // AD1.2
		AD1CR |= 0x01000000; // start conversion
		while((temp & 0x80000000) == 0)
   10c34:	e3520000 	cmp	r2, #0
   10c38:	aafffffc 	bge	10c30 <MODE2ISR+0x788>
		{
			temp = AD1DR;
		}
		temp &= 0x0000FFC0;
   10c3c:	e59f047c 	ldr	r0, [pc, #1148]	; 110c0 <MODE2ISR+0xc18>
		temp2 = temp / 0x00000040;

		AD1CR = 0x00000000;
   10c40:	e59f3488 	ldr	r3, [pc, #1160]	; 110d0 <MODE2ISR+0xc28>
		AD1CR |= 0x01000000; // start conversion
		while((temp & 0x80000000) == 0)
		{
			temp = AD1DR;
		}
		temp &= 0x0000FFC0;
   10c44:	e0020000 	and	r0, r2, r0
		temp2 = temp / 0x00000040;

		AD1CR = 0x00000000;
   10c48:	e3a02000 	mov	r2, #0
   10c4c:	e5832000 	str	r2, [r3]

		if(asc == 'Y' || asc == ',')
   10c50:	e59f345c 	ldr	r3, [pc, #1116]	; 110b4 <MODE2ISR+0xc0c>
   10c54:	e5d33005 	ldrb	r3, [r3, #5]
   10c58:	e3530059 	cmp	r3, #89	; 0x59
   10c5c:	1353002c 	cmpne	r3, #44	; 0x2c
		while((temp & 0x80000000) == 0)
		{
			temp = AD1DR;
		}
		temp &= 0x0000FFC0;
		temp2 = temp / 0x00000040;
   10c60:	e1a00340 	asr	r0, r0, #6

		AD1CR = 0x00000000;

		if(asc == 'Y' || asc == ',')
   10c64:	1a00002c 	bne	10d1c <MODE2ISR+0x874>
		{
			itoa(temp2, 10, temp_buff);
   10c68:	e3a0100a 	mov	r1, #10
   10c6c:	e1a0200d 	mov	r2, sp
   10c70:	eb00145b 	bl	15de4 <itoa>
			if(temp_buff[0] >= 48 && temp_buff[0] <= 57)
   10c74:	e5dd3000 	ldrb	r3, [sp]
   10c78:	e2432030 	sub	r2, r3, #48	; 0x30
   10c7c:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[0];
   10c80:	928d1038 	addls	r1, sp, #56	; 0x38
   10c84:	90812004 	addls	r2, r1, r4
   10c88:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}
			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
   10c8c:	e5dd3001 	ldrb	r3, [sp, #1]
   10c90:	e2432030 	sub	r2, r3, #48	; 0x30
		{
			itoa(temp2, 10, temp_buff);
			if(temp_buff[0] >= 48 && temp_buff[0] <= 57)
			{
				q[ind] = temp_buff[0];
				ind++;
   10c94:	92844001 	addls	r4, r4, #1
			}
			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
   10c98:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[1];
   10c9c:	928d1038 	addls	r1, sp, #56	; 0x38
   10ca0:	90812004 	addls	r2, r1, r4
   10ca4:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}
			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
   10ca8:	e5dd3002 	ldrb	r3, [sp, #2]
   10cac:	e2432030 	sub	r2, r3, #48	; 0x30
				ind++;
			}
			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
			{
				q[ind] = temp_buff[1];
				ind++;
   10cb0:	92844001 	addls	r4, r4, #1
			}
			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
   10cb4:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[2];
   10cb8:	928d1038 	addls	r1, sp, #56	; 0x38
   10cbc:	90812004 	addls	r2, r1, r4
   10cc0:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}
			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
   10cc4:	e5dd3003 	ldrb	r3, [sp, #3]
   10cc8:	e2432030 	sub	r2, r3, #48	; 0x30
				ind++;
			}
			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
			{
				q[ind] = temp_buff[2];
				ind++;
   10ccc:	92844001 	addls	r4, r4, #1
			}
			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
   10cd0:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[3];
   10cd4:	928d1038 	addls	r1, sp, #56	; 0x38
   10cd8:	90812004 	addls	r2, r1, r4
   10cdc:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}

			if(asc == ',')
   10ce0:	e59f33cc 	ldr	r3, [pc, #972]	; 110b4 <MODE2ISR+0xc0c>
   10ce4:	e5d32005 	ldrb	r2, [r3, #5]
				ind++;
			}
			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
			{
				q[ind] = temp_buff[3];
				ind++;
   10ce8:	92844001 	addls	r4, r4, #1
   10cec:	e28d1038 	add	r1, sp, #56	; 0x38
			}

			if(asc == ',')
   10cf0:	e352002c 	cmp	r2, #44	; 0x2c
   10cf4:	e0813004 	add	r3, r1, r4
			{
				q[ind] = ',';
			}
			else
			{
				q[ind] = 0;
   10cf8:	13a02000 	movne	r2, #0
   10cfc:	e5432034 	strb	r2, [r3, #-52]	; 0xffffffcc
			}
			ind++;
			temp = 0; 
			temp2 = 0;
			temp_buff[0] = 0;
   10d00:	e3a03000 	mov	r3, #0
			}
			else
			{
				q[ind] = 0;
			}
			ind++;
   10d04:	e2844001 	add	r4, r4, #1
			temp = 0; 
			temp2 = 0;
			temp_buff[0] = 0;
   10d08:	e5cd3000 	strb	r3, [sp]
			temp_buff[1] = 0;
   10d0c:	e5cd3001 	strb	r3, [sp, #1]
			temp_buff[2] = 0;
   10d10:	e5cd3002 	strb	r3, [sp, #2]
			temp_buff[3] = 0;
   10d14:	e5cd3003 	strb	r3, [sp, #3]
   10d18:	ea000007 	b	10d3c <MODE2ISR+0x894>

		}

		else if(asc == 'N')
   10d1c:	e353004e 	cmp	r3, #78	; 0x4e
   10d20:	1a000005 	bne	10d3c <MODE2ISR+0x894>
		{
			a = ((short)temp2 & 0xFF00) / 0x00000100;
			q[ind] = (char)a;
   10d24:	e28d2038 	add	r2, sp, #56	; 0x38
   10d28:	e0823004 	add	r3, r2, r4

		}

		else if(asc == 'N')
		{
			a = ((short)temp2 & 0xFF00) / 0x00000100;
   10d2c:	e1a02420 	lsr	r2, r0, #8
			q[ind] = (char)a;
   10d30:	e5432034 	strb	r2, [r3, #-52]	; 0xffffffcc
			
			q[ind+1]  = (char)temp2 & 0xFF;
   10d34:	e5430033 	strb	r0, [r3, #-51]	; 0xffffffcd
			ind += 2;
   10d38:	e2844002 	add	r4, r4, #2
			temp = 0;
		}
	}
	// ADC_8
	// Get AD1.3
	if(ad1_3 == 'Y')
   10d3c:	e59f3370 	ldr	r3, [pc, #880]	; 110b4 <MODE2ISR+0xc0c>
   10d40:	e5d3300c 	ldrb	r3, [r3, #12]
   10d44:	e3530059 	cmp	r3, #89	; 0x59
   10d48:	1a000048 	bne	10e70 <MODE2ISR+0x9c8>
	{
		AD1CR = 0x00020FF08; // AD1.3
   10d4c:	e59f337c 	ldr	r3, [pc, #892]	; 110d0 <MODE2ISR+0xc28>
   10d50:	e59f2364 	ldr	r2, [pc, #868]	; 110bc <MODE2ISR+0xc14>
   10d54:	e5832000 	str	r2, [r3]
		AD1CR |= 0x01000000; // start conversion
   10d58:	e5932000 	ldr	r2, [r3]
   10d5c:	e3822401 	orr	r2, r2, #16777216	; 0x1000000
   10d60:	e5832000 	str	r2, [r3]
		while((temp & 0x80000000) == 0)
		{
			temp = AD1DR;
   10d64:	e5932004 	ldr	r2, [r3, #4]
	// Get AD1.3
	if(ad1_3 == 'Y')
	{
		AD1CR = 0x00020FF08; // AD1.3
		AD1CR |= 0x01000000; // start conversion
		while((temp & 0x80000000) == 0)
   10d68:	e3520000 	cmp	r2, #0
   10d6c:	aafffffc 	bge	10d64 <MODE2ISR+0x8bc>
		{
			temp = AD1DR;
		}
		temp &= 0x0000FFC0;
   10d70:	e59f0348 	ldr	r0, [pc, #840]	; 110c0 <MODE2ISR+0xc18>
		temp2 = temp / 0x00000040;

		AD1CR = 0x00000000;
   10d74:	e59f3354 	ldr	r3, [pc, #852]	; 110d0 <MODE2ISR+0xc28>
		AD1CR |= 0x01000000; // start conversion
		while((temp & 0x80000000) == 0)
		{
			temp = AD1DR;
		}
		temp &= 0x0000FFC0;
   10d78:	e0020000 	and	r0, r2, r0
		temp2 = temp / 0x00000040;

		AD1CR = 0x00000000;
   10d7c:	e3a02000 	mov	r2, #0
   10d80:	e5832000 	str	r2, [r3]

		if(asc == 'Y' || asc == ',')
   10d84:	e59f3328 	ldr	r3, [pc, #808]	; 110b4 <MODE2ISR+0xc0c>
   10d88:	e5d33005 	ldrb	r3, [r3, #5]
   10d8c:	e3530059 	cmp	r3, #89	; 0x59
   10d90:	1353002c 	cmpne	r3, #44	; 0x2c
		while((temp & 0x80000000) == 0)
		{
			temp = AD1DR;
		}
		temp &= 0x0000FFC0;
		temp2 = temp / 0x00000040;
   10d94:	e1a00340 	asr	r0, r0, #6

		AD1CR = 0x00000000;

		if(asc == 'Y' || asc == ',')
   10d98:	1a00002c 	bne	10e50 <MODE2ISR+0x9a8>
		{
			itoa(temp2, 10, temp_buff);
   10d9c:	e3a0100a 	mov	r1, #10
   10da0:	e1a0200d 	mov	r2, sp
   10da4:	eb00140e 	bl	15de4 <itoa>
			if(temp_buff[0] >= 48 && temp_buff[0] <= 57)
   10da8:	e5dd3000 	ldrb	r3, [sp]
   10dac:	e2432030 	sub	r2, r3, #48	; 0x30
   10db0:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[0];
   10db4:	928d1038 	addls	r1, sp, #56	; 0x38
   10db8:	90812004 	addls	r2, r1, r4
   10dbc:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}
			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
   10dc0:	e5dd3001 	ldrb	r3, [sp, #1]
   10dc4:	e2432030 	sub	r2, r3, #48	; 0x30
		{
			itoa(temp2, 10, temp_buff);
			if(temp_buff[0] >= 48 && temp_buff[0] <= 57)
			{
				q[ind] = temp_buff[0];
				ind++;
   10dc8:	92844001 	addls	r4, r4, #1
			}
			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
   10dcc:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[1];
   10dd0:	928d1038 	addls	r1, sp, #56	; 0x38
   10dd4:	90812004 	addls	r2, r1, r4
   10dd8:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}
			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
   10ddc:	e5dd3002 	ldrb	r3, [sp, #2]
   10de0:	e2432030 	sub	r2, r3, #48	; 0x30
				ind++;
			}
			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
			{
				q[ind] = temp_buff[1];
				ind++;
   10de4:	92844001 	addls	r4, r4, #1
			}
			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
   10de8:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[2];
   10dec:	928d1038 	addls	r1, sp, #56	; 0x38
   10df0:	90812004 	addls	r2, r1, r4
   10df4:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}
			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
   10df8:	e5dd3003 	ldrb	r3, [sp, #3]
   10dfc:	e2432030 	sub	r2, r3, #48	; 0x30
				ind++;
			}
			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
			{
				q[ind] = temp_buff[2];
				ind++;
   10e00:	92844001 	addls	r4, r4, #1
			}
			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
   10e04:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[3];
   10e08:	928d1038 	addls	r1, sp, #56	; 0x38
   10e0c:	90812004 	addls	r2, r1, r4
   10e10:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}
	
			if(asc == ',')
   10e14:	e59f3298 	ldr	r3, [pc, #664]	; 110b4 <MODE2ISR+0xc0c>
   10e18:	e5d32005 	ldrb	r2, [r3, #5]
				ind++;
			}
			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
			{
				q[ind] = temp_buff[3];
				ind++;
   10e1c:	92844001 	addls	r4, r4, #1
   10e20:	e28d1038 	add	r1, sp, #56	; 0x38
			}
	
			if(asc == ',')
   10e24:	e352002c 	cmp	r2, #44	; 0x2c
   10e28:	e0813004 	add	r3, r1, r4
			{
				q[ind] = ',';
			}
			else
			{
				q[ind] = 0;
   10e2c:	13a02000 	movne	r2, #0
   10e30:	e5432034 	strb	r2, [r3, #-52]	; 0xffffffcc
			}
			ind++;
			temp = 0; 
			temp2 = 0;
			temp_buff[0] = 0;
   10e34:	e3a03000 	mov	r3, #0
			}
			else
			{
				q[ind] = 0;
			}
			ind++;
   10e38:	e2844001 	add	r4, r4, #1
			temp = 0; 
			temp2 = 0;
			temp_buff[0] = 0;
   10e3c:	e5cd3000 	strb	r3, [sp]
			temp_buff[1] = 0;
   10e40:	e5cd3001 	strb	r3, [sp, #1]
			temp_buff[2] = 0;
   10e44:	e5cd3002 	strb	r3, [sp, #2]
			temp_buff[3] = 0;
   10e48:	e5cd3003 	strb	r3, [sp, #3]
   10e4c:	ea000007 	b	10e70 <MODE2ISR+0x9c8>

		}

		else if(asc == 'N')
   10e50:	e353004e 	cmp	r3, #78	; 0x4e
   10e54:	1a000005 	bne	10e70 <MODE2ISR+0x9c8>
		{
			a = ((short)temp2 & 0xFF00) / 0x00000100;
			q[ind] = (char)a;
   10e58:	e28d2038 	add	r2, sp, #56	; 0x38
   10e5c:	e0823004 	add	r3, r2, r4

		}

		else if(asc == 'N')
		{
			a = ((short)temp2 & 0xFF00) / 0x00000100;
   10e60:	e1a02420 	lsr	r2, r0, #8
			q[ind] = (char)a;
   10e64:	e5432034 	strb	r2, [r3, #-52]	; 0xffffffcc
			
			q[ind+1]  = (char)temp2 & 0xFF;
   10e68:	e5430033 	strb	r0, [r3, #-51]	; 0xffffffcd
			ind += 2;
   10e6c:	e2844002 	add	r4, r4, #2
			temp = 0;
		}
	}	
	if(asc == ',')	// remove final comma, replace with zero (NULL)
   10e70:	e59f323c 	ldr	r3, [pc, #572]	; 110b4 <MODE2ISR+0xc0c>
   10e74:	e5d33005 	ldrb	r3, [r3, #5]
   10e78:	e353002c 	cmp	r3, #44	; 0x2c
   10e7c:	1a000004 	bne	10e94 <MODE2ISR+0x9ec>
	{
		if(ind > 0)	// sanity check, maybe no ADCs were marked to be read
   10e80:	e3540000 	cmp	r4, #0
		{
			q[ind-1] = 0;
   10e84:	128d1038 	addne	r1, sp, #56	; 0x38
   10e88:	10812004 	addne	r2, r1, r4
   10e8c:	13a01000 	movne	r1, #0
   10e90:	15421035 	strbne	r1, [r2, #-53]	; 0xffffffcb
   10e94:	e59f1240 	ldr	r1, [pc, #576]	; 110dc <MODE2ISR+0xc34>
   10e98:	e59f7240 	ldr	r7, [pc, #576]	; 110e0 <MODE2ISR+0xc38>
   10e9c:	e1d120b0 	ldrh	r2, [r1]
   10ea0:	e5d1c002 	ldrb	ip, [r1, #2]
   10ea4:	e5d10003 	ldrb	r0, [r1, #3]

			if(RX_in == 512) log_array1 = 1;
		}
		else if(RX_in >= 512)
		{
			RX_array2[RX_in - 512] = q[j];
   10ea8:	e59f8234 	ldr	r8, [pc, #564]	; 110e4 <MODE2ISR+0xc3c>
			RX_in++;

			if(RX_in == 1024)
			{
				log_array2 = 1;
				RX_in = 0;
   10eac:	e3a01000 	mov	r1, #0
	
	for(j = 0; j < ind; j++)
	{
		if(RX_in < 512)
		{
			RX_array1[RX_in] = q[j];
   10eb0:	e59fa230 	ldr	sl, [pc, #560]	; 110e8 <MODE2ISR+0xc40>
   10eb4:	ea000017 	b	10f18 <MODE2ISR+0xa70>
		}
	}
	
	for(j = 0; j < ind; j++)
	{
		if(RX_in < 512)
   10eb8:	e1a09802 	lsl	r9, r2, #16
   10ebc:	e1a06849 	asr	r6, r9, #16
   10ec0:	e1560007 	cmp	r6, r7
   10ec4:	e28d5004 	add	r5, sp, #4
   10ec8:	ca000007 	bgt	10eec <MODE2ISR+0xa44>
		{
			RX_array1[RX_in] = q[j];
   10ecc:	e7d55001 	ldrb	r5, [r5, r1]
			RX_in++;
   10ed0:	e2822001 	add	r2, r2, #1
	
	for(j = 0; j < ind; j++)
	{
		if(RX_in < 512)
		{
			RX_array1[RX_in] = q[j];
   10ed4:	e7ca5849 	strb	r5, [sl, r9, asr #16]
			RX_in++;
   10ed8:	e1a05802 	lsl	r5, r2, #16

			if(RX_in == 512) log_array1 = 1;
   10edc:	e3550402 	cmp	r5, #33554432	; 0x2000000
   10ee0:	e1a02825 	lsr	r2, r5, #16
   10ee4:	03a0c001 	moveq	ip, #1
   10ee8:	ea000009 	b	10f14 <MODE2ISR+0xa6c>
		}
		else if(RX_in >= 512)
		{
			RX_array2[RX_in - 512] = q[j];
   10eec:	e7d55001 	ldrb	r5, [r5, r1]
			RX_in++;
   10ef0:	e2822001 	add	r2, r2, #1
   10ef4:	e1a02802 	lsl	r2, r2, #16

			if(RX_in == 512) log_array1 = 1;
		}
		else if(RX_in >= 512)
		{
			RX_array2[RX_in - 512] = q[j];
   10ef8:	e0886006 	add	r6, r8, r6
   10efc:	e5465200 	strb	r5, [r6, #-512]	; 0xfffffe00
			RX_in++;

			if(RX_in == 1024)
   10f00:	e1a05842 	asr	r5, r2, #16
			{
				log_array2 = 1;
   10f04:	e3550b01 	cmp	r5, #1024	; 0x400
   10f08:	03a00001 	moveq	r0, #1
   10f0c:	03a02000 	moveq	r2, #0
   10f10:	11a02822 	lsrne	r2, r2, #16
		{
			q[ind-1] = 0;
		}
	}
	
	for(j = 0; j < ind; j++)
   10f14:	e2811001 	add	r1, r1, #1
   10f18:	e1510004 	cmp	r1, r4
   10f1c:	baffffe5 	blt	10eb8 <MODE2ISR+0xa10>
   10f20:	e59f11b4 	ldr	r1, [pc, #436]	; 110dc <MODE2ISR+0xc34>
   10f24:	e5c1c002 	strb	ip, [r1, #2]
   10f28:	e5c10003 	strb	r0, [r1, #3]
				log_array2 = 1;
				RX_in = 0;
			}
		}
	}
	if(RX_in < 512)
   10f2c:	e59fc1ac 	ldr	ip, [pc, #428]	; 110e0 <MODE2ISR+0xc38>
   10f30:	e1a00802 	lsl	r0, r2, #16
   10f34:	e1a01840 	asr	r1, r0, #16
   10f38:	e151000c 	cmp	r1, ip
   10f3c:	ca000011 	bgt	10f88 <MODE2ISR+0xae0>
	{
		if(asc == 'N') { RX_array1[RX_in] = '$'; }
   10f40:	e353004e 	cmp	r3, #78	; 0x4e
   10f44:	03a0c024 	moveq	ip, #36	; 0x24
   10f48:	0a000003 	beq	10f5c <MODE2ISR+0xab4>
		else if(asc == 'Y' || asc == ','){ RX_array1[RX_in] = 13; }
   10f4c:	e3530059 	cmp	r3, #89	; 0x59
   10f50:	1353002c 	cmpne	r3, #44	; 0x2c
   10f54:	1a000002 	bne	10f64 <MODE2ISR+0xabc>
   10f58:	e3a0c00d 	mov	ip, #13
   10f5c:	e59f1184 	ldr	r1, [pc, #388]	; 110e8 <MODE2ISR+0xc40>
   10f60:	e7c1c840 	strb	ip, [r1, r0, asr #16]
		RX_in++;
   10f64:	e2822001 	add	r2, r2, #1
   10f68:	e1a02802 	lsl	r2, r2, #16
   10f6c:	e1a02822 	lsr	r2, r2, #16
   10f70:	e59f1164 	ldr	r1, [pc, #356]	; 110dc <MODE2ISR+0xc34>

		if(RX_in == 512) log_array1 = 1;
   10f74:	e3520c02 	cmp	r2, #512	; 0x200
	}
	if(RX_in < 512)
	{
		if(asc == 'N') { RX_array1[RX_in] = '$'; }
		else if(asc == 'Y' || asc == ','){ RX_array1[RX_in] = 13; }
		RX_in++;
   10f78:	e1c120b0 	strh	r2, [r1]

		if(RX_in == 512) log_array1 = 1;
   10f7c:	03a02001 	moveq	r2, #1
   10f80:	05c12002 	strbeq	r2, [r1, #2]
   10f84:	ea000015 	b	10fe0 <MODE2ISR+0xb38>
	}
	else if(RX_in >= 512)
	{
		
		if(asc == 'N') RX_array2[RX_in - 512] = '$';
   10f88:	e353004e 	cmp	r3, #78	; 0x4e
   10f8c:	059f0150 	ldreq	r0, [pc, #336]	; 110e4 <MODE2ISR+0xc3c>
   10f90:	00801001 	addeq	r1, r0, r1
   10f94:	03a00024 	moveq	r0, #36	; 0x24
   10f98:	0a000005 	beq	10fb4 <MODE2ISR+0xb0c>
		else if(asc == 'Y' || asc == ','){ RX_array2[RX_in - 512] = 13; }
   10f9c:	e3530059 	cmp	r3, #89	; 0x59
   10fa0:	1353002c 	cmpne	r3, #44	; 0x2c
   10fa4:	1a000003 	bne	10fb8 <MODE2ISR+0xb10>
   10fa8:	e59f0134 	ldr	r0, [pc, #308]	; 110e4 <MODE2ISR+0xc3c>
   10fac:	e0801001 	add	r1, r0, r1
   10fb0:	e3a0000d 	mov	r0, #13
   10fb4:	e5410200 	strb	r0, [r1, #-512]	; 0xfffffe00
		RX_in++;
   10fb8:	e2822001 	add	r2, r2, #1
   10fbc:	e1a02802 	lsl	r2, r2, #16
   10fc0:	e1a02822 	lsr	r2, r2, #16
   10fc4:	e59f1110 	ldr	r1, [pc, #272]	; 110dc <MODE2ISR+0xc34>
		
		if(RX_in == 1024)
   10fc8:	e3520b01 	cmp	r2, #1024	; 0x400
	else if(RX_in >= 512)
	{
		
		if(asc == 'N') RX_array2[RX_in - 512] = '$';
		else if(asc == 'Y' || asc == ','){ RX_array2[RX_in - 512] = 13; }
		RX_in++;
   10fcc:	e1c120b0 	strh	r2, [r1]
		
		if(RX_in == 1024)
		{
			log_array2 = 1;
   10fd0:	03a02001 	moveq	r2, #1
   10fd4:	05c12003 	strbeq	r2, [r1, #3]
			RX_in = 0;
   10fd8:	03a02000 	moveq	r2, #0
   10fdc:	01c120b0 	strheq	r2, [r1]
		}
	}
	if(RX_in < 512)
   10fe0:	e59f20f4 	ldr	r2, [pc, #244]	; 110dc <MODE2ISR+0xc34>
   10fe4:	e1d220b0 	ldrh	r2, [r2]
   10fe8:	e1a00802 	lsl	r0, r2, #16
   10fec:	e1a01840 	asr	r1, r0, #16
   10ff0:	e3510c02 	cmp	r1, #512	; 0x200
   10ff4:	aa000011 	bge	11040 <MODE2ISR+0xb98>
	{
		if(asc == 'N') RX_array1[RX_in] = '$';
   10ff8:	e353004e 	cmp	r3, #78	; 0x4e
   10ffc:	03a01024 	moveq	r1, #36	; 0x24
   11000:	0a000003 	beq	11014 <MODE2ISR+0xb6c>
		else if(asc == 'Y' || asc == ','){ RX_array1[RX_in] = 10; }
   11004:	e3530059 	cmp	r3, #89	; 0x59
   11008:	1353002c 	cmpne	r3, #44	; 0x2c
   1100c:	1a000002 	bne	1101c <MODE2ISR+0xb74>
   11010:	e3a0100a 	mov	r1, #10
   11014:	e59f30cc 	ldr	r3, [pc, #204]	; 110e8 <MODE2ISR+0xc40>
   11018:	e7c31840 	strb	r1, [r3, r0, asr #16]
		RX_in++;
   1101c:	e2822001 	add	r2, r2, #1
   11020:	e1a02802 	lsl	r2, r2, #16
   11024:	e1a02822 	lsr	r2, r2, #16
   11028:	e59f30ac 	ldr	r3, [pc, #172]	; 110dc <MODE2ISR+0xc34>

		if(RX_in == 512) log_array1 = 1;
   1102c:	e3520c02 	cmp	r2, #512	; 0x200
	}
	if(RX_in < 512)
	{
		if(asc == 'N') RX_array1[RX_in] = '$';
		else if(asc == 'Y' || asc == ','){ RX_array1[RX_in] = 10; }
		RX_in++;
   11030:	e1c320b0 	strh	r2, [r3]

		if(RX_in == 512) log_array1 = 1;
   11034:	03a02001 	moveq	r2, #1
   11038:	05c32002 	strbeq	r2, [r3, #2]
   1103c:	ea000015 	b	11098 <MODE2ISR+0xbf0>
	}
	else if(RX_in >= 512)
	{
		
		if(asc == 'N') RX_array2[RX_in - 512] = '$';
   11040:	e353004e 	cmp	r3, #78	; 0x4e
   11044:	059f3098 	ldreq	r3, [pc, #152]	; 110e4 <MODE2ISR+0xc3c>
   11048:	00831001 	addeq	r1, r3, r1
   1104c:	03a03024 	moveq	r3, #36	; 0x24
   11050:	0a000005 	beq	1106c <MODE2ISR+0xbc4>
		else if(asc == 'Y' || asc == ','){ RX_array2[RX_in - 512] = 10; }
   11054:	e3530059 	cmp	r3, #89	; 0x59
   11058:	1353002c 	cmpne	r3, #44	; 0x2c
   1105c:	1a000003 	bne	11070 <MODE2ISR+0xbc8>
   11060:	e59f307c 	ldr	r3, [pc, #124]	; 110e4 <MODE2ISR+0xc3c>
   11064:	e0831001 	add	r1, r3, r1
   11068:	e3a0300a 	mov	r3, #10
   1106c:	e5413200 	strb	r3, [r1, #-512]	; 0xfffffe00
		RX_in++;
   11070:	e2822001 	add	r2, r2, #1
   11074:	e1a02802 	lsl	r2, r2, #16
   11078:	e1a02822 	lsr	r2, r2, #16
   1107c:	e59f3058 	ldr	r3, [pc, #88]	; 110dc <MODE2ISR+0xc34>
		
		if(RX_in == 1024)
   11080:	e3520b01 	cmp	r2, #1024	; 0x400
	else if(RX_in >= 512)
	{
		
		if(asc == 'N') RX_array2[RX_in - 512] = '$';
		else if(asc == 'Y' || asc == ','){ RX_array2[RX_in - 512] = 10; }
		RX_in++;
   11084:	e1c320b0 	strh	r2, [r3]
		
		if(RX_in == 1024)
		{
			log_array2 = 1;
   11088:	03a02001 	moveq	r2, #1
   1108c:	05c32003 	strbeq	r2, [r3, #3]
			RX_in = 0;
   11090:	03a02000 	moveq	r2, #0
   11094:	01c320b0 	strheq	r2, [r3]
		}
	}

	VICVectAddr= 0;
   11098:	e3a02000 	mov	r2, #0
   1109c:	e3e03000 	mvn	r3, #0
   110a0:	e5032fcf 	str	r2, [r3, #-4047]	; 0xfffff031
}
   110a4:	e28dd038 	add	sp, sp, #56	; 0x38
   110a8:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   110ac:	e12fff1e 	bx	lr
   110b0:	e0004000 	.word	0xe0004000
   110b4:	40000000 	.word	0x40000000
   110b8:	e0034000 	.word	0xe0034000
   110bc:	0020ff08 	.word	0x0020ff08
   110c0:	0000ffc0 	.word	0x0000ffc0
   110c4:	0020ff04 	.word	0x0020ff04
   110c8:	0020ff02 	.word	0x0020ff02
   110cc:	0020ff10 	.word	0x0020ff10
   110d0:	e0060000 	.word	0xe0060000
   110d4:	0020ff80 	.word	0x0020ff80
   110d8:	0020ff40 	.word	0x0020ff40
   110dc:	400008cc 	.word	0x400008cc
   110e0:	000001ff 	.word	0x000001ff
   110e4:	40000c58 	.word	0x40000c58
   110e8:	40000f5c 	.word	0x40000f5c

000110ec <Initialize>:
 ******************************************************/

#define PLOCK 0x400

void Initialize(void)
{
   110ec:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	rprintf_devopen(putc_serial0);
   110f0:	e59f004c 	ldr	r0, [pc, #76]	; 11144 <Initialize+0x58>
   110f4:	eb00059c 	bl	1276c <rprintf_devopen>
	
	PINSEL0 = 0xCF351505;
   110f8:	e59f3048 	ldr	r3, [pc, #72]	; 11148 <Initialize+0x5c>
   110fc:	e59f2048 	ldr	r2, [pc, #72]	; 1114c <Initialize+0x60>
   11100:	e5832000 	str	r2, [r3]
	PINSEL1 = 0x15441801;
   11104:	e59f2044 	ldr	r2, [pc, #68]	; 11150 <Initialize+0x64>
   11108:	e5832004 	str	r2, [r3, #4]
	IODIR0 |= 0x00000884;
   1110c:	e2433901 	sub	r3, r3, #16384	; 0x4000
   11110:	e5932008 	ldr	r2, [r3, #8]
   11114:	e3822d22 	orr	r2, r2, #2176	; 0x880
   11118:	e3822004 	orr	r2, r2, #4
   1111c:	e5832008 	str	r2, [r3, #8]
	IOSET0 = 0x00000080;
   11120:	e3a02080 	mov	r2, #128	; 0x80
   11124:	e5832004 	str	r2, [r3, #4]

	S0SPCR = 0x08;  // SPI clk to be pclk/8
   11128:	e2433902 	sub	r3, r3, #32768	; 0x8000
   1112c:	e3a02008 	mov	r2, #8
   11130:	e5c32000 	strb	r2, [r3]
	S0SPCR = 0x30;  // master, msb, first clk edge, active high, no ints
   11134:	e3a02030 	mov	r2, #48	; 0x30
   11138:	e5c32000 	strb	r2, [r3]

}
   1113c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   11140:	e12fff1e 	bx	lr
   11144:	00012d4c 	.word	0x00012d4c
   11148:	e002c000 	.word	0xe002c000
   1114c:	cf351505 	.word	0xcf351505
   11150:	15441801 	.word	0x15441801

00011154 <feed>:

void feed(void)
{
	PLLFEED=0xAA;
   11154:	e59f3010 	ldr	r3, [pc, #16]	; 1116c <feed+0x18>
   11158:	e3e02055 	mvn	r2, #85	; 0x55
   1115c:	e5c3208c 	strb	r2, [r3, #140]	; 0x8c
	PLLFEED=0x55;
   11160:	e3a02055 	mov	r2, #85	; 0x55
   11164:	e5c3208c 	strb	r2, [r3, #140]	; 0x8c
   11168:	e12fff1e 	bx	lr
   1116c:	e01fc000 	.word	0xe01fc000

00011170 <FIQ_Routine>:

	VICVectAddr= 0;
}

void FIQ_Routine(void)
{
   11170:	e92d000c 	push	{r2, r3}
		if(onoff){ IOCLR0 = 0x00000800; } // On
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
   11174:	e59f301c 	ldr	r3, [pc, #28]	; 11198 <FIQ_Routine+0x28>
   11178:	e3a02004 	mov	r2, #4
   1117c:	e583200c 	str	r2, [r3, #12]
		else { IOSET0 = 0x00000004; } // Off
   11180:	e5832004 	str	r2, [r3, #4]
	int j;

	stat(0,ON);
	for(j = 0; j < 5000000; j++);
	stat(0,OFF);
	a = U0RBR;
   11184:	e2433907 	sub	r3, r3, #114688	; 0x1c000
   11188:	e5d32000 	ldrb	r2, [r3]

	a = U0IIR;  // have to read this to clear the interrupt
   1118c:	e5d33008 	ldrb	r3, [r3, #8]
}
   11190:	e8bd000c 	pop	{r2, r3}
   11194:	e25ef004 	subs	pc, lr, #4
   11198:	e0028000 	.word	0xe0028000

0001119c <SWI_Routine>:

void SWI_Routine(void)
{
   1119c:	eafffffe 	b	1119c <SWI_Routine>

000111a0 <UNDEF_Routine>:
	while(1);
}

void UNDEF_Routine(void)
{
   111a0:	e92d000c 	push	{r2, r3}
		if(onoff){ IOCLR0 = 0x00000800; } // On
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
   111a4:	e59f300c 	ldr	r3, [pc, #12]	; 111b8 <UNDEF_Routine+0x18>
   111a8:	e3a02004 	mov	r2, #4
   111ac:	e583200c 	str	r2, [r3, #12]
}

void UNDEF_Routine(void)
{
	stat(0,ON);
}
   111b0:	e8bd000c 	pop	{r2, r3}
   111b4:	e1b0f00e 	movs	pc, lr
   111b8:	e0028000 	.word	0xe0028000

000111bc <setup_uart0>:

void setup_uart0(int newbaud, char want_ints)
{
	baud = newbaud;
   111bc:	e59f3160 	ldr	r3, [pc, #352]	; 11324 <setup_uart0+0x168>
{
	stat(0,ON);
}

void setup_uart0(int newbaud, char want_ints)
{
   111c0:	e92d4070 	push	{r4, r5, r6, lr}
	baud = newbaud;
   111c4:	e5830010 	str	r0, [r3, #16]
	U0LCR = 0x83;   // 8 bits, no parity, 1 stop bit, DLAB = 1
   111c8:	e59f3158 	ldr	r3, [pc, #344]	; 11328 <setup_uart0+0x16c>
   111cc:	e3e0207c 	mvn	r2, #124	; 0x7c
	
	if(baud == 1200)
   111d0:	e3500e4b 	cmp	r0, #1200	; 0x4b0
}

void setup_uart0(int newbaud, char want_ints)
{
	baud = newbaud;
	U0LCR = 0x83;   // 8 bits, no parity, 1 stop bit, DLAB = 1
   111d4:	e5c3200c 	strb	r2, [r3, #12]
{
	stat(0,ON);
}

void setup_uart0(int newbaud, char want_ints)
{
   111d8:	e20140ff 	and	r4, r1, #255	; 0xff
	baud = newbaud;
	U0LCR = 0x83;   // 8 bits, no parity, 1 stop bit, DLAB = 1
	
	if(baud == 1200)
	{
		U0DLM = 0x0C;
   111dc:	03a0200c 	moveq	r2, #12
void setup_uart0(int newbaud, char want_ints)
{
	baud = newbaud;
	U0LCR = 0x83;   // 8 bits, no parity, 1 stop bit, DLAB = 1
	
	if(baud == 1200)
   111e0:	0a000002 	beq	111f0 <setup_uart0+0x34>
	{
		U0DLM = 0x0C;
		U0DLL = 0x00;
	}
	else if(baud == 2400)
   111e4:	e3500e96 	cmp	r0, #2400	; 0x960
   111e8:	1a000003 	bne	111fc <setup_uart0+0x40>
	{
		U0DLM = 0x06;
   111ec:	e3a02006 	mov	r2, #6
   111f0:	e5c32004 	strb	r2, [r3, #4]
		U0DLL = 0x00;
   111f4:	e3a02000 	mov	r2, #0
   111f8:	ea00001c 	b	11270 <setup_uart0+0xb4>
	}
	else if(baud == 4800)
   111fc:	e3500d4b 	cmp	r0, #4800	; 0x12c0
	{
		U0DLM = 0x03;
   11200:	03a02003 	moveq	r2, #3
	else if(baud == 2400)
	{
		U0DLM = 0x06;
		U0DLL = 0x00;
	}
	else if(baud == 4800)
   11204:	0afffff9 	beq	111f0 <setup_uart0+0x34>
	{
		U0DLM = 0x03;
		U0DLL = 0x00;
	}
	else if(baud == 9600)
   11208:	e3500d96 	cmp	r0, #9600	; 0x2580
	{
		U0DLM = 0x01;
   1120c:	03a02001 	moveq	r2, #1
   11210:	05c32004 	strbeq	r2, [r3, #4]
		U0DLL = 0x80;
   11214:	03e0207f 	mvneq	r2, #127	; 0x7f
	else if(baud == 4800)
	{
		U0DLM = 0x03;
		U0DLL = 0x00;
	}
	else if(baud == 9600)
   11218:	0a000014 	beq	11270 <setup_uart0+0xb4>
	{
		U0DLM = 0x01;
		U0DLL = 0x80;
	}
	else if(baud == 19200)
   1121c:	e3500c4b 	cmp	r0, #19200	; 0x4b00
	{
		U0DLM = 0x00;
   11220:	03a02000 	moveq	r2, #0
   11224:	05c32004 	strbeq	r2, [r3, #4]
		U0DLL = 0xC0;
   11228:	03e0203f 	mvneq	r2, #63	; 0x3f
	else if(baud == 9600)
	{
		U0DLM = 0x01;
		U0DLL = 0x80;
	}
	else if(baud == 19200)
   1122c:	0a00000f 	beq	11270 <setup_uart0+0xb4>
	{
		U0DLM = 0x00;
		U0DLL = 0xC0;
	}
	else if(baud == 38400)
   11230:	e3500c96 	cmp	r0, #38400	; 0x9600
	{
		U0DLM = 0x00;
   11234:	03a02000 	moveq	r2, #0
   11238:	05c32004 	strbeq	r2, [r3, #4]
		U0DLL = 0x60;
   1123c:	03a02060 	moveq	r2, #96	; 0x60
	else if(baud == 19200)
	{
		U0DLM = 0x00;
		U0DLL = 0xC0;
	}
	else if(baud == 38400)
   11240:	0a00000a 	beq	11270 <setup_uart0+0xb4>
	{
		U0DLM = 0x00;
		U0DLL = 0x60;
	}
	else if(baud == 57600)
   11244:	e3500ce1 	cmp	r0, #57600	; 0xe100
	{
		U0DLM = 0x00;
   11248:	03a02000 	moveq	r2, #0
   1124c:	05c32004 	strbeq	r2, [r3, #4]
		U0DLL = 0x40;
   11250:	03a02040 	moveq	r2, #64	; 0x40
	else if(baud == 38400)
	{
		U0DLM = 0x00;
		U0DLL = 0x60;
	}
	else if(baud == 57600)
   11254:	0a000005 	beq	11270 <setup_uart0+0xb4>
	{
		U0DLM = 0x00;
		U0DLL = 0x40;
	}
	else if(baud == 115200)
   11258:	e59f20cc 	ldr	r2, [pc, #204]	; 1132c <setup_uart0+0x170>
   1125c:	e1500002 	cmp	r0, r2
   11260:	1a000003 	bne	11274 <setup_uart0+0xb8>
	{
		U0DLM = 0x00;
   11264:	e3a02000 	mov	r2, #0
   11268:	e5c32004 	strb	r2, [r3, #4]
		U0DLL = 0x20;
   1126c:	e3a02020 	mov	r2, #32
   11270:	e5c32000 	strb	r2, [r3]
	}

	U0FCR = 0x01;
   11274:	e3a06001 	mov	r6, #1
	U0LCR = 0x03;   
   11278:	e3a02003 	mov	r2, #3

	if(want_ints == 1)
   1127c:	e1540006 	cmp	r4, r6
	{
		U0DLM = 0x00;
		U0DLL = 0x20;
	}

	U0FCR = 0x01;
   11280:	e5c36008 	strb	r6, [r3, #8]
   11284:	e59f509c 	ldr	r5, [pc, #156]	; 11328 <setup_uart0+0x16c>
	U0LCR = 0x03;   
   11288:	e5c3200c 	strb	r2, [r3, #12]

	if(want_ints == 1)
   1128c:	1a00000c 	bne	112c4 <setup_uart0+0x108>
	{
		enableIRQ();
   11290:	eb001301 	bl	15e9c <enableIRQ>
		VICIntSelect &= ~0x00000040;
   11294:	e3e03000 	mvn	r3, #0
   11298:	e5132ff3 	ldr	r2, [r3, #-4083]	; 0xfffff00d
   1129c:	e3c22040 	bic	r2, r2, #64	; 0x40
   112a0:	e5032ff3 	str	r2, [r3, #-4083]	; 0xfffff00d
		VICIntEnable |= 0x00000040;
   112a4:	e5132fef 	ldr	r2, [r3, #-4079]	; 0xfffff011
   112a8:	e3822040 	orr	r2, r2, #64	; 0x40
   112ac:	e5032fef 	str	r2, [r3, #-4079]	; 0xfffff011
		VICVectCntl1 = 0x26;
   112b0:	e3a02026 	mov	r2, #38	; 0x26
   112b4:	e5032dfb 	str	r2, [r3, #-3579]	; 0xfffff205
		VICVectAddr1 = (unsigned int)UART0ISR;
   112b8:	e59f2070 	ldr	r2, [pc, #112]	; 11330 <setup_uart0+0x174>
   112bc:	e5032efb 	str	r2, [r3, #-3835]	; 0xfffff105
   112c0:	ea000014 	b	11318 <setup_uart0+0x15c>
		U0IER = 0x01;
	}
	else if(want_ints == 2)
   112c4:	e3540002 	cmp	r4, #2
   112c8:	1a00000d 	bne	11304 <setup_uart0+0x148>
	{
		enableIRQ();
   112cc:	eb0012f2 	bl	15e9c <enableIRQ>
		VICIntSelect &= ~0x00000040;
   112d0:	e3e03000 	mvn	r3, #0
   112d4:	e5132ff3 	ldr	r2, [r3, #-4083]	; 0xfffff00d
   112d8:	e3c22040 	bic	r2, r2, #64	; 0x40
   112dc:	e5032ff3 	str	r2, [r3, #-4083]	; 0xfffff00d
		VICIntEnable |= 0x00000040;
   112e0:	e5132fef 	ldr	r2, [r3, #-4079]	; 0xfffff011
   112e4:	e3822040 	orr	r2, r2, #64	; 0x40
   112e8:	e5032fef 	str	r2, [r3, #-4079]	; 0xfffff011
		VICVectCntl2 = 0x26;
   112ec:	e3a02026 	mov	r2, #38	; 0x26
   112f0:	e5032df7 	str	r2, [r3, #-3575]	; 0xfffff209
		VICVectAddr2 = (unsigned int)UART0ISR_2;
   112f4:	e59f2038 	ldr	r2, [pc, #56]	; 11334 <setup_uart0+0x178>
   112f8:	e5032ef7 	str	r2, [r3, #-3831]	; 0xfffff109
		U0IER = 0X01;
   112fc:	e5c56004 	strb	r6, [r5, #4]
   11300:	ea000005 	b	1131c <setup_uart0+0x160>
	}
	else if(want_ints == 0)
   11304:	e3540000 	cmp	r4, #0
   11308:	1a000003 	bne	1131c <setup_uart0+0x160>
	{
		VICIntEnClr = 0x00000040;
   1130c:	e3a02040 	mov	r2, #64	; 0x40
   11310:	e3e03000 	mvn	r3, #0
   11314:	e5032feb 	str	r2, [r3, #-4075]	; 0xfffff015
		U0IER = 0x00;
   11318:	e5c54004 	strb	r4, [r5, #4]
	}
}
   1131c:	e8bd4070 	pop	{r4, r5, r6, lr}
   11320:	e12fff1e 	bx	lr
   11324:	40000000 	.word	0x40000000
   11328:	e000c000 	.word	0xe000c000
   1132c:	0001c200 	.word	0x0001c200
   11330:	000102dc 	.word	0x000102dc
   11334:	0001037c 	.word	0x0001037c

00011338 <stat>:

void stat(int statnum, int onoff)
{
	if(statnum) // Stat 1
   11338:	e3500000 	cmp	r0, #0
   1133c:	e59f3020 	ldr	r3, [pc, #32]	; 11364 <stat+0x2c>
   11340:	0a000002 	beq	11350 <stat+0x18>
	{
		if(onoff){ IOCLR0 = 0x00000800; } // On
   11344:	e3510000 	cmp	r1, #0
   11348:	e3a02b02 	mov	r2, #2048	; 0x800
   1134c:	ea000001 	b	11358 <stat+0x20>
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
   11350:	e3510000 	cmp	r1, #0
   11354:	e3a02004 	mov	r2, #4
   11358:	1583200c 	strne	r2, [r3, #12]
		else { IOSET0 = 0x00000004; } // Off
   1135c:	05832004 	streq	r2, [r3, #4]
   11360:	e12fff1e 	bx	lr
   11364:	e0028000 	.word	0xe0028000

00011368 <AD_conversion>:

void AD_conversion(int regbank)
{
	int temp = 0, temp2;

	if(!regbank) // bank 0
   11368:	e3500000 	cmp	r0, #0
	while(1);
		
}

void AD_conversion(int regbank)
{
   1136c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	int temp = 0, temp2;

	if(!regbank) // bank 0
   11370:	1a00000c 	bne	113a8 <AD_conversion+0x40>
	{
		AD0CR |= 0x01000000; // start conversion
   11374:	e59f3078 	ldr	r3, [pc, #120]	; 113f4 <AD_conversion+0x8c>
   11378:	e5932000 	ldr	r2, [r3]
   1137c:	e3822401 	orr	r2, r2, #16777216	; 0x1000000
   11380:	e5832000 	str	r2, [r3]
		while((temp & 0x80000000) == 0)
		{
			temp = AD0DR;
   11384:	e5932004 	ldr	r2, [r3, #4]
	int temp = 0, temp2;

	if(!regbank) // bank 0
	{
		AD0CR |= 0x01000000; // start conversion
		while((temp & 0x80000000) == 0)
   11388:	e3520000 	cmp	r2, #0
   1138c:	aafffffc 	bge	11384 <AD_conversion+0x1c>
		{
			temp = AD0DR;
		}
		temp &= 0x0000FFC0;
   11390:	e59f1060 	ldr	r1, [pc, #96]	; 113f8 <AD_conversion+0x90>
   11394:	e0021001 	and	r1, r2, r1
		temp2 = temp / 0x00000040;
   11398:	e1a01341 	asr	r1, r1, #6

		AD0CR = 0x00000000;
   1139c:	e3a02000 	mov	r2, #0
   113a0:	e59f304c 	ldr	r3, [pc, #76]	; 113f4 <AD_conversion+0x8c>
   113a4:	ea00000b 	b	113d8 <AD_conversion+0x70>
	}
	else	    // bank 1
	{
		AD1CR |= 0x01000000; // start conversion
   113a8:	e59f304c 	ldr	r3, [pc, #76]	; 113fc <AD_conversion+0x94>
   113ac:	e5932000 	ldr	r2, [r3]
   113b0:	e3822401 	orr	r2, r2, #16777216	; 0x1000000
   113b4:	e5832000 	str	r2, [r3]
		while((temp & 0x80000000) == 0)
		{
			temp = AD1DR;
   113b8:	e5932004 	ldr	r2, [r3, #4]
		AD0CR = 0x00000000;
	}
	else	    // bank 1
	{
		AD1CR |= 0x01000000; // start conversion
		while((temp & 0x80000000) == 0)
   113bc:	e3520000 	cmp	r2, #0
   113c0:	aafffffc 	bge	113b8 <AD_conversion+0x50>
		{
			temp = AD1DR;
		}
		temp &= 0x0000FFC0;
   113c4:	e59f102c 	ldr	r1, [pc, #44]	; 113f8 <AD_conversion+0x90>
		temp2 = temp / 0x00000040;

		AD1CR = 0x00000000;
   113c8:	e59f302c 	ldr	r3, [pc, #44]	; 113fc <AD_conversion+0x94>
		AD1CR |= 0x01000000; // start conversion
		while((temp & 0x80000000) == 0)
		{
			temp = AD1DR;
		}
		temp &= 0x0000FFC0;
   113cc:	e0021001 	and	r1, r2, r1
		temp2 = temp / 0x00000040;
   113d0:	e1a01341 	asr	r1, r1, #6

		AD1CR = 0x00000000;
   113d4:	e3a02000 	mov	r2, #0
   113d8:	e5832000 	str	r2, [r3]
	}

	rprintf("%d", temp2);
   113dc:	e59f001c 	ldr	r0, [pc, #28]	; 11400 <AD_conversion+0x98>
   113e0:	eb0004e5 	bl	1277c <rprintf>
	rprintf("   ");
   113e4:	e59f0018 	ldr	r0, [pc, #24]	; 11404 <AD_conversion+0x9c>
   113e8:	eb0004e3 	bl	1277c <rprintf>
	
}
   113ec:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   113f0:	e12fff1e 	bx	lr
   113f4:	e0034000 	.word	0xe0034000
   113f8:	0000ffc0 	.word	0x0000ffc0
   113fc:	e0060000 	.word	0xe0060000
   11400:	0001c4fe 	.word	0x0001c4fe
   11404:	0001c501 	.word	0x0001c501

00011408 <fat_initialize>:

void fat_initialize(void)
{
   11408:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	if(!sd_raw_init())
   1140c:	eb000875 	bl	135e8 <sd_raw_init>
   11410:	e3500000 	cmp	r0, #0
   11414:	1a000002 	bne	11424 <fat_initialize+0x1c>
	{
		rprintf("SD Init Error\n\r");
   11418:	e59f001c 	ldr	r0, [pc, #28]	; 1143c <fat_initialize+0x34>
   1141c:	eb0004d6 	bl	1277c <rprintf>
   11420:	eafffffe 	b	11420 <fat_initialize+0x18>
		while(1);
	}

	if(openroot())
   11424:	eb00066f 	bl	12de8 <openroot>
   11428:	e3500000 	cmp	r0, #0
	{ 
		rprintf("SD OpenRoot Error\n\r");
   1142c:	159f000c 	ldrne	r0, [pc, #12]	; 11440 <fat_initialize+0x38>
   11430:	1b0004d1 	blne	1277c <rprintf>
	}
}
   11434:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   11438:	e12fff1e 	bx	lr
   1143c:	0001c505 	.word	0x0001c505
   11440:	0001c515 	.word	0x0001c515

00011444 <delay_ms>:

void delay_ms(int count)
{
	int i;
	count *= 10000;
   11444:	e59f301c 	ldr	r3, [pc, #28]	; 11468 <delay_ms+0x24>
   11448:	e0000093 	mul	r0, r3, r0
	for(i = 0; i < count; i++)
   1144c:	e3a03000 	mov	r3, #0
   11450:	ea000001 	b	1145c <delay_ms+0x18>
		asm volatile ("nop");
   11454:	e1a00000 	nop			; (mov r0, r0)

void delay_ms(int count)
{
	int i;
	count *= 10000;
	for(i = 0; i < count; i++)
   11458:	e2833001 	add	r3, r3, #1
   1145c:	e1530000 	cmp	r3, r0
   11460:	bafffffb 	blt	11454 <delay_ms+0x10>
		asm volatile ("nop");
}
   11464:	e12fff1e 	bx	lr
   11468:	00002710 	.word	0x00002710

0001146c <test>:
	}

}

void test(void)
{
   1146c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}

	rprintf("\n\rLogomatic V2 Test Code:\n\r");
   11470:	e59f00c0 	ldr	r0, [pc, #192]	; 11538 <test+0xcc>
   11474:	eb0004c0 	bl	1277c <rprintf>
	rprintf("ADC Test will begin in 5 seconds, hit stop button to terminate the test.\r\n\n");
   11478:	e59f00bc 	ldr	r0, [pc, #188]	; 1153c <test+0xd0>
   1147c:	eb0004be 	bl	1277c <rprintf>

	delay_ms(5000);
   11480:	e59f00b8 	ldr	r0, [pc, #184]	; 11540 <test+0xd4>
   11484:	ebffffee 	bl	11444 <delay_ms>

	while((IOPIN0 & 0x00000008) == 0x00000008)
   11488:	e59f80b4 	ldr	r8, [pc, #180]	; 11544 <test+0xd8>
	{
		// Get AD1.3
		AD1CR = 0x0020FF08;
   1148c:	e59f40b4 	ldr	r4, [pc, #180]	; 11548 <test+0xdc>
   11490:	e59f60b4 	ldr	r6, [pc, #180]	; 1154c <test+0xe0>
	rprintf("\n\rLogomatic V2 Test Code:\n\r");
	rprintf("ADC Test will begin in 5 seconds, hit stop button to terminate the test.\r\n\n");

	delay_ms(5000);

	while((IOPIN0 & 0x00000008) == 0x00000008)
   11494:	ea000021 	b	11520 <test+0xb4>
		// Get AD1.3
		AD1CR = 0x0020FF08;
		AD_conversion(1);

		// Get AD0.3
		AD0CR = 0x0020FF08;
   11498:	e59f50b0 	ldr	r5, [pc, #176]	; 11550 <test+0xe4>

	while((IOPIN0 & 0x00000008) == 0x00000008)
	{
		// Get AD1.3
		AD1CR = 0x0020FF08;
		AD_conversion(1);
   1149c:	e3a00001 	mov	r0, #1
		// Get AD0.3
		AD0CR = 0x0020FF08;
		AD_conversion(0);
		
		// Get AD0.2
		AD0CR = 0x0020FF04;
   114a0:	e59f70ac 	ldr	r7, [pc, #172]	; 11554 <test+0xe8>
	delay_ms(5000);

	while((IOPIN0 & 0x00000008) == 0x00000008)
	{
		// Get AD1.3
		AD1CR = 0x0020FF08;
   114a4:	e5846000 	str	r6, [r4]
		AD_conversion(1);
   114a8:	ebffffae 	bl	11368 <AD_conversion>

		// Get AD0.3
		AD0CR = 0x0020FF08;
		AD_conversion(0);
   114ac:	e3a00000 	mov	r0, #0
		// Get AD1.3
		AD1CR = 0x0020FF08;
		AD_conversion(1);

		// Get AD0.3
		AD0CR = 0x0020FF08;
   114b0:	e5856000 	str	r6, [r5]
		AD_conversion(0);
   114b4:	ebffffab 	bl	11368 <AD_conversion>
		
		// Get AD0.2
		AD0CR = 0x0020FF04;
		AD_conversion(0);
   114b8:	e3a00000 	mov	r0, #0
		// Get AD0.3
		AD0CR = 0x0020FF08;
		AD_conversion(0);
		
		// Get AD0.2
		AD0CR = 0x0020FF04;
   114bc:	e5857000 	str	r7, [r5]
		AD_conversion(0);
   114c0:	ebffffa8 	bl	11368 <AD_conversion>

		// Get AD0.1
		AD0CR = 0x0020FF02;
   114c4:	e59f308c 	ldr	r3, [pc, #140]	; 11558 <test+0xec>
		AD_conversion(0);
   114c8:	e3a00000 	mov	r0, #0
		// Get AD0.2
		AD0CR = 0x0020FF04;
		AD_conversion(0);

		// Get AD0.1
		AD0CR = 0x0020FF02;
   114cc:	e5853000 	str	r3, [r5]
		AD_conversion(0);
   114d0:	ebffffa4 	bl	11368 <AD_conversion>

		// Get AD1.2
		AD1CR = 0x0020FF04;
		AD_conversion(1);
   114d4:	e3a00001 	mov	r0, #1
		// Get AD0.1
		AD0CR = 0x0020FF02;
		AD_conversion(0);

		// Get AD1.2
		AD1CR = 0x0020FF04;
   114d8:	e5847000 	str	r7, [r4]
		AD_conversion(1);
   114dc:	ebffffa1 	bl	11368 <AD_conversion>
		
		// Get AD0.4
		AD0CR = 0x0020FF10;
   114e0:	e59f3074 	ldr	r3, [pc, #116]	; 1155c <test+0xf0>
		AD_conversion(0);
   114e4:	e3a00000 	mov	r0, #0
		// Get AD1.2
		AD1CR = 0x0020FF04;
		AD_conversion(1);
		
		// Get AD0.4
		AD0CR = 0x0020FF10;
   114e8:	e5853000 	str	r3, [r5]
		AD_conversion(0);
   114ec:	ebffff9d 	bl	11368 <AD_conversion>

		// Get AD1.7
		AD1CR = 0x0020FF80;
   114f0:	e59f3068 	ldr	r3, [pc, #104]	; 11560 <test+0xf4>
		AD_conversion(1);
   114f4:	e3a00001 	mov	r0, #1
		// Get AD0.4
		AD0CR = 0x0020FF10;
		AD_conversion(0);

		// Get AD1.7
		AD1CR = 0x0020FF80;
   114f8:	e5843000 	str	r3, [r4]
		AD_conversion(1);
   114fc:	ebffff99 	bl	11368 <AD_conversion>

		// Get AD1.6
		AD1CR = 0x0020FF40;
   11500:	e59f305c 	ldr	r3, [pc, #92]	; 11564 <test+0xf8>
		AD_conversion(1);
   11504:	e3a00001 	mov	r0, #1
		// Get AD1.7
		AD1CR = 0x0020FF80;
		AD_conversion(1);

		// Get AD1.6
		AD1CR = 0x0020FF40;
   11508:	e5843000 	str	r3, [r4]
		AD_conversion(1);
   1150c:	ebffff95 	bl	11368 <AD_conversion>

		delay_ms(1000);
   11510:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   11514:	ebffffca 	bl	11444 <delay_ms>
		rprintf("\n\r");
   11518:	e59f0048 	ldr	r0, [pc, #72]	; 11568 <test+0xfc>
   1151c:	eb000496 	bl	1277c <rprintf>
	rprintf("\n\rLogomatic V2 Test Code:\n\r");
	rprintf("ADC Test will begin in 5 seconds, hit stop button to terminate the test.\r\n\n");

	delay_ms(5000);

	while((IOPIN0 & 0x00000008) == 0x00000008)
   11520:	e5983000 	ldr	r3, [r8]
   11524:	e3130008 	tst	r3, #8
   11528:	1affffda 	bne	11498 <test+0x2c>

		delay_ms(1000);
		rprintf("\n\r");
	}

	rprintf("\n\rTest complete, locking up...\n\r");
   1152c:	e59f0038 	ldr	r0, [pc, #56]	; 1156c <test+0x100>
   11530:	eb000491 	bl	1277c <rprintf>
   11534:	eafffffe 	b	11534 <test+0xc8>
   11538:	0001c529 	.word	0x0001c529
   1153c:	0001c545 	.word	0x0001c545
   11540:	00001388 	.word	0x00001388
   11544:	e0028000 	.word	0xe0028000
   11548:	e0060000 	.word	0xe0060000
   1154c:	0020ff08 	.word	0x0020ff08
   11550:	e0034000 	.word	0xe0034000
   11554:	0020ff04 	.word	0x0020ff04
   11558:	0020ff02 	.word	0x0020ff02
   1155c:	0020ff10 	.word	0x0020ff10
   11560:	0020ff80 	.word	0x0020ff80
   11564:	0020ff40 	.word	0x0020ff40
   11568:	0001c7b4 	.word	0x0001c7b4
   1156c:	0001c591 	.word	0x0001c591

00011570 <Log_init>:
		else { IOSET0 = 0x00000004; } // Off
	}
}

void Log_init(void)
{
   11570:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int x, mark = 0, ind = 0;
	char temp, temp2 = 0, safety = 0;
//	signed char handle;

	if(root_file_exists("LOGCON.txt"))
   11574:	e59f0508 	ldr	r0, [pc, #1288]	; 11a84 <Log_init+0x514>
   11578:	eb000656 	bl	12ed8 <root_file_exists>
   1157c:	e3500000 	cmp	r0, #0
   11580:	e59f4500 	ldr	r4, [pc, #1280]	; 11a88 <Log_init+0x518>
	{
		//rprintf("\n\rFound LOGcon.txt\n");
		fd = root_open("LOGCON.txt");
   11584:	e59f04f8 	ldr	r0, [pc, #1272]	; 11a84 <Log_init+0x514>
{
	int x, mark = 0, ind = 0;
	char temp, temp2 = 0, safety = 0;
//	signed char handle;

	if(root_file_exists("LOGCON.txt"))
   11588:	0a00000c 	beq	115c0 <Log_init+0x50>
	{
		//rprintf("\n\rFound LOGcon.txt\n");
		fd = root_open("LOGCON.txt");
   1158c:	eb000670 	bl	12f54 <root_open>
		stringSize = fat_read_file(fd, (unsigned char *)stringBuf, 512);
   11590:	e59f54f4 	ldr	r5, [pc, #1268]	; 11a8c <Log_init+0x51c>
   11594:	e3a02c02 	mov	r2, #512	; 0x200
   11598:	e1a01005 	mov	r1, r5
//	signed char handle;

	if(root_file_exists("LOGCON.txt"))
	{
		//rprintf("\n\rFound LOGcon.txt\n");
		fd = root_open("LOGCON.txt");
   1159c:	e5840000 	str	r0, [r4]
		stringSize = fat_read_file(fd, (unsigned char *)stringBuf, 512);
   115a0:	eb000de7 	bl	14d44 <fat_read_file>
   115a4:	e59f34e4 	ldr	r3, [pc, #1252]	; 11a90 <Log_init+0x520>
   115a8:	e5830000 	str	r0, [r3]
		stringBuf[stringSize] = '\0';
   115ac:	e3a03000 	mov	r3, #0
   115b0:	e7c53000 	strb	r3, [r5, r0]
		fat_close_file(fd);
   115b4:	e5940000 	ldr	r0, [r4]
   115b8:	eb000ddd 	bl	14d34 <fat_close_file>
   115bc:	ea00001f 	b	11640 <Log_init+0xd0>
	}
	else
	{
		//rprintf("Couldn't find LOGcon.txt, creating...\n");
		fd = root_open_new("LOGCON.txt");
   115c0:	eb000651 	bl	12f0c <root_open_new>
		if(fd == NULL)
   115c4:	e3500000 	cmp	r0, #0
		fat_close_file(fd);
	}
	else
	{
		//rprintf("Couldn't find LOGcon.txt, creating...\n");
		fd = root_open_new("LOGCON.txt");
   115c8:	e1a05000 	mov	r5, r0
   115cc:	e5840000 	str	r0, [r4]
		if(fd == NULL)
   115d0:	1a00000e 	bne	11610 <Log_init+0xa0>
		{
		 	rprintf("Error creating LOGCON.txt, locking up...\n\r");
   115d4:	e59f04b8 	ldr	r0, [pc, #1208]	; 11a94 <Log_init+0x524>
   115d8:	eb000467 	bl	1277c <rprintf>
		if(onoff){ IOCLR0 = 0x00000800; } // On
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
   115dc:	e3a05004 	mov	r5, #4
   115e0:	e59f44b0 	ldr	r4, [pc, #1200]	; 11a98 <Log_init+0x528>
   115e4:	e1a07005 	mov	r7, r5
		{
		 	rprintf("Error creating LOGCON.txt, locking up...\n\r");
		 	while(1)
			{
				stat(0,ON);
				delay_ms(50);
   115e8:	e3a00032 	mov	r0, #50	; 0x32

void stat(int statnum, int onoff)
{
	if(statnum) // Stat 1
	{
		if(onoff){ IOCLR0 = 0x00000800; } // On
   115ec:	e3a06b02 	mov	r6, #2048	; 0x800
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
   115f0:	e584700c 	str	r7, [r4, #12]
		{
		 	rprintf("Error creating LOGCON.txt, locking up...\n\r");
		 	while(1)
			{
				stat(0,ON);
				delay_ms(50);
   115f4:	ebffff92 	bl	11444 <delay_ms>
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
		else { IOSET0 = 0x00000004; } // Off
   115f8:	e5845004 	str	r5, [r4, #4]
			{
				stat(0,ON);
				delay_ms(50);
				stat(0,OFF);
				stat(1,ON);
				delay_ms(50);
   115fc:	e3a00032 	mov	r0, #50	; 0x32

void stat(int statnum, int onoff)
{
	if(statnum) // Stat 1
	{
		if(onoff){ IOCLR0 = 0x00000800; } // On
   11600:	e584600c 	str	r6, [r4, #12]
			{
				stat(0,ON);
				delay_ms(50);
				stat(0,OFF);
				stat(1,ON);
				delay_ms(50);
   11604:	ebffff8e 	bl	11444 <delay_ms>
void stat(int statnum, int onoff)
{
	if(statnum) // Stat 1
	{
		if(onoff){ IOCLR0 = 0x00000800; } // On
		else { IOSET0 = 0x00000800; } // Off
   11608:	e5846004 	str	r6, [r4, #4]
   1160c:	eafffff5 	b	115e8 <Log_init+0x78>
				delay_ms(50);
				stat(1,OFF);
			}
		}

		strcpy(stringBuf, "MODE = 0\r\nASCII = N\r\nBaud = 4\r\nFrequency = 100\r\nTrigger Character = $\r\nText Frame = 100\r\nAD0.3 = N\r\nAD0.2 = N\r\nAD0.1 = N\r\nAD0.4 = N\r\nAD1.7 = N\r\nAD1.6 = N\r\nAD1.2 = N\r\nAD1.3 = N\r\nSaftey On = Y\r\n");
   11610:	e59f1484 	ldr	r1, [pc, #1156]	; 11a9c <Log_init+0x52c>
   11614:	e59f0470 	ldr	r0, [pc, #1136]	; 11a8c <Log_init+0x51c>
   11618:	eb001287 	bl	1603c <strcpy>
		stringSize = strlen(stringBuf);
   1161c:	e59f0468 	ldr	r0, [pc, #1128]	; 11a8c <Log_init+0x51c>
   11620:	eb00128b 	bl	16054 <strlen>
   11624:	e59f3464 	ldr	r3, [pc, #1124]	; 11a90 <Log_init+0x520>
   11628:	e1a02000 	mov	r2, r0
   1162c:	e5830000 	str	r0, [r3]
		fat_write_file(fd, (unsigned char*)stringBuf, stringSize);
   11630:	e59f1454 	ldr	r1, [pc, #1108]	; 11a8c <Log_init+0x51c>
   11634:	e1a00005 	mov	r0, r5
   11638:	eb000e25 	bl	14ed4 <fat_write_file>
		sd_raw_sync();
   1163c:	eb000749 	bl	13368 <sd_raw_sync>
		else { IOSET0 = 0x00000004; } // Off
	}
}

void Log_init(void)
{
   11640:	e3a08000 	mov	r8, #0
   11644:	e59f6454 	ldr	r6, [pc, #1108]	; 11aa0 <Log_init+0x530>
   11648:	e1a04008 	mov	r4, r8
   1164c:	e1a07008 	mov	r7, r8
   11650:	e1a0a008 	mov	sl, r8
		stringSize = strlen(stringBuf);
		fat_write_file(fd, (unsigned char*)stringBuf, stringSize);
		sd_raw_sync();
	}

	for(x = 0; x < stringSize; x++)
   11654:	e59fb434 	ldr	fp, [pc, #1076]	; 11a90 <Log_init+0x520>
				if(ad1_2 == 'Y'){ temp2++; }
				rprintf("ad1_2 = %c\n\r",ad1_2);
			}
			else if(ind == 14)	//AD8 - 1.3
			{
				ad1_3 = stringBuf[mark-2]; // default is 'N'
   11658:	e59f5444 	ldr	r5, [pc, #1092]	; 11aa4 <Log_init+0x534>
				rprintf("trig = %c\n\r",trig);
			}
			else if(ind == 6)
			{
				frame = (stringBuf[mark-2]-48) + (stringBuf[mark-3]-48) * 10 + (stringBuf[mark-4]-48)*100;
				if(frame > 510){ frame = 510; } // up to 510 characters
   1165c:	e59f9444 	ldr	r9, [pc, #1092]	; 11aa8 <Log_init+0x538>
   11660:	ea0000b0 	b	11928 <Log_init+0x3b8>
	}

	for(x = 0; x < stringSize; x++)
	{
		temp = stringBuf[x];
		if(temp == 10)
   11664:	e5f63001 	ldrb	r3, [r6, #1]!
   11668:	e353000a 	cmp	r3, #10
   1166c:	1a0000ac 	bne	11924 <Log_init+0x3b4>
		{
			mark = x;
			ind++;
   11670:	e2877001 	add	r7, r7, #1
			if(ind == 1)
   11674:	e3570001 	cmp	r7, #1
   11678:	1a000006 	bne	11698 <Log_init+0x128>
			{
				// 0 = auto uart, 1 = triggered uart, 2 = adc, 3 = triggered uart + adc
				// default = 0 (auto uart)
				mode = stringBuf[mark-2]-48;
   1167c:	e5561002 	ldrb	r1, [r6, #-2]
   11680:	e59f3424 	ldr	r3, [pc, #1060]	; 11aac <Log_init+0x53c>
   11684:	e2411030 	sub	r1, r1, #48	; 0x30
   11688:	e20110ff 	and	r1, r1, #255	; 0xff
   1168c:	e5c31005 	strb	r1, [r3, #5]
				rprintf("mode = %d\n\r",mode);
   11690:	e59f0418 	ldr	r0, [pc, #1048]	; 11ab0 <Log_init+0x540>
   11694:	ea0000a1 	b	11920 <Log_init+0x3b0>
			}
			else if(ind == 2)
   11698:	e3570002 	cmp	r7, #2
			{
				// N = NO, Y = YES, ',' = YES with comma delimiters
				asc = stringBuf[mark-2]; // default is 'N'
   1169c:	05561002 	ldrbeq	r1, [r6, #-2]
				rprintf("asc = %c\n\r",asc);
   116a0:	059f040c 	ldreq	r0, [pc, #1036]	; 11ab4 <Log_init+0x544>
				rprintf("mode = %d\n\r",mode);
			}
			else if(ind == 2)
			{
				// N = NO, Y = YES, ',' = YES with comma delimiters
				asc = stringBuf[mark-2]; // default is 'N'
   116a4:	05c51005 	strbeq	r1, [r5, #5]
   116a8:	0a00009c 	beq	11920 <Log_init+0x3b0>
				rprintf("asc = %c\n\r",asc);
			}
			else if(ind == 3)
   116ac:	e3570003 	cmp	r7, #3
   116b0:	1a00001c 	bne	11728 <Log_init+0x1b8>
			{
				// default is 9600
				if(stringBuf[mark-2] == '1'){ baud = 1200; }
   116b4:	e5563002 	ldrb	r3, [r6, #-2]
   116b8:	e3530031 	cmp	r3, #49	; 0x31
   116bc:	03a03e4b 	moveq	r3, #1200	; 0x4b0
   116c0:	0a000014 	beq	11718 <Log_init+0x1a8>
				else if(stringBuf[mark-2] == '2'){ baud = 2400; }
   116c4:	e3530032 	cmp	r3, #50	; 0x32
   116c8:	03a03e96 	moveq	r3, #2400	; 0x960
   116cc:	0a000011 	beq	11718 <Log_init+0x1a8>
				else if(stringBuf[mark-2] == '3'){ baud = 4800; }
   116d0:	e3530033 	cmp	r3, #51	; 0x33
   116d4:	03a03d4b 	moveq	r3, #4800	; 0x12c0
   116d8:	0a00000e 	beq	11718 <Log_init+0x1a8>
				else if(stringBuf[mark-2] == '4'){ baud = 9600; }
   116dc:	e3530034 	cmp	r3, #52	; 0x34
   116e0:	03a03d96 	moveq	r3, #9600	; 0x2580
   116e4:	0a00000b 	beq	11718 <Log_init+0x1a8>
				else if(stringBuf[mark-2] == '5'){ baud = 19200; }
   116e8:	e3530035 	cmp	r3, #53	; 0x35
   116ec:	03a03c4b 	moveq	r3, #19200	; 0x4b00
   116f0:	0a000008 	beq	11718 <Log_init+0x1a8>
				else if(stringBuf[mark-2] == '6'){ baud = 38400; }
   116f4:	e3530036 	cmp	r3, #54	; 0x36
   116f8:	03a03c96 	moveq	r3, #38400	; 0x9600
   116fc:	0a000005 	beq	11718 <Log_init+0x1a8>
				else if(stringBuf[mark-2] == '7'){ baud = 57600; }
   11700:	e3530037 	cmp	r3, #55	; 0x37
   11704:	03a03ce1 	moveq	r3, #57600	; 0xe100
   11708:	0a000002 	beq	11718 <Log_init+0x1a8>
				else if(stringBuf[mark-2] == '8'){ baud = 115200; }
   1170c:	e3530038 	cmp	r3, #56	; 0x38
   11710:	1a000001 	bne	1171c <Log_init+0x1ac>
   11714:	e59f339c 	ldr	r3, [pc, #924]	; 11ab8 <Log_init+0x548>
   11718:	e5853010 	str	r3, [r5, #16]

				rprintf("baud = %d\n\r",baud);
   1171c:	e59f0398 	ldr	r0, [pc, #920]	; 11abc <Log_init+0x54c>
   11720:	e5951010 	ldr	r1, [r5, #16]
   11724:	ea00007d 	b	11920 <Log_init+0x3b0>
			}
			else if(ind == 4)
   11728:	e3570004 	cmp	r7, #4
   1172c:	1a000017 	bne	11790 <Log_init+0x220>
			{
				freq = (stringBuf[mark-2]-48) + (stringBuf[mark-3]-48) * 10;
   11730:	e5562002 	ldrb	r2, [r6, #-2]
   11734:	e5561003 	ldrb	r1, [r6, #-3]
   11738:	e0232391 	mla	r3, r1, r3, r2
				if((stringBuf[mark-4] >= 48) && (stringBuf[mark-4] < 58))
   1173c:	e5562004 	ldrb	r2, [r6, #-4]
   11740:	e2421030 	sub	r1, r2, #48	; 0x30

				rprintf("baud = %d\n\r",baud);
			}
			else if(ind == 4)
			{
				freq = (stringBuf[mark-2]-48) + (stringBuf[mark-3]-48) * 10;
   11744:	e2433e21 	sub	r3, r3, #528	; 0x210
				if((stringBuf[mark-4] >= 48) && (stringBuf[mark-4] < 58))
   11748:	e3510009 	cmp	r1, #9

				rprintf("baud = %d\n\r",baud);
			}
			else if(ind == 4)
			{
				freq = (stringBuf[mark-2]-48) + (stringBuf[mark-3]-48) * 10;
   1174c:	e5853014 	str	r3, [r5, #20]
				if((stringBuf[mark-4] >= 48) && (stringBuf[mark-4] < 58))
   11750:	8a00000b 	bhi	11784 <Log_init+0x214>
				{
					freq+= (stringBuf[mark-4]-48) * 100;
   11754:	e3a01064 	mov	r1, #100	; 0x64
   11758:	e0223291 	mla	r2, r1, r2, r3
					if((stringBuf[mark-5] >= 48) && (stringBuf[mark-5] < 58)){ freq += (stringBuf[mark-5]-48)*1000; }
   1175c:	e5563005 	ldrb	r3, [r6, #-5]
   11760:	e2431030 	sub	r1, r3, #48	; 0x30
   11764:	e3510009 	cmp	r1, #9
			else if(ind == 4)
			{
				freq = (stringBuf[mark-2]-48) + (stringBuf[mark-3]-48) * 10;
				if((stringBuf[mark-4] >= 48) && (stringBuf[mark-4] < 58))
				{
					freq+= (stringBuf[mark-4]-48) * 100;
   11768:	e2422d4b 	sub	r2, r2, #4800	; 0x12c0
					if((stringBuf[mark-5] >= 48) && (stringBuf[mark-5] < 58)){ freq += (stringBuf[mark-5]-48)*1000; }
   1176c:	93a01ffa 	movls	r1, #1000	; 0x3e8
   11770:	90232391 	mlals	r3, r1, r3, r2
   11774:	92433cbb 	subls	r3, r3, #47872	; 0xbb00
   11778:	92433080 	subls	r3, r3, #128	; 0x80
			else if(ind == 4)
			{
				freq = (stringBuf[mark-2]-48) + (stringBuf[mark-3]-48) * 10;
				if((stringBuf[mark-4] >= 48) && (stringBuf[mark-4] < 58))
				{
					freq+= (stringBuf[mark-4]-48) * 100;
   1177c:	e5852014 	str	r2, [r5, #20]
					if((stringBuf[mark-5] >= 48) && (stringBuf[mark-5] < 58)){ freq += (stringBuf[mark-5]-48)*1000; }
   11780:	95853014 	strls	r3, [r5, #20]
				}
				rprintf("freq = %d\n\r",freq);
   11784:	e59f0334 	ldr	r0, [pc, #820]	; 11ac0 <Log_init+0x550>
   11788:	e5951014 	ldr	r1, [r5, #20]
   1178c:	ea000063 	b	11920 <Log_init+0x3b0>
			}
			else if(ind == 5)
   11790:	e3570005 	cmp	r7, #5
			{
				trig = stringBuf[mark-2]; // default is $
   11794:	05561002 	ldrbeq	r1, [r6, #-2]
				
				rprintf("trig = %c\n\r",trig);
   11798:	059f0324 	ldreq	r0, [pc, #804]	; 11ac4 <Log_init+0x554>
				}
				rprintf("freq = %d\n\r",freq);
			}
			else if(ind == 5)
			{
				trig = stringBuf[mark-2]; // default is $
   1179c:	05c51000 	strbeq	r1, [r5]
   117a0:	0a00005e 	beq	11920 <Log_init+0x3b0>
				
				rprintf("trig = %c\n\r",trig);
			}
			else if(ind == 6)
   117a4:	e3570006 	cmp	r7, #6
   117a8:	1a00000f 	bne	117ec <Log_init+0x27c>
			{
				frame = (stringBuf[mark-2]-48) + (stringBuf[mark-3]-48) * 10 + (stringBuf[mark-4]-48)*100;
   117ac:	e5562002 	ldrb	r2, [r6, #-2]
   117b0:	e5561003 	ldrb	r1, [r6, #-3]
   117b4:	e2422d53 	sub	r2, r2, #5312	; 0x14c0
   117b8:	e2422010 	sub	r2, r2, #16
   117bc:	e0222193 	mla	r2, r3, r1, r2
   117c0:	e5563004 	ldrb	r3, [r6, #-4]
   117c4:	e3a01064 	mov	r1, #100	; 0x64
   117c8:	e0232391 	mla	r3, r1, r3, r2
   117cc:	e1a03803 	lsl	r3, r3, #16
				if(frame > 510){ frame = 510; } // up to 510 characters
   117d0:	e1590843 	cmp	r9, r3, asr #16
   117d4:	e1a02823 	lsr	r2, r3, #16
				
				rprintf("trig = %c\n\r",trig);
			}
			else if(ind == 6)
			{
				frame = (stringBuf[mark-2]-48) + (stringBuf[mark-3]-48) * 10 + (stringBuf[mark-4]-48)*100;
   117d8:	a1c520b2 	strhge	r2, [r5, #2]
				if(frame > 510){ frame = 510; } // up to 510 characters
   117dc:	b1c590b2 	strhlt	r9, [r5, #2]
				rprintf("frame = %d\n\r",frame);
   117e0:	e59f02e0 	ldr	r0, [pc, #736]	; 11ac8 <Log_init+0x558>
   117e4:	e1d510f2 	ldrsh	r1, [r5, #2]
   117e8:	ea00004c 	b	11920 <Log_init+0x3b0>
			}
			else if(ind == 7)	// AD1 - 0.3
   117ec:	e3570007 	cmp	r7, #7
   117f0:	1a000006 	bne	11810 <Log_init+0x2a0>
			{
				ad0_3 = stringBuf[mark-2]; // default is 'N'
   117f4:	e5561002 	ldrb	r1, [r6, #-2]
				if(ad0_3 == 'Y'){ temp2++; }
   117f8:	e3510059 	cmp	r1, #89	; 0x59
   117fc:	02844001 	addeq	r4, r4, #1
				if(frame > 510){ frame = 510; } // up to 510 characters
				rprintf("frame = %d\n\r",frame);
			}
			else if(ind == 7)	// AD1 - 0.3
			{
				ad0_3 = stringBuf[mark-2]; // default is 'N'
   11800:	e5c51004 	strb	r1, [r5, #4]
				if(ad0_3 == 'Y'){ temp2++; }
   11804:	020440ff 	andeq	r4, r4, #255	; 0xff
				rprintf("ad0_3 = %c\n\r",ad0_3);
   11808:	e59f02bc 	ldr	r0, [pc, #700]	; 11acc <Log_init+0x55c>
   1180c:	ea000043 	b	11920 <Log_init+0x3b0>
			}
			else if(ind == 8)	// AD2 - 0.2
   11810:	e3570008 	cmp	r7, #8
   11814:	1a000006 	bne	11834 <Log_init+0x2c4>
			{
				ad0_2 = stringBuf[mark-2]; // default is 'N'
   11818:	e5561002 	ldrb	r1, [r6, #-2]
				if(ad0_2 == 'Y'){ temp2++; }
   1181c:	e3510059 	cmp	r1, #89	; 0x59
   11820:	02844001 	addeq	r4, r4, #1
				if(ad0_3 == 'Y'){ temp2++; }
				rprintf("ad0_3 = %c\n\r",ad0_3);
			}
			else if(ind == 8)	// AD2 - 0.2
			{
				ad0_2 = stringBuf[mark-2]; // default is 'N'
   11824:	e5c51006 	strb	r1, [r5, #6]
				if(ad0_2 == 'Y'){ temp2++; }
   11828:	020440ff 	andeq	r4, r4, #255	; 0xff
				rprintf("ad0_2 = %c\n\r",ad0_2);
   1182c:	e59f029c 	ldr	r0, [pc, #668]	; 11ad0 <Log_init+0x560>
   11830:	ea00003a 	b	11920 <Log_init+0x3b0>
			}
			else if(ind == 9)	// AD3 - 0.1
   11834:	e3570009 	cmp	r7, #9
   11838:	1a000006 	bne	11858 <Log_init+0x2e8>
			{
				ad0_1 = stringBuf[mark-2]; // default is 'N'
   1183c:	e5561002 	ldrb	r1, [r6, #-2]
				if(ad0_1 == 'Y'){ temp2++; }
   11840:	e3510059 	cmp	r1, #89	; 0x59
   11844:	02844001 	addeq	r4, r4, #1
				if(ad0_2 == 'Y'){ temp2++; }
				rprintf("ad0_2 = %c\n\r",ad0_2);
			}
			else if(ind == 9)	// AD3 - 0.1
			{
				ad0_1 = stringBuf[mark-2]; // default is 'N'
   11848:	e5c51007 	strb	r1, [r5, #7]
				if(ad0_1 == 'Y'){ temp2++; }
   1184c:	020440ff 	andeq	r4, r4, #255	; 0xff
				rprintf("ad0_1 = %c\n\r",ad0_1);
   11850:	e59f027c 	ldr	r0, [pc, #636]	; 11ad4 <Log_init+0x564>
   11854:	ea000031 	b	11920 <Log_init+0x3b0>
			}
			else if(ind == 10)	//AD4 - 0.4
   11858:	e357000a 	cmp	r7, #10
   1185c:	1a000006 	bne	1187c <Log_init+0x30c>
			{
				ad0_4 = stringBuf[mark-2]; // default is 'N'
   11860:	e5561002 	ldrb	r1, [r6, #-2]
				if(ad0_4 == 'Y'){ temp2++; }
   11864:	e3510059 	cmp	r1, #89	; 0x59
   11868:	02844001 	addeq	r4, r4, #1
				if(ad0_1 == 'Y'){ temp2++; }
				rprintf("ad0_1 = %c\n\r",ad0_1);
			}
			else if(ind == 10)	//AD4 - 0.4
			{
				ad0_4 = stringBuf[mark-2]; // default is 'N'
   1186c:	e5c51008 	strb	r1, [r5, #8]
				if(ad0_4 == 'Y'){ temp2++; }
   11870:	020440ff 	andeq	r4, r4, #255	; 0xff
				rprintf("ad0_4 = %c\n\r",ad0_4);
   11874:	e59f025c 	ldr	r0, [pc, #604]	; 11ad8 <Log_init+0x568>
   11878:	ea000028 	b	11920 <Log_init+0x3b0>
			}
			else if(ind == 11)	//AD5 - 1.7
   1187c:	e357000b 	cmp	r7, #11
   11880:	1a000006 	bne	118a0 <Log_init+0x330>
			{
				ad1_7 = stringBuf[mark-2]; // default is 'N'
   11884:	e5561002 	ldrb	r1, [r6, #-2]
				if(ad1_7 == 'Y'){ temp2++; }
   11888:	e3510059 	cmp	r1, #89	; 0x59
   1188c:	02844001 	addeq	r4, r4, #1
				if(ad0_4 == 'Y'){ temp2++; }
				rprintf("ad0_4 = %c\n\r",ad0_4);
			}
			else if(ind == 11)	//AD5 - 1.7
			{
				ad1_7 = stringBuf[mark-2]; // default is 'N'
   11890:	e5c51009 	strb	r1, [r5, #9]
				if(ad1_7 == 'Y'){ temp2++; }
   11894:	020440ff 	andeq	r4, r4, #255	; 0xff
				rprintf("ad1_7 = %c\n\r",ad1_7);
   11898:	e59f023c 	ldr	r0, [pc, #572]	; 11adc <Log_init+0x56c>
   1189c:	ea00001f 	b	11920 <Log_init+0x3b0>
			}
			else if(ind == 12)	// AD6 - 1.6
   118a0:	e357000c 	cmp	r7, #12
   118a4:	1a000006 	bne	118c4 <Log_init+0x354>
			{
				ad1_6 = stringBuf[mark-2]; // default is 'N'
   118a8:	e5561002 	ldrb	r1, [r6, #-2]
				if(ad1_6 == 'Y'){ temp2++; }
   118ac:	e3510059 	cmp	r1, #89	; 0x59
   118b0:	02844001 	addeq	r4, r4, #1
				if(ad1_7 == 'Y'){ temp2++; }
				rprintf("ad1_7 = %c\n\r",ad1_7);
			}
			else if(ind == 12)	// AD6 - 1.6
			{
				ad1_6 = stringBuf[mark-2]; // default is 'N'
   118b4:	e5c5100a 	strb	r1, [r5, #10]
				if(ad1_6 == 'Y'){ temp2++; }
   118b8:	020440ff 	andeq	r4, r4, #255	; 0xff
				rprintf("ad1_6 = %c\n\r",ad1_6);
   118bc:	e59f021c 	ldr	r0, [pc, #540]	; 11ae0 <Log_init+0x570>
   118c0:	ea000016 	b	11920 <Log_init+0x3b0>
			}
			else if(ind == 13)	//AD7 - 1.2
   118c4:	e357000d 	cmp	r7, #13
   118c8:	1a000006 	bne	118e8 <Log_init+0x378>
			{
				ad1_2 = stringBuf[mark-2]; // default is 'N'
   118cc:	e5561002 	ldrb	r1, [r6, #-2]
				if(ad1_2 == 'Y'){ temp2++; }
   118d0:	e3510059 	cmp	r1, #89	; 0x59
   118d4:	02844001 	addeq	r4, r4, #1
				if(ad1_6 == 'Y'){ temp2++; }
				rprintf("ad1_6 = %c\n\r",ad1_6);
			}
			else if(ind == 13)	//AD7 - 1.2
			{
				ad1_2 = stringBuf[mark-2]; // default is 'N'
   118d8:	e5c5100b 	strb	r1, [r5, #11]
				if(ad1_2 == 'Y'){ temp2++; }
   118dc:	020440ff 	andeq	r4, r4, #255	; 0xff
				rprintf("ad1_2 = %c\n\r",ad1_2);
   118e0:	e59f01fc 	ldr	r0, [pc, #508]	; 11ae4 <Log_init+0x574>
   118e4:	ea00000d 	b	11920 <Log_init+0x3b0>
			}
			else if(ind == 14)	//AD8 - 1.3
   118e8:	e357000e 	cmp	r7, #14
   118ec:	1a000006 	bne	1190c <Log_init+0x39c>
			{
				ad1_3 = stringBuf[mark-2]; // default is 'N'
   118f0:	e5561002 	ldrb	r1, [r6, #-2]
				if(ad1_3 == 'Y'){ temp2++; }
   118f4:	e3510059 	cmp	r1, #89	; 0x59
   118f8:	02844001 	addeq	r4, r4, #1
				if(ad1_2 == 'Y'){ temp2++; }
				rprintf("ad1_2 = %c\n\r",ad1_2);
			}
			else if(ind == 14)	//AD8 - 1.3
			{
				ad1_3 = stringBuf[mark-2]; // default is 'N'
   118fc:	e5c5100c 	strb	r1, [r5, #12]
				if(ad1_3 == 'Y'){ temp2++; }
   11900:	020440ff 	andeq	r4, r4, #255	; 0xff
				rprintf("ad1_3 = %c\n\r",ad1_3);
   11904:	e59f01dc 	ldr	r0, [pc, #476]	; 11ae8 <Log_init+0x578>
   11908:	ea000004 	b	11920 <Log_init+0x3b0>
			}
			else if(ind == 15)
   1190c:	e357000f 	cmp	r7, #15
   11910:	1a000003 	bne	11924 <Log_init+0x3b4>
			{
				safety = stringBuf[mark-2]; // default is 'Y'
   11914:	e5568002 	ldrb	r8, [r6, #-2]
				rprintf("safety = %c\n\r",safety);
   11918:	e59f01cc 	ldr	r0, [pc, #460]	; 11aec <Log_init+0x57c>
   1191c:	e1a01008 	mov	r1, r8
   11920:	eb000395 	bl	1277c <rprintf>
		stringSize = strlen(stringBuf);
		fat_write_file(fd, (unsigned char*)stringBuf, stringSize);
		sd_raw_sync();
	}

	for(x = 0; x < stringSize; x++)
   11924:	e28aa001 	add	sl, sl, #1
   11928:	e59b3000 	ldr	r3, [fp]
   1192c:	e15a0003 	cmp	sl, r3
   11930:	baffff4b 	blt	11664 <Log_init+0xf4>
				rprintf("safety = %c\n\r",safety);
			}
		}
	}

	if(safety == 'Y')
   11934:	e3580059 	cmp	r8, #89	; 0x59
   11938:	1a00004d 	bne	11a74 <Log_init+0x504>
	{
		if((temp2 ==10) && (freq > 150)){ freq = 150; }
   1193c:	e354000a 	cmp	r4, #10
   11940:	1a000005 	bne	1195c <Log_init+0x3ec>
   11944:	e59f3158 	ldr	r3, [pc, #344]	; 11aa4 <Log_init+0x534>
   11948:	e5932014 	ldr	r2, [r3, #20]
   1194c:	e3520096 	cmp	r2, #150	; 0x96
   11950:	c3a02096 	movgt	r2, #150	; 0x96
   11954:	ca000007 	bgt	11978 <Log_init+0x408>
   11958:	ea000047 	b	11a7c <Log_init+0x50c>
		else if((temp2 == 9) && (freq > 166)){ freq = 166; }
   1195c:	e3540009 	cmp	r4, #9
   11960:	1a000006 	bne	11980 <Log_init+0x410>
   11964:	e59f3138 	ldr	r3, [pc, #312]	; 11aa4 <Log_init+0x534>
   11968:	e5932014 	ldr	r2, [r3, #20]
   1196c:	e35200a6 	cmp	r2, #166	; 0xa6
   11970:	da000041 	ble	11a7c <Log_init+0x50c>
   11974:	e3a020a6 	mov	r2, #166	; 0xa6
   11978:	e5832014 	str	r2, [r3, #20]
   1197c:	ea00003e 	b	11a7c <Log_init+0x50c>
		else if((temp2 == 8) && (freq > 187)){ freq = 187; }
   11980:	e3540008 	cmp	r4, #8
   11984:	1a000005 	bne	119a0 <Log_init+0x430>
   11988:	e59f3114 	ldr	r3, [pc, #276]	; 11aa4 <Log_init+0x534>
   1198c:	e5932014 	ldr	r2, [r3, #20]
   11990:	e35200bb 	cmp	r2, #187	; 0xbb
   11994:	c3a020bb 	movgt	r2, #187	; 0xbb
   11998:	cafffff6 	bgt	11978 <Log_init+0x408>
   1199c:	ea000036 	b	11a7c <Log_init+0x50c>
		else if((temp2 == 7) && (freq > 214)){ freq = 214; }
   119a0:	e3540007 	cmp	r4, #7
   119a4:	1a000005 	bne	119c0 <Log_init+0x450>
   119a8:	e59f30f4 	ldr	r3, [pc, #244]	; 11aa4 <Log_init+0x534>
   119ac:	e5932014 	ldr	r2, [r3, #20]
   119b0:	e35200d6 	cmp	r2, #214	; 0xd6
   119b4:	c3a020d6 	movgt	r2, #214	; 0xd6
   119b8:	caffffee 	bgt	11978 <Log_init+0x408>
   119bc:	ea00002e 	b	11a7c <Log_init+0x50c>
		else if((temp2 == 6) && (freq > 250)){ freq = 250; }
   119c0:	e3540006 	cmp	r4, #6
   119c4:	1a000005 	bne	119e0 <Log_init+0x470>
   119c8:	e59f30d4 	ldr	r3, [pc, #212]	; 11aa4 <Log_init+0x534>
   119cc:	e5932014 	ldr	r2, [r3, #20]
   119d0:	e35200fa 	cmp	r2, #250	; 0xfa
   119d4:	c3a020fa 	movgt	r2, #250	; 0xfa
   119d8:	caffffe6 	bgt	11978 <Log_init+0x408>
   119dc:	ea000026 	b	11a7c <Log_init+0x50c>
		else if((temp2 == 5) && (freq > 300)){ freq = 300; }
   119e0:	e3540005 	cmp	r4, #5
   119e4:	1a000005 	bne	11a00 <Log_init+0x490>
   119e8:	e59f30b4 	ldr	r3, [pc, #180]	; 11aa4 <Log_init+0x534>
   119ec:	e5932014 	ldr	r2, [r3, #20]
   119f0:	e3520f4b 	cmp	r2, #300	; 0x12c
   119f4:	c3a02f4b 	movgt	r2, #300	; 0x12c
   119f8:	caffffde 	bgt	11978 <Log_init+0x408>
   119fc:	ea00001e 	b	11a7c <Log_init+0x50c>
		else if((temp2 == 4) && (freq > 375)){ freq = 375; }
   11a00:	e3540004 	cmp	r4, #4
   11a04:	059f3098 	ldreq	r3, [pc, #152]	; 11aa4 <Log_init+0x534>
   11a08:	059f20e0 	ldreq	r2, [pc, #224]	; 11af0 <Log_init+0x580>
   11a0c:	0a00000f 	beq	11a50 <Log_init+0x4e0>
		else if((temp2 == 3) && (freq > 500)){ freq = 500; }
   11a10:	e3540003 	cmp	r4, #3
   11a14:	1a000005 	bne	11a30 <Log_init+0x4c0>
   11a18:	e59f3084 	ldr	r3, [pc, #132]	; 11aa4 <Log_init+0x534>
   11a1c:	e5932014 	ldr	r2, [r3, #20]
   11a20:	e3520f7d 	cmp	r2, #500	; 0x1f4
   11a24:	c3a02f7d 	movgt	r2, #500	; 0x1f4
   11a28:	caffffd2 	bgt	11978 <Log_init+0x408>
   11a2c:	ea000012 	b	11a7c <Log_init+0x50c>
		else if((temp2 == 2) && (freq > 750)){ freq = 750; }
   11a30:	e3540002 	cmp	r4, #2
   11a34:	059f3068 	ldreq	r3, [pc, #104]	; 11aa4 <Log_init+0x534>
   11a38:	059f20b4 	ldreq	r2, [pc, #180]	; 11af4 <Log_init+0x584>
   11a3c:	0a000003 	beq	11a50 <Log_init+0x4e0>
		else if((temp2 == 1) && (freq > 1500)){ freq = 1500; }
   11a40:	e3540001 	cmp	r4, #1
   11a44:	1a000005 	bne	11a60 <Log_init+0x4f0>
   11a48:	e59f3054 	ldr	r3, [pc, #84]	; 11aa4 <Log_init+0x534>
   11a4c:	e59f20a4 	ldr	r2, [pc, #164]	; 11af8 <Log_init+0x588>
   11a50:	e5931014 	ldr	r1, [r3, #20]
   11a54:	e1510002 	cmp	r1, r2
   11a58:	da000007 	ble	11a7c <Log_init+0x50c>
   11a5c:	eaffffc5 	b	11978 <Log_init+0x408>
		else if((temp2 == 0)){ freq = 100; }
   11a60:	e3540000 	cmp	r4, #0
   11a64:	1a000004 	bne	11a7c <Log_init+0x50c>
   11a68:	e3a02064 	mov	r2, #100	; 0x64
   11a6c:	e59f3030 	ldr	r3, [pc, #48]	; 11aa4 <Log_init+0x534>
   11a70:	eaffffc0 	b	11978 <Log_init+0x408>
	}
	
	if(safety == 'T'){ test(); }
   11a74:	e3580054 	cmp	r8, #84	; 0x54
   11a78:	0bfffe7b 	bleq	1146c <test>

}
   11a7c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a80:	e12fff1e 	bx	lr
   11a84:	0001c5b2 	.word	0x0001c5b2
   11a88:	40001164 	.word	0x40001164
   11a8c:	40000e58 	.word	0x40000e58
   11a90:	40001170 	.word	0x40001170
   11a94:	0001c5bd 	.word	0x0001c5bd
   11a98:	e0028000 	.word	0xe0028000
   11a9c:	0001c5e8 	.word	0x0001c5e8
   11aa0:	40000e57 	.word	0x40000e57
   11aa4:	40000000 	.word	0x40000000
   11aa8:	000001fe 	.word	0x000001fe
   11aac:	400008cc 	.word	0x400008cc
   11ab0:	0001c6a9 	.word	0x0001c6a9
   11ab4:	0001c6b5 	.word	0x0001c6b5
   11ab8:	0001c200 	.word	0x0001c200
   11abc:	0001c6c0 	.word	0x0001c6c0
   11ac0:	0001c6cc 	.word	0x0001c6cc
   11ac4:	0001c6d8 	.word	0x0001c6d8
   11ac8:	0001c6e4 	.word	0x0001c6e4
   11acc:	0001c6f1 	.word	0x0001c6f1
   11ad0:	0001c6fe 	.word	0x0001c6fe
   11ad4:	0001c70b 	.word	0x0001c70b
   11ad8:	0001c718 	.word	0x0001c718
   11adc:	0001c725 	.word	0x0001c725
   11ae0:	0001c732 	.word	0x0001c732
   11ae4:	0001c73f 	.word	0x0001c73f
   11ae8:	0001c74c 	.word	0x0001c74c
   11aec:	0001c759 	.word	0x0001c759
   11af0:	00000177 	.word	0x00000177
   11af4:	000002ee 	.word	0x000002ee
   11af8:	000005dc 	.word	0x000005dc

00011afc <GetADCValue>:

/****************************** GetADCValue ******************************
*	Retrieves an ADC value for the ADC pin in 'adc.'
*************************************************************************/
void GetADCValue(int adc)
{
   11afc:	e92d4011 	push	{r0, r4, lr}
	*   ADxDR bit 31 indicates that the ADC conversion is done
	*********************************************************************/
	
	temp = 0;	// initialize to zero so MSB can't possibly be set (breaks ADC read)
	
	switch (adc)
   11b00:	e2400001 	sub	r0, r0, #1
   11b04:	e3500007 	cmp	r0, #7
   11b08:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
   11b0c:	ea000064 	b	11ca4 <GetADCValue+0x1a8>
   11b10:	00011b30 	.word	0x00011b30
   11b14:	00011b5c 	.word	0x00011b5c
   11b18:	00011b88 	.word	0x00011b88
   11b1c:	00011bb4 	.word	0x00011bb4
   11b20:	00011be8 	.word	0x00011be8
   11b24:	00011c14 	.word	0x00011c14
   11b28:	00011c40 	.word	0x00011c40
   11b2c:	00011c6c 	.word	0x00011c6c
	{
		// AD0.3
		case ADC_1:
			AD0CR = 0x00020FF08; // AD0.3 (0x00020FF00 = 
   11b30:	e59f32fc 	ldr	r3, [pc, #764]	; 11e34 <GetADCValue+0x338>
   11b34:	e59f22fc 	ldr	r2, [pc, #764]	; 11e38 <GetADCValue+0x33c>
   11b38:	e5832000 	str	r2, [r3]
			AD0CR |= 0x01000000; // start conversion
   11b3c:	e5932000 	ldr	r2, [r3]
   11b40:	e3822401 	orr	r2, r2, #16777216	; 0x1000000
   11b44:	e5832000 	str	r2, [r3]
   11b48:	e1a02003 	mov	r2, r3
			while((temp & 0x80000000) == 0)	// wait for ADC to finish conversion
			{
				temp = AD0DR;
   11b4c:	e5923004 	ldr	r3, [r2, #4]
	{
		// AD0.3
		case ADC_1:
			AD0CR = 0x00020FF08; // AD0.3 (0x00020FF00 = 
			AD0CR |= 0x01000000; // start conversion
			while((temp & 0x80000000) == 0)	// wait for ADC to finish conversion
   11b50:	e3530000 	cmp	r3, #0
   11b54:	aafffffc 	bge	11b4c <GetADCValue+0x50>
   11b58:	ea00001f 	b	11bdc <GetADCValue+0xe0>
			AD0CR = 0x00000000;	// stop ADC conversion			
			break;
			
		// AD0.2	
		case ADC_2:
			AD0CR = 0x00020FF04; // AD0.2
   11b5c:	e59f32d0 	ldr	r3, [pc, #720]	; 11e34 <GetADCValue+0x338>
   11b60:	e59f22d4 	ldr	r2, [pc, #724]	; 11e3c <GetADCValue+0x340>
   11b64:	e5832000 	str	r2, [r3]
			AD0CR |= 0x01000000; // start conversion
   11b68:	e5932000 	ldr	r2, [r3]
   11b6c:	e3822401 	orr	r2, r2, #16777216	; 0x1000000
   11b70:	e5832000 	str	r2, [r3]
   11b74:	e1a02003 	mov	r2, r3
			while((temp & 0x80000000) == 0)
			{
				temp = AD0DR;
   11b78:	e5923004 	ldr	r3, [r2, #4]
			
		// AD0.2	
		case ADC_2:
			AD0CR = 0x00020FF04; // AD0.2
			AD0CR |= 0x01000000; // start conversion
			while((temp & 0x80000000) == 0)
   11b7c:	e3530000 	cmp	r3, #0
   11b80:	aafffffc 	bge	11b78 <GetADCValue+0x7c>
   11b84:	ea000014 	b	11bdc <GetADCValue+0xe0>
			AD0CR = 0x00000000;		
		break;
		
		// AD0.1
		case ADC_3:
			AD0CR = 0x00020FF02; // AD0.1
   11b88:	e59f32a4 	ldr	r3, [pc, #676]	; 11e34 <GetADCValue+0x338>
   11b8c:	e59f22ac 	ldr	r2, [pc, #684]	; 11e40 <GetADCValue+0x344>
   11b90:	e5832000 	str	r2, [r3]
			AD0CR |= 0x01000000; // start conversion
   11b94:	e5932000 	ldr	r2, [r3]
   11b98:	e3822401 	orr	r2, r2, #16777216	; 0x1000000
   11b9c:	e5832000 	str	r2, [r3]
   11ba0:	e1a02003 	mov	r2, r3
			while((temp & 0x80000000) == 0)
			{
				temp = AD0DR;
   11ba4:	e5923004 	ldr	r3, [r2, #4]
		
		// AD0.1
		case ADC_3:
			AD0CR = 0x00020FF02; // AD0.1
			AD0CR |= 0x01000000; // start conversion
			while((temp & 0x80000000) == 0)
   11ba8:	e3530000 	cmp	r3, #0
   11bac:	aafffffc 	bge	11ba4 <GetADCValue+0xa8>
   11bb0:	ea000009 	b	11bdc <GetADCValue+0xe0>
			AD0CR = 0x00000000;		
		break;
		
		// AD0.4
		case ADC_4:
			AD0CR = 0x00020FF10; // AD0.4
   11bb4:	e59f3278 	ldr	r3, [pc, #632]	; 11e34 <GetADCValue+0x338>
   11bb8:	e59f2284 	ldr	r2, [pc, #644]	; 11e44 <GetADCValue+0x348>
   11bbc:	e5832000 	str	r2, [r3]
			AD0CR |= 0x01000000; // start conversion
   11bc0:	e5932000 	ldr	r2, [r3]
   11bc4:	e3822401 	orr	r2, r2, #16777216	; 0x1000000
   11bc8:	e5832000 	str	r2, [r3]
   11bcc:	e1a02003 	mov	r2, r3
			while((temp & 0x80000000) == 0)
			{
				temp = AD0DR;
   11bd0:	e5923004 	ldr	r3, [r2, #4]
		
		// AD0.4
		case ADC_4:
			AD0CR = 0x00020FF10; // AD0.4
			AD0CR |= 0x01000000; // start conversion
			while((temp & 0x80000000) == 0)
   11bd4:	e3530000 	cmp	r3, #0
   11bd8:	aafffffc 	bge	11bd0 <GetADCValue+0xd4>
			{
				temp = AD0DR;
			}
			AD0CR = 0x00000000;		
   11bdc:	e3a01000 	mov	r1, #0
   11be0:	e59f224c 	ldr	r2, [pc, #588]	; 11e34 <GetADCValue+0x338>
   11be4:	ea00002c 	b	11c9c <GetADCValue+0x1a0>
		break;
		
		// AD1.7
		case ADC_5:
			AD1CR = 0x00020FF80; // AD1.7
   11be8:	e59f3258 	ldr	r3, [pc, #600]	; 11e48 <GetADCValue+0x34c>
   11bec:	e59f2258 	ldr	r2, [pc, #600]	; 11e4c <GetADCValue+0x350>
   11bf0:	e5832000 	str	r2, [r3]
			AD1CR |= 0x01000000; // start conversion
   11bf4:	e5932000 	ldr	r2, [r3]
   11bf8:	e3822401 	orr	r2, r2, #16777216	; 0x1000000
   11bfc:	e5832000 	str	r2, [r3]
   11c00:	e1a02003 	mov	r2, r3
			while((temp & 0x80000000) == 0)
			{
				temp = AD1DR;
   11c04:	e5923004 	ldr	r3, [r2, #4]
		
		// AD1.7
		case ADC_5:
			AD1CR = 0x00020FF80; // AD1.7
			AD1CR |= 0x01000000; // start conversion
			while((temp & 0x80000000) == 0)
   11c08:	e3530000 	cmp	r3, #0
   11c0c:	aafffffc 	bge	11c04 <GetADCValue+0x108>
   11c10:	ea00001f 	b	11c94 <GetADCValue+0x198>
			AD1CR = 0x00000000;		
		break;
		
		// AD1.6
		case ADC_6:
			AD1CR = 0x00020FF40; // AD1.6
   11c14:	e59f322c 	ldr	r3, [pc, #556]	; 11e48 <GetADCValue+0x34c>
   11c18:	e59f2230 	ldr	r2, [pc, #560]	; 11e50 <GetADCValue+0x354>
   11c1c:	e5832000 	str	r2, [r3]
			AD1CR |= 0x01000000; // start conversion
   11c20:	e5932000 	ldr	r2, [r3]
   11c24:	e3822401 	orr	r2, r2, #16777216	; 0x1000000
   11c28:	e5832000 	str	r2, [r3]
   11c2c:	e1a02003 	mov	r2, r3
			while((temp & 0x80000000) == 0)
			{
				temp = AD1DR;
   11c30:	e5923004 	ldr	r3, [r2, #4]
		
		// AD1.6
		case ADC_6:
			AD1CR = 0x00020FF40; // AD1.6
			AD1CR |= 0x01000000; // start conversion
			while((temp & 0x80000000) == 0)
   11c34:	e3530000 	cmp	r3, #0
   11c38:	aafffffc 	bge	11c30 <GetADCValue+0x134>
   11c3c:	ea000014 	b	11c94 <GetADCValue+0x198>
			AD1CR = 0x00000000;		
		break;
		
		// AD1.2
		case ADC_7:
			AD1CR = 0x00020FF04; // AD1.2
   11c40:	e59f3200 	ldr	r3, [pc, #512]	; 11e48 <GetADCValue+0x34c>
   11c44:	e59f21f0 	ldr	r2, [pc, #496]	; 11e3c <GetADCValue+0x340>
   11c48:	e5832000 	str	r2, [r3]
			AD1CR |= 0x01000000; // start conversion
   11c4c:	e5932000 	ldr	r2, [r3]
   11c50:	e3822401 	orr	r2, r2, #16777216	; 0x1000000
   11c54:	e5832000 	str	r2, [r3]
   11c58:	e1a02003 	mov	r2, r3
			while((temp & 0x80000000) == 0)
			{
				temp = AD1DR;
   11c5c:	e5923004 	ldr	r3, [r2, #4]
		
		// AD1.2
		case ADC_7:
			AD1CR = 0x00020FF04; // AD1.2
			AD1CR |= 0x01000000; // start conversion
			while((temp & 0x80000000) == 0)
   11c60:	e3530000 	cmp	r3, #0
   11c64:	aafffffc 	bge	11c5c <GetADCValue+0x160>
   11c68:	ea000009 	b	11c94 <GetADCValue+0x198>
			AD1CR = 0x00000000;
		break;
		
		// AD1.3
		case ADC_8:
			AD1CR = 0x00020FF08; // AD1.3
   11c6c:	e59f31d4 	ldr	r3, [pc, #468]	; 11e48 <GetADCValue+0x34c>
   11c70:	e59f21c0 	ldr	r2, [pc, #448]	; 11e38 <GetADCValue+0x33c>
   11c74:	e5832000 	str	r2, [r3]
			AD1CR |= 0x01000000; // start conversion
   11c78:	e5932000 	ldr	r2, [r3]
   11c7c:	e3822401 	orr	r2, r2, #16777216	; 0x1000000
   11c80:	e5832000 	str	r2, [r3]
   11c84:	e1a02003 	mov	r2, r3
			while((temp & 0x80000000) == 0)
			{
				temp = AD1DR;
   11c88:	e5923004 	ldr	r3, [r2, #4]
		
		// AD1.3
		case ADC_8:
			AD1CR = 0x00020FF08; // AD1.3
			AD1CR |= 0x01000000; // start conversion
			while((temp & 0x80000000) == 0)
   11c8c:	e3530000 	cmp	r3, #0
   11c90:	aafffffc 	bge	11c88 <GetADCValue+0x18c>
			{
				temp = AD1DR;
			}
			AD1CR = 0x00000000;	
   11c94:	e59f21ac 	ldr	r2, [pc, #428]	; 11e48 <GetADCValue+0x34c>
   11c98:	e3a01000 	mov	r1, #0
   11c9c:	e5821000 	str	r1, [r2]
		break;
   11ca0:	ea00000f 	b	11ce4 <GetADCValue+0x1e8>
		
		// should never get here - logic error
		default:
			ADC_array[ADC_in] = 'e';
   11ca4:	e59f11a8 	ldr	r1, [pc, #424]	; 11e54 <GetADCValue+0x358>
   11ca8:	e1d130b6 	ldrh	r3, [r1, #6]
   11cac:	e59f21a4 	ldr	r2, [pc, #420]	; 11e58 <GetADCValue+0x35c>
   11cb0:	e1a00803 	lsl	r0, r3, #16
   11cb4:	e3a0c065 	mov	ip, #101	; 0x65
   11cb8:	e7c2c840 	strb	ip, [r2, r0, asr #16]
			ADC_in++;
   11cbc:	e283c001 	add	ip, r3, #1
			ADC_array[ADC_in] = 'r';
   11cc0:	e1a0c80c 	lsl	ip, ip, #16
   11cc4:	e3a00072 	mov	r0, #114	; 0x72
   11cc8:	e7c2084c 	strb	r0, [r2, ip, asr #16]
			ADC_in++;
   11ccc:	e283c002 	add	ip, r3, #2
			ADC_array[ADC_in] = 'r';
   11cd0:	e1a0c80c 	lsl	ip, ip, #16
			ADC_in++;
   11cd4:	e2833003 	add	r3, r3, #3
		default:
			ADC_array[ADC_in] = 'e';
			ADC_in++;
			ADC_array[ADC_in] = 'r';
			ADC_in++;
			ADC_array[ADC_in] = 'r';
   11cd8:	e7c2084c 	strb	r0, [r2, ip, asr #16]
			ADC_in++;
   11cdc:	e1c130b6 	strh	r3, [r1, #6]
   11ce0:	ea000051 	b	11e2c <GetADCValue+0x330>
		break;
	}
	
	//	convert ADC value - bit shift required (some bits are flags, not part
	//  of actual ADC value) 15:6 create the 10 bit ADC value
	temp &= 0x0000FFC0;	// strip all bits except 15:6
   11ce4:	e59f0170 	ldr	r0, [pc, #368]	; 11e5c <GetADCValue+0x360>
   11ce8:	e0030000 	and	r0, r3, r0
	temp2 = temp / 0x00000040; // shift bit right 6 places

	// convert value to characters
	
	if(asc == 'Y' || asc ==',')
   11cec:	e59f316c 	ldr	r3, [pc, #364]	; 11e60 <GetADCValue+0x364>
   11cf0:	e5d33005 	ldrb	r3, [r3, #5]
   11cf4:	e3530059 	cmp	r3, #89	; 0x59
   11cf8:	1353002c 	cmpne	r3, #44	; 0x2c
	}
	
	//	convert ADC value - bit shift required (some bits are flags, not part
	//  of actual ADC value) 15:6 create the 10 bit ADC value
	temp &= 0x0000FFC0;	// strip all bits except 15:6
	temp2 = temp / 0x00000040; // shift bit right 6 places
   11cfc:	e1a00340 	asr	r0, r0, #6

	// convert value to characters
	
	if(asc == 'Y' || asc ==',')
   11d00:	1a00003c 	bne	11df8 <GetADCValue+0x2fc>
	{
		itoa(temp2, 10, temp_buff);
   11d04:	e3a0100a 	mov	r1, #10
   11d08:	e1a0200d 	mov	r2, sp
   11d0c:	eb001034 	bl	15de4 <itoa>
		if(temp_buff[0] >= 48 && temp_buff[0] <= 57)
   11d10:	e5dd1000 	ldrb	r1, [sp]
   11d14:	e2413030 	sub	r3, r1, #48	; 0x30
   11d18:	e3530009 	cmp	r3, #9
   11d1c:	8a000006 	bhi	11d3c <GetADCValue+0x240>
		{
			ADC_array[ADC_in] = temp_buff[0];
   11d20:	e59f312c 	ldr	r3, [pc, #300]	; 11e54 <GetADCValue+0x358>
   11d24:	e1d320b6 	ldrh	r2, [r3, #6]
   11d28:	e59f0128 	ldr	r0, [pc, #296]	; 11e58 <GetADCValue+0x35c>
   11d2c:	e1a0c802 	lsl	ip, r2, #16
			ADC_in++;
   11d30:	e2822001 	add	r2, r2, #1
	if(asc == 'Y' || asc ==',')
	{
		itoa(temp2, 10, temp_buff);
		if(temp_buff[0] >= 48 && temp_buff[0] <= 57)
		{
			ADC_array[ADC_in] = temp_buff[0];
   11d34:	e7c0184c 	strb	r1, [r0, ip, asr #16]
			ADC_in++;
   11d38:	e1c320b6 	strh	r2, [r3, #6]
		}
		if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
   11d3c:	e5dd1001 	ldrb	r1, [sp, #1]
   11d40:	e2413030 	sub	r3, r1, #48	; 0x30
   11d44:	e3530009 	cmp	r3, #9
   11d48:	8a000006 	bhi	11d68 <GetADCValue+0x26c>
		{
			ADC_array[ADC_in] = temp_buff[1];
   11d4c:	e59f3100 	ldr	r3, [pc, #256]	; 11e54 <GetADCValue+0x358>
   11d50:	e1d320b6 	ldrh	r2, [r3, #6]
   11d54:	e59f00fc 	ldr	r0, [pc, #252]	; 11e58 <GetADCValue+0x35c>
   11d58:	e1a0c802 	lsl	ip, r2, #16
			ADC_in++;
   11d5c:	e2822001 	add	r2, r2, #1
			ADC_array[ADC_in] = temp_buff[0];
			ADC_in++;
		}
		if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
		{
			ADC_array[ADC_in] = temp_buff[1];
   11d60:	e7c0184c 	strb	r1, [r0, ip, asr #16]
			ADC_in++;
   11d64:	e1c320b6 	strh	r2, [r3, #6]
		}
		if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
   11d68:	e5dd1002 	ldrb	r1, [sp, #2]
   11d6c:	e2413030 	sub	r3, r1, #48	; 0x30
   11d70:	e3530009 	cmp	r3, #9
   11d74:	8a000006 	bhi	11d94 <GetADCValue+0x298>
		{
			ADC_array[ADC_in] = temp_buff[2];
   11d78:	e59f30d4 	ldr	r3, [pc, #212]	; 11e54 <GetADCValue+0x358>
   11d7c:	e1d320b6 	ldrh	r2, [r3, #6]
   11d80:	e59f00d0 	ldr	r0, [pc, #208]	; 11e58 <GetADCValue+0x35c>
   11d84:	e1a0c802 	lsl	ip, r2, #16
			ADC_in++;
   11d88:	e2822001 	add	r2, r2, #1
			ADC_array[ADC_in] = temp_buff[1];
			ADC_in++;
		}
		if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
		{
			ADC_array[ADC_in] = temp_buff[2];
   11d8c:	e7c0184c 	strb	r1, [r0, ip, asr #16]
			ADC_in++;
   11d90:	e1c320b6 	strh	r2, [r3, #6]
		}
		if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
   11d94:	e5dd1003 	ldrb	r1, [sp, #3]
   11d98:	e2413030 	sub	r3, r1, #48	; 0x30
   11d9c:	e3530009 	cmp	r3, #9
   11da0:	8a000006 	bhi	11dc0 <GetADCValue+0x2c4>
		{
			ADC_array[ADC_in] = temp_buff[3];
   11da4:	e59f30a8 	ldr	r3, [pc, #168]	; 11e54 <GetADCValue+0x358>
   11da8:	e1d320b6 	ldrh	r2, [r3, #6]
   11dac:	e59f00a4 	ldr	r0, [pc, #164]	; 11e58 <GetADCValue+0x35c>
   11db0:	e1a0c802 	lsl	ip, r2, #16
			ADC_in++;
   11db4:	e2822001 	add	r2, r2, #1
			ADC_array[ADC_in] = temp_buff[2];
			ADC_in++;
		}
		if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
		{
			ADC_array[ADC_in] = temp_buff[3];
   11db8:	e7c0184c 	strb	r1, [r0, ip, asr #16]
			ADC_in++;
   11dbc:	e1c320b6 	strh	r2, [r3, #6]
		}

		if(asc == ',')
   11dc0:	e59f3098 	ldr	r3, [pc, #152]	; 11e60 <GetADCValue+0x364>
   11dc4:	e5d30005 	ldrb	r0, [r3, #5]
   11dc8:	e59f3084 	ldr	r3, [pc, #132]	; 11e54 <GetADCValue+0x358>
		{
			ADC_array[ADC_in] = ',';
   11dcc:	e1d320b6 	ldrh	r2, [r3, #6]
		{
			ADC_array[ADC_in] = temp_buff[3];
			ADC_in++;
		}

		if(asc == ',')
   11dd0:	e350002c 	cmp	r0, #44	; 0x2c
   11dd4:	e59f107c 	ldr	r1, [pc, #124]	; 11e58 <GetADCValue+0x35c>
		{
			ADC_array[ADC_in] = ',';
   11dd8:	01a0c802 	lsleq	ip, r2, #16
			ADC_in++;
		}
		else
		{
			ADC_array[ADC_in] = 0;
   11ddc:	11a00802 	lslne	r0, r2, #16
   11de0:	13a0c000 	movne	ip, #0
			ADC_in++;
   11de4:	e2822001 	add	r2, r2, #1
			ADC_in++;
		}

		if(asc == ',')
		{
			ADC_array[ADC_in] = ',';
   11de8:	07c1084c 	strbeq	r0, [r1, ip, asr #16]
			ADC_in++;
		}
		else
		{
			ADC_array[ADC_in] = 0;
   11dec:	17c1c840 	strbne	ip, [r1, r0, asr #16]
			ADC_in++;
   11df0:	e1c320b6 	strh	r2, [r3, #6]
   11df4:	ea00000c 	b	11e2c <GetADCValue+0x330>
		}
	}
	else if(asc == 'N')
   11df8:	e353004e 	cmp	r3, #78	; 0x4e
   11dfc:	1a00000a 	bne	11e2c <GetADCValue+0x330>
	{
		a = ((short)temp2 & 0xFF00) / 0x00000100;
		ADC_array[ADC_in] = (char)a;
   11e00:	e59f204c 	ldr	r2, [pc, #76]	; 11e54 <GetADCValue+0x358>
   11e04:	e1d230b6 	ldrh	r3, [r2, #6]
   11e08:	e59f1048 	ldr	r1, [pc, #72]	; 11e58 <GetADCValue+0x35c>
   11e0c:	e1a0c803 	lsl	ip, r3, #16
			ADC_in++;
		}
	}
	else if(asc == 'N')
	{
		a = ((short)temp2 & 0xFF00) / 0x00000100;
   11e10:	e1a04420 	lsr	r4, r0, #8
		ADC_array[ADC_in] = (char)a;
   11e14:	e7c1484c 	strb	r4, [r1, ip, asr #16]
		ADC_in++;
   11e18:	e283c001 	add	ip, r3, #1
		ADC_array[ADC_in] = (char)temp2 & 0xFF;
   11e1c:	e1a0c80c 	lsl	ip, ip, #16
		ADC_in++;
   11e20:	e2833002 	add	r3, r3, #2
	else if(asc == 'N')
	{
		a = ((short)temp2 & 0xFF00) / 0x00000100;
		ADC_array[ADC_in] = (char)a;
		ADC_in++;
		ADC_array[ADC_in] = (char)temp2 & 0xFF;
   11e24:	e7c1084c 	strb	r0, [r1, ip, asr #16]
		ADC_in++;
   11e28:	e1c230b6 	strh	r3, [r2, #6]
	}
}
   11e2c:	e8bd4018 	pop	{r3, r4, lr}
   11e30:	e12fff1e 	bx	lr
   11e34:	e0034000 	.word	0xe0034000
   11e38:	0020ff08 	.word	0x0020ff08
   11e3c:	0020ff04 	.word	0x0020ff04
   11e40:	0020ff02 	.word	0x0020ff02
   11e44:	0020ff10 	.word	0x0020ff10
   11e48:	e0060000 	.word	0xe0060000
   11e4c:	0020ff80 	.word	0x0020ff80
   11e50:	0020ff40 	.word	0x0020ff40
   11e54:	400008cc 	.word	0x400008cc
   11e58:	40001174 	.word	0x40001174
   11e5c:	0000ffc0 	.word	0x0000ffc0
   11e60:	40000000 	.word	0x40000000

00011e64 <InitializeTime>:

void InitializeTime(void)
{
	CCR = 0x02;	// set current time
   11e64:	e59f3020 	ldr	r3, [pc, #32]	; 11e8c <InitializeTime+0x28>
   11e68:	e3a02002 	mov	r2, #2
   11e6c:	e5c32008 	strb	r2, [r3, #8]
	SEC = 0;
   11e70:	e3a02000 	mov	r2, #0
   11e74:	e5c32020 	strb	r2, [r3, #32]
	MIN = 0;
   11e78:	e5c32024 	strb	r2, [r3, #36]	; 0x24
	HOUR = 0;
   11e7c:	e5c32028 	strb	r2, [r3, #40]	; 0x28
	CCR = 0x11;
   11e80:	e3a02011 	mov	r2, #17
   11e84:	e5c32008 	strb	r2, [r3, #8]
   11e88:	e12fff1e 	bx	lr
   11e8c:	e0024000 	.word	0xe0024000

00011e90 <GetTime>:
}

void GetTime(void)
{
   11e90:	e92d4001 	push	{r0, lr}
	hours = HOUR;
   11e94:	e59f1044 	ldr	r1, [pc, #68]	; 11ee0 <GetTime+0x50>
   11e98:	e5d12028 	ldrb	r2, [r1, #40]	; 0x28
   11e9c:	e59f3040 	ldr	r3, [pc, #64]	; 11ee4 <GetTime+0x54>
   11ea0:	e20220ff 	and	r2, r2, #255	; 0xff
   11ea4:	e5832000 	str	r2, [r3]
	minutes = MIN;
   11ea8:	e5d13024 	ldrb	r3, [r1, #36]	; 0x24
   11eac:	e59f0034 	ldr	r0, [pc, #52]	; 11ee8 <GetTime+0x58>
   11eb0:	e20330ff 	and	r3, r3, #255	; 0xff
   11eb4:	e5803000 	str	r3, [r0]
	seconds = SEC;
   11eb8:	e5d11020 	ldrb	r1, [r1, #32]
   11ebc:	e59f0028 	ldr	r0, [pc, #40]	; 11eec <GetTime+0x5c>
   11ec0:	e20110ff 	and	r1, r1, #255	; 0xff
   11ec4:	e5801000 	str	r1, [r0]
	sprintf(time_buffer,"%02d:%02d:%02d", hours, minutes, seconds);
   11ec8:	e58d1000 	str	r1, [sp]
   11ecc:	e59f001c 	ldr	r0, [pc, #28]	; 11ef0 <GetTime+0x60>
   11ed0:	e59f101c 	ldr	r1, [pc, #28]	; 11ef4 <GetTime+0x64>
   11ed4:	eb00102a 	bl	15f84 <sprintf>
}
   11ed8:	e8bd4008 	pop	{r3, lr}
   11edc:	e12fff1e 	bx	lr
   11ee0:	e0024000 	.word	0xe0024000
   11ee4:	40001378 	.word	0x40001378
   11ee8:	40001374 	.word	0x40001374
   11eec:	4000116c 	.word	0x4000116c
   11ef0:	4000115c 	.word	0x4000115c
   11ef4:	0001c767 	.word	0x0001c767

00011ef8 <LogADC>:
************************************************************/
void LogADC(void)
{
	
	// reset TMR0 interrupt
	T0IR = 1;
   11ef8:	e59f3204 	ldr	r3, [pc, #516]	; 12104 <LogADC+0x20c>
/********************** LogADC *****************************
*  Called each time GPS data is logged to generate ADC data
* and log it
************************************************************/
void LogADC(void)
{
   11efc:	e92d4030 	push	{r4, r5, lr}
	
	// reset TMR0 interrupt
	T0IR = 1;
	
	// reset ADC log buffer pointer to beginning
	ADC_in = 0;
   11f00:	e59f4200 	ldr	r4, [pc, #512]	; 12108 <LogADC+0x210>
************************************************************/
void LogADC(void)
{
	
	// reset TMR0 interrupt
	T0IR = 1;
   11f04:	e3a05001 	mov	r5, #1
   11f08:	e5835000 	str	r5, [r3]
	
	// reset ADC log buffer pointer to beginning
	ADC_in = 0;
   11f0c:	e3a03000 	mov	r3, #0
   11f10:	e1c430b6 	strh	r3, [r4, #6]
	
	// get the time
	GetTime();
   11f14:	ebffffdd 	bl	11e90 <GetTime>
	ADC_array[ADC_in] = time_buffer[0];
   11f18:	e59f11ec 	ldr	r1, [pc, #492]	; 1210c <LogADC+0x214>
   11f1c:	e1d430b6 	ldrh	r3, [r4, #6]
   11f20:	e59f21e8 	ldr	r2, [pc, #488]	; 12110 <LogADC+0x218>
   11f24:	e5d1c000 	ldrb	ip, [r1]
   11f28:	e1a00803 	lsl	r0, r3, #16
   11f2c:	e7c2c840 	strb	ip, [r2, r0, asr #16]
	ADC_in++; //1
	ADC_array[ADC_in] = time_buffer[1];
   11f30:	e5d1c001 	ldrb	ip, [r1, #1]
	ADC_in = 0;
	
	// get the time
	GetTime();
	ADC_array[ADC_in] = time_buffer[0];
	ADC_in++; //1
   11f34:	e0830005 	add	r0, r3, r5
	ADC_array[ADC_in] = time_buffer[1];
   11f38:	e1a00800 	lsl	r0, r0, #16
   11f3c:	e7c2c840 	strb	ip, [r2, r0, asr #16]
	ADC_in++; //2
	ADC_array[ADC_in] = time_buffer[2];
   11f40:	e5d1c002 	ldrb	ip, [r1, #2]
	// get the time
	GetTime();
	ADC_array[ADC_in] = time_buffer[0];
	ADC_in++; //1
	ADC_array[ADC_in] = time_buffer[1];
	ADC_in++; //2
   11f44:	e2830002 	add	r0, r3, #2
	ADC_array[ADC_in] = time_buffer[2];
   11f48:	e1a00800 	lsl	r0, r0, #16
   11f4c:	e7c2c840 	strb	ip, [r2, r0, asr #16]
	ADC_in++; //3
	ADC_array[ADC_in] = time_buffer[3];
   11f50:	e5d1c003 	ldrb	ip, [r1, #3]
	ADC_array[ADC_in] = time_buffer[0];
	ADC_in++; //1
	ADC_array[ADC_in] = time_buffer[1];
	ADC_in++; //2
	ADC_array[ADC_in] = time_buffer[2];
	ADC_in++; //3
   11f54:	e2830003 	add	r0, r3, #3
	ADC_array[ADC_in] = time_buffer[3];
   11f58:	e1a00800 	lsl	r0, r0, #16
   11f5c:	e7c2c840 	strb	ip, [r2, r0, asr #16]
	ADC_in++; //4
	ADC_array[ADC_in] = time_buffer[4];
   11f60:	e5d1c004 	ldrb	ip, [r1, #4]
	ADC_array[ADC_in] = time_buffer[1];
	ADC_in++; //2
	ADC_array[ADC_in] = time_buffer[2];
	ADC_in++; //3
	ADC_array[ADC_in] = time_buffer[3];
	ADC_in++; //4
   11f64:	e2830004 	add	r0, r3, #4
	ADC_array[ADC_in] = time_buffer[4];
   11f68:	e1a00800 	lsl	r0, r0, #16
   11f6c:	e7c2c840 	strb	ip, [r2, r0, asr #16]
	ADC_in++; //5
	ADC_array[ADC_in] = time_buffer[5];
   11f70:	e5d1c005 	ldrb	ip, [r1, #5]
	ADC_array[ADC_in] = time_buffer[2];
	ADC_in++; //3
	ADC_array[ADC_in] = time_buffer[3];
	ADC_in++; //4
	ADC_array[ADC_in] = time_buffer[4];
	ADC_in++; //5
   11f74:	e2830005 	add	r0, r3, #5
	ADC_array[ADC_in] = time_buffer[5];
   11f78:	e1a00800 	lsl	r0, r0, #16
   11f7c:	e7c2c840 	strb	ip, [r2, r0, asr #16]
	ADC_in++; //6
   11f80:	e2830006 	add	r0, r3, #6
	ADC_array[ADC_in] = time_buffer[6];
   11f84:	e5d1c006 	ldrb	ip, [r1, #6]
   11f88:	e1a00800 	lsl	r0, r0, #16
   11f8c:	e7c2c840 	strb	ip, [r2, r0, asr #16]
	ADC_in++; //7
	ADC_array[ADC_in] = time_buffer[7];
   11f90:	e5d11007 	ldrb	r1, [r1, #7]
	ADC_array[ADC_in] = time_buffer[4];
	ADC_in++; //5
	ADC_array[ADC_in] = time_buffer[5];
	ADC_in++; //6
	ADC_array[ADC_in] = time_buffer[6];
	ADC_in++; //7
   11f94:	e2830007 	add	r0, r3, #7
	ADC_array[ADC_in] = time_buffer[7];
   11f98:	e1a00800 	lsl	r0, r0, #16
   11f9c:	e7c21840 	strb	r1, [r2, r0, asr #16]
	ADC_in++; //8
   11fa0:	e2831008 	add	r1, r3, #8
	ADC_array[ADC_in] = ',';
	ADC_in++; //9
   11fa4:	e2833009 	add	r3, r3, #9
   11fa8:	e1c430b6 	strh	r3, [r4, #6]

	//ADC_1 - ad0_3
	if(ad0_3 == 'Y')
   11fac:	e59f4160 	ldr	r4, [pc, #352]	; 12114 <LogADC+0x21c>
   11fb0:	e5d43004 	ldrb	r3, [r4, #4]
	ADC_in++; //6
	ADC_array[ADC_in] = time_buffer[6];
	ADC_in++; //7
	ADC_array[ADC_in] = time_buffer[7];
	ADC_in++; //8
	ADC_array[ADC_in] = ',';
   11fb4:	e1a01801 	lsl	r1, r1, #16
   11fb8:	e3a0002c 	mov	r0, #44	; 0x2c
	ADC_in++; //9

	//ADC_1 - ad0_3
	if(ad0_3 == 'Y')
   11fbc:	e3530059 	cmp	r3, #89	; 0x59
	ADC_in++; //6
	ADC_array[ADC_in] = time_buffer[6];
	ADC_in++; //7
	ADC_array[ADC_in] = time_buffer[7];
	ADC_in++; //8
	ADC_array[ADC_in] = ',';
   11fc0:	e7c20841 	strb	r0, [r2, r1, asr #16]
	ADC_in++; //9

	//ADC_1 - ad0_3
	if(ad0_3 == 'Y')
		GetADCValue(ADC_1);
   11fc4:	01a00005 	moveq	r0, r5
   11fc8:	0bfffecb 	bleq	11afc <GetADCValue>
		
	// ADC_2 - ad0_2
	if(ad0_2 == 'Y')
   11fcc:	e5d43006 	ldrb	r3, [r4, #6]
   11fd0:	e3530059 	cmp	r3, #89	; 0x59
		GetADCValue(ADC_2);
   11fd4:	03a00002 	moveq	r0, #2
   11fd8:	0bfffec7 	bleq	11afc <GetADCValue>
	
	// ADC_3 - ad0_1
	if(ad0_1 == 'Y')
   11fdc:	e5d43007 	ldrb	r3, [r4, #7]
   11fe0:	e3530059 	cmp	r3, #89	; 0x59
		GetADCValue(ADC_3);
   11fe4:	03a00003 	moveq	r0, #3
   11fe8:	0bfffec3 	bleq	11afc <GetADCValue>
	
	// ADC_4 - ad0_4
	if(ad0_4 == 'Y')
   11fec:	e59f4120 	ldr	r4, [pc, #288]	; 12114 <LogADC+0x21c>
   11ff0:	e5d43008 	ldrb	r3, [r4, #8]
   11ff4:	e3530059 	cmp	r3, #89	; 0x59
		GetADCValue(ADC_4);
   11ff8:	03a00004 	moveq	r0, #4
   11ffc:	0bfffebe 	bleq	11afc <GetADCValue>
	
	// ADC_5 - ad1_7
	if(ad1_7 == 'Y')
   12000:	e5d43009 	ldrb	r3, [r4, #9]
   12004:	e3530059 	cmp	r3, #89	; 0x59
		GetADCValue(ADC_5);
   12008:	03a00005 	moveq	r0, #5
   1200c:	0bfffeba 	bleq	11afc <GetADCValue>
		
	// ADC_6 - ad1_6
	if(ad1_6 == 'Y')
   12010:	e5d4300a 	ldrb	r3, [r4, #10]
   12014:	e3530059 	cmp	r3, #89	; 0x59
		GetADCValue(ADC_6);
   12018:	03a00006 	moveq	r0, #6
   1201c:	0bfffeb6 	bleq	11afc <GetADCValue>
		
	// ADC_7 - ad1_2
	if(ad1_2 == 'Y')
   12020:	e59f30ec 	ldr	r3, [pc, #236]	; 12114 <LogADC+0x21c>
   12024:	e5d3200b 	ldrb	r2, [r3, #11]
   12028:	e3520059 	cmp	r2, #89	; 0x59
   1202c:	e1a04003 	mov	r4, r3
		GetADCValue(ADC_7);
   12030:	03a00007 	moveq	r0, #7
   12034:	0bfffeb0 	bleq	11afc <GetADCValue>
		
	// ADC_8 - ad1_3
	if(ad1_3 == 'Y')
   12038:	e5d4300c 	ldrb	r3, [r4, #12]
   1203c:	e3530059 	cmp	r3, #89	; 0x59
		GetADCValue(ADC_8);
   12040:	03a00008 	moveq	r0, #8
   12044:	0bfffeac 	bleq	11afc <GetADCValue>
		
	// if no ADC pins were chosen then write that
	// if ADC pins were chosen there is a trailing ',' that should be
	// removed
	if(ADC_in == 9)	// no ADC pins were selected for reading
   12048:	e59f20b8 	ldr	r2, [pc, #184]	; 12108 <LogADC+0x210>
   1204c:	e1d210f6 	ldrsh	r1, [r2, #6]
   12050:	e1d230b6 	ldrh	r3, [r2, #6]
   12054:	e3510009 	cmp	r1, #9
		ADC_array[ADC_in] = 'C';
		ADC_in++;
	}
	else
	{
		ADC_in--;	// back up over trailing ','
   12058:	12433001 	subne	r3, r3, #1
		GetADCValue(ADC_8);
		
	// if no ADC pins were chosen then write that
	// if ADC pins were chosen there is a trailing ',' that should be
	// removed
	if(ADC_in == 9)	// no ADC pins were selected for reading
   1205c:	1a00000e 	bne	1209c <LogADC+0x1a4>
	{
		// write a warning message (ADC + GPS was chosen but not used)
		ADC_array[ADC_in] = 'N';
   12060:	e59f30a8 	ldr	r3, [pc, #168]	; 12110 <LogADC+0x218>
   12064:	e3a0104e 	mov	r1, #78	; 0x4e
   12068:	e5c31009 	strb	r1, [r3, #9]
		ADC_in++;
		ADC_array[ADC_in] = 'O';
   1206c:	e3a0104f 	mov	r1, #79	; 0x4f
   12070:	e5c3100a 	strb	r1, [r3, #10]
		ADC_in++;
		ADC_array[ADC_in] = ' ';
   12074:	e3a01020 	mov	r1, #32
   12078:	e5c3100b 	strb	r1, [r3, #11]
		ADC_in++;
		ADC_array[ADC_in] = 'A';
   1207c:	e3a01041 	mov	r1, #65	; 0x41
   12080:	e5c3100c 	strb	r1, [r3, #12]
		ADC_in++;
		ADC_array[ADC_in] = 'D';
   12084:	e3a01044 	mov	r1, #68	; 0x44
   12088:	e5c3100d 	strb	r1, [r3, #13]
		ADC_in++;
		ADC_array[ADC_in] = 'C';
   1208c:	e3a01043 	mov	r1, #67	; 0x43
   12090:	e5c3100e 	strb	r1, [r3, #14]
		ADC_in++;
   12094:	e3a0300f 	mov	r3, #15
   12098:	eaffffff 	b	1209c <LogADC+0x1a4>
	}
	else
	{
		ADC_in--;	// back up over trailing ','
   1209c:	e1c230b6 	strh	r3, [r2, #6]
	}
		
	// add CR/LF and string terminator
	ADC_array[ADC_in] = 13;
   120a0:	e59f3060 	ldr	r3, [pc, #96]	; 12108 <LogADC+0x210>
   120a4:	e1d320b6 	ldrh	r2, [r3, #6]
   120a8:	e59f1060 	ldr	r1, [pc, #96]	; 12110 <LogADC+0x218>
   120ac:	e1a00802 	lsl	r0, r2, #16
   120b0:	e3a0c00d 	mov	ip, #13
   120b4:	e7c1c840 	strb	ip, [r1, r0, asr #16]
	ADC_in++;
   120b8:	e2820001 	add	r0, r2, #1
	ADC_array[ADC_in] = 10;
	ADC_in++;
   120bc:	e2822002 	add	r2, r2, #2
	}
		
	// add CR/LF and string terminator
	ADC_array[ADC_in] = 13;
	ADC_in++;
	ADC_array[ADC_in] = 10;
   120c0:	e1a00800 	lsl	r0, r0, #16
   120c4:	e3a0c00a 	mov	ip, #10
	ADC_in++;
   120c8:	e1a02802 	lsl	r2, r2, #16
	}
		
	// add CR/LF and string terminator
	ADC_array[ADC_in] = 13;
	ADC_in++;
	ADC_array[ADC_in] = 10;
   120cc:	e7c1c840 	strb	ip, [r1, r0, asr #16]
	ADC_in++;
   120d0:	e1a02822 	lsr	r2, r2, #16
			
	VICVectAddr= 0;
   120d4:	e3e01000 	mvn	r1, #0
   120d8:	e3a00000 	mov	r0, #0
		
	// add CR/LF and string terminator
	ADC_array[ADC_in] = 13;
	ADC_in++;
	ADC_array[ADC_in] = 10;
	ADC_in++;
   120dc:	e1c320b6 	strh	r2, [r3, #6]
			
	VICVectAddr= 0;
   120e0:	e5010fcf 	str	r0, [r1, #-4047]	; 0xfffff031
	
	// set microSD write size
	ADCStringSize = ADC_in;
   120e4:	e1a02802 	lsl	r2, r2, #16
   120e8:	e59f1028 	ldr	r1, [pc, #40]	; 12118 <LogADC+0x220>
   120ec:	e1a02842 	asr	r2, r2, #16
   120f0:	e5812000 	str	r2, [r1]
	// set ADC logging flag
	log_adc = 1;
   120f4:	e3a02001 	mov	r2, #1
   120f8:	e5c32008 	strb	r2, [r3, #8]
}
   120fc:	e8bd4030 	pop	{r4, r5, lr}
   12100:	e12fff1e 	bx	lr
   12104:	e0004000 	.word	0xe0004000
   12108:	400008cc 	.word	0x400008cc
   1210c:	4000115c 	.word	0x4000115c
   12110:	40001174 	.word	0x40001174
   12114:	40000000 	.word	0x40000000
   12118:	40000f58 	.word	0x40000f58

0001211c <mode_action>:
* button hasn't been pressed which writes all buffers
* to the microSD, lights the STAT0 & STAT1 LEDs,
* and then is locked into an endless loop.
********************************************************/
void mode_action(void)
{
   1211c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	int j;

	while(1)
	{
		// if the first data buffer is full, write it to the microSD
		if(log_array1 == 1)
   12120:	e59f51d4 	ldr	r5, [pc, #468]	; 122fc <mode_action+0x1e0>
		if(onoff){ IOCLR0 = 0x00000800; } // On
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
   12124:	e59f41d4 	ldr	r4, [pc, #468]	; 12300 <mode_action+0x1e4>
		// if the first data buffer is full, write it to the microSD
		if(log_array1 == 1)
		{
			stat(0,ON);
				
			if(fat_write_file(handle,(unsigned char *)RX_array1, stringSize) < 0)
   12128:	e59f61d4 	ldr	r6, [pc, #468]	; 12304 <mode_action+0x1e8>
	int j;

	while(1)
	{
		// if the first data buffer is full, write it to the microSD
		if(log_array1 == 1)
   1212c:	e5d53002 	ldrb	r3, [r5, #2]
   12130:	e3530001 	cmp	r3, #1
   12134:	1a00001a 	bne	121a4 <mode_action+0x88>
		{
			stat(0,ON);
				
			if(fat_write_file(handle,(unsigned char *)RX_array1, stringSize) < 0)
   12138:	e59f31c8 	ldr	r3, [pc, #456]	; 12308 <mode_action+0x1ec>
		if(onoff){ IOCLR0 = 0x00000800; } // On
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
   1213c:	e3a07004 	mov	r7, #4
   12140:	e584700c 	str	r7, [r4, #12]
		// if the first data buffer is full, write it to the microSD
		if(log_array1 == 1)
		{
			stat(0,ON);
				
			if(fat_write_file(handle,(unsigned char *)RX_array1, stringSize) < 0)
   12144:	e5960000 	ldr	r0, [r6]
   12148:	e59f11bc 	ldr	r1, [pc, #444]	; 1230c <mode_action+0x1f0>
   1214c:	e5932000 	ldr	r2, [r3]
   12150:	eb000b5f 	bl	14ed4 <fat_write_file>
   12154:	e3500000 	cmp	r0, #0
   12158:	aa00000d 	bge	12194 <mode_action+0x78>
		if(onoff){ IOCLR0 = 0x00000800; } // On
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
   1215c:	e59f319c 	ldr	r3, [pc, #412]	; 12300 <mode_action+0x1e4>

void stat(int statnum, int onoff)
{
	if(statnum) // Stat 1
	{
		if(onoff){ IOCLR0 = 0x00000800; } // On
   12160:	e3a00b02 	mov	r0, #2048	; 0x800
   12164:	e1a01003 	mov	r1, r3
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
   12168:	e583700c 	str	r7, [r3, #12]
   1216c:	e59f219c 	ldr	r2, [pc, #412]	; 12310 <mode_action+0x1f4>
			if(fat_write_file(handle,(unsigned char *)RX_array1, stringSize) < 0)
			{
				while(1)
				{
					stat(0,ON);
					for(j = 0; j < 500000; j++)
   12170:	e2522001 	subs	r2, r2, #1
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
		else { IOSET0 = 0x00000004; } // Off
   12174:	e5817004 	str	r7, [r1, #4]
			if(fat_write_file(handle,(unsigned char *)RX_array1, stringSize) < 0)
			{
				while(1)
				{
					stat(0,ON);
					for(j = 0; j < 500000; j++)
   12178:	1afffffc 	bne	12170 <mode_action+0x54>

void stat(int statnum, int onoff)
{
	if(statnum) // Stat 1
	{
		if(onoff){ IOCLR0 = 0x00000800; } // On
   1217c:	e581000c 	str	r0, [r1, #12]
   12180:	e59f2188 	ldr	r2, [pc, #392]	; 12310 <mode_action+0x1f4>
				{
					stat(0,ON);
					for(j = 0; j < 500000; j++)
					stat(0,OFF);
					stat(1,ON);
					for(j = 0; j < 500000; j++)
   12184:	e2522001 	subs	r2, r2, #1
void stat(int statnum, int onoff)
{
	if(statnum) // Stat 1
	{
		if(onoff){ IOCLR0 = 0x00000800; } // On
		else { IOSET0 = 0x00000800; } // Off
   12188:	e5830004 	str	r0, [r3, #4]
				{
					stat(0,ON);
					for(j = 0; j < 500000; j++)
					stat(0,OFF);
					stat(1,ON);
					for(j = 0; j < 500000; j++)
   1218c:	1afffffc 	bne	12184 <mode_action+0x68>
   12190:	eafffff4 	b	12168 <mode_action+0x4c>
					stat(1,OFF);
				}
			}
			
			sd_raw_sync();
   12194:	eb000473 	bl	13368 <sd_raw_sync>
			stat(0,OFF);
			log_array1 = 0;
   12198:	e3a03000 	mov	r3, #0
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
		else { IOSET0 = 0x00000004; } // Off
   1219c:	e5847004 	str	r7, [r4, #4]
				}
			}
			
			sd_raw_sync();
			stat(0,OFF);
			log_array1 = 0;
   121a0:	e5c53002 	strb	r3, [r5, #2]
		}

		// if the second data buffer is full, write it to the microSD
		if(log_array2 == 1)
   121a4:	e5d53003 	ldrb	r3, [r5, #3]
   121a8:	e3530001 	cmp	r3, #1
   121ac:	1a00001d 	bne	12228 <mode_action+0x10c>
		{
			stat(1,ON);
			
			if(fat_write_file(handle,(unsigned char *)RX_array2, stringSize) < 0)
   121b0:	e59f3150 	ldr	r3, [pc, #336]	; 12308 <mode_action+0x1ec>

void stat(int statnum, int onoff)
{
	if(statnum) // Stat 1
	{
		if(onoff){ IOCLR0 = 0x00000800; } // On
   121b4:	e3a07b02 	mov	r7, #2048	; 0x800
   121b8:	e584700c 	str	r7, [r4, #12]
		// if the second data buffer is full, write it to the microSD
		if(log_array2 == 1)
		{
			stat(1,ON);
			
			if(fat_write_file(handle,(unsigned char *)RX_array2, stringSize) < 0)
   121bc:	e5960000 	ldr	r0, [r6]
   121c0:	e59f114c 	ldr	r1, [pc, #332]	; 12314 <mode_action+0x1f8>
   121c4:	e5932000 	ldr	r2, [r3]
   121c8:	eb000b41 	bl	14ed4 <fat_write_file>
   121cc:	e3500000 	cmp	r0, #0
   121d0:	aa00000d 	bge	1220c <mode_action+0xf0>
		if(onoff){ IOCLR0 = 0x00000800; } // On
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
   121d4:	e59f3124 	ldr	r3, [pc, #292]	; 12300 <mode_action+0x1e4>
   121d8:	e3a01004 	mov	r1, #4
   121dc:	e1a00003 	mov	r0, r3
   121e0:	e583100c 	str	r1, [r3, #12]
   121e4:	e59f2124 	ldr	r2, [pc, #292]	; 12310 <mode_action+0x1f4>
			if(fat_write_file(handle,(unsigned char *)RX_array2, stringSize) < 0)
			{
				while(1)
				{
					stat(0,ON);
					for(j = 0; j < 500000; j++)
   121e8:	e2522001 	subs	r2, r2, #1
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
		else { IOSET0 = 0x00000004; } // Off
   121ec:	e5801004 	str	r1, [r0, #4]
			if(fat_write_file(handle,(unsigned char *)RX_array2, stringSize) < 0)
			{
				while(1)
				{
					stat(0,ON);
					for(j = 0; j < 500000; j++)
   121f0:	1afffffc 	bne	121e8 <mode_action+0xcc>

void stat(int statnum, int onoff)
{
	if(statnum) // Stat 1
	{
		if(onoff){ IOCLR0 = 0x00000800; } // On
   121f4:	e580700c 	str	r7, [r0, #12]
   121f8:	e59f2110 	ldr	r2, [pc, #272]	; 12310 <mode_action+0x1f4>
				{
					stat(0,ON);
					for(j = 0; j < 500000; j++)
					stat(0,OFF);
					stat(1,ON);
					for(j = 0; j < 500000; j++)
   121fc:	e2522001 	subs	r2, r2, #1
void stat(int statnum, int onoff)
{
	if(statnum) // Stat 1
	{
		if(onoff){ IOCLR0 = 0x00000800; } // On
		else { IOSET0 = 0x00000800; } // Off
   12200:	e5837004 	str	r7, [r3, #4]
				{
					stat(0,ON);
					for(j = 0; j < 500000; j++)
					stat(0,OFF);
					stat(1,ON);
					for(j = 0; j < 500000; j++)
   12204:	1afffffc 	bne	121fc <mode_action+0xe0>
   12208:	eafffff4 	b	121e0 <mode_action+0xc4>
					stat(1,OFF);
				}
			}
			
			sd_raw_sync();
   1220c:	eb000455 	bl	13368 <sd_raw_sync>
			stat(1,OFF);
			log_array2 = 0;
   12210:	e3a03000 	mov	r3, #0
void stat(int statnum, int onoff)
{
	if(statnum) // Stat 1
	{
		if(onoff){ IOCLR0 = 0x00000800; } // On
		else { IOSET0 = 0x00000800; } // Off
   12214:	e5847004 	str	r7, [r4, #4]
				}
			}
			
			sd_raw_sync();
			stat(1,OFF);
			log_array2 = 0;
   12218:	e5c53003 	strb	r3, [r5, #3]
			if(use_adc == TRUE)
   1221c:	e595300c 	ldr	r3, [r5, #12]
   12220:	e3530001 	cmp	r3, #1
				LogADC();
   12224:	0bffff33 	bleq	11ef8 <LogADC>
		}
		
		// see if ADC data needs to be logged
		if(log_adc == 1)
   12228:	e5d53008 	ldrb	r3, [r5, #8]
   1222c:	e3530001 	cmp	r3, #1
   12230:	1a00001a 	bne	122a0 <mode_action+0x184>
		{
			stat(0,ON);
			
			if(fat_write_file(handle,(unsigned char *)ADC_array,ADCStringSize) < 0)
   12234:	e59f30dc 	ldr	r3, [pc, #220]	; 12318 <mode_action+0x1fc>
		if(onoff){ IOCLR0 = 0x00000800; } // On
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
   12238:	e3a07004 	mov	r7, #4
   1223c:	e584700c 	str	r7, [r4, #12]
		// see if ADC data needs to be logged
		if(log_adc == 1)
		{
			stat(0,ON);
			
			if(fat_write_file(handle,(unsigned char *)ADC_array,ADCStringSize) < 0)
   12240:	e5960000 	ldr	r0, [r6]
   12244:	e59f10d0 	ldr	r1, [pc, #208]	; 1231c <mode_action+0x200>
   12248:	e5932000 	ldr	r2, [r3]
   1224c:	eb000b20 	bl	14ed4 <fat_write_file>
   12250:	e3500000 	cmp	r0, #0
   12254:	aa00000d 	bge	12290 <mode_action+0x174>
		if(onoff){ IOCLR0 = 0x00000800; } // On
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
   12258:	e59f30a0 	ldr	r3, [pc, #160]	; 12300 <mode_action+0x1e4>

void stat(int statnum, int onoff)
{
	if(statnum) // Stat 1
	{
		if(onoff){ IOCLR0 = 0x00000800; } // On
   1225c:	e3a00b02 	mov	r0, #2048	; 0x800
   12260:	e1a01003 	mov	r1, r3
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
   12264:	e583700c 	str	r7, [r3, #12]
   12268:	e59f20a0 	ldr	r2, [pc, #160]	; 12310 <mode_action+0x1f4>
			if(fat_write_file(handle,(unsigned char *)ADC_array,ADCStringSize) < 0)
			{
				while(1)
				{
					stat(0,ON);
					for(j = 0; j < 500000; j++)
   1226c:	e2522001 	subs	r2, r2, #1
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
		else { IOSET0 = 0x00000004; } // Off
   12270:	e5817004 	str	r7, [r1, #4]
			if(fat_write_file(handle,(unsigned char *)ADC_array,ADCStringSize) < 0)
			{
				while(1)
				{
					stat(0,ON);
					for(j = 0; j < 500000; j++)
   12274:	1afffffc 	bne	1226c <mode_action+0x150>

void stat(int statnum, int onoff)
{
	if(statnum) // Stat 1
	{
		if(onoff){ IOCLR0 = 0x00000800; } // On
   12278:	e581000c 	str	r0, [r1, #12]
   1227c:	e59f208c 	ldr	r2, [pc, #140]	; 12310 <mode_action+0x1f4>
				{
					stat(0,ON);
					for(j = 0; j < 500000; j++)
					stat(0,OFF);
					stat(1,ON);
					for(j = 0; j < 500000; j++)
   12280:	e2522001 	subs	r2, r2, #1
void stat(int statnum, int onoff)
{
	if(statnum) // Stat 1
	{
		if(onoff){ IOCLR0 = 0x00000800; } // On
		else { IOSET0 = 0x00000800; } // Off
   12284:	e5830004 	str	r0, [r3, #4]
				{
					stat(0,ON);
					for(j = 0; j < 500000; j++)
					stat(0,OFF);
					stat(1,ON);
					for(j = 0; j < 500000; j++)
   12288:	1afffffc 	bne	12280 <mode_action+0x164>
   1228c:	eafffff4 	b	12264 <mode_action+0x148>
					stat(1,OFF);
				}
			}
			sd_raw_sync();
   12290:	eb000434 	bl	13368 <sd_raw_sync>
			stat(0,OFF);
			log_adc = 0;
   12294:	e3a03000 	mov	r3, #0
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
		else { IOSET0 = 0x00000004; } // Off
   12298:	e5847004 	str	r7, [r4, #4]
					stat(1,OFF);
				}
			}
			sd_raw_sync();
			stat(0,OFF);
			log_adc = 0;
   1229c:	e5c53008 	strb	r3, [r5, #8]
		}

		// if the 'stop' button has been pressed then write everything to
		// the microSD, turn on the STAT0 & STAT1 LEDs, and lock up
		if((IOPIN0 & 0x00000008) == 0)
   122a0:	e5943000 	ldr	r3, [r4]
   122a4:	e3130008 	tst	r3, #8
   122a8:	1affff9f 	bne	1212c <mode_action+0x10>
		{
			VICIntEnClr = 0xFFFFFFFF;
   122ac:	e3e03000 	mvn	r3, #0
   122b0:	e5033feb 	str	r3, [r3, #-4075]	; 0xfffff015
			// write whatever is left in the data buffer to the microSD
			if(RX_in < 512)
   122b4:	e59f3040 	ldr	r3, [pc, #64]	; 122fc <mode_action+0x1e0>
   122b8:	e1d320f0 	ldrsh	r2, [r3]
   122bc:	e59f3040 	ldr	r3, [pc, #64]	; 12304 <mode_action+0x1e8>
   122c0:	e3520c02 	cmp	r2, #512	; 0x200
			{
				fat_write_file(handle, (unsigned char *)RX_array1, RX_in);
   122c4:	e5930000 	ldr	r0, [r3]
   122c8:	b59f103c 	ldrlt	r1, [pc, #60]	; 1230c <mode_action+0x1f0>
				sd_raw_sync();
			}
			else if(RX_in >= 512)
			{
				fat_write_file(handle, (unsigned char *)RX_array2, RX_in - 512);
   122cc:	a59f1040 	ldrge	r1, [pc, #64]	; 12314 <mode_action+0x1f8>
   122d0:	a2422c02 	subge	r2, r2, #512	; 0x200
   122d4:	eb000afe 	bl	14ed4 <fat_write_file>
				sd_raw_sync();
   122d8:	eb000422 	bl	13368 <sd_raw_sync>
		if(onoff){ IOCLR0 = 0x00000800; } // On
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
   122dc:	e59f301c 	ldr	r3, [pc, #28]	; 12300 <mode_action+0x1e4>
   122e0:	e3a01004 	mov	r1, #4

void stat(int statnum, int onoff)
{
	if(statnum) // Stat 1
	{
		if(onoff){ IOCLR0 = 0x00000800; } // On
   122e4:	e3a02b02 	mov	r2, #2048	; 0x800
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
   122e8:	e583100c 	str	r1, [r3, #12]
		else { IOSET0 = 0x00000004; } // Off
   122ec:	e5831004 	str	r1, [r3, #4]

void stat(int statnum, int onoff)
{
	if(statnum) // Stat 1
	{
		if(onoff){ IOCLR0 = 0x00000800; } // On
   122f0:	e583200c 	str	r2, [r3, #12]
		else { IOSET0 = 0x00000800; } // Off
   122f4:	e5832004 	str	r2, [r3, #4]
   122f8:	eafffffa 	b	122e8 <mode_action+0x1cc>
   122fc:	400008cc 	.word	0x400008cc
   12300:	e0028000 	.word	0xe0028000
   12304:	40001168 	.word	0x40001168
   12308:	40001170 	.word	0x40001170
   1230c:	40000f5c 	.word	0x40000f5c
   12310:	0007a120 	.word	0x0007a120
   12314:	40000c58 	.word	0x40000c58
   12318:	40000f58 	.word	0x40000f58
   1231c:	40001174 	.word	0x40001174

00012320 <mode_3>:
* Trigger is '$'
* Logs '$' and next 99 characters or until CR/LF
* Each secondary buffer write triggers an ADC read
***********************************************/
void mode_3(void)
{
   12320:	e92d4010 	push	{r4, lr}
	rprintf("MODE 3\n\r");	

	setup_uart0(baud,2);
   12324:	e59f4030 	ldr	r4, [pc, #48]	; 1235c <mode_3+0x3c>
* Logs '$' and next 99 characters or until CR/LF
* Each secondary buffer write triggers an ADC read
***********************************************/
void mode_3(void)
{
	rprintf("MODE 3\n\r");	
   12328:	e59f0030 	ldr	r0, [pc, #48]	; 12360 <mode_3+0x40>
   1232c:	eb000112 	bl	1277c <rprintf>

	setup_uart0(baud,2);
   12330:	e5940010 	ldr	r0, [r4, #16]
   12334:	e3a01002 	mov	r1, #2
   12338:	ebfffb9f 	bl	111bc <setup_uart0>
	stringSize = frame + 2;
   1233c:	e1d420f2 	ldrsh	r2, [r4, #2]
   12340:	e59f301c 	ldr	r3, [pc, #28]	; 12364 <mode_3+0x44>
   12344:	e2822002 	add	r2, r2, #2
   12348:	e5832000 	str	r2, [r3]
	use_adc = TRUE;
   1234c:	e59f3014 	ldr	r3, [pc, #20]	; 12368 <mode_3+0x48>
   12350:	e3a02001 	mov	r2, #1
   12354:	e583200c 	str	r2, [r3, #12]
	mode_action();
   12358:	ebffff6f 	bl	1211c <mode_action>
   1235c:	40000000 	.word	0x40000000
   12360:	0001c776 	.word	0x0001c776
   12364:	40001170 	.word	0x40001170
   12368:	400008cc 	.word	0x400008cc

0001236c <mode_2>:
* Timer Interrupt triggered ADC read mode
* 'Frequency' for LOGCON.TXT determines frequency
* 100 is roughly 1 trigger per second
***************************************************/
void mode_2(void)
{
   1236c:	e92d4010 	push	{r4, lr}
	rprintf("MODE 2\n\r");	
   12370:	e59f0078 	ldr	r0, [pc, #120]	; 123f0 <mode_2+0x84>
   12374:	eb000100 	bl	1277c <rprintf>
	enableIRQ();
   12378:	eb000ec7 	bl	15e9c <enableIRQ>
	// Timer0  interrupt is an IRQ interrupt
	VICIntSelect &= ~0x00000010;
   1237c:	e3e03000 	mvn	r3, #0
   12380:	e5132ff3 	ldr	r2, [r3, #-4083]	; 0xfffff00d
   12384:	e3c22010 	bic	r2, r2, #16
   12388:	e5032ff3 	str	r2, [r3, #-4083]	; 0xfffff00d
	// Enable Timer0 interrupt
	VICIntEnable |= 0x00000010;
   1238c:	e5132fef 	ldr	r2, [r3, #-4079]	; 0xfffff011
   12390:	e3822010 	orr	r2, r2, #16
   12394:	e5032fef 	str	r2, [r3, #-4079]	; 0xfffff011
	// Use slot 2 for UART0 interrupt
	VICVectCntl2 = 0x24;
   12398:	e3a02024 	mov	r2, #36	; 0x24
   1239c:	e5032df7 	str	r2, [r3, #-3575]	; 0xfffff209
	// Set the address of ISR for slot 1
	VICVectAddr2 = (unsigned int)MODE2ISR;
   123a0:	e59f204c 	ldr	r2, [pc, #76]	; 123f4 <mode_2+0x88>

	T0TCR = 0x00000002;	// Reset counter and prescaler
   123a4:	e59f404c 	ldr	r4, [pc, #76]	; 123f8 <mode_2+0x8c>
	// Enable Timer0 interrupt
	VICIntEnable |= 0x00000010;
	// Use slot 2 for UART0 interrupt
	VICVectCntl2 = 0x24;
	// Set the address of ISR for slot 1
	VICVectAddr2 = (unsigned int)MODE2ISR;
   123a8:	e5032ef7 	str	r2, [r3, #-3831]	; 0xfffff109

	T0TCR = 0x00000002;	// Reset counter and prescaler
   123ac:	e3a03002 	mov	r3, #2
   123b0:	e5843004 	str	r3, [r4, #4]
	T0MCR = 0x00000003;	// On match reset the counter and generate interrupt
   123b4:	e3a03003 	mov	r3, #3
   123b8:	e5843014 	str	r3, [r4, #20]
	T0MR0 = 58982400 / freq;
   123bc:	e59f3038 	ldr	r3, [pc, #56]	; 123fc <mode_2+0x90>
   123c0:	e3a007e1 	mov	r0, #58982400	; 0x3840000
   123c4:	e5931014 	ldr	r1, [r3, #20]
   123c8:	eb0024ac 	bl	1b680 <__aeabi_idiv>

	T0PR = 0x00000000;
   123cc:	e3a03000 	mov	r3, #0
	// Set the address of ISR for slot 1
	VICVectAddr2 = (unsigned int)MODE2ISR;

	T0TCR = 0x00000002;	// Reset counter and prescaler
	T0MCR = 0x00000003;	// On match reset the counter and generate interrupt
	T0MR0 = 58982400 / freq;
   123d0:	e5840018 	str	r0, [r4, #24]

	T0PR = 0x00000000;
   123d4:	e584300c 	str	r3, [r4, #12]

	T0TCR = 0x00000001; // enable timer
   123d8:	e3a03001 	mov	r3, #1
   123dc:	e5843004 	str	r3, [r4, #4]

	stringSize = 512;
   123e0:	e59f3018 	ldr	r3, [pc, #24]	; 12400 <mode_2+0x94>
   123e4:	e3a02c02 	mov	r2, #512	; 0x200
   123e8:	e5832000 	str	r2, [r3]
	mode_action();
   123ec:	ebffff4a 	bl	1211c <mode_action>
   123f0:	0001c77f 	.word	0x0001c77f
   123f4:	000104a8 	.word	0x000104a8
   123f8:	e0004000 	.word	0xe0004000
   123fc:	40000000 	.word	0x40000000
   12400:	40001170 	.word	0x40001170

00012404 <mode_1>:
* Trigger is '$'
* Logs '$' and next 99 characters or until CR/LF
*
***********************************************/
void mode_1(void)
{
   12404:	e92d4010 	push	{r4, lr}
	rprintf("MODE 1\n\r");	

	setup_uart0(baud,2);
   12408:	e59f4024 	ldr	r4, [pc, #36]	; 12434 <mode_1+0x30>
* Logs '$' and next 99 characters or until CR/LF
*
***********************************************/
void mode_1(void)
{
	rprintf("MODE 1\n\r");	
   1240c:	e59f0024 	ldr	r0, [pc, #36]	; 12438 <mode_1+0x34>
   12410:	eb0000d9 	bl	1277c <rprintf>

	setup_uart0(baud,2);
   12414:	e5940010 	ldr	r0, [r4, #16]
   12418:	e3a01002 	mov	r1, #2
   1241c:	ebfffb66 	bl	111bc <setup_uart0>
	stringSize = frame + 2;
   12420:	e1d420f2 	ldrsh	r2, [r4, #2]
   12424:	e59f3010 	ldr	r3, [pc, #16]	; 1243c <mode_1+0x38>
   12428:	e2822002 	add	r2, r2, #2
   1242c:	e5832000 	str	r2, [r3]

	mode_action();
   12430:	ebffff39 	bl	1211c <mode_action>
   12434:	40000000 	.word	0x40000000
   12438:	0001c788 	.word	0x0001c788
   1243c:	40001170 	.word	0x40001170

00012440 <mode_0>:
* Each time the UART interrupt is triggered the
* arriving character is read and added to the
* data buffer
************************************************/
void mode_0(void) // Auto UART mode
{
   12440:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	rprintf("MODE 0\n\r");
   12444:	e59f0020 	ldr	r0, [pc, #32]	; 1246c <mode_0+0x2c>
   12448:	eb0000cb 	bl	1277c <rprintf>
	setup_uart0(baud,1);
   1244c:	e59f301c 	ldr	r3, [pc, #28]	; 12470 <mode_0+0x30>
   12450:	e3a01001 	mov	r1, #1
   12454:	e5930010 	ldr	r0, [r3, #16]
   12458:	ebfffb57 	bl	111bc <setup_uart0>
	stringSize = 512;
   1245c:	e59f3010 	ldr	r3, [pc, #16]	; 12474 <mode_0+0x34>
   12460:	e3a02c02 	mov	r2, #512	; 0x200
   12464:	e5832000 	str	r2, [r3]
	mode_action();
   12468:	ebffff2b 	bl	1211c <mode_action>
   1246c:	0001c791 	.word	0x0001c791
   12470:	40000000 	.word	0x40000000
   12474:	40001170 	.word	0x40001170

00012478 <GetGPSDateTime>:
* ?    - time (2nd field, just after 1st comma)
* ?    - active (3rd field, just after 2nd comma)
* ?    - date (10th field, just after 9th comma)
************************************************************************/
void GetGPSDateTime(void)
{
   12478:	e12fff1e 	bx	lr

0001247c <main>:
/*******************************************************
 * 		     	MAIN
 ******************************************************/

int main (void)
{
   1247c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   12480:	e24dd02c 	sub	sp, sp, #44	; 0x2c
	int i;
	char name[32];
	int count = 0;
	
	enableFIQ();
   12484:	eb000e93 	bl	15ed8 <enableFIQ>
	
	Initialize();
   12488:	ebfffb17 	bl	110ec <Initialize>
	
	InitializeTime();
   1248c:	ebfffe74 	bl	11e64 <InitializeTime>
	
	setup_uart0(9600, 0);
   12490:	e3a00d96 	mov	r0, #9600	; 0x2580
   12494:	e3a01000 	mov	r1, #0
   12498:	ebfffb47 	bl	111bc <setup_uart0>

	fat_initialize();		
   1249c:	ebfffbd9 	bl	11408 <fat_initialize>
		if(onoff){ IOCLR0 = 0x00000800; } // On
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
   124a0:	e3a06004 	mov	r6, #4
   124a4:	e59f4200 	ldr	r4, [pc, #512]	; 126ac <main+0x230>
	
	InitializeTime();
	
	setup_uart0(9600, 0);

	fat_initialize();		
   124a8:	e3a05005 	mov	r5, #5
		if(onoff){ IOCLR0 = 0x00000800; } // On
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
   124ac:	e1a08006 	mov	r8, r6

	// Flash Status Lights
	for(i = 0; i < 5; i++)
	{
		stat(0,ON);
		delay_ms(50);
   124b0:	e3a00032 	mov	r0, #50	; 0x32

void stat(int statnum, int onoff)
{
	if(statnum) // Stat 1
	{
		if(onoff){ IOCLR0 = 0x00000800; } // On
   124b4:	e3a07b02 	mov	r7, #2048	; 0x800
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
   124b8:	e584800c 	str	r8, [r4, #12]

	// Flash Status Lights
	for(i = 0; i < 5; i++)
	{
		stat(0,ON);
		delay_ms(50);
   124bc:	ebfffbe0 	bl	11444 <delay_ms>
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
		else { IOSET0 = 0x00000004; } // Off
   124c0:	e5846004 	str	r6, [r4, #4]
	{
		stat(0,ON);
		delay_ms(50);
		stat(0,OFF);
		stat(1,ON);
		delay_ms(50);
   124c4:	e3a00032 	mov	r0, #50	; 0x32

void stat(int statnum, int onoff)
{
	if(statnum) // Stat 1
	{
		if(onoff){ IOCLR0 = 0x00000800; } // On
   124c8:	e584700c 	str	r7, [r4, #12]
	{
		stat(0,ON);
		delay_ms(50);
		stat(0,OFF);
		stat(1,ON);
		delay_ms(50);
   124cc:	ebfffbdc 	bl	11444 <delay_ms>

	fat_initialize();		


	// Flash Status Lights
	for(i = 0; i < 5; i++)
   124d0:	e2555001 	subs	r5, r5, #1
void stat(int statnum, int onoff)
{
	if(statnum) // Stat 1
	{
		if(onoff){ IOCLR0 = 0x00000800; } // On
		else { IOSET0 = 0x00000800; } // Off
   124d4:	e5847004 	str	r7, [r4, #4]

	fat_initialize();		


	// Flash Status Lights
	for(i = 0; i < 5; i++)
   124d8:	1afffff4 	bne	124b0 <main+0x34>
	}
	
	Log_init();

	count++;
	string_printf(name,"LOG%02d.txt",count);
   124dc:	e28d500c 	add	r5, sp, #12
		stat(1,ON);
		delay_ms(50);
		stat(1,OFF);
	}
	
	Log_init();
   124e0:	ebfffc22 	bl	11570 <Log_init>

	count++;
	string_printf(name,"LOG%02d.txt",count);
   124e4:	e1a00005 	mov	r0, r5
   124e8:	e59f11c0 	ldr	r1, [pc, #448]	; 126b0 <main+0x234>
   124ec:	e3a02001 	mov	r2, #1
   124f0:	eb00013d 	bl	129ec <string_printf>
		stat(1,OFF);
	}
	
	Log_init();

	count++;
   124f4:	e3a04001 	mov	r4, #1
	string_printf(name,"LOG%02d.txt",count);
	while(root_file_exists(name))
   124f8:	ea000015 	b	12554 <main+0xd8>
	{
		count++;
   124fc:	e2844001 	add	r4, r4, #1
		if(count == 250) 
   12500:	e35400fa 	cmp	r4, #250	; 0xfa
   12504:	1a00000e 	bne	12544 <main+0xc8>
		{
			rprintf("Too Many Logs!\n\r");
   12508:	e59f01a4 	ldr	r0, [pc, #420]	; 126b4 <main+0x238>
   1250c:	eb00009a 	bl	1277c <rprintf>
		if(onoff){ IOCLR0 = 0x00000800; } // On
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
   12510:	e3a05004 	mov	r5, #4
   12514:	e59f4190 	ldr	r4, [pc, #400]	; 126ac <main+0x230>
   12518:	e1a07005 	mov	r7, r5

void stat(int statnum, int onoff)
{
	if(statnum) // Stat 1
	{
		if(onoff){ IOCLR0 = 0x00000800; } // On
   1251c:	e3a06b02 	mov	r6, #2048	; 0x800
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
   12520:	e584700c 	str	r7, [r4, #12]
			rprintf("Too Many Logs!\n\r");
			while(1)
			{
				stat(0,ON);
				stat(1,ON);
				delay_ms(1000);
   12524:	e3a00ffa 	mov	r0, #1000	; 0x3e8

void stat(int statnum, int onoff)
{
	if(statnum) // Stat 1
	{
		if(onoff){ IOCLR0 = 0x00000800; } // On
   12528:	e584600c 	str	r6, [r4, #12]
			rprintf("Too Many Logs!\n\r");
			while(1)
			{
				stat(0,ON);
				stat(1,ON);
				delay_ms(1000);
   1252c:	ebfffbc4 	bl	11444 <delay_ms>
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
		else { IOSET0 = 0x00000004; } // Off
   12530:	e5845004 	str	r5, [r4, #4]
				stat(0,ON);
				stat(1,ON);
				delay_ms(1000);
				stat(0,OFF);
				stat(1,OFF);
				delay_ms(1000);
   12534:	e3a00ffa 	mov	r0, #1000	; 0x3e8
void stat(int statnum, int onoff)
{
	if(statnum) // Stat 1
	{
		if(onoff){ IOCLR0 = 0x00000800; } // On
		else { IOSET0 = 0x00000800; } // Off
   12538:	e5846004 	str	r6, [r4, #4]
				stat(0,ON);
				stat(1,ON);
				delay_ms(1000);
				stat(0,OFF);
				stat(1,OFF);
				delay_ms(1000);
   1253c:	ebfffbc0 	bl	11444 <delay_ms>
   12540:	eafffff5 	b	1251c <main+0xa0>
			}

		}
		string_printf(name,"LOG%02d.txt",count);
   12544:	e1a00005 	mov	r0, r5
   12548:	e59f1160 	ldr	r1, [pc, #352]	; 126b0 <main+0x234>
   1254c:	e1a02004 	mov	r2, r4
   12550:	eb000125 	bl	129ec <string_printf>
	
	Log_init();

	count++;
	string_printf(name,"LOG%02d.txt",count);
	while(root_file_exists(name))
   12554:	e1a00005 	mov	r0, r5
   12558:	eb00025e 	bl	12ed8 <root_file_exists>
   1255c:	e3500000 	cmp	r0, #0
   12560:	1affffe5 	bne	124fc <main+0x80>

		}
		string_printf(name,"LOG%02d.txt",count);
	}
	
	handle = root_open_new(name);
   12564:	e1a00005 	mov	r0, r5
   12568:	eb000267 	bl	12f0c <root_open_new>
   1256c:	e59f6144 	ldr	r6, [pc, #324]	; 126b8 <main+0x23c>
   12570:	e5860000 	str	r0, [r6]
		

	sd_raw_sync();	
   12574:	eb00037b 	bl	13368 <sd_raw_sync>
		
	// if mode = 2 or 3 (ADC used) then write out the ADC pins in use
	if(mode == 2 || mode == 3)
   12578:	e59f313c 	ldr	r3, [pc, #316]	; 126bc <main+0x240>
   1257c:	e5d33005 	ldrb	r3, [r3, #5]
   12580:	e2433002 	sub	r3, r3, #2
   12584:	e3530001 	cmp	r3, #1
   12588:	8a00002b 	bhi	1263c <main+0x1c0>
	{
		char mybuf[10];	// eight pins + CR/LF
		mybuf[0] = ad0_3;
   1258c:	e59f312c 	ldr	r3, [pc, #300]	; 126c0 <main+0x244>
   12590:	e5d32004 	ldrb	r2, [r3, #4]
   12594:	e5cd2000 	strb	r2, [sp]
		mybuf[1] = ad0_2;
   12598:	e5d32006 	ldrb	r2, [r3, #6]
   1259c:	e5cd2001 	strb	r2, [sp, #1]
		mybuf[2] = ad0_1;
   125a0:	e5d32007 	ldrb	r2, [r3, #7]
   125a4:	e5cd2002 	strb	r2, [sp, #2]
		mybuf[3] = ad0_4;
   125a8:	e5d32008 	ldrb	r2, [r3, #8]
   125ac:	e5cd2003 	strb	r2, [sp, #3]
		mybuf[4] = ad1_7;
   125b0:	e5d32009 	ldrb	r2, [r3, #9]
   125b4:	e5cd2004 	strb	r2, [sp, #4]
		mybuf[5] = ad1_6;
   125b8:	e5d3200a 	ldrb	r2, [r3, #10]
   125bc:	e5cd2005 	strb	r2, [sp, #5]
		mybuf[6] = ad1_2;
   125c0:	e5d3200b 	ldrb	r2, [r3, #11]
		mybuf[7] = ad1_3;
   125c4:	e5d3300c 	ldrb	r3, [r3, #12]
		if(onoff){ IOCLR0 = 0x00000800; } // On
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
   125c8:	e59f40dc 	ldr	r4, [pc, #220]	; 126ac <main+0x230>
		mybuf[1] = ad0_2;
		mybuf[2] = ad0_1;
		mybuf[3] = ad0_4;
		mybuf[4] = ad1_7;
		mybuf[5] = ad1_6;
		mybuf[6] = ad1_2;
   125cc:	e5cd2006 	strb	r2, [sp, #6]
		mybuf[7] = ad1_3;
   125d0:	e5cd3007 	strb	r3, [sp, #7]
		mybuf[8] = 13;
		mybuf[9] = 10;	
   125d4:	e3a0200a 	mov	r2, #10
		mybuf[3] = ad0_4;
		mybuf[4] = ad1_7;
		mybuf[5] = ad1_6;
		mybuf[6] = ad1_2;
		mybuf[7] = ad1_3;
		mybuf[8] = 13;
   125d8:	e3a0300d 	mov	r3, #13
		if(onoff){ IOCLR0 = 0x00000800; } // On
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
   125dc:	e3a05004 	mov	r5, #4
		mybuf[3] = ad0_4;
		mybuf[4] = ad1_7;
		mybuf[5] = ad1_6;
		mybuf[6] = ad1_2;
		mybuf[7] = ad1_3;
		mybuf[8] = 13;
   125e0:	e5cd3008 	strb	r3, [sp, #8]
		mybuf[9] = 10;	
   125e4:	e5cd2009 	strb	r2, [sp, #9]
	
		stat(0,ON);
				
		if(fat_write_file(handle,(unsigned char *)mybuf, 10) < 0)
   125e8:	e5960000 	ldr	r0, [r6]
		if(onoff){ IOCLR0 = 0x00000800; } // On
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
   125ec:	e584500c 	str	r5, [r4, #12]
		mybuf[8] = 13;
		mybuf[9] = 10;	
	
		stat(0,ON);
				
		if(fat_write_file(handle,(unsigned char *)mybuf, 10) < 0)
   125f0:	e1a0100d 	mov	r1, sp
   125f4:	eb000a36 	bl	14ed4 <fat_write_file>
   125f8:	e3500000 	cmp	r0, #0
   125fc:	aa00000c 	bge	12634 <main+0x1b8>
   12600:	e1a02004 	mov	r2, r4

void stat(int statnum, int onoff)
{
	if(statnum) // Stat 1
	{
		if(onoff){ IOCLR0 = 0x00000800; } // On
   12604:	e3a01b02 	mov	r1, #2048	; 0x800
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
   12608:	e584500c 	str	r5, [r4, #12]
   1260c:	e59f30b0 	ldr	r3, [pc, #176]	; 126c4 <main+0x248>
		if(fat_write_file(handle,(unsigned char *)mybuf, 10) < 0)
		{
			while(1)
			{
				stat(0,ON);
				for(int j = 0; j < 500000; j++)
   12610:	e2533001 	subs	r3, r3, #1
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
		else { IOSET0 = 0x00000004; } // Off
   12614:	e5825004 	str	r5, [r2, #4]
		if(fat_write_file(handle,(unsigned char *)mybuf, 10) < 0)
		{
			while(1)
			{
				stat(0,ON);
				for(int j = 0; j < 500000; j++)
   12618:	1afffffc 	bne	12610 <main+0x194>

void stat(int statnum, int onoff)
{
	if(statnum) // Stat 1
	{
		if(onoff){ IOCLR0 = 0x00000800; } // On
   1261c:	e582100c 	str	r1, [r2, #12]
   12620:	e59f309c 	ldr	r3, [pc, #156]	; 126c4 <main+0x248>
			{
				stat(0,ON);
				for(int j = 0; j < 500000; j++)
				stat(0,OFF);
				stat(1,ON);
				for(int j = 0; j < 500000; j++)
   12624:	e2533001 	subs	r3, r3, #1
void stat(int statnum, int onoff)
{
	if(statnum) // Stat 1
	{
		if(onoff){ IOCLR0 = 0x00000800; } // On
		else { IOSET0 = 0x00000800; } // Off
   12628:	e5841004 	str	r1, [r4, #4]
			{
				stat(0,ON);
				for(int j = 0; j < 500000; j++)
				stat(0,OFF);
				stat(1,ON);
				for(int j = 0; j < 500000; j++)
   1262c:	1afffffc 	bne	12624 <main+0x1a8>
   12630:	eafffff4 	b	12608 <main+0x18c>
				stat(1,OFF);
			}
		}
			
		sd_raw_sync();
   12634:	eb00034b 	bl	13368 <sd_raw_sync>
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
		else { IOSET0 = 0x00000004; } // Off
   12638:	e5845004 	str	r5, [r4, #4]
		stat(0,OFF);
	}	
	
	
	
	switch(mode)
   1263c:	e59f3078 	ldr	r3, [pc, #120]	; 126bc <main+0x240>
   12640:	e5d31005 	ldrb	r1, [r3, #5]
   12644:	e3510003 	cmp	r1, #3
   12648:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
   1264c:	ea000007 	b	12670 <main+0x1f4>
   12650:	00012660 	.word	0x00012660
   12654:	00012664 	.word	0x00012664
   12658:	00012668 	.word	0x00012668
   1265c:	0001266c 	.word	0x0001266c
	{
		case 0:
			mode_0();
   12660:	ebffff76 	bl	12440 <mode_0>
		break;
		
		case 1:
			mode_1();
   12664:	ebffff66 	bl	12404 <mode_1>
		break;
		
		case 2:
			mode_2();
   12668:	ebffff3f 	bl	1236c <mode_2>
		break;
		
		case 3:
			mode_3();
   1266c:	ebffff2b 	bl	12320 <mode_3>
		break;
		
		default:
			rprintf("Mode %d not valid.\n\r",mode);
   12670:	e59f0050 	ldr	r0, [pc, #80]	; 126c8 <main+0x24c>
   12674:	eb000040 	bl	1277c <rprintf>
		if(onoff){ IOCLR0 = 0x00000800; } // On
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
   12678:	e3a05004 	mov	r5, #4
   1267c:	e59f4028 	ldr	r4, [pc, #40]	; 126ac <main+0x230>
   12680:	e1a07005 	mov	r7, r5

void stat(int statnum, int onoff)
{
	if(statnum) // Stat 1
	{
		if(onoff){ IOCLR0 = 0x00000800; } // On
   12684:	e3a06b02 	mov	r6, #2048	; 0x800
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
   12688:	e584700c 	str	r7, [r4, #12]
	
	while(1)
	{
		stat(0,ON);
		stat(1,ON);
		delay_ms(1000);
   1268c:	e3a00ffa 	mov	r0, #1000	; 0x3e8

void stat(int statnum, int onoff)
{
	if(statnum) // Stat 1
	{
		if(onoff){ IOCLR0 = 0x00000800; } // On
   12690:	e584600c 	str	r6, [r4, #12]
	
	while(1)
	{
		stat(0,ON);
		stat(1,ON);
		delay_ms(1000);
   12694:	ebfffb6a 	bl	11444 <delay_ms>
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
		else { IOSET0 = 0x00000004; } // Off
   12698:	e5845004 	str	r5, [r4, #4]
		stat(0,ON);
		stat(1,ON);
		delay_ms(1000);
		stat(0,OFF);
		stat(1,OFF);
		delay_ms(1000);
   1269c:	e3a00ffa 	mov	r0, #1000	; 0x3e8
void stat(int statnum, int onoff)
{
	if(statnum) // Stat 1
	{
		if(onoff){ IOCLR0 = 0x00000800; } // On
		else { IOSET0 = 0x00000800; } // Off
   126a0:	e5846004 	str	r6, [r4, #4]
		stat(0,ON);
		stat(1,ON);
		delay_ms(1000);
		stat(0,OFF);
		stat(1,OFF);
		delay_ms(1000);
   126a4:	ebfffb66 	bl	11444 <delay_ms>
   126a8:	eafffff5 	b	12684 <main+0x208>
   126ac:	e0028000 	.word	0xe0028000
   126b0:	0001c79a 	.word	0x0001c79a
   126b4:	0001c7a6 	.word	0x0001c7a6
   126b8:	40001168 	.word	0x40001168
   126bc:	400008cc 	.word	0x400008cc
   126c0:	40000000 	.word	0x40000000
   126c4:	0007a120 	.word	0x0007a120
   126c8:	0001c7b7 	.word	0x0001c7b7

000126cc <_read_r>:
		uart0Putch(c);
	}
*/
//	return len - i;
	return 0;
}
   126cc:	e3a00000 	mov	r0, #0
   126d0:	e12fff1e 	bx	lr

000126d4 <_write_r>:
		if (*p == '\n' ) uart0Putch('\r');
		uart0Putch(*p++);
	}
*/
	return len;
}
   126d4:	e1a00003 	mov	r0, r3
   126d8:	e12fff1e 	bx	lr

000126dc <_close_r>:
int _close_r(
    struct _reent *r, 
    int file)
{
	return 0;
}
   126dc:	e3a00000 	mov	r0, #0
   126e0:	e12fff1e 	bx	lr

000126e4 <_lseek_r>:
    int file, 
    _off_t ptr, 
    int dir)
{
	return (_off_t)0;	/*  Always indicate we are at file beginning.	*/
}
   126e4:	e3a00000 	mov	r0, #0
   126e8:	e12fff1e 	bx	lr

000126ec <_fstat_r>:
    struct _reent *r, 
    int file, 
    struct stat *st)
{
	/*  Always set as character device.				*/
	st->st_mode = S_IFCHR;	
   126ec:	e3a03a02 	mov	r3, #8192	; 0x2000
   126f0:	e5823004 	str	r3, [r2, #4]
		/* assigned to strong type with implicit 	*/
		/* signed/unsigned conversion.  Required by 	*/
		/* newlib.					*/

	return 0;
}
   126f4:	e3a00000 	mov	r0, #0
   126f8:	e12fff1e 	bx	lr

000126fc <isatty>:
int isatty(int file); /* avoid warning */

int isatty(int file)
{
	return 1;
}
   126fc:	e3a00001 	mov	r0, #1
   12700:	e12fff1e 	bx	lr

00012704 <_sbrk_r>:
    struct _reent *_s_r, 
    ptrdiff_t nbytes)
{
	char  *base;		/*  errno should be set to  ENOMEM on error	*/

	if (!heap_ptr) {	/*  Initialize if first time through.		*/
   12704:	e59f301c 	ldr	r3, [pc, #28]	; 12728 <_sbrk_r+0x24>
   12708:	e5932000 	ldr	r2, [r3]
   1270c:	e3520000 	cmp	r2, #0
		heap_ptr = end;
   12710:	059f2014 	ldreq	r2, [pc, #20]	; 1272c <_sbrk_r+0x28>
   12714:	05832000 	streq	r2, [r3]
	}
	base = heap_ptr;	/*  Point to end of heap.			*/
   12718:	e5930000 	ldr	r0, [r3]
	heap_ptr += nbytes;	/*  Increase heap.				*/
   1271c:	e0801001 	add	r1, r0, r1
   12720:	e5831000 	str	r1, [r3]
	
	return base;		/*  Return pointer to start of new heap area.	*/
}
   12724:	e12fff1e 	bx	lr
   12728:	400008e4 	.word	0x400008e4
   1272c:	40002000 	.word	0x40002000

00012730 <myputchar>:
    putcharfunc = put;
}

static void myputchar(unsigned char c)
{
    if(c == '\n') putcharfunc('\r');
   12730:	e350000a 	cmp	r0, #10
{
    putcharfunc = put;
}

static void myputchar(unsigned char c)
{
   12734:	e92d4030 	push	{r4, r5, lr}
   12738:	e1a05000 	mov	r5, r0
   1273c:	e59f4024 	ldr	r4, [pc, #36]	; 12768 <myputchar+0x38>
    if(c == '\n') putcharfunc('\r');
   12740:	03a0000d 	moveq	r0, #13
   12744:	0594c000 	ldreq	ip, [r4]
   12748:	01a0e00f 	moveq	lr, pc
   1274c:	012fff1c 	bxeq	ip
    putcharfunc(c);
   12750:	e1a00005 	mov	r0, r5
   12754:	e594c000 	ldr	ip, [r4]
   12758:	e1a0e00f 	mov	lr, pc
   1275c:	e12fff1c 	bx	ip
}
   12760:	e8bd4030 	pop	{r4, r5, lr}
   12764:	e12fff1e 	bx	lr
   12768:	400008e8 	.word	0x400008e8

0001276c <rprintf_devopen>:

static int (*putcharfunc)(int c);

void rprintf_devopen( int(*put)(int) )
{
    putcharfunc = put;
   1276c:	e59f3004 	ldr	r3, [pc, #4]	; 12778 <rprintf_devopen+0xc>
   12770:	e5830000 	str	r0, [r3]
   12774:	e12fff1e 	bx	lr
   12778:	400008e8 	.word	0x400008e8

0001277c <rprintf>:
    if(c == '\n') putcharfunc('\r');
    putcharfunc(c);
}

void rprintf(char const *format, ...)
{
   1277c:	e92d000f 	push	{r0, r1, r2, r3}
   12780:	e92d4fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    #endif

    unsigned char fill;
    unsigned char width;

    va_start (ap, format);
   12784:	e28d3038 	add	r3, sp, #56	; 0x38
    if(c == '\n') putcharfunc('\r');
    putcharfunc(c);
}

void rprintf(char const *format, ...)
{
   12788:	e59d6034 	ldr	r6, [sp, #52]	; 0x34
    #endif

    unsigned char fill;
    unsigned char width;

    va_start (ap, format);
   1278c:	e58d3000 	str	r3, [sp]
        base = 10;

        format_flag = *format++; //get char after '%'

        #ifdef PADDING
            width=0; //no formatting
   12790:	e3a08000 	mov	r8, #0
    unsigned char width;

    va_start (ap, format);
    for (;;)
    {
		delay_ms(1); //Added for VCOM testing - without it, rprintf will overrun the VCOM buffer causing it to crash
   12794:	e3a00001 	mov	r0, #1
   12798:	ebfffb29 	bl	11444 <delay_ms>
   1279c:	e1a05006 	mov	r5, r6
		
        while ((format_flag = *(format++)) != '%')
   127a0:	ea000002 	b	127b0 <rprintf+0x34>
        {      // Until '%' or '\0'
            if (!format_flag){va_end (ap); return;}
   127a4:	e3500000 	cmp	r0, #0
   127a8:	0a000080 	beq	129b0 <rprintf+0x234>
                myputchar(format_flag);
   127ac:	ebffffdf 	bl	12730 <myputchar>
    va_start (ap, format);
    for (;;)
    {
		delay_ms(1); //Added for VCOM testing - without it, rprintf will overrun the VCOM buffer causing it to crash
		
        while ((format_flag = *(format++)) != '%')
   127b0:	e4d50001 	ldrb	r0, [r5], #1
   127b4:	e3500025 	cmp	r0, #37	; 0x25
   127b8:	1afffff9 	bne	127a4 <rprintf+0x28>
        }

        issigned=0; //default unsigned
        base = 10;

        format_flag = *format++; //get char after '%'
   127bc:	e5d50000 	ldrb	r0, [r5]

        #ifdef PADDING
            width=0; //no formatting
            fill=0;  //no formatting
            if(format_flag=='0' || format_flag==' ') //SPACE or ZERO padding  ?
   127c0:	e20030ef 	and	r3, r0, #239	; 0xef
   127c4:	e3530020 	cmp	r3, #32
        base = 10;

        format_flag = *format++; //get char after '%'

        #ifdef PADDING
            width=0; //no formatting
   127c8:	13a04000 	movne	r4, #0
        }

        issigned=0; //default unsigned
        base = 10;

        format_flag = *format++; //get char after '%'
   127cc:	12856001 	addne	r6, r5, #1

        #ifdef PADDING
            width=0; //no formatting
            fill=0;  //no formatting
   127d0:	11a07004 	movne	r7, r4
   127d4:	1a00000a 	bne	12804 <rprintf+0x88>
            if(format_flag=='0' || format_flag==' ') //SPACE or ZERO padding  ?
            {
                fill=format_flag;
                format_flag = *format++; //get char after padding char
   127d8:	e5d53001 	ldrb	r3, [r5, #1]
                if(format_flag>='0' && format_flag<='9')
   127dc:	e2434030 	sub	r4, r3, #48	; 0x30
   127e0:	e20440ff 	and	r4, r4, #255	; 0xff
   127e4:	e3540009 	cmp	r4, #9
        }

        issigned=0; //default unsigned
        base = 10;

        format_flag = *format++; //get char after '%'
   127e8:	91a07000 	movls	r7, r0
                fill=format_flag;
                format_flag = *format++; //get char after padding char
                if(format_flag>='0' && format_flag<='9')
                {
                    width=format_flag-'0';
                    format_flag = *format++; //get char after width char
   127ec:	95d50002 	ldrbls	r0, [r5, #2]
        }

        issigned=0; //default unsigned
        base = 10;

        format_flag = *format++; //get char after '%'
   127f0:	81a07000 	movhi	r7, r0
            width=0; //no formatting
            fill=0;  //no formatting
            if(format_flag=='0' || format_flag==' ') //SPACE or ZERO padding  ?
            {
                fill=format_flag;
                format_flag = *format++; //get char after padding char
   127f4:	82856002 	addhi	r6, r5, #2
   127f8:	81a00003 	movhi	r0, r3
        base = 10;

        format_flag = *format++; //get char after '%'

        #ifdef PADDING
            width=0; //no formatting
   127fc:	83a04000 	movhi	r4, #0
                fill=format_flag;
                format_flag = *format++; //get char after padding char
                if(format_flag>='0' && format_flag<='9')
                {
                    width=format_flag-'0';
                    format_flag = *format++; //get char after width char
   12800:	92856003 	addls	r6, r5, #3
        #endif

        #ifdef USE_LONG
            islong=0; //default int value
            #ifdef USE_UPPER
            if(format_flag=='l' || format_flag=='L') //Long value
   12804:	e20030df 	and	r3, r0, #223	; 0xdf
   12808:	e353004c 	cmp	r3, #76	; 0x4c
            #else
            if(format_flag=='l') //Long value
            #endif
        {
            islong=1;
            format_flag = *format++; //get char after 'l' or 'L'
   1280c:	04d60001 	ldrbeq	r0, [r6], #1
        }
        #endif

        switch (format_flag)
   12810:	e3500058 	cmp	r0, #88	; 0x58
   12814:	0a000060 	beq	1299c <rprintf+0x220>
   12818:	8a00000b 	bhi	1284c <rprintf+0xd0>
   1281c:	e3500049 	cmp	r0, #73	; 0x49
   12820:	0a000060 	beq	129a8 <rprintf+0x22c>
   12824:	8a000003 	bhi	12838 <rprintf+0xbc>
   12828:	e3500043 	cmp	r0, #67	; 0x43
   1282c:	0a000015 	beq	12888 <rprintf+0x10c>
   12830:	e3500044 	cmp	r0, #68	; 0x44
   12834:	ea00000a 	b	12864 <rprintf+0xe8>
   12838:	e3500053 	cmp	r0, #83	; 0x53
   1283c:	0a000017 	beq	128a0 <rprintf+0x124>
   12840:	e3500055 	cmp	r0, #85	; 0x55
   12844:	1a000013 	bne	12898 <rprintf+0x11c>
   12848:	ea000051 	b	12994 <rprintf+0x218>
   1284c:	e3500069 	cmp	r0, #105	; 0x69
   12850:	0a000054 	beq	129a8 <rprintf+0x22c>
   12854:	8a000004 	bhi	1286c <rprintf+0xf0>
   12858:	e3500063 	cmp	r0, #99	; 0x63
   1285c:	0a000009 	beq	12888 <rprintf+0x10c>
   12860:	e3500064 	cmp	r0, #100	; 0x64
   12864:	1a00000b 	bne	12898 <rprintf+0x11c>
   12868:	ea00004e 	b	129a8 <rprintf+0x22c>
   1286c:	e3500075 	cmp	r0, #117	; 0x75
   12870:	0a000047 	beq	12994 <rprintf+0x218>
   12874:	e3500078 	cmp	r0, #120	; 0x78
   12878:	0a000047 	beq	1299c <rprintf+0x220>
   1287c:	e3500073 	cmp	r0, #115	; 0x73
   12880:	1a000004 	bne	12898 <rprintf+0x11c>
   12884:	ea000005 	b	128a0 <rprintf+0x124>
            #ifdef USE_CHAR
                case 'c':
                    #ifdef USE_UPPER
                    case 'C':
                #endif
                format_flag = va_arg(ap,int);
   12888:	e59d3000 	ldr	r3, [sp]
   1288c:	e2832004 	add	r2, r3, #4
   12890:	e58d2000 	str	r2, [sp]
   12894:	e5d30000 	ldrb	r0, [r3]
                // no break -> run into default
            #endif

            default:
                myputchar(format_flag);
   12898:	ebffffa4 	bl	12730 <myputchar>
                continue;
   1289c:	eaffffbc 	b	12794 <rprintf+0x18>
                #ifdef USE_STRING
                    #ifdef USE_UPPER
                    case 'S':
                #endif
                case 's':
                ptr = (unsigned char*)va_arg(ap,char *);
   128a0:	e59d3000 	ldr	r3, [sp]
{
    if(c == '\n') putcharfunc('\r');
    putcharfunc(c);
}

void rprintf(char const *format, ...)
   128a4:	e5934000 	ldr	r4, [r3]
                #ifdef USE_STRING
                    #ifdef USE_UPPER
                    case 'S':
                #endif
                case 's':
                ptr = (unsigned char*)va_arg(ap,char *);
   128a8:	e2832004 	add	r2, r3, #4
   128ac:	e58d2000 	str	r2, [sp]
{
    if(c == '\n') putcharfunc('\r');
    putcharfunc(c);
}

void rprintf(char const *format, ...)
   128b0:	e2444001 	sub	r4, r4, #1
                    #ifdef USE_UPPER
                    case 'S':
                #endif
                case 's':
                ptr = (unsigned char*)va_arg(ap,char *);
                while(*ptr) { myputchar(*ptr); ptr++; }
   128b4:	ea000000 	b	128bc <rprintf+0x140>
   128b8:	ebffff9c 	bl	12730 <myputchar>
   128bc:	e5f40001 	ldrb	r0, [r4, #1]!
   128c0:	e3500000 	cmp	r0, #0
   128c4:	1afffffb 	bne	128b8 <rprintf+0x13c>
   128c8:	eaffffb1 	b	12794 <rprintf+0x18>

                if(issigned) //Signed types
                {
                    #ifdef USE_LONG
                        if(islong) { s_val = va_arg(ap,long); }
                            else { s_val = va_arg(ap,int); }
   128cc:	e2832004 	add	r2, r3, #4
   128d0:	e58d2000 	str	r2, [sp]
   128d4:	e5935000 	ldr	r5, [r3]
                        #else
                        s_val = va_arg(ap,int);
                    #endif

                    if(s_val < 0) //Value negativ ?
   128d8:	e3550000 	cmp	r5, #0
                    {
                        s_val = - s_val; //Make it positiv
                        myputchar('-');    //Output sign
   128dc:	b3a0002d 	movlt	r0, #45	; 0x2d
                        s_val = va_arg(ap,int);
                    #endif

                    if(s_val < 0) //Value negativ ?
                    {
                        s_val = - s_val; //Make it positiv
   128e0:	b2655000 	rsblt	r5, r5, #0
                        myputchar('-');    //Output sign
   128e4:	bbffff91 	bllt	12730 <myputchar>
            if (!format_flag){va_end (ap); return;}
                myputchar(format_flag);
        }

        issigned=0; //default unsigned
        base = 10;
   128e8:	e3a0a00a 	mov	sl, #10
   128ec:	ea000002 	b	128fc <rprintf+0x180>
                }
                else //Unsigned types
                {
                    #ifdef USE_LONG
                        if(islong) { u_val = va_arg(ap,unsigned long); }
                            else { u_val = va_arg(ap,unsigned int); }
   128f0:	e2832004 	add	r2, r3, #4
   128f4:	e58d2000 	str	r2, [sp]
   128f8:	e5935000 	ldr	r5, [r3]
                        u_val = va_arg(ap,unsigned int);
                    #endif
                }

                ptr = scratch + SCRATCH;
                *--ptr = 0;
   128fc:	e5cd800f 	strb	r8, [sp, #15]
{
    if(c == '\n') putcharfunc('\r');
    putcharfunc(c);
}

void rprintf(char const *format, ...)
   12900:	e28d900e 	add	r9, sp, #14

                ptr = scratch + SCRATCH;
                *--ptr = 0;
                do
                {
                    char ch = u_val % base + '0';
   12904:	e1a00005 	mov	r0, r5
   12908:	e1a0100a 	mov	r1, sl
   1290c:	eb0023ad 	bl	1b7c8 <__umodsi3>
   12910:	e20000ff 	and	r0, r0, #255	; 0xff
   12914:	e2803030 	add	r3, r0, #48	; 0x30
   12918:	e20330ff 	and	r3, r3, #255	; 0xff
                    #ifdef USE_HEX
                        if (ch > '9')
   1291c:	e3530039 	cmp	r3, #57	; 0x39
                        {
                            ch += 'a' - '9' - 1;
                            #ifdef USE_UPPERHEX
                            ch-=0x20;
   12920:	82803037 	addhi	r3, r0, #55	; 0x37
   12924:	820330ff 	andhi	r3, r3, #255	; 0xff
                        #endif
                    }
                    #endif
                    *--ptr = ch;
                    u_val /= base;
   12928:	e1a00005 	mov	r0, r5
   1292c:	e1a0100a 	mov	r1, sl
                            #ifdef USE_UPPERHEX
                            ch-=0x20;
                        #endif
                    }
                    #endif
                    *--ptr = ch;
   12930:	e1a0b009 	mov	fp, r9
   12934:	e4493001 	strb	r3, [r9], #-1
                    u_val /= base;
   12938:	eb00230a 	bl	1b568 <__aeabi_uidiv>

                    #ifdef PADDING
                        if(width) width--; //calculate number of padding chars
   1293c:	e3540000 	cmp	r4, #0
   12940:	12444001 	subne	r4, r4, #1
   12944:	120440ff 	andne	r4, r4, #255	; 0xff
                    #endif
                }
                while (u_val);
   12948:	e3500000 	cmp	r0, #0
                            ch-=0x20;
                        #endif
                    }
                    #endif
                    *--ptr = ch;
                    u_val /= base;
   1294c:	e1a05000 	mov	r5, r0

                    #ifdef PADDING
                        if(width) width--; //calculate number of padding chars
                    #endif
                }
                while (u_val);
   12950:	1affffeb 	bne	12904 <rprintf+0x188>
   12954:	e1a02004 	mov	r2, r4
   12958:	e1a0300b 	mov	r3, fp
   1295c:	ea000000 	b	12964 <rprintf+0x1e8>

                #ifdef PADDING
                    while(width--) *--ptr = fill; //insert padding chars
   12960:	e5637001 	strb	r7, [r3, #-1]!
   12964:	e2444001 	sub	r4, r4, #1
   12968:	e20440ff 	and	r4, r4, #255	; 0xff
   1296c:	e35400ff 	cmp	r4, #255	; 0xff
   12970:	1afffffa 	bne	12960 <rprintf+0x1e4>
{
    if(c == '\n') putcharfunc('\r');
    putcharfunc(c);
}

void rprintf(char const *format, ...)
   12974:	e062b00b 	rsb	fp, r2, fp
   12978:	e24bb001 	sub	fp, fp, #1
   1297c:	ea000000 	b	12984 <rprintf+0x208>

                #ifdef PADDING
                    while(width--) *--ptr = fill; //insert padding chars
                #endif

                while(*ptr) { myputchar(*ptr); ptr++; }
   12980:	ebffff6a 	bl	12730 <myputchar>
   12984:	e5fb0001 	ldrb	r0, [fp, #1]!
   12988:	e3500000 	cmp	r0, #0
   1298c:	1afffffb 	bne	12980 <rprintf+0x204>
   12990:	eaffff7f 	b	12794 <rprintf+0x18>
            if (!format_flag){va_end (ap); return;}
                myputchar(format_flag);
        }

        issigned=0; //default unsigned
        base = 10;
   12994:	e3a0a00a 	mov	sl, #10
   12998:	ea000000 	b	129a0 <rprintf+0x224>
                    goto CONVERSION_LOOP;
                    case 'x':
                    #ifdef USE_UPPER
                    case 'X':
                #endif
                base = 16;
   1299c:	e3a0a010 	mov	sl, #16
   129a0:	e59d3000 	ldr	r3, [sp]
   129a4:	eaffffd1 	b	128f0 <rprintf+0x174>
   129a8:	e59d3000 	ldr	r3, [sp]
   129ac:	eaffffc6 	b	128cc <rprintf+0x150>
                #endif

                while(*ptr) { myputchar(*ptr); ptr++; }
                    }
        }
    }
   129b0:	e8bd4fff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129b4:	e28dd010 	add	sp, sp, #16
   129b8:	e12fff1e 	bx	lr

000129bc <string_printf_devopen>:

static int (*putcharfunc)(int c);

void string_printf_devopen( int(*put)(int) )
{
    putcharfunc = put;
   129bc:	e59f3004 	ldr	r3, [pc, #4]	; 129c8 <string_printf_devopen+0xc>
   129c0:	e5830000 	str	r0, [r3]
   129c4:	e12fff1e 	bx	lr
   129c8:	400008ec 	.word	0x400008ec

000129cc <string_myputchar>:
}

void string_myputchar(char* s_printf_buffer, unsigned char c)
{
	s_printf_buffer[buffer_ptr] = c;
   129cc:	e59f3014 	ldr	r3, [pc, #20]	; 129e8 <string_myputchar+0x1c>
   129d0:	e5d32000 	ldrb	r2, [r3]
   129d4:	e7c01002 	strb	r1, [r0, r2]
	buffer_ptr++;
   129d8:	e5d32000 	ldrb	r2, [r3]
   129dc:	e2822001 	add	r2, r2, #1
   129e0:	e5c32000 	strb	r2, [r3]
   129e4:	e12fff1e 	bx	lr
   129e8:	4000137c 	.word	0x4000137c

000129ec <string_printf>:
}

void string_printf(char* string_printf_buffer, char const *format, ...)
{
   129ec:	e92d000e 	push	{r1, r2, r3}
   129f0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    unsigned short base;
    unsigned char *ptr;
    unsigned char issigned=0;
    va_list ap;
	
	buffer_ptr = 0;
   129f4:	e59f3260 	ldr	r3, [pc, #608]	; 12c5c <string_printf+0x270>
	s_printf_buffer[buffer_ptr] = c;
	buffer_ptr++;
}

void string_printf(char* string_printf_buffer, char const *format, ...)
{
   129f8:	e24dd014 	sub	sp, sp, #20
    unsigned short base;
    unsigned char *ptr;
    unsigned char issigned=0;
    va_list ap;
	
	buffer_ptr = 0;
   129fc:	e3a0a000 	mov	sl, #0
   12a00:	e5c3a000 	strb	sl, [r3]
    #endif

    unsigned char fill;
    unsigned char width;

    va_start (ap, format);
   12a04:	e28d303c 	add	r3, sp, #60	; 0x3c
	s_printf_buffer[buffer_ptr] = c;
	buffer_ptr++;
}

void string_printf(char* string_printf_buffer, char const *format, ...)
{
   12a08:	e1a06000 	mov	r6, r0
   12a0c:	e59d4038 	ldr	r4, [sp, #56]	; 0x38
    #endif

    unsigned char fill;
    unsigned char width;

    va_start (ap, format);
   12a10:	e58d3004 	str	r3, [sp, #4]
   12a14:	ea000007 	b	12a38 <string_printf+0x4c>

    for (;;)
    {
        while ((format_flag = *(format++)) != '%')
        {      // Until '%' or '\0'
            if (!format_flag)
   12a18:	e3510000 	cmp	r1, #0
   12a1c:	1a000002 	bne	12a2c <string_printf+0x40>
			{
				va_end (ap); 

				string_myputchar(string_printf_buffer, '\0');
   12a20:	e1a00006 	mov	r0, r6
   12a24:	ebffffe8 	bl	129cc <string_myputchar>
   12a28:	ea000087 	b	12c4c <string_printf+0x260>

    va_start (ap, format);

    for (;;)
    {
        while ((format_flag = *(format++)) != '%')
   12a2c:	e2844001 	add	r4, r4, #1

				string_myputchar(string_printf_buffer, '\0');
				
				return;
			}
            string_myputchar(string_printf_buffer, format_flag);
   12a30:	e1a00006 	mov	r0, r6
   12a34:	ebffffe4 	bl	129cc <string_myputchar>

    va_start (ap, format);

    for (;;)
    {
        while ((format_flag = *(format++)) != '%')
   12a38:	e5d41000 	ldrb	r1, [r4]
   12a3c:	e3510025 	cmp	r1, #37	; 0x25
   12a40:	1afffff4 	bne	12a18 <string_printf+0x2c>
        }

        issigned=0; //default unsigned
        base = 10;

        format_flag = *format++; //get char after '%'
   12a44:	e5d41001 	ldrb	r1, [r4, #1]

        #ifdef PADDING
            width=0; //no formatting
            fill=0;  //no formatting
            if(format_flag=='0' || format_flag==' ') //SPACE or ZERO padding  ?
   12a48:	e20130ef 	and	r3, r1, #239	; 0xef
   12a4c:	e3530020 	cmp	r3, #32
        base = 10;

        format_flag = *format++; //get char after '%'

        #ifdef PADDING
            width=0; //no formatting
   12a50:	13a05000 	movne	r5, #0
        }

        issigned=0; //default unsigned
        base = 10;

        format_flag = *format++; //get char after '%'
   12a54:	12844002 	addne	r4, r4, #2

        #ifdef PADDING
            width=0; //no formatting
            fill=0;  //no formatting
   12a58:	11a08005 	movne	r8, r5
   12a5c:	1a00000b 	bne	12a90 <string_printf+0xa4>
            if(format_flag=='0' || format_flag==' ') //SPACE or ZERO padding  ?
            {
                fill=format_flag;
                format_flag = *format++; //get char after padding char
   12a60:	e5d43002 	ldrb	r3, [r4, #2]
                if(format_flag>='0' && format_flag<='9')
   12a64:	e2435030 	sub	r5, r3, #48	; 0x30
   12a68:	e20550ff 	and	r5, r5, #255	; 0xff
   12a6c:	e3550009 	cmp	r5, #9
                {
                    width=format_flag-'0';
                    format_flag = *format++; //get char after width char
   12a70:	95d43003 	ldrbls	r3, [r4, #3]
        }

        issigned=0; //default unsigned
        base = 10;

        format_flag = *format++; //get char after '%'
   12a74:	81a08001 	movhi	r8, r1
   12a78:	91a08001 	movls	r8, r1
            width=0; //no formatting
            fill=0;  //no formatting
            if(format_flag=='0' || format_flag==' ') //SPACE or ZERO padding  ?
            {
                fill=format_flag;
                format_flag = *format++; //get char after padding char
   12a7c:	82844003 	addhi	r4, r4, #3
   12a80:	81a01003 	movhi	r1, r3
        base = 10;

        format_flag = *format++; //get char after '%'

        #ifdef PADDING
            width=0; //no formatting
   12a84:	83a05000 	movhi	r5, #0
                fill=format_flag;
                format_flag = *format++; //get char after padding char
                if(format_flag>='0' && format_flag<='9')
                {
                    width=format_flag-'0';
                    format_flag = *format++; //get char after width char
   12a88:	92844004 	addls	r4, r4, #4
   12a8c:	91a01003 	movls	r1, r3
        #endif

        #ifdef USE_LONG
            islong=0; //default int value
            #ifdef USE_UPPER
            if(format_flag=='l' || format_flag=='L') //Long value
   12a90:	e20130df 	and	r3, r1, #223	; 0xdf
   12a94:	e353004c 	cmp	r3, #76	; 0x4c
            #else
            if(format_flag=='l') //Long value
            #endif
        {
            islong=1;
            format_flag = *format++; //get char after 'l' or 'L'
   12a98:	04d41001 	ldrbeq	r1, [r4], #1
        }
        #endif

        switch (format_flag)
   12a9c:	e3510058 	cmp	r1, #88	; 0x58
   12aa0:	0a000064 	beq	12c38 <string_printf+0x24c>
   12aa4:	8a00000b 	bhi	12ad8 <string_printf+0xec>
   12aa8:	e3510049 	cmp	r1, #73	; 0x49
   12aac:	0a000064 	beq	12c44 <string_printf+0x258>
   12ab0:	8a000003 	bhi	12ac4 <string_printf+0xd8>
   12ab4:	e3510043 	cmp	r1, #67	; 0x43
   12ab8:	0a000015 	beq	12b14 <string_printf+0x128>
   12abc:	e3510044 	cmp	r1, #68	; 0x44
   12ac0:	ea00000a 	b	12af0 <string_printf+0x104>
   12ac4:	e3510053 	cmp	r1, #83	; 0x53
   12ac8:	0a000016 	beq	12b28 <string_printf+0x13c>
   12acc:	e3510055 	cmp	r1, #85	; 0x55
   12ad0:	1affffd6 	bne	12a30 <string_printf+0x44>
   12ad4:	ea000055 	b	12c30 <string_printf+0x244>
   12ad8:	e3510069 	cmp	r1, #105	; 0x69
   12adc:	0a000058 	beq	12c44 <string_printf+0x258>
   12ae0:	8a000004 	bhi	12af8 <string_printf+0x10c>
   12ae4:	e3510063 	cmp	r1, #99	; 0x63
   12ae8:	0a000009 	beq	12b14 <string_printf+0x128>
   12aec:	e3510064 	cmp	r1, #100	; 0x64
   12af0:	1affffce 	bne	12a30 <string_printf+0x44>
   12af4:	ea000052 	b	12c44 <string_printf+0x258>
   12af8:	e3510075 	cmp	r1, #117	; 0x75
   12afc:	0a00004b 	beq	12c30 <string_printf+0x244>
   12b00:	e3510078 	cmp	r1, #120	; 0x78
   12b04:	0a00004b 	beq	12c38 <string_printf+0x24c>
   12b08:	e3510073 	cmp	r1, #115	; 0x73
   12b0c:	1affffc7 	bne	12a30 <string_printf+0x44>
   12b10:	ea000004 	b	12b28 <string_printf+0x13c>
            #ifdef USE_CHAR
                case 'c':
                    #ifdef USE_UPPER
                    case 'C':
                #endif
                format_flag = va_arg(ap,int);
   12b14:	e59d3004 	ldr	r3, [sp, #4]
   12b18:	e2832004 	add	r2, r3, #4
   12b1c:	e58d2004 	str	r2, [sp, #4]
   12b20:	e5d31000 	ldrb	r1, [r3]
   12b24:	eaffffc1 	b	12a30 <string_printf+0x44>
                #ifdef USE_STRING
                    #ifdef USE_UPPER
                    case 'S':
                #endif
                case 's':
                ptr = (unsigned char*)va_arg(ap,char *);
   12b28:	e59d3004 	ldr	r3, [sp, #4]
{
	s_printf_buffer[buffer_ptr] = c;
	buffer_ptr++;
}

void string_printf(char* string_printf_buffer, char const *format, ...)
   12b2c:	e5935000 	ldr	r5, [r3]
                #ifdef USE_STRING
                    #ifdef USE_UPPER
                    case 'S':
                #endif
                case 's':
                ptr = (unsigned char*)va_arg(ap,char *);
   12b30:	e2832004 	add	r2, r3, #4
   12b34:	e58d2004 	str	r2, [sp, #4]
{
	s_printf_buffer[buffer_ptr] = c;
	buffer_ptr++;
}

void string_printf(char* string_printf_buffer, char const *format, ...)
   12b38:	e2455001 	sub	r5, r5, #1
                    #ifdef USE_UPPER
                    case 'S':
                #endif
                case 's':
                ptr = (unsigned char*)va_arg(ap,char *);
                while(*ptr) 
   12b3c:	ea000001 	b	12b48 <string_printf+0x15c>
				{ 
					string_myputchar(string_printf_buffer, *ptr); 
   12b40:	e1a00006 	mov	r0, r6
   12b44:	ebffffa0 	bl	129cc <string_myputchar>
                    #ifdef USE_UPPER
                    case 'S':
                #endif
                case 's':
                ptr = (unsigned char*)va_arg(ap,char *);
                while(*ptr) 
   12b48:	e5f51001 	ldrb	r1, [r5, #1]!
   12b4c:	e3510000 	cmp	r1, #0
   12b50:	1afffffa 	bne	12b40 <string_printf+0x154>
   12b54:	eaffffb7 	b	12a38 <string_printf+0x4c>

                if(issigned) //Signed types
                {
                    #ifdef USE_LONG
                        if(islong) { s_val = va_arg(ap,long); }
                            else { s_val = va_arg(ap,int); }
   12b58:	e2832004 	add	r2, r3, #4
   12b5c:	e58d2004 	str	r2, [sp, #4]
   12b60:	e5937000 	ldr	r7, [r3]
                        #else
                        s_val = va_arg(ap,int);
                    #endif

                    if(s_val < 0) //Value negativ ?
   12b64:	e3570000 	cmp	r7, #0
                    {
                        s_val = - s_val; //Make it positiv
                        string_myputchar(string_printf_buffer, '-');    //Output sign
   12b68:	b1a00006 	movlt	r0, r6
   12b6c:	b3a0102d 	movlt	r1, #45	; 0x2d
                        s_val = va_arg(ap,int);
                    #endif

                    if(s_val < 0) //Value negativ ?
                    {
                        s_val = - s_val; //Make it positiv
   12b70:	b2677000 	rsblt	r7, r7, #0
                        string_myputchar(string_printf_buffer, '-');    //Output sign
   12b74:	bbffff94 	bllt	129cc <string_myputchar>
			}
            string_myputchar(string_printf_buffer, format_flag);
        }

        issigned=0; //default unsigned
        base = 10;
   12b78:	e3a0900a 	mov	r9, #10
   12b7c:	ea000002 	b	12b8c <string_printf+0x1a0>
                }
                else //Unsigned types
                {
                    #ifdef USE_LONG
                        if(islong) { u_val = va_arg(ap,unsigned long); }
                            else { u_val = va_arg(ap,unsigned int); }
   12b80:	e2832004 	add	r2, r3, #4
   12b84:	e58d2004 	str	r2, [sp, #4]
   12b88:	e5937000 	ldr	r7, [r3]
                        u_val = va_arg(ap,unsigned int);
                    #endif
                }

                ptr = scratch + SCRATCH;
                *--ptr = 0;
   12b8c:	e5cda013 	strb	sl, [sp, #19]
{
	s_printf_buffer[buffer_ptr] = c;
	buffer_ptr++;
}

void string_printf(char* string_printf_buffer, char const *format, ...)
   12b90:	e28db012 	add	fp, sp, #18

                ptr = scratch + SCRATCH;
                *--ptr = 0;
                do
                {
                    char ch = u_val % base + '0';
   12b94:	e1a00007 	mov	r0, r7
   12b98:	e1a01009 	mov	r1, r9
   12b9c:	eb002309 	bl	1b7c8 <__umodsi3>
   12ba0:	e20000ff 	and	r0, r0, #255	; 0xff
   12ba4:	e2803030 	add	r3, r0, #48	; 0x30
   12ba8:	e20330ff 	and	r3, r3, #255	; 0xff
                    #ifdef USE_HEX
                        if (ch > '9')
   12bac:	e3530039 	cmp	r3, #57	; 0x39
                        {
                            ch += 'a' - '9' - 1;
                            #ifdef USE_UPPERHEX
                            ch-=0x20;
   12bb0:	82803037 	addhi	r3, r0, #55	; 0x37
   12bb4:	820330ff 	andhi	r3, r3, #255	; 0xff
                        #endif
                    }
                    #endif
                    *--ptr = ch;
   12bb8:	e1a0200b 	mov	r2, fp
                    u_val /= base;
   12bbc:	e1a00007 	mov	r0, r7
                            #ifdef USE_UPPERHEX
                            ch-=0x20;
                        #endif
                    }
                    #endif
                    *--ptr = ch;
   12bc0:	e44b3001 	strb	r3, [fp], #-1
                    u_val /= base;
   12bc4:	e1a01009 	mov	r1, r9
   12bc8:	e58d2000 	str	r2, [sp]
   12bcc:	eb002265 	bl	1b568 <__aeabi_uidiv>

                    #ifdef PADDING
                        if(width) width--; //calculate number of padding chars
   12bd0:	e3550000 	cmp	r5, #0
   12bd4:	12455001 	subne	r5, r5, #1
   12bd8:	120550ff 	andne	r5, r5, #255	; 0xff
                    #endif
                }
                while (u_val);
   12bdc:	e3500000 	cmp	r0, #0
                            ch-=0x20;
                        #endif
                    }
                    #endif
                    *--ptr = ch;
                    u_val /= base;
   12be0:	e1a07000 	mov	r7, r0

                    #ifdef PADDING
                        if(width) width--; //calculate number of padding chars
   12be4:	e59d2000 	ldr	r2, [sp]
                    #endif
                }
                while (u_val);
   12be8:	1affffe9 	bne	12b94 <string_printf+0x1a8>
   12bec:	e1a01005 	mov	r1, r5
   12bf0:	e1a03002 	mov	r3, r2
   12bf4:	ea000000 	b	12bfc <string_printf+0x210>

                #ifdef PADDING
                    while(width--) *--ptr = fill; //insert padding chars
   12bf8:	e5638001 	strb	r8, [r3, #-1]!
   12bfc:	e2455001 	sub	r5, r5, #1
   12c00:	e20550ff 	and	r5, r5, #255	; 0xff
   12c04:	e35500ff 	cmp	r5, #255	; 0xff
   12c08:	1afffffa 	bne	12bf8 <string_printf+0x20c>
{
	s_printf_buffer[buffer_ptr] = c;
	buffer_ptr++;
}

void string_printf(char* string_printf_buffer, char const *format, ...)
   12c0c:	e0615002 	rsb	r5, r1, r2
   12c10:	e2455001 	sub	r5, r5, #1
   12c14:	ea000001 	b	12c20 <string_printf+0x234>
                #endif

                //Add to buffer
				while(*ptr) 
				{ 
					string_myputchar(string_printf_buffer, *ptr); 
   12c18:	e1a00006 	mov	r0, r6
   12c1c:	ebffff6a 	bl	129cc <string_myputchar>
                #ifdef PADDING
                    while(width--) *--ptr = fill; //insert padding chars
                #endif

                //Add to buffer
				while(*ptr) 
   12c20:	e5f51001 	ldrb	r1, [r5, #1]!
   12c24:	e3510000 	cmp	r1, #0
   12c28:	1afffffa 	bne	12c18 <string_printf+0x22c>
   12c2c:	eaffff81 	b	12a38 <string_printf+0x4c>
			}
            string_myputchar(string_printf_buffer, format_flag);
        }

        issigned=0; //default unsigned
        base = 10;
   12c30:	e3a0900a 	mov	r9, #10
   12c34:	ea000000 	b	12c3c <string_printf+0x250>
                    goto CONVERSION_LOOP;
                    case 'x':
                    #ifdef USE_UPPER
                    case 'X':
                #endif
                base = 16;
   12c38:	e3a09010 	mov	r9, #16
   12c3c:	e59d3004 	ldr	r3, [sp, #4]
   12c40:	eaffffce 	b	12b80 <string_printf+0x194>
   12c44:	e59d3004 	ldr	r3, [sp, #4]
   12c48:	eaffffc2 	b	12b58 <string_printf+0x16c>
					string_myputchar(string_printf_buffer, *ptr); 
					ptr++; 
				}
            }
        }
    }
   12c4c:	e28dd014 	add	sp, sp, #20
   12c50:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c54:	e28dd00c 	add	sp, sp, #12
   12c58:	e12fff1e 	bx	lr
   12c5c:	4000137c 	.word	0x4000137c

00012c60 <init_serial0>:
/* Initialize Serial Interface UART0 */
void init_serial0 ( unsigned long baudrate )
{
    unsigned long Fdiv;

    PINSEL0 = 0x00000005;                  /* Enable RxD0 and TxD0              */
   12c60:	e59f3040 	ldr	r3, [pc, #64]	; 12ca8 <init_serial0+0x48>

#define CR     0x0D

/* Initialize Serial Interface UART0 */
void init_serial0 ( unsigned long baudrate )
{
   12c64:	e92d4010 	push	{r4, lr}
    unsigned long Fdiv;

    PINSEL0 = 0x00000005;                  /* Enable RxD0 and TxD0              */
   12c68:	e3a02005 	mov	r2, #5
    U0LCR = 0x83;                          /* 8 bits, no Parity, 1 Stop bit     */
   12c6c:	e59f4038 	ldr	r4, [pc, #56]	; 12cac <init_serial0+0x4c>
/* Initialize Serial Interface UART0 */
void init_serial0 ( unsigned long baudrate )
{
    unsigned long Fdiv;

    PINSEL0 = 0x00000005;                  /* Enable RxD0 and TxD0              */
   12c70:	e5832000 	str	r2, [r3]
    U0LCR = 0x83;                          /* 8 bits, no Parity, 1 Stop bit     */
   12c74:	e3a03083 	mov	r3, #131	; 0x83

#define CR     0x0D

/* Initialize Serial Interface UART0 */
void init_serial0 ( unsigned long baudrate )
{
   12c78:	e1a01000 	mov	r1, r0
    unsigned long Fdiv;

    PINSEL0 = 0x00000005;                  /* Enable RxD0 and TxD0              */
    U0LCR = 0x83;                          /* 8 bits, no Parity, 1 Stop bit     */
   12c7c:	e584300c 	str	r3, [r4, #12]
    Fdiv = ( Fcclk / 16 ) / baudrate ;     /* baud rate                        */
   12c80:	e59f0028 	ldr	r0, [pc, #40]	; 12cb0 <init_serial0+0x50>
   12c84:	eb002237 	bl	1b568 <__aeabi_uidiv>
    U0DLM = Fdiv / 256;
   12c88:	e1a03420 	lsr	r3, r0, #8
   12c8c:	e5843004 	str	r3, [r4, #4]
    U0DLL = Fdiv % 256;
   12c90:	e20000ff 	and	r0, r0, #255	; 0xff
    U0LCR = 0x03;                           /* DLAB = 0                         */
   12c94:	e3a03003 	mov	r3, #3

    PINSEL0 = 0x00000005;                  /* Enable RxD0 and TxD0              */
    U0LCR = 0x83;                          /* 8 bits, no Parity, 1 Stop bit     */
    Fdiv = ( Fcclk / 16 ) / baudrate ;     /* baud rate                        */
    U0DLM = Fdiv / 256;
    U0DLL = Fdiv % 256;
   12c98:	e5840000 	str	r0, [r4]
    U0LCR = 0x03;                           /* DLAB = 0                         */
   12c9c:	e584300c 	str	r3, [r4, #12]
}
   12ca0:	e8bd4010 	pop	{r4, lr}
   12ca4:	e12fff1e 	bx	lr
   12ca8:	e002c000 	.word	0xe002c000
   12cac:	e000c000 	.word	0xe000c000
   12cb0:	00393870 	.word	0x00393870

00012cb4 <init_serial1>:
/* Initialize Serial Interface UART0 */
void init_serial1 ( unsigned long baudrate )
{
    unsigned long Fdiv;

    PINSEL0 |= (1<<16) | (1<<18);         /* Enable RxD1 and TxD1              */
   12cb4:	e59f3044 	ldr	r3, [pc, #68]	; 12d00 <init_serial1+0x4c>
   12cb8:	e5932000 	ldr	r2, [r3]
    U0LCR = 0x03;                           /* DLAB = 0                         */
}

/* Initialize Serial Interface UART0 */
void init_serial1 ( unsigned long baudrate )
{
   12cbc:	e92d4010 	push	{r4, lr}
    unsigned long Fdiv;

    PINSEL0 |= (1<<16) | (1<<18);         /* Enable RxD1 and TxD1              */
   12cc0:	e3822805 	orr	r2, r2, #327680	; 0x50000
    U1LCR = 0x83;                          /* 8 bits, no Parity, 1 Stop bit     */
   12cc4:	e59f4038 	ldr	r4, [pc, #56]	; 12d04 <init_serial1+0x50>
/* Initialize Serial Interface UART0 */
void init_serial1 ( unsigned long baudrate )
{
    unsigned long Fdiv;

    PINSEL0 |= (1<<16) | (1<<18);         /* Enable RxD1 and TxD1              */
   12cc8:	e5832000 	str	r2, [r3]
    U1LCR = 0x83;                          /* 8 bits, no Parity, 1 Stop bit     */
   12ccc:	e3a03083 	mov	r3, #131	; 0x83
    U0LCR = 0x03;                           /* DLAB = 0                         */
}

/* Initialize Serial Interface UART0 */
void init_serial1 ( unsigned long baudrate )
{
   12cd0:	e1a01000 	mov	r1, r0
    unsigned long Fdiv;

    PINSEL0 |= (1<<16) | (1<<18);         /* Enable RxD1 and TxD1              */
    U1LCR = 0x83;                          /* 8 bits, no Parity, 1 Stop bit     */
   12cd4:	e584300c 	str	r3, [r4, #12]
    Fdiv = ( Fcclk / 16 ) / baudrate ;     /* baud rate                        */
   12cd8:	e59f0028 	ldr	r0, [pc, #40]	; 12d08 <init_serial1+0x54>
   12cdc:	eb002221 	bl	1b568 <__aeabi_uidiv>
    U1DLM = Fdiv / 256;
   12ce0:	e1a03420 	lsr	r3, r0, #8
   12ce4:	e5843004 	str	r3, [r4, #4]
    U1DLL = Fdiv % 256;
   12ce8:	e20000ff 	and	r0, r0, #255	; 0xff
    U1LCR = 0x03;                           /* DLAB = 0                         */
   12cec:	e3a03003 	mov	r3, #3

    PINSEL0 |= (1<<16) | (1<<18);         /* Enable RxD1 and TxD1              */
    U1LCR = 0x83;                          /* 8 bits, no Parity, 1 Stop bit     */
    Fdiv = ( Fcclk / 16 ) / baudrate ;     /* baud rate                        */
    U1DLM = Fdiv / 256;
    U1DLL = Fdiv % 256;
   12cf0:	e5840000 	str	r0, [r4]
    U1LCR = 0x03;                           /* DLAB = 0                         */
   12cf4:	e584300c 	str	r3, [r4, #12]
}
   12cf8:	e8bd4010 	pop	{r4, lr}
   12cfc:	e12fff1e 	bx	lr
   12d00:	e002c000 	.word	0xe002c000
   12d04:	e0010000 	.word	0xe0010000
   12d08:	00393870 	.word	0x00393870

00012d0c <putchar_serial0>:

/* Write character to Serial Port 0 with \n -> \r\n  */
int putchar_serial0 (int ch)
{
    if (ch == '\n')
   12d0c:	e350000a 	cmp	r0, #10
   12d10:	e59f3030 	ldr	r3, [pc, #48]	; 12d48 <putchar_serial0+0x3c>
   12d14:	1a000005 	bne	12d30 <putchar_serial0+0x24>
    {
        while (!(U0LSR & 0x20));
   12d18:	e5932014 	ldr	r2, [r3, #20]
   12d1c:	e3120020 	tst	r2, #32
   12d20:	0afffffc 	beq	12d18 <putchar_serial0+0xc>
        U0THR = CR;                  /* output CR */
   12d24:	e59f201c 	ldr	r2, [pc, #28]	; 12d48 <putchar_serial0+0x3c>
   12d28:	e3a0100d 	mov	r1, #13
   12d2c:	e5821000 	str	r1, [r2]
    }
    while (!(U0LSR & 0x20));
   12d30:	e5932014 	ldr	r2, [r3, #20]
   12d34:	e3120020 	tst	r2, #32
   12d38:	0afffffc 	beq	12d30 <putchar_serial0+0x24>
    return (U0THR = ch);
   12d3c:	e59f3004 	ldr	r3, [pc, #4]	; 12d48 <putchar_serial0+0x3c>
   12d40:	e5830000 	str	r0, [r3]
}
   12d44:	e12fff1e 	bx	lr
   12d48:	e000c000 	.word	0xe000c000

00012d4c <putc_serial0>:

/* Write character to Serial Port 0 without \n -> \r\n  */
int putc_serial0 (int ch)
{
    while (!(U0LSR & 0x20));
   12d4c:	e59f2014 	ldr	r2, [pc, #20]	; 12d68 <putc_serial0+0x1c>
   12d50:	e5923014 	ldr	r3, [r2, #20]
   12d54:	e3130020 	tst	r3, #32
   12d58:	0afffffc 	beq	12d50 <putc_serial0+0x4>
    return (U0THR = ch);
   12d5c:	e59f3004 	ldr	r3, [pc, #4]	; 12d68 <putc_serial0+0x1c>
   12d60:	e5830000 	str	r0, [r3]
}
   12d64:	e12fff1e 	bx	lr
   12d68:	e000c000 	.word	0xe000c000

00012d6c <putc_serial1>:

/* Write character to Serial Port 1 without \n -> \r\n  */
int putc_serial1 (int ch)
{
    while (!(U1LSR & 0x20));
   12d6c:	e59f2014 	ldr	r2, [pc, #20]	; 12d88 <putc_serial1+0x1c>
   12d70:	e5923014 	ldr	r3, [r2, #20]
   12d74:	e3130020 	tst	r3, #32
   12d78:	0afffffc 	beq	12d70 <putc_serial1+0x4>
    return (U1THR = ch);
   12d7c:	e59f3004 	ldr	r3, [pc, #4]	; 12d88 <putc_serial1+0x1c>
   12d80:	e5830000 	str	r0, [r3]
}
   12d84:	e12fff1e 	bx	lr
   12d88:	e0010000 	.word	0xe0010000

00012d8c <putstring_serial0>:

void putstring_serial0 (const char *string)
{
   12d8c:	e92d4010 	push	{r4, lr}
{
    while (!(U1LSR & 0x20));
    return (U1THR = ch);
}

void putstring_serial0 (const char *string)
   12d90:	e2404001 	sub	r4, r0, #1
{
    char ch;

    while ((ch = *string))
   12d94:	ea000000 	b	12d9c <putstring_serial0+0x10>
    {
        putchar_serial0(ch);
   12d98:	ebffffdb 	bl	12d0c <putchar_serial0>

void putstring_serial0 (const char *string)
{
    char ch;

    while ((ch = *string))
   12d9c:	e5f40001 	ldrb	r0, [r4, #1]!
   12da0:	e3500000 	cmp	r0, #0
   12da4:	1afffffb 	bne	12d98 <putstring_serial0+0xc>
    {
        putchar_serial0(ch);
        string++;
    }
}
   12da8:	e8bd4010 	pop	{r4, lr}
   12dac:	e12fff1e 	bx	lr

00012db0 <getkey_serial0>:


/* Read character from Serial Port   */
int getkey_serial0 (void)
{
	if (U0LSR & 0x01)
   12db0:	e59f300c 	ldr	r3, [pc, #12]	; 12dc4 <getkey_serial0+0x14>
   12db4:	e5930014 	ldr	r0, [r3, #20]
   12db8:	e2100001 	ands	r0, r0, #1
    {
        return (U0RBR);
   12dbc:	15930000 	ldrne	r0, [r3]
    }
    else
    {
        return 0;
    }
}
   12dc0:	e12fff1e 	bx	lr
   12dc4:	e000c000 	.word	0xe000c000

00012dc8 <getc0>:

/* Read character from Serial Port   */
int getc0 (void)
{
	while ( (U0LSR & 0x01) == 0 ); //Wait for character
   12dc8:	e59f2014 	ldr	r2, [pc, #20]	; 12de4 <getc0+0x1c>
   12dcc:	e5923014 	ldr	r3, [r2, #20]
   12dd0:	e3130001 	tst	r3, #1
   12dd4:	0afffffc 	beq	12dcc <getc0+0x4>
	return U0RBR;
   12dd8:	e59f3004 	ldr	r3, [pc, #4]	; 12de4 <getc0+0x1c>
   12ddc:	e5930000 	ldr	r0, [r3]
}
   12de0:	e12fff1e 	bx	lr
   12de4:	e000c000 	.word	0xe000c000

00012de8 <openroot>:
struct partition_struct* partition;
struct fat_dir_struct* dd;
struct fat_file_struct * fd;

int openroot(void)
{
   12de8:	e92d4011 	push	{r0, r4, lr}
    /* open first partition */
    partition = partition_open((device_read_t) sd_raw_read,
   12dec:	e3a03000 	mov	r3, #0
   12df0:	e58d3000 	str	r3, [sp]
   12df4:	e59f00ac 	ldr	r0, [pc, #172]	; 12ea8 <openroot+0xc0>
   12df8:	e59f10ac 	ldr	r1, [pc, #172]	; 12eac <openroot+0xc4>
   12dfc:	e59f20ac 	ldr	r2, [pc, #172]	; 12eb0 <openroot+0xc8>
   12e00:	e59f30ac 	ldr	r3, [pc, #172]	; 12eb4 <openroot+0xcc>
   12e04:	eb000b9e 	bl	15c84 <partition_open>
   12e08:	e59f40a8 	ldr	r4, [pc, #168]	; 12eb8 <openroot+0xd0>
                               (device_read_interval_t) sd_raw_read_interval,
                               (device_write_t) sd_raw_write,
                               (device_write_interval_t) sd_raw_write_interval,
                               0);

    if(!partition)
   12e0c:	e3500000 	cmp	r0, #0
struct fat_file_struct * fd;

int openroot(void)
{
    /* open first partition */
    partition = partition_open((device_read_t) sd_raw_read,
   12e10:	e5840000 	str	r0, [r4]
                               (device_read_interval_t) sd_raw_read_interval,
                               (device_write_t) sd_raw_write,
                               (device_write_interval_t) sd_raw_write_interval,
                               0);

    if(!partition)
   12e14:	1a00000a 	bne	12e44 <openroot+0x5c>
    {
        /* If the partition did not open, assume the storage device
             *      * is a "superfloppy", i.e. has no MBR.
             *           */
        partition = partition_open((device_read_t) sd_raw_read,
   12e18:	e3e03000 	mvn	r3, #0
   12e1c:	e58d3000 	str	r3, [sp]
   12e20:	e59f0080 	ldr	r0, [pc, #128]	; 12ea8 <openroot+0xc0>
   12e24:	e59f1080 	ldr	r1, [pc, #128]	; 12eac <openroot+0xc4>
   12e28:	e59f2080 	ldr	r2, [pc, #128]	; 12eb0 <openroot+0xc8>
   12e2c:	e59f3080 	ldr	r3, [pc, #128]	; 12eb4 <openroot+0xcc>
   12e30:	eb000b93 	bl	15c84 <partition_open>
                                   (device_read_interval_t) sd_raw_read_interval,
                                   (device_write_t) sd_raw_write,
                                   (device_write_interval_t) sd_raw_write_interval,
                                   -1);
        if(!partition)
   12e34:	e3500000 	cmp	r0, #0
    if(!partition)
    {
        /* If the partition did not open, assume the storage device
             *      * is a "superfloppy", i.e. has no MBR.
             *           */
        partition = partition_open((device_read_t) sd_raw_read,
   12e38:	e5840000 	str	r0, [r4]
                                   (device_write_t) sd_raw_write,
                                   (device_write_interval_t) sd_raw_write_interval,
                                   -1);
        if(!partition)
        {
            rprintf("opening partition failed\n\r");
   12e3c:	059f0078 	ldreq	r0, [pc, #120]	; 12ebc <openroot+0xd4>
        partition = partition_open((device_read_t) sd_raw_read,
                                   (device_read_interval_t) sd_raw_read_interval,
                                   (device_write_t) sd_raw_write,
                                   (device_write_interval_t) sd_raw_write_interval,
                                   -1);
        if(!partition)
   12e40:	0a000013 	beq	12e94 <openroot+0xac>
            return 1;
        }
    }

    /* open file system */
    fs = fat_open(partition);
   12e44:	e59f306c 	ldr	r3, [pc, #108]	; 12eb8 <openroot+0xd0>
   12e48:	e5930000 	ldr	r0, [r3]
   12e4c:	eb0006f4 	bl	14a24 <fat_open>
   12e50:	e59f4068 	ldr	r4, [pc, #104]	; 12ec0 <openroot+0xd8>
    if(!fs)
   12e54:	e3500000 	cmp	r0, #0
            return 1;
        }
    }

    /* open file system */
    fs = fat_open(partition);
   12e58:	e5840000 	str	r0, [r4]
    if(!fs)
    {
        rprintf("opening filesystem failed\n\r");
   12e5c:	059f0060 	ldreq	r0, [pc, #96]	; 12ec4 <openroot+0xdc>
        }
    }

    /* open file system */
    fs = fat_open(partition);
    if(!fs)
   12e60:	0a00000b 	beq	12e94 <openroot+0xac>
        rprintf("opening filesystem failed\n\r");
        return 1;
    }

    /* open root directory */
    fat_get_dir_entry_of_path(fs, "/", &dir_entry);
   12e64:	e59f105c 	ldr	r1, [pc, #92]	; 12ec8 <openroot+0xe0>
   12e68:	e59f205c 	ldr	r2, [pc, #92]	; 12ecc <openroot+0xe4>
   12e6c:	eb0009c0 	bl	15574 <fat_get_dir_entry_of_path>

    dd = fat_open_dir(fs, &dir_entry);
   12e70:	e5940000 	ldr	r0, [r4]
   12e74:	e59f1050 	ldr	r1, [pc, #80]	; 12ecc <openroot+0xe4>
   12e78:	eb000929 	bl	15324 <fat_open_dir>
   12e7c:	e59f304c 	ldr	r3, [pc, #76]	; 12ed0 <openroot+0xe8>
    if(!dd)
   12e80:	e3500000 	cmp	r0, #0
    }

    /* open root directory */
    fat_get_dir_entry_of_path(fs, "/", &dir_entry);

    dd = fat_open_dir(fs, &dir_entry);
   12e84:	e5830000 	str	r0, [r3]
    if(!dd)
    {
        rprintf("opening root directory failed\n\r");
        return 1;
    }
    return 0;
   12e88:	13a00000 	movne	r0, #0

    /* open root directory */
    fat_get_dir_entry_of_path(fs, "/", &dir_entry);

    dd = fat_open_dir(fs, &dir_entry);
    if(!dd)
   12e8c:	1a000003 	bne	12ea0 <openroot+0xb8>
    {
        rprintf("opening root directory failed\n\r");
   12e90:	e59f003c 	ldr	r0, [pc, #60]	; 12ed4 <openroot+0xec>
   12e94:	ebfffe38 	bl	1277c <rprintf>
        return 1;
   12e98:	e3a00001 	mov	r0, #1
   12e9c:	eaffffff 	b	12ea0 <openroot+0xb8>
    }
    return 0;
}
   12ea0:	e8bd4018 	pop	{r3, r4, lr}
   12ea4:	e12fff1e 	bx	lr
   12ea8:	000133a8 	.word	0x000133a8
   12eac:	00013538 	.word	0x00013538
   12eb0:	00013844 	.word	0x00013844
   12eb4:	00013a18 	.word	0x00013a18
   12eb8:	400013b8 	.word	0x400013b8
   12ebc:	0001c7cc 	.word	0x0001c7cc
   12ec0:	40001380 	.word	0x40001380
   12ec4:	0001c7e7 	.word	0x0001c7e7
   12ec8:	0001c803 	.word	0x0001c803
   12ecc:	40001384 	.word	0x40001384
   12ed0:	400013bc 	.word	0x400013bc
   12ed4:	0001c805 	.word	0x0001c805

00012ed8 <root_file_exists>:

/* returns 1 if file exists, 0 else */
int root_file_exists(char* name)
{
    return(find_file_in_dir(fs,dd,name,&dir_entry));
   12ed8:	e59f3020 	ldr	r3, [pc, #32]	; 12f00 <root_file_exists+0x28>
    return 0;
}

/* returns 1 if file exists, 0 else */
int root_file_exists(char* name)
{
   12edc:	e1a02000 	mov	r2, r0
    return(find_file_in_dir(fs,dd,name,&dir_entry));
   12ee0:	e5930000 	ldr	r0, [r3]
   12ee4:	e59f3018 	ldr	r3, [pc, #24]	; 12f04 <root_file_exists+0x2c>
    return 0;
}

/* returns 1 if file exists, 0 else */
int root_file_exists(char* name)
{
   12ee8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    return(find_file_in_dir(fs,dd,name,&dir_entry));
   12eec:	e5931000 	ldr	r1, [r3]
   12ef0:	e59f3010 	ldr	r3, [pc, #16]	; 12f08 <root_file_exists+0x30>
   12ef4:	eb000b41 	bl	15c00 <find_file_in_dir>
}
   12ef8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   12efc:	e12fff1e 	bx	lr
   12f00:	40001380 	.word	0x40001380
   12f04:	400013bc 	.word	0x400013bc
   12f08:	40001384 	.word	0x40001384

00012f0c <root_open_new>:

/* returns NULL if error, pointer if file opened */
struct fat_file_struct * root_open_new(char* name)
{
   12f0c:	e92d4030 	push	{r4, r5, lr}
    if(fat_create_file(dd,name,&dir_entry))
   12f10:	e59f5030 	ldr	r5, [pc, #48]	; 12f48 <root_open_new+0x3c>
    return(find_file_in_dir(fs,dd,name,&dir_entry));
}

/* returns NULL if error, pointer if file opened */
struct fat_file_struct * root_open_new(char* name)
{
   12f14:	e1a04000 	mov	r4, r0
    if(fat_create_file(dd,name,&dir_entry))
   12f18:	e1a01004 	mov	r1, r4
   12f1c:	e5950000 	ldr	r0, [r5]
   12f20:	e59f2024 	ldr	r2, [pc, #36]	; 12f4c <root_open_new+0x40>
   12f24:	eb0009de 	bl	156a4 <fat_create_file>
   12f28:	e3500000 	cmp	r0, #0
    {
        return(open_file_in_dir(fs,dd,name));
   12f2c:	159f301c 	ldrne	r3, [pc, #28]	; 12f50 <root_open_new+0x44>
   12f30:	15951000 	ldrne	r1, [r5]
   12f34:	15930000 	ldrne	r0, [r3]
   12f38:	11a02004 	movne	r2, r4
   12f3c:	1b000b44 	blne	15c54 <open_file_in_dir>
    }
    else
    {
        return NULL;
    }
}
   12f40:	e8bd4030 	pop	{r4, r5, lr}
   12f44:	e12fff1e 	bx	lr
   12f48:	400013bc 	.word	0x400013bc
   12f4c:	40001384 	.word	0x40001384
   12f50:	40001380 	.word	0x40001380

00012f54 <root_open>:

struct fat_file_struct * root_open(char* name)
{
    return(open_file_in_dir(fs,dd,name));
   12f54:	e59f301c 	ldr	r3, [pc, #28]	; 12f78 <root_open+0x24>
        return NULL;
    }
}

struct fat_file_struct * root_open(char* name)
{
   12f58:	e1a02000 	mov	r2, r0
    return(open_file_in_dir(fs,dd,name));
   12f5c:	e5930000 	ldr	r0, [r3]
   12f60:	e59f3014 	ldr	r3, [pc, #20]	; 12f7c <root_open+0x28>
        return NULL;
    }
}

struct fat_file_struct * root_open(char* name)
{
   12f64:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    return(open_file_in_dir(fs,dd,name));
   12f68:	e5931000 	ldr	r1, [r3]
   12f6c:	eb000b38 	bl	15c54 <open_file_in_dir>
}
   12f70:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   12f74:	e12fff1e 	bx	lr
   12f78:	40001380 	.word	0x40001380
   12f7c:	400013bc 	.word	0x400013bc

00012f80 <print_disk_info>:

uint8_t print_disk_info(const struct fat_fs_struct* disk_fs)
{
   12f80:	e92d4070 	push	{r4, r5, r6, lr}
    if(!disk_fs)
   12f84:	e2506000 	subs	r6, r0, #0
{
    return(open_file_in_dir(fs,dd,name));
}

uint8_t print_disk_info(const struct fat_fs_struct* disk_fs)
{
   12f88:	e24dd024 	sub	sp, sp, #36	; 0x24
    if(!disk_fs)
   12f8c:	1a000001 	bne	12f98 <print_disk_info+0x18>
        return 0;
   12f90:	e3a00000 	mov	r0, #0
   12f94:	ea000031 	b	13060 <print_disk_info+0xe0>

    struct sd_raw_info disk_info;
    if(!sd_raw_get_info(&disk_info))
   12f98:	e28d0004 	add	r0, sp, #4
   12f9c:	eb0002ce 	bl	13adc <sd_raw_get_info>
   12fa0:	e3500000 	cmp	r0, #0
   12fa4:	0afffff9 	beq	12f90 <print_disk_info+0x10>
        return 0;

//    int temp = get_output();
//    set_output(UART_ONLY);
    rprintf("manuf:  0x%02x\n\r", disk_info.manufacturer);
   12fa8:	e59f00bc 	ldr	r0, [pc, #188]	; 1306c <print_disk_info+0xec>
   12fac:	e5dd1004 	ldrb	r1, [sp, #4]
   12fb0:	ebfffdf1 	bl	1277c <rprintf>
    rprintf("oem:    %s\n\r", disk_info.oem);
   12fb4:	e59f00b4 	ldr	r0, [pc, #180]	; 13070 <print_disk_info+0xf0>
   12fb8:	e28d1005 	add	r1, sp, #5
   12fbc:	ebfffdee 	bl	1277c <rprintf>
    rprintf("prod:   %s\n\r", disk_info.product);
   12fc0:	e59f00ac 	ldr	r0, [pc, #172]	; 13074 <print_disk_info+0xf4>
   12fc4:	e28d1008 	add	r1, sp, #8
   12fc8:	ebfffdeb 	bl	1277c <rprintf>
    rprintf("rev:    %02x\n\r", disk_info.revision);
   12fcc:	e59f00a4 	ldr	r0, [pc, #164]	; 13078 <print_disk_info+0xf8>
   12fd0:	e5dd100e 	ldrb	r1, [sp, #14]
   12fd4:	ebfffde8 	bl	1277c <rprintf>
    rprintf("serial: 0x%08lx\n\r", disk_info.serial);
   12fd8:	e59f009c 	ldr	r0, [pc, #156]	; 1307c <print_disk_info+0xfc>
   12fdc:	e59d1010 	ldr	r1, [sp, #16]
   12fe0:	ebfffde5 	bl	1277c <rprintf>
    rprintf("date:   %02d/%02d\n\r", disk_info.manufacturing_month, disk_info.manufacturing_year);
   12fe4:	e59f0094 	ldr	r0, [pc, #148]	; 13080 <print_disk_info+0x100>
   12fe8:	e5dd1015 	ldrb	r1, [sp, #21]
   12fec:	e5dd2014 	ldrb	r2, [sp, #20]
   12ff0:	ebfffde1 	bl	1277c <rprintf>
    rprintf("size:   %ld\n\r", disk_info.capacity);
   12ff4:	e28d2018 	add	r2, sp, #24
   12ff8:	e8920006 	ldm	r2, {r1, r2}
   12ffc:	e59f0080 	ldr	r0, [pc, #128]	; 13084 <print_disk_info+0x104>
   13000:	ebfffddd 	bl	1277c <rprintf>
    rprintf("copy:   %d\n\r", disk_info.flag_copy);
   13004:	e59f007c 	ldr	r0, [pc, #124]	; 13088 <print_disk_info+0x108>
   13008:	e5dd1020 	ldrb	r1, [sp, #32]
   1300c:	ebfffdda 	bl	1277c <rprintf>
    rprintf("wr.pr.: %d/%d\n\r", disk_info.flag_write_protect_temp, disk_info.flag_write_protect);
   13010:	e5dd2021 	ldrb	r2, [sp, #33]	; 0x21
   13014:	e59f0070 	ldr	r0, [pc, #112]	; 1308c <print_disk_info+0x10c>
   13018:	e5dd1022 	ldrb	r1, [sp, #34]	; 0x22
   1301c:	ebfffdd6 	bl	1277c <rprintf>
    rprintf("format: %d\n\r", disk_info.format);
   13020:	e59f0068 	ldr	r0, [pc, #104]	; 13090 <print_disk_info+0x110>
   13024:	e5dd1023 	ldrb	r1, [sp, #35]	; 0x23
   13028:	ebfffdd3 	bl	1277c <rprintf>
    rprintf("free:   %ld/%ld\n\r", fat_get_fs_free(disk_fs), fat_get_fs_size(disk_fs));
   1302c:	e1a00006 	mov	r0, r6
   13030:	eb000abd 	bl	15b2c <fat_get_fs_free>
   13034:	e1a04000 	mov	r4, r0
   13038:	e1a00006 	mov	r0, r6
   1303c:	e1a05001 	mov	r5, r1
   13040:	eb000aa8 	bl	15ae8 <fat_get_fs_size>
   13044:	e1a02005 	mov	r2, r5
   13048:	e58d1000 	str	r1, [sp]
   1304c:	e1a03000 	mov	r3, r0
   13050:	e1a01004 	mov	r1, r4
   13054:	e59f0038 	ldr	r0, [pc, #56]	; 13094 <print_disk_info+0x114>
   13058:	ebfffdc7 	bl	1277c <rprintf>
//    set_output(temp);
    return 1;
   1305c:	e3a00001 	mov	r0, #1
}
   13060:	e28dd024 	add	sp, sp, #36	; 0x24
   13064:	e8bd4070 	pop	{r4, r5, r6, lr}
   13068:	e12fff1e 	bx	lr
   1306c:	0001c825 	.word	0x0001c825
   13070:	0001c836 	.word	0x0001c836
   13074:	0001c843 	.word	0x0001c843
   13078:	0001c850 	.word	0x0001c850
   1307c:	0001c85f 	.word	0x0001c85f
   13080:	0001c871 	.word	0x0001c871
   13084:	0001c885 	.word	0x0001c885
   13088:	0001c893 	.word	0x0001c893
   1308c:	0001c8a0 	.word	0x0001c8a0
   13090:	0001c8b0 	.word	0x0001c8b0
   13094:	0001c8bd 	.word	0x0001c8bd

00013098 <root_disk_info>:

void root_disk_info(void)
{
    print_disk_info(fs);
   13098:	e59f3004 	ldr	r3, [pc, #4]	; 130a4 <root_disk_info+0xc>
   1309c:	e5930000 	ldr	r0, [r3]
   130a0:	eaffffb6 	b	12f80 <print_disk_info>
   130a4:	40001380 	.word	0x40001380

000130a8 <rootDirectory_files_stream>:
{

    static int idx = 0;

    /* If reset, we need to reset the dir */
    if(reset)
   130a8:	e3500000 	cmp	r0, #0
 * has been reached.
 *
 * Assert (1) reset whenever you want to re-start
 */
char rootDirectory_files_stream(int reset)
{
   130ac:	e92d4010 	push	{r4, lr}

    static int idx = 0;

    /* If reset, we need to reset the dir */
    if(reset)
   130b0:	0a000004 	beq	130c8 <rootDirectory_files_stream+0x20>
    {
        fat_reset_dir(dd);
   130b4:	e59f3070 	ldr	r3, [pc, #112]	; 1312c <rootDirectory_files_stream+0x84>
   130b8:	e5930000 	ldr	r0, [r3]
   130bc:	eb0008c1 	bl	153c8 <fat_reset_dir>
        return 0;
   130c0:	e3a00000 	mov	r0, #0
   130c4:	ea000016 	b	13124 <rootDirectory_files_stream+0x7c>
    /* Whenever IDX is zero, we're gonna start a new file,
       * so read a new one.
       * if there's no new file,
       * return 0, because it's over
       */
    if(idx == 0)
   130c8:	e59f3060 	ldr	r3, [pc, #96]	; 13130 <rootDirectory_files_stream+0x88>
   130cc:	e5932000 	ldr	r2, [r3]
   130d0:	e3520000 	cmp	r2, #0
   130d4:	e1a04003 	mov	r4, r3
   130d8:	0a000008 	beq	13100 <rootDirectory_files_stream+0x58>
    /* If we've reached the end of a string,
       * return comma instead of \0,
       * so the list is comma delimited,
       * and terminated with a zero
       */
    if(dir_entry.long_name[idx]=='\0')
   130dc:	e5942000 	ldr	r2, [r4]
   130e0:	e59f104c 	ldr	r1, [pc, #76]	; 13134 <rootDirectory_files_stream+0x8c>
   130e4:	e7d10002 	ldrb	r0, [r1, r2]
   130e8:	e59f3040 	ldr	r3, [pc, #64]	; 13130 <rootDirectory_files_stream+0x88>
   130ec:	e3500000 	cmp	r0, #0
    {
        idx = 0;
   130f0:	05830000 	streq	r0, [r3]
        return ',';
   130f4:	03a0002c 	moveq	r0, #44	; 0x2c
    /* If we've reached the end of a string,
       * return comma instead of \0,
       * so the list is comma delimited,
       * and terminated with a zero
       */
    if(dir_entry.long_name[idx]=='\0')
   130f8:	0a000009 	beq	13124 <rootDirectory_files_stream+0x7c>
   130fc:	ea000006 	b	1311c <rootDirectory_files_stream+0x74>
       * if there's no new file,
       * return 0, because it's over
       */
    if(idx == 0)
    {
        if(fat_read_dir(dd,&dir_entry)==0)
   13100:	e59f3024 	ldr	r3, [pc, #36]	; 1312c <rootDirectory_files_stream+0x84>
   13104:	e59f1028 	ldr	r1, [pc, #40]	; 13134 <rootDirectory_files_stream+0x8c>
   13108:	e5930000 	ldr	r0, [r3]
   1310c:	eb0008b5 	bl	153e8 <fat_read_dir>
   13110:	e3500000 	cmp	r0, #0
   13114:	1afffff0 	bne	130dc <rootDirectory_files_stream+0x34>
   13118:	ea000001 	b	13124 <rootDirectory_files_stream+0x7c>
        idx = 0;
        return ',';
    }


    return dir_entry.long_name[idx++];
   1311c:	e2822001 	add	r2, r2, #1
   13120:	e5832000 	str	r2, [r3]

}
   13124:	e8bd4010 	pop	{r4, lr}
   13128:	e12fff1e 	bx	lr
   1312c:	400013bc 	.word	0x400013bc
   13130:	400008f0 	.word	0x400008f0
   13134:	40001384 	.word	0x40001384

00013138 <rootDirectory_files>:
//Pre: buf is an array of characters at least as big as len
//		len is the size of the array to read
//Post: buf contains the characters of the filenames in Root, starting at the first file
//		and ending after len characters
int rootDirectory_files(char* buf, int len)
{
   13138:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    int i;
    int num=0;
    /* Loop will walk through every file in directory dd */
    fat_reset_dir(dd);
   1313c:	e59f708c 	ldr	r7, [pc, #140]	; 131d0 <rootDirectory_files+0x98>
//Pre: buf is an array of characters at least as big as len
//		len is the size of the array to read
//Post: buf contains the characters of the filenames in Root, starting at the first file
//		and ending after len characters
int rootDirectory_files(char* buf, int len)
{
   13140:	e1a06000 	mov	r6, r0
    int i;
    int num=0;
    /* Loop will walk through every file in directory dd */
    fat_reset_dir(dd);
   13144:	e5970000 	ldr	r0, [r7]
//Pre: buf is an array of characters at least as big as len
//		len is the size of the array to read
//Post: buf contains the characters of the filenames in Root, starting at the first file
//		and ending after len characters
int rootDirectory_files(char* buf, int len)
{
   13148:	e1a04001 	mov	r4, r1
    int i;
    int num=0;
   1314c:	e3a05000 	mov	r5, #0
    /* Loop will walk through every file in directory dd */
    fat_reset_dir(dd);
   13150:	eb00089c 	bl	153c8 <fat_reset_dir>
    while(fat_read_dir(dd,&dir_entry))
   13154:	ea000012 	b	131a4 <rootDirectory_files+0x6c>
        while(dir_entry.long_name[i]!='\0')
        {
            /* And copy each character into buf */
            *buf++=dir_entry.long_name[i++];
            len--;
            if(len==1)
   13158:	e3540001 	cmp	r4, #1
        i = 0;
        /* Spin through the filename */
        while(dir_entry.long_name[i]!='\0')
        {
            /* And copy each character into buf */
            *buf++=dir_entry.long_name[i++];
   1315c:	e5c32000 	strb	r2, [r3]
   13160:	e1a03006 	mov	r3, r6
            len--;
            if(len==1)
            {
                /* Buf if we ever get to the end of buf, quit */
                *buf='\0';
   13164:	03a02000 	moveq	r2, #0
   13168:	05c62000 	strbeq	r2, [r6]
   1316c:	0a00000a 	beq	1319c <rootDirectory_files+0x64>
    fat_reset_dir(dd);
    while(fat_read_dir(dd,&dir_entry))
    {
        i = 0;
        /* Spin through the filename */
        while(dir_entry.long_name[i]!='\0')
   13170:	e5f12001 	ldrb	r2, [r1, #1]!
   13174:	e3520000 	cmp	r2, #0
   13178:	e2836001 	add	r6, r3, #1
   1317c:	e2444001 	sub	r4, r4, #1
   13180:	1afffff4 	bne	13158 <rootDirectory_files+0x20>
                /* Buf if we ever get to the end of buf, quit */
                *buf='\0';
                return 1;
            }
        }
        *buf++=',';
   13184:	e3a0102c 	mov	r1, #44	; 0x2c
        num++;
        len--;
        if(len==1)
   13188:	e3540001 	cmp	r4, #1
                /* Buf if we ever get to the end of buf, quit */
                *buf='\0';
                return 1;
            }
        }
        *buf++=',';
   1318c:	e5c31000 	strb	r1, [r3]
        num++;
   13190:	e2855001 	add	r5, r5, #1
        len--;
        if(len==1)
   13194:	1a000002 	bne	131a4 <rootDirectory_files+0x6c>
        {
            /* Buf if we ever get to the end of buf, quit */
            *buf='\0';
   13198:	e5c32001 	strb	r2, [r3, #1]
            return 1;
   1319c:	e1a05004 	mov	r5, r4
   131a0:	ea000007 	b	131c4 <rootDirectory_files+0x8c>
{
    int i;
    int num=0;
    /* Loop will walk through every file in directory dd */
    fat_reset_dir(dd);
    while(fat_read_dir(dd,&dir_entry))
   131a4:	e5970000 	ldr	r0, [r7]
   131a8:	e59f1024 	ldr	r1, [pc, #36]	; 131d4 <rootDirectory_files+0x9c>
   131ac:	eb00088d 	bl	153e8 <fat_read_dir>
   131b0:	e3500000 	cmp	r0, #0
   131b4:	159f101c 	ldrne	r1, [pc, #28]	; 131d8 <rootDirectory_files+0xa0>
   131b8:	11a03006 	movne	r3, r6
   131bc:	1affffeb 	bne	13170 <rootDirectory_files+0x38>
            /* Buf if we ever get to the end of buf, quit */
            *buf='\0';
            return 1;
        }
    }
    *buf='\0';
   131c0:	e5c60000 	strb	r0, [r6]
    return num;
}
   131c4:	e1a00005 	mov	r0, r5
   131c8:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   131cc:	e12fff1e 	bx	lr
   131d0:	400013bc 	.word	0x400013bc
   131d4:	40001384 	.word	0x40001384
   131d8:	40001383 	.word	0x40001383

000131dc <root_format>:

void root_format(void)
{
   131dc:	e92d4030 	push	{r4, r5, lr}
    fat_reset_dir(dd);
   131e0:	e59f403c 	ldr	r4, [pc, #60]	; 13224 <root_format+0x48>
   131e4:	e5940000 	ldr	r0, [r4]
   131e8:	eb000876 	bl	153c8 <fat_reset_dir>
    while(fat_read_dir(dd,&dir_entry))
    {
        fat_delete_file(fs,&dir_entry);
   131ec:	e59f5034 	ldr	r5, [pc, #52]	; 13228 <root_format+0x4c>
}

void root_format(void)
{
    fat_reset_dir(dd);
    while(fat_read_dir(dd,&dir_entry))
   131f0:	ea000004 	b	13208 <root_format+0x2c>
    {
        fat_delete_file(fs,&dir_entry);
   131f4:	e5950000 	ldr	r0, [r5]
   131f8:	e59f102c 	ldr	r1, [pc, #44]	; 1322c <root_format+0x50>
   131fc:	eb000960 	bl	15784 <fat_delete_file>
        fat_reset_dir(dd);
   13200:	e5940000 	ldr	r0, [r4]
   13204:	eb00086f 	bl	153c8 <fat_reset_dir>
}

void root_format(void)
{
    fat_reset_dir(dd);
    while(fat_read_dir(dd,&dir_entry))
   13208:	e5940000 	ldr	r0, [r4]
   1320c:	e59f1018 	ldr	r1, [pc, #24]	; 1322c <root_format+0x50>
   13210:	eb000874 	bl	153e8 <fat_read_dir>
   13214:	e3500000 	cmp	r0, #0
   13218:	1afffff5 	bne	131f4 <root_format+0x18>
    {
        fat_delete_file(fs,&dir_entry);
        fat_reset_dir(dd);
    }
}
   1321c:	e8bd4030 	pop	{r4, r5, lr}
   13220:	e12fff1e 	bx	lr
   13224:	400013bc 	.word	0x400013bc
   13228:	40001380 	.word	0x40001380
   1322c:	40001384 	.word	0x40001384

00013230 <root_delete>:

int root_delete(char* filename)
{
   13230:	e92d4010 	push	{r4, lr}
    if(find_file_in_dir(fs,dd,filename,&dir_entry))
   13234:	e59f303c 	ldr	r3, [pc, #60]	; 13278 <root_delete+0x48>
   13238:	e59f403c 	ldr	r4, [pc, #60]	; 1327c <root_delete+0x4c>
        fat_reset_dir(dd);
    }
}

int root_delete(char* filename)
{
   1323c:	e1a02000 	mov	r2, r0
    if(find_file_in_dir(fs,dd,filename,&dir_entry))
   13240:	e5931000 	ldr	r1, [r3]
   13244:	e5940000 	ldr	r0, [r4]
   13248:	e59f3030 	ldr	r3, [pc, #48]	; 13280 <root_delete+0x50>
   1324c:	eb000a6b 	bl	15c00 <find_file_in_dir>
   13250:	e3500000 	cmp	r0, #0
    {
        fat_delete_file(fs,&dir_entry);
        return 0;
    }
    return 1;
   13254:	03a00001 	moveq	r0, #1
    }
}

int root_delete(char* filename)
{
    if(find_file_in_dir(fs,dd,filename,&dir_entry))
   13258:	0a000004 	beq	13270 <root_delete+0x40>
    {
        fat_delete_file(fs,&dir_entry);
   1325c:	e5940000 	ldr	r0, [r4]
   13260:	e59f1018 	ldr	r1, [pc, #24]	; 13280 <root_delete+0x50>
   13264:	eb000946 	bl	15784 <fat_delete_file>
        return 0;
   13268:	e3a00000 	mov	r0, #0
   1326c:	eaffffff 	b	13270 <root_delete+0x40>
    }
    return 1;
}
   13270:	e8bd4010 	pop	{r4, lr}
   13274:	e12fff1e 	bx	lr
   13278:	400013bc 	.word	0x400013bc
   1327c:	40001380 	.word	0x40001380
   13280:	40001384 	.word	0x40001384

00013284 <sd_raw_send_byte>:
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    S0SPDR = b;
   13284:	e59f3010 	ldr	r3, [pc, #16]	; 1329c <sd_raw_send_byte+0x18>
   13288:	e5830008 	str	r0, [r3, #8]
    /* wait for byte to be shifted out */
    while(!(S0SPSR & 0x80));
   1328c:	e5932004 	ldr	r2, [r3, #4]
   13290:	e3120080 	tst	r2, #128	; 0x80
   13294:	0afffffc 	beq	1328c <sd_raw_send_byte+0x8>
}
   13298:	e12fff1e 	bx	lr
   1329c:	e0020000 	.word	0xe0020000

000132a0 <sd_raw_rec_byte>:
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte(void)
{
    /* send dummy data for receiving some */
    S0SPDR = 0xff;
   132a0:	e59f3020 	ldr	r3, [pc, #32]	; 132c8 <sd_raw_rec_byte+0x28>
   132a4:	e3a020ff 	mov	r2, #255	; 0xff
   132a8:	e5832008 	str	r2, [r3, #8]
    while(!(S0SPSR & 0x80));
   132ac:	e5932004 	ldr	r2, [r3, #4]
   132b0:	e3120080 	tst	r2, #128	; 0x80
   132b4:	0afffffc 	beq	132ac <sd_raw_rec_byte+0xc>

    return S0SPDR;
   132b8:	e59f3008 	ldr	r3, [pc, #8]	; 132c8 <sd_raw_rec_byte+0x28>
   132bc:	e5930008 	ldr	r0, [r3, #8]
   132c0:	e20000ff 	and	r0, r0, #255	; 0xff
}
   132c4:	e12fff1e 	bx	lr
   132c8:	e0020000 	.word	0xe0020000

000132cc <sd_raw_send_command>:
 * \param[in] command The command to send.
 * \param[in] arg The argument for command.
 * \returns The command answer.
 */
uint8_t sd_raw_send_command(uint8_t command, uint32_t arg)
{
   132cc:	e92d4030 	push	{r4, r5, lr}
   132d0:	e1a05000 	mov	r5, r0
   132d4:	e1a04001 	mov	r4, r1
    uint8_t response;

    /* wait some clock cycles */
    sd_raw_rec_byte();
   132d8:	ebfffff0 	bl	132a0 <sd_raw_rec_byte>

    /* send command via SPI */
    sd_raw_send_byte(0x40 | command);
   132dc:	e3850040 	orr	r0, r5, #64	; 0x40
   132e0:	ebffffe7 	bl	13284 <sd_raw_send_byte>
    sd_raw_send_byte((arg >> 24) & 0xff);
   132e4:	e1a00c24 	lsr	r0, r4, #24
   132e8:	ebffffe5 	bl	13284 <sd_raw_send_byte>
    }

    unselect_card();

    return 1;
}
   132ec:	e1a00824 	lsr	r0, r4, #16
    sd_raw_rec_byte();

    /* send command via SPI */
    sd_raw_send_byte(0x40 | command);
    sd_raw_send_byte((arg >> 24) & 0xff);
    sd_raw_send_byte((arg >> 16) & 0xff);
   132f0:	e20000ff 	and	r0, r0, #255	; 0xff
   132f4:	ebffffe2 	bl	13284 <sd_raw_send_byte>
    }

    unselect_card();

    return 1;
}
   132f8:	e1a00424 	lsr	r0, r4, #8

    /* send command via SPI */
    sd_raw_send_byte(0x40 | command);
    sd_raw_send_byte((arg >> 24) & 0xff);
    sd_raw_send_byte((arg >> 16) & 0xff);
    sd_raw_send_byte((arg >> 8) & 0xff);
   132fc:	e20000ff 	and	r0, r0, #255	; 0xff
   13300:	ebffffdf 	bl	13284 <sd_raw_send_byte>
    }

    unselect_card();

    return 1;
}
   13304:	e20400ff 	and	r0, r4, #255	; 0xff
    /* send command via SPI */
    sd_raw_send_byte(0x40 | command);
    sd_raw_send_byte((arg >> 24) & 0xff);
    sd_raw_send_byte((arg >> 16) & 0xff);
    sd_raw_send_byte((arg >> 8) & 0xff);
    sd_raw_send_byte((arg >> 0) & 0xff);
   13308:	ebffffdd 	bl	13284 <sd_raw_send_byte>
    switch(command)
   1330c:	e3550000 	cmp	r5, #0
    {
        case CMD_GO_IDLE_STATE:
           sd_raw_send_byte(0x95);
   13310:	03a00095 	moveq	r0, #149	; 0x95
    sd_raw_send_byte(0x40 | command);
    sd_raw_send_byte((arg >> 24) & 0xff);
    sd_raw_send_byte((arg >> 16) & 0xff);
    sd_raw_send_byte((arg >> 8) & 0xff);
    sd_raw_send_byte((arg >> 0) & 0xff);
    switch(command)
   13314:	0a000002 	beq	13324 <sd_raw_send_command+0x58>
   13318:	e3550008 	cmp	r5, #8
           break;
        case CMD_SEND_IF_COND:
           sd_raw_send_byte(0x87);
           break;
        default:
           sd_raw_send_byte(0xff);
   1331c:	13a000ff 	movne	r0, #255	; 0xff
    sd_raw_send_byte(0x40 | command);
    sd_raw_send_byte((arg >> 24) & 0xff);
    sd_raw_send_byte((arg >> 16) & 0xff);
    sd_raw_send_byte((arg >> 8) & 0xff);
    sd_raw_send_byte((arg >> 0) & 0xff);
    switch(command)
   13320:	0a000002 	beq	13330 <sd_raw_send_command+0x64>
    {
        case CMD_GO_IDLE_STATE:
           sd_raw_send_byte(0x95);
   13324:	ebffffd6 	bl	13284 <sd_raw_send_byte>
 * \param[in] command The command to send.
 * \param[in] arg The argument for command.
 * \returns The command answer.
 */
uint8_t sd_raw_send_command(uint8_t command, uint32_t arg)
{
   13328:	e3a0400a 	mov	r4, #10
   1332c:	ea000001 	b	13338 <sd_raw_send_command+0x6c>
    {
        case CMD_GO_IDLE_STATE:
           sd_raw_send_byte(0x95);
           break;
        case CMD_SEND_IF_COND:
           sd_raw_send_byte(0x87);
   13330:	e3a00087 	mov	r0, #135	; 0x87
   13334:	eafffffa 	b	13324 <sd_raw_send_command+0x58>
    }
    
    /* receive response */
    for(uint8_t i = 0; i < 10; ++i)
    {
        response = sd_raw_rec_byte();
   13338:	ebffffd8 	bl	132a0 <sd_raw_rec_byte>
        if(response != 0xff)
   1333c:	e35000ff 	cmp	r0, #255	; 0xff
   13340:	1a000002 	bne	13350 <sd_raw_send_command+0x84>
   13344:	e2444001 	sub	r4, r4, #1
           sd_raw_send_byte(0xff);
           break;
    }
    
    /* receive response */
    for(uint8_t i = 0; i < 10; ++i)
   13348:	e21440ff 	ands	r4, r4, #255	; 0xff
   1334c:	1afffff9 	bne	13338 <sd_raw_send_command+0x6c>
        if(response != 0xff)
            break;
    }

    return response;
}
   13350:	e8bd4030 	pop	{r4, r5, lr}
   13354:	e12fff1e 	bx	lr

00013358 <sd_raw_available>:
 * \returns 1 if the card is available, 0 if it is not.
 */
uint8_t sd_raw_available()
{
    return get_pin_available() == 0x00;
}
   13358:	e3a00001 	mov	r0, #1
   1335c:	e12fff1e 	bx	lr

00013360 <sd_raw_locked>:
 * \returns 1 if the card is locked, 0 if it is not.
 */
uint8_t sd_raw_locked()
{
    return get_pin_locked() == 0x00;
}
   13360:	e3a00000 	mov	r0, #0
   13364:	e12fff1e 	bx	lr

00013368 <sd_raw_sync>:
 *
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_write
 */
uint8_t sd_raw_sync()
{
   13368:	e92d4010 	push	{r4, lr}
#if SD_RAW_WRITE_BUFFERING
    if(raw_block_written)
   1336c:	e59f4030 	ldr	r4, [pc, #48]	; 133a4 <sd_raw_sync+0x3c>
   13370:	e5d43000 	ldrb	r3, [r4]
   13374:	e3530000 	cmp	r3, #0
        return 1;
   13378:	13a00001 	movne	r0, #1
 * \see sd_raw_write
 */
uint8_t sd_raw_sync()
{
#if SD_RAW_WRITE_BUFFERING
    if(raw_block_written)
   1337c:	1a000006 	bne	1339c <sd_raw_sync+0x34>
        return 1;
    if(!sd_raw_write(raw_block_address, raw_block, sizeof(raw_block)))
   13380:	e9940003 	ldmib	r4, {r0, r1}
   13384:	e284200c 	add	r2, r4, #12
   13388:	e3a03c02 	mov	r3, #512	; 0x200
   1338c:	eb00012c 	bl	13844 <sd_raw_write>
   13390:	e3500000 	cmp	r0, #0
        return 0;
    raw_block_written = 1;
   13394:	13a00001 	movne	r0, #1
   13398:	15c40000 	strbne	r0, [r4]
#endif
    return 1;
}
   1339c:	e8bd4010 	pop	{r4, lr}
   133a0:	e12fff1e 	bx	lr
   133a4:	400008f4 	.word	0x400008f4

000133a8 <sd_raw_read>:
 * \param[in] length The number of bytes to read.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_write_interval
 */
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
   133a8:	e92d4fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        if(read_length > length)
            read_length = length;
        
#if !SD_RAW_SAVE_RAM
        /* check if the requested data is cached */
        if(block_address != raw_block_address)
   133ac:	e59fa174 	ldr	sl, [pc, #372]	; 13528 <sd_raw_read+0x180>
 * \param[in] length The number of bytes to read.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_write_interval
 */
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
   133b0:	e58d0008 	str	r0, [sp, #8]
   133b4:	e58d100c 	str	r1, [sp, #12]
   133b8:	e1a07002 	mov	r7, r2
   133bc:	e1a08003 	mov	r8, r3
            }
#else
            /* read byte block */
            uint8_t* cache = raw_block;
            for(uint16_t i = 0; i < 512; ++i)
                *cache++ = sd_raw_rec_byte();
   133c0:	e28a900c 	add	r9, sl, #12
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
    offset_t block_address;
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
   133c4:	ea000051 	b	13510 <sd_raw_read+0x168>
    {
        /* determine byte count to read at once */
        block_offset = offset & 0x01ff;
   133c8:	e28d2008 	add	r2, sp, #8
   133cc:	e8920006 	ldm	r2, {r1, r2}
   133d0:	e59f3154 	ldr	r3, [pc, #340]	; 1352c <sd_raw_read+0x184>
   133d4:	e0011003 	and	r1, r1, r3
   133d8:	e3a04000 	mov	r4, #0
        block_address = offset - block_offset;
        read_length = 512 - block_offset; /* read up to block border */
   133dc:	e2616c02 	rsb	r6, r1, #512	; 0x200
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    {
        /* determine byte count to read at once */
        block_offset = offset & 0x01ff;
   133e0:	e0022004 	and	r2, r2, r4
        block_address = offset - block_offset;
        read_length = 512 - block_offset; /* read up to block border */
   133e4:	e1a06806 	lsl	r6, r6, #16
    uint16_t read_length;
    while(length > 0)
    {
        /* determine byte count to read at once */
        block_offset = offset & 0x01ff;
        block_address = offset - block_offset;
   133e8:	e28d5008 	add	r5, sp, #8
   133ec:	e8950030 	ldm	r5, {r4, r5}
        read_length = 512 - block_offset; /* read up to block border */
   133f0:	e1a06826 	lsr	r6, r6, #16
    uint16_t read_length;
    while(length > 0)
    {
        /* determine byte count to read at once */
        block_offset = offset & 0x01ff;
        block_address = offset - block_offset;
   133f4:	e0544001 	subs	r4, r4, r1
   133f8:	e0c55002 	sbc	r5, r5, r2
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    {
        /* determine byte count to read at once */
        block_offset = offset & 0x01ff;
   133fc:	e88d0006 	stm	sp, {r1, r2}
        block_address = offset - block_offset;
        read_length = 512 - block_offset; /* read up to block border */
        if(read_length > length)
   13400:	e1560008 	cmp	r6, r8
            read_length = length;
        
#if !SD_RAW_SAVE_RAM
        /* check if the requested data is cached */
        if(block_address != raw_block_address)
   13404:	e99a000c 	ldmib	sl, {r2, r3}
        /* determine byte count to read at once */
        block_offset = offset & 0x01ff;
        block_address = offset - block_offset;
        read_length = 512 - block_offset; /* read up to block border */
        if(read_length > length)
            read_length = length;
   13408:	81a06808 	lslhi	r6, r8, #16
   1340c:	81a06826 	lsrhi	r6, r6, #16
        
#if !SD_RAW_SAVE_RAM
        /* check if the requested data is cached */
        if(block_address != raw_block_address)
   13410:	e1550003 	cmp	r5, r3
   13414:	01540002 	cmpeq	r4, r2
   13418:	0a00002e 	beq	134d8 <sd_raw_read+0x130>
#endif
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
   1341c:	ebffffd1 	bl	13368 <sd_raw_sync>
   13420:	e3500000 	cmp	r0, #0
   13424:	0a00003c 	beq	1351c <sd_raw_read+0x174>
                return 0;
#endif

            /* address card */
            select_card();
   13428:	e59f3100 	ldr	r3, [pc, #256]	; 13530 <sd_raw_read+0x188>
   1342c:	e593200c 	ldr	r2, [r3, #12]
   13430:	e3822080 	orr	r2, r2, #128	; 0x80
   13434:	e583200c 	str	r2, [r3, #12]

            /* send single block request */
#if SD_RAW_SDHC
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
   13438:	e5da320c 	ldrb	r3, [sl, #524]	; 0x20c
   1343c:	e3130004 	tst	r3, #4
   13440:	11a014a4 	lsrne	r1, r4, #9
   13444:	11811b85 	orrne	r1, r1, r5, lsl #23
   13448:	01a01004 	moveq	r1, r4
   1344c:	e3a00011 	mov	r0, #17
   13450:	ebffff9d 	bl	132cc <sd_raw_send_command>
   13454:	e3500000 	cmp	r0, #0
   13458:	0a000005 	beq	13474 <sd_raw_read+0xcc>
#else
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, block_address))
#endif
            {
                unselect_card();
   1345c:	e59f30cc 	ldr	r3, [pc, #204]	; 13530 <sd_raw_read+0x188>
   13460:	e5932004 	ldr	r2, [r3, #4]
   13464:	e3822080 	orr	r2, r2, #128	; 0x80
   13468:	e5832004 	str	r2, [r3, #4]
                return 0;
   1346c:	e3a00000 	mov	r0, #0
   13470:	ea000029 	b	1351c <sd_raw_read+0x174>
            }

            /* wait for data block (start byte 0xfe) */
            while(sd_raw_rec_byte() != 0xfe);
   13474:	ebffff89 	bl	132a0 <sd_raw_rec_byte>
   13478:	e35000fe 	cmp	r0, #254	; 0xfe
   1347c:	1afffffc 	bne	13474 <sd_raw_read+0xcc>
   13480:	e3a0b000 	mov	fp, #0
            }
#else
            /* read byte block */
            uint8_t* cache = raw_block;
            for(uint16_t i = 0; i < 512; ++i)
                *cache++ = sd_raw_rec_byte();
   13484:	ebffff85 	bl	132a0 <sd_raw_rec_byte>
   13488:	e7c9000b 	strb	r0, [r9, fp]
   1348c:	e28bb001 	add	fp, fp, #1
                    *buffer++ = b;
            }
#else
            /* read byte block */
            uint8_t* cache = raw_block;
            for(uint16_t i = 0; i < 512; ++i)
   13490:	e35b0c02 	cmp	fp, #512	; 0x200
   13494:	1afffffa 	bne	13484 <sd_raw_read+0xdc>
                *cache++ = sd_raw_rec_byte();
            raw_block_address = block_address;
   13498:	e59f3088 	ldr	r3, [pc, #136]	; 13528 <sd_raw_read+0x180>
   1349c:	e9830030 	stmib	r3, {r4, r5}

            memcpy(buffer, raw_block + block_offset, read_length);
   134a0:	e59d4000 	ldr	r4, [sp]
   134a4:	e1a02006 	mov	r2, r6
   134a8:	e0891004 	add	r1, r9, r4
   134ac:	e1a00007 	mov	r0, r7
   134b0:	eb000a8c 	bl	15ee8 <memcpy>
            buffer += read_length;
#endif
            
            /* read crc16 */
            sd_raw_rec_byte();
   134b4:	ebffff79 	bl	132a0 <sd_raw_rec_byte>
            sd_raw_rec_byte();
   134b8:	ebffff78 	bl	132a0 <sd_raw_rec_byte>
            
            /* deaddress card */
            unselect_card();
   134bc:	e59f306c 	ldr	r3, [pc, #108]	; 13530 <sd_raw_read+0x188>
   134c0:	e5932004 	ldr	r2, [r3, #4]
   134c4:	e3822080 	orr	r2, r2, #128	; 0x80
   134c8:	e5832004 	str	r2, [r3, #4]
            for(uint16_t i = 0; i < 512; ++i)
                *cache++ = sd_raw_rec_byte();
            raw_block_address = block_address;

            memcpy(buffer, raw_block + block_offset, read_length);
            buffer += read_length;
   134cc:	e0877006 	add	r7, r7, r6
            
            /* deaddress card */
            unselect_card();

            /* let card some time to finish */
            sd_raw_rec_byte();
   134d0:	ebffff72 	bl	132a0 <sd_raw_rec_byte>
   134d4:	ea000006 	b	134f4 <sd_raw_read+0x14c>
        }
#if !SD_RAW_SAVE_RAM
        else
        {
            /* use cached data */
            memcpy(buffer, raw_block + block_offset, read_length);
   134d8:	e59d2000 	ldr	r2, [sp]
   134dc:	e59f1050 	ldr	r1, [pc, #80]	; 13534 <sd_raw_read+0x18c>
   134e0:	e1a00007 	mov	r0, r7
   134e4:	e0811002 	add	r1, r1, r2
   134e8:	e1a02006 	mov	r2, r6
   134ec:	eb000a7d 	bl	15ee8 <memcpy>
            buffer += read_length;
   134f0:	e0877006 	add	r7, r7, r6
        }
#endif

        length -= read_length;
        offset += read_length;
   134f4:	e28d4008 	add	r4, sp, #8
   134f8:	e8940018 	ldm	r4, {r3, r4}
   134fc:	e0933006 	adds	r3, r3, r6
   13500:	e2a44000 	adc	r4, r4, #0
   13504:	e58d3008 	str	r3, [sp, #8]
   13508:	e58d400c 	str	r4, [sp, #12]
            memcpy(buffer, raw_block + block_offset, read_length);
            buffer += read_length;
        }
#endif

        length -= read_length;
   1350c:	e0668008 	rsb	r8, r6, r8
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
    offset_t block_address;
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
   13510:	e3580000 	cmp	r8, #0
   13514:	1affffab 	bne	133c8 <sd_raw_read+0x20>

        length -= read_length;
        offset += read_length;
    }

    return 1;
   13518:	e3a00001 	mov	r0, #1
}
   1351c:	e28dd010 	add	sp, sp, #16
   13520:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13524:	e12fff1e 	bx	lr
   13528:	400008f4 	.word	0x400008f4
   1352c:	000001ff 	.word	0x000001ff
   13530:	e0028000 	.word	0xe0028000
   13534:	40000900 	.word	0x40000900

00013538 <sd_raw_read_interval>:
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_write
 */
uint8_t sd_raw_read_interval(offset_t offset, uint8_t* buffer, uintptr_t interval, uintptr_t length, sd_raw_read_interval_handler_t callback, void* p)
{
   13538:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(!buffer || interval == 0 || length < interval || !callback)
   1353c:	e3520000 	cmp	r2, #0
   13540:	13530000 	cmpne	r3, #0
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_write
 */
uint8_t sd_raw_read_interval(offset_t offset, uint8_t* buffer, uintptr_t interval, uintptr_t length, sd_raw_read_interval_handler_t callback, void* p)
{
   13544:	e1a04000 	mov	r4, r0
   13548:	e1a05001 	mov	r5, r1
   1354c:	e59da024 	ldr	sl, [sp, #36]	; 0x24
   13550:	e59d9028 	ldr	r9, [sp, #40]	; 0x28
    if(!buffer || interval == 0 || length < interval || !callback)
   13554:	e1a08003 	mov	r8, r3
   13558:	e1a0b002 	mov	fp, r2
   1355c:	1a000001 	bne	13568 <sd_raw_read_interval+0x30>
        return 0;
   13560:	e3a00000 	mov	r0, #0
   13564:	ea00001d 	b	135e0 <sd_raw_read_interval+0xa8>
 * \returns 0 on failure, 1 on success
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_write
 */
uint8_t sd_raw_read_interval(offset_t offset, uint8_t* buffer, uintptr_t interval, uintptr_t length, sd_raw_read_interval_handler_t callback, void* p)
{
    if(!buffer || interval == 0 || length < interval || !callback)
   13568:	e15a0003 	cmp	sl, r3
   1356c:	23a03000 	movcs	r3, #0
   13570:	33a03001 	movcc	r3, #1
   13574:	e3590000 	cmp	r9, #0
   13578:	03833001 	orreq	r3, r3, #1
   1357c:	e3530000 	cmp	r3, #0
   13580:	1afffff6 	bne	13560 <sd_raw_read_interval+0x28>
         */
        if(!sd_raw_read(offset, buffer, interval))
            return 0;
        if(!callback(buffer, offset, p))
            break;
        offset += interval;
   13584:	e1a06008 	mov	r6, r8
   13588:	e3a07000 	mov	r7, #0
    while(length >= interval)
    {
        /* as reading is now buffered, we directly
         * hand over the request to sd_raw_read()
         */
        if(!sd_raw_read(offset, buffer, interval))
   1358c:	e1a00004 	mov	r0, r4
   13590:	e1a01005 	mov	r1, r5
   13594:	e1a0200b 	mov	r2, fp
   13598:	e1a03008 	mov	r3, r8
   1359c:	ebffff81 	bl	133a8 <sd_raw_read>
   135a0:	e3500000 	cmp	r0, #0
   135a4:	0affffed 	beq	13560 <sd_raw_read_interval+0x28>
            return 0;
        if(!callback(buffer, offset, p))
   135a8:	e1a0000b 	mov	r0, fp
   135ac:	e1a01004 	mov	r1, r4
   135b0:	e1a02005 	mov	r2, r5
   135b4:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
   135b8:	e1a0e00f 	mov	lr, pc
   135bc:	e12fff19 	bx	r9
   135c0:	e3500000 	cmp	r0, #0
   135c4:	0a000004 	beq	135dc <sd_raw_read_interval+0xa4>
 * \param[in] callback The function to call every interval bytes.
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_write
 */
uint8_t sd_raw_read_interval(offset_t offset, uint8_t* buffer, uintptr_t interval, uintptr_t length, sd_raw_read_interval_handler_t callback, void* p)
   135c8:	e0944006 	adds	r4, r4, r6
        if(!sd_raw_read(offset, buffer, interval))
            return 0;
        if(!callback(buffer, offset, p))
            break;
        offset += interval;
        length -= interval;
   135cc:	e068a00a 	rsb	sl, r8, sl
 * \param[in] callback The function to call every interval bytes.
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_write
 */
uint8_t sd_raw_read_interval(offset_t offset, uint8_t* buffer, uintptr_t interval, uintptr_t length, sd_raw_read_interval_handler_t callback, void* p)
   135d0:	e0a55007 	adc	r5, r5, r7
{
    if(!buffer || interval == 0 || length < interval || !callback)
        return 0;

#if !SD_RAW_SAVE_RAM
    while(length >= interval)
   135d4:	e15a0008 	cmp	sl, r8
   135d8:	2affffeb 	bcs	1358c <sd_raw_read_interval+0x54>
            break;
        offset += interval;
        length -= interval;
    }

    return 1;
   135dc:	e3a00001 	mov	r0, #1
    /* let card some time to finish */
    sd_raw_rec_byte();

    return 1;
#endif
}
   135e0:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135e4:	e12fff1e 	bx	lr

000135e8 <sd_raw_init>:
    /* enable inputs for reading card status */
    configure_pin_available();
    configure_pin_locked();

    /* enable outputs for MOSI, SCK, SS, input for MISO */
    configure_pin_mosi();
   135e8:	e59f3240 	ldr	r3, [pc, #576]	; 13830 <sd_raw_init+0x248>
   135ec:	e5932000 	ldr	r2, [r3]
   135f0:	e3822a01 	orr	r2, r2, #4096	; 0x1000
 * Initializes memory card communication.
 *
 * \returns 0 on failure, 1 on success.
 */
uint8_t sd_raw_init()
{
   135f4:	e92d4070 	push	{r4, r5, r6, lr}
    /* enable inputs for reading card status */
    configure_pin_available();
    configure_pin_locked();

    /* enable outputs for MOSI, SCK, SS, input for MISO */
    configure_pin_mosi();
   135f8:	e5832000 	str	r2, [r3]
    configure_pin_sck();
   135fc:	e5932000 	ldr	r2, [r3]
   13600:	e3822c01 	orr	r2, r2, #256	; 0x100
   13604:	e5832000 	str	r2, [r3]
    configure_pin_ss();
   13608:	e59f2224 	ldr	r2, [pc, #548]	; 13834 <sd_raw_init+0x24c>
   1360c:	e5921008 	ldr	r1, [r2, #8]
   13610:	e3811080 	orr	r1, r1, #128	; 0x80
   13614:	e5821008 	str	r1, [r2, #8]
    configure_pin_miso();
   13618:	e5931000 	ldr	r1, [r3]
   1361c:	e3811b01 	orr	r1, r1, #1024	; 0x400
   13620:	e5831000 	str	r1, [r3]

    unselect_card();
   13624:	e5923004 	ldr	r3, [r2, #4]
   13628:	e3833080 	orr	r3, r3, #128	; 0x80
   1362c:	e5823004 	str	r3, [r2, #4]

    /* initialize SPI with lowest frequency; max. 400kHz during identification mode of card */
    S0SPCCR = 150;  /* Set frequency to 400kHz */
   13630:	e59f3200 	ldr	r3, [pc, #512]	; 13838 <sd_raw_init+0x250>
   13634:	e3a01096 	mov	r1, #150	; 0x96
   13638:	e583100c 	str	r1, [r3, #12]
    S0SPCR = 0x38;
   1363c:	e3a01038 	mov	r1, #56	; 0x38
   13640:	e5831000 	str	r1, [r3]

    /* initialization procedure */
    sd_raw_card_type = 0;
   13644:	e59f31f0 	ldr	r3, [pc, #496]	; 1383c <sd_raw_init+0x254>
   13648:	e3a01000 	mov	r1, #0
   1364c:	e5c3120c 	strb	r1, [r3, #524]	; 0x20c
   13650:	e3a0500a 	mov	r5, #10
   13654:	e1a04002 	mov	r4, r2
   13658:	e2455001 	sub	r5, r5, #1

    /* card needs 74 cycles minimum to start up */
    for(uint8_t i = 0; i < 10; ++i)
    {
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
   1365c:	ebffff0f 	bl	132a0 <sd_raw_rec_byte>
    
    if(!sd_raw_available())
        return 0;

    /* card needs 74 cycles minimum to start up */
    for(uint8_t i = 0; i < 10; ++i)
   13660:	e21550ff 	ands	r5, r5, #255	; 0xff
   13664:	1afffffb 	bne	13658 <sd_raw_init+0x70>
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
    }

    /* address card */
    select_card();
   13668:	e594300c 	ldr	r3, [r4, #12]
   1366c:	e3833080 	orr	r3, r3, #128	; 0x80
   13670:	e584300c 	str	r3, [r4, #12]
   13674:	e3a04c02 	mov	r4, #512	; 0x200

    /* reset card */
    uint8_t response;
    for(uint16_t i = 0; ; ++i)
    {
        response = sd_raw_send_command(CMD_GO_IDLE_STATE, 0);
   13678:	e3a00000 	mov	r0, #0
   1367c:	e1a01000 	mov	r1, r0
   13680:	ebffff11 	bl	132cc <sd_raw_send_command>
        if(response == (1 << R1_IDLE_STATE))
   13684:	e3500001 	cmp	r0, #1

    /* reset card */
    uint8_t response;
    for(uint16_t i = 0; ; ++i)
    {
        response = sd_raw_send_command(CMD_GO_IDLE_STATE, 0);
   13688:	e1a05000 	mov	r5, r0
        if(response == (1 << R1_IDLE_STATE))
   1368c:	0a000004 	beq	136a4 <sd_raw_init+0xbc>
   13690:	e2444001 	sub	r4, r4, #1
   13694:	e1a04804 	lsl	r4, r4, #16
            break;

        if(i == 0x1ff)
   13698:	e1b04824 	lsrs	r4, r4, #16
   1369c:	1afffff5 	bne	13678 <sd_raw_init+0x90>
   136a0:	ea00003a 	b	13790 <sd_raw_init+0x1a8>
        }
    }

#if SD_RAW_SDHC
    /* check for version of SD card specification */
    response = sd_raw_send_command(CMD_SEND_IF_COND, 0x100 /* 2.7V - 3.6V */ | 0xaa /* test pattern */);
   136a4:	e3a00008 	mov	r0, #8
   136a8:	e59f1190 	ldr	r1, [pc, #400]	; 13840 <sd_raw_init+0x258>
   136ac:	ebffff06 	bl	132cc <sd_raw_send_command>
    if((response & (1 << R1_ILL_COMMAND)) == 0)
   136b0:	e3100004 	tst	r0, #4
   136b4:	1a00000d 	bne	136f0 <sd_raw_init+0x108>
    {
        sd_raw_rec_byte();
   136b8:	ebfffef8 	bl	132a0 <sd_raw_rec_byte>
        sd_raw_rec_byte();
   136bc:	ebfffef7 	bl	132a0 <sd_raw_rec_byte>
        if((sd_raw_rec_byte() & 0x01) == 0)
   136c0:	ebfffef6 	bl	132a0 <sd_raw_rec_byte>
   136c4:	e3100001 	tst	r0, #1
   136c8:	0a000045 	beq	137e4 <sd_raw_init+0x1fc>
            return 0; /* card operation voltage range doesn't match */
        if(sd_raw_rec_byte() != 0xaa)
   136cc:	ebfffef3 	bl	132a0 <sd_raw_rec_byte>
   136d0:	e35000aa 	cmp	r0, #170	; 0xaa
   136d4:	1a000042 	bne	137e4 <sd_raw_init+0x1fc>
            return 0; /* wrong test pattern */

        /* card conforms to SD 2 card specification */
        sd_raw_card_type |= (1 << SD_RAW_SPEC_2);
   136d8:	e59f315c 	ldr	r3, [pc, #348]	; 1383c <sd_raw_init+0x254>
   136dc:	e3a02002 	mov	r2, #2
   136e0:	e5c3220c 	strb	r2, [r3, #524]	; 0x20c
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
    }

    /* address card */
    select_card();
   136e4:	e3a04902 	mov	r4, #32768	; 0x8000
    }

    /* wait for card to get ready */
    for(uint16_t i = 0; ; ++i)
    {
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
   136e8:	e59f514c 	ldr	r5, [pc, #332]	; 1383c <sd_raw_init+0x254>
   136ec:	ea000009 	b	13718 <sd_raw_init+0x130>
    }
    else
#endif
    {
        /* determine SD/MMC card type */
        sd_raw_send_command(CMD_APP, 0);
   136f0:	e3a01000 	mov	r1, #0
   136f4:	e3a00037 	mov	r0, #55	; 0x37
   136f8:	ebfffef3 	bl	132cc <sd_raw_send_command>
        response = sd_raw_send_command(CMD_SD_SEND_OP_COND, 0);
   136fc:	e3a00029 	mov	r0, #41	; 0x29
   13700:	e3a01000 	mov	r1, #0
   13704:	ebfffef0 	bl	132cc <sd_raw_send_command>
        if((response & (1 << R1_ILL_COMMAND)) == 0)
   13708:	e3100004 	tst	r0, #4
        {
            /* card conforms to SD 1 card specification */
            sd_raw_card_type |= (1 << SD_RAW_SPEC_1);
   1370c:	059f3128 	ldreq	r3, [pc, #296]	; 1383c <sd_raw_init+0x254>
   13710:	05c3520c 	strbeq	r5, [r3, #524]	; 0x20c
   13714:	eafffff2 	b	136e4 <sd_raw_init+0xfc>
    }

    /* wait for card to get ready */
    for(uint16_t i = 0; ; ++i)
    {
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
   13718:	e5d5320c 	ldrb	r3, [r5, #524]	; 0x20c
   1371c:	e2131003 	ands	r1, r3, #3
            sd_raw_send_command(CMD_APP, 0);
            response = sd_raw_send_command(CMD_SD_SEND_OP_COND, arg);
        }
        else
        {
            response = sd_raw_send_command(CMD_SEND_OP_COND, 0);
   13720:	03a00001 	moveq	r0, #1
    }

    /* wait for card to get ready */
    for(uint16_t i = 0; ; ++i)
    {
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
   13724:	0a000008 	beq	1374c <sd_raw_init+0x164>
        {
            uint32_t arg = 0;
   13728:	e3130002 	tst	r3, #2
   1372c:	13a06101 	movne	r6, #1073741824	; 0x40000000
   13730:	03a06000 	moveq	r6, #0
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
                arg = 0x40000000;
#endif
            sd_raw_send_command(CMD_APP, 0);
   13734:	e3a01000 	mov	r1, #0
   13738:	e3a00037 	mov	r0, #55	; 0x37
   1373c:	ebfffee2 	bl	132cc <sd_raw_send_command>
            response = sd_raw_send_command(CMD_SD_SEND_OP_COND, arg);
   13740:	e3a00029 	mov	r0, #41	; 0x29
   13744:	e1a01006 	mov	r1, r6
   13748:	eaffffff 	b	1374c <sd_raw_init+0x164>
        }
        else
        {
            response = sd_raw_send_command(CMD_SEND_OP_COND, 0);
   1374c:	ebfffede 	bl	132cc <sd_raw_send_command>
        }

        if((response & (1 << R1_IDLE_STATE)) == 0)
   13750:	e2106001 	ands	r6, r0, #1
   13754:	0a000004 	beq	1376c <sd_raw_init+0x184>
   13758:	e2444001 	sub	r4, r4, #1
   1375c:	e1a04804 	lsl	r4, r4, #16
            break;

        if(i == 0x7fff)
   13760:	e1b04824 	lsrs	r4, r4, #16
   13764:	1affffeb 	bne	13718 <sd_raw_init+0x130>
   13768:	ea000008 	b	13790 <sd_raw_init+0x1a8>
            return 0;
        }
    }

#if SD_RAW_SDHC
    if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
   1376c:	e59f40c8 	ldr	r4, [pc, #200]	; 1383c <sd_raw_init+0x254>
   13770:	e5d4520c 	ldrb	r5, [r4, #524]	; 0x20c
   13774:	e3150002 	tst	r5, #2
   13778:	0a000010 	beq	137c0 <sd_raw_init+0x1d8>
    {
        if(sd_raw_send_command(CMD_READ_OCR, 0))
   1377c:	e3a0003a 	mov	r0, #58	; 0x3a
   13780:	e1a01006 	mov	r1, r6
   13784:	ebfffed0 	bl	132cc <sd_raw_send_command>
   13788:	e3500000 	cmp	r0, #0
   1378c:	0a000004 	beq	137a4 <sd_raw_init+0x1bc>
        {
            unselect_card();
   13790:	e59f309c 	ldr	r3, [pc, #156]	; 13834 <sd_raw_init+0x24c>
   13794:	e5932004 	ldr	r2, [r3, #4]
   13798:	e3822080 	orr	r2, r2, #128	; 0x80
   1379c:	e5832004 	str	r2, [r3, #4]
   137a0:	ea00000f 	b	137e4 <sd_raw_init+0x1fc>
            return 0;
        }

        if(sd_raw_rec_byte() & 0x40)
   137a4:	ebfffebd 	bl	132a0 <sd_raw_rec_byte>
   137a8:	e3100040 	tst	r0, #64	; 0x40
            sd_raw_card_type |= (1 << SD_RAW_SPEC_SDHC);
   137ac:	13855004 	orrne	r5, r5, #4
   137b0:	15c4520c 	strbne	r5, [r4, #524]	; 0x20c

        sd_raw_rec_byte();
   137b4:	ebfffeb9 	bl	132a0 <sd_raw_rec_byte>
        sd_raw_rec_byte();
   137b8:	ebfffeb8 	bl	132a0 <sd_raw_rec_byte>
        sd_raw_rec_byte();
   137bc:	ebfffeb7 	bl	132a0 <sd_raw_rec_byte>
    }
#endif

    /* set block size to 512 bytes */
    if(sd_raw_send_command(CMD_SET_BLOCKLEN, 512))
   137c0:	e3a00010 	mov	r0, #16
   137c4:	e3a01c02 	mov	r1, #512	; 0x200
   137c8:	ebfffebf 	bl	132cc <sd_raw_send_command>
   137cc:	e59f3060 	ldr	r3, [pc, #96]	; 13834 <sd_raw_init+0x24c>
    {
        unselect_card();
   137d0:	e5932004 	ldr	r2, [r3, #4]
        sd_raw_rec_byte();
    }
#endif

    /* set block size to 512 bytes */
    if(sd_raw_send_command(CMD_SET_BLOCKLEN, 512))
   137d4:	e3500000 	cmp	r0, #0
    {
        unselect_card();
   137d8:	e3822080 	orr	r2, r2, #128	; 0x80
   137dc:	e5832004 	str	r2, [r3, #4]
        sd_raw_rec_byte();
    }
#endif

    /* set block size to 512 bytes */
    if(sd_raw_send_command(CMD_SET_BLOCKLEN, 512))
   137e0:	0a000001 	beq	137ec <sd_raw_init+0x204>
    {
        unselect_card();
        return 0;
   137e4:	e3a00000 	mov	r0, #0
   137e8:	ea00000e 	b	13828 <sd_raw_init+0x240>

    /* deaddress card */
    unselect_card();

    /* switch to highest SPI frequency possible */
    S0SPCCR = 60; /* ~1MHz-- potentially can be faster */
   137ec:	e59f3044 	ldr	r3, [pc, #68]	; 13838 <sd_raw_init+0x250>
   137f0:	e3a0203c 	mov	r2, #60	; 0x3c
   137f4:	e583200c 	str	r2, [r3, #12]

#if !SD_RAW_SAVE_RAM
    /* the first block is likely to be accessed first, so precache it here */
    raw_block_address = (offset_t) -1;
   137f8:	e59f203c 	ldr	r2, [pc, #60]	; 1383c <sd_raw_init+0x254>
   137fc:	e3e00000 	mvn	r0, #0
   13800:	e3e01000 	mvn	r1, #0
#if SD_RAW_WRITE_BUFFERING
    raw_block_written = 1;
   13804:	e3a03001 	mov	r3, #1
    /* switch to highest SPI frequency possible */
    S0SPCCR = 60; /* ~1MHz-- potentially can be faster */

#if !SD_RAW_SAVE_RAM
    /* the first block is likely to be accessed first, so precache it here */
    raw_block_address = (offset_t) -1;
   13808:	e9820003 	stmib	r2, {r0, r1}
#if SD_RAW_WRITE_BUFFERING
    raw_block_written = 1;
   1380c:	e4c2300c 	strb	r3, [r2], #12
#endif
    if(!sd_raw_read(0, raw_block, sizeof(raw_block)))
   13810:	e3a00000 	mov	r0, #0
   13814:	e3a01000 	mov	r1, #0
   13818:	e3a03c02 	mov	r3, #512	; 0x200
   1381c:	ebfffee1 	bl	133a8 <sd_raw_read>
        return 0;
#endif

    return 1;
   13820:	e2900000 	adds	r0, r0, #0
   13824:	13a00001 	movne	r0, #1
}
   13828:	e8bd4070 	pop	{r4, r5, r6, lr}
   1382c:	e12fff1e 	bx	lr
   13830:	e002c000 	.word	0xe002c000
   13834:	e0028000 	.word	0xe0028000
   13838:	e0020000 	.word	0xe0020000
   1383c:	400008f4 	.word	0x400008f4
   13840:	000001aa 	.word	0x000001aa

00013844 <sd_raw_write>:
 * \param[in] length The number of bytes to write.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_read_interval
 */
uint8_t sd_raw_write(offset_t offset, const uint8_t* buffer, uintptr_t length)
{
   13844:	e92d4fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            write_length = length;
        
        /* Merge the data to write with the content of the block.
         * Use the cached block if available.
         */
        if(block_address != raw_block_address)
   13848:	e59f81b8 	ldr	r8, [pc, #440]	; 13a08 <sd_raw_write+0x1c4>
 * \param[in] length The number of bytes to write.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_read_interval
 */
uint8_t sd_raw_write(offset_t offset, const uint8_t* buffer, uintptr_t length)
{
   1384c:	e88d0003 	stm	sp, {r0, r1}
   13850:	e1a0a002 	mov	sl, r2
   13854:	e1a07003 	mov	r7, r3
                    return 0;
            }
            raw_block_address = block_address;
        }

        if(buffer != raw_block)
   13858:	e288900c 	add	r9, r8, #12
   1385c:	ea000063 	b	139f0 <sd_raw_write+0x1ac>
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
    {
        /* determine byte count to write at once */
        block_offset = offset & 0x01ff;
   13860:	e89d0006 	ldm	sp, {r1, r2}
   13864:	e59f31a0 	ldr	r3, [pc, #416]	; 13a0c <sd_raw_write+0x1c8>
   13868:	e0011003 	and	r1, r1, r3
   1386c:	e1a0b801 	lsl	fp, r1, #16
   13870:	e1a0b82b 	lsr	fp, fp, #16
   13874:	e3a04000 	mov	r4, #0
        block_address = offset - block_offset;
        write_length = 512 - block_offset; /* write up to block border */
   13878:	e26b6c02 	rsb	r6, fp, #512	; 0x200
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
    {
        /* determine byte count to write at once */
        block_offset = offset & 0x01ff;
   1387c:	e0022004 	and	r2, r2, r4
        block_address = offset - block_offset;
        write_length = 512 - block_offset; /* write up to block border */
   13880:	e1a06806 	lsl	r6, r6, #16
    uint16_t write_length;
    while(length > 0)
    {
        /* determine byte count to write at once */
        block_offset = offset & 0x01ff;
        block_address = offset - block_offset;
   13884:	e89d0030 	ldm	sp, {r4, r5}
        write_length = 512 - block_offset; /* write up to block border */
   13888:	e1a06826 	lsr	r6, r6, #16
    uint16_t write_length;
    while(length > 0)
    {
        /* determine byte count to write at once */
        block_offset = offset & 0x01ff;
        block_address = offset - block_offset;
   1388c:	e0544001 	subs	r4, r4, r1
   13890:	e0c55002 	sbc	r5, r5, r2
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
    {
        /* determine byte count to write at once */
        block_offset = offset & 0x01ff;
   13894:	e58d1008 	str	r1, [sp, #8]
   13898:	e58d200c 	str	r2, [sp, #12]
        block_address = offset - block_offset;
        write_length = 512 - block_offset; /* write up to block border */
        if(write_length > length)
   1389c:	e1560007 	cmp	r6, r7
            write_length = length;
        
        /* Merge the data to write with the content of the block.
         * Use the cached block if available.
         */
        if(block_address != raw_block_address)
   138a0:	e998000c 	ldmib	r8, {r2, r3}
        /* determine byte count to write at once */
        block_offset = offset & 0x01ff;
        block_address = offset - block_offset;
        write_length = 512 - block_offset; /* write up to block border */
        if(write_length > length)
            write_length = length;
   138a4:	81a06807 	lslhi	r6, r7, #16
   138a8:	81a06826 	lsrhi	r6, r6, #16
        
        /* Merge the data to write with the content of the block.
         * Use the cached block if available.
         */
        if(block_address != raw_block_address)
   138ac:	e1550003 	cmp	r5, r3
   138b0:	01540002 	cmpeq	r4, r2
   138b4:	0a00000f 	beq	138f8 <sd_raw_write+0xb4>
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
   138b8:	ebfffeaa 	bl	13368 <sd_raw_sync>
   138bc:	e3500000 	cmp	r0, #0
   138c0:	0a00002c 	beq	13978 <sd_raw_write+0x134>
                return 0;
#endif

            if(block_offset || write_length < 512)
   138c4:	e3560c02 	cmp	r6, #512	; 0x200
   138c8:	235b0000 	cmpcs	fp, #0
   138cc:	1a000001 	bne	138d8 <sd_raw_write+0x94>
            {
                if(!sd_raw_read(block_address, raw_block, sizeof(raw_block)))
                    return 0;
            }
            raw_block_address = block_address;
   138d0:	e9880030 	stmib	r8, {r4, r5}
   138d4:	ea000007 	b	138f8 <sd_raw_write+0xb4>
                return 0;
#endif

            if(block_offset || write_length < 512)
            {
                if(!sd_raw_read(block_address, raw_block, sizeof(raw_block)))
   138d8:	e1a00004 	mov	r0, r4
   138dc:	e1a01005 	mov	r1, r5
   138e0:	e59f2128 	ldr	r2, [pc, #296]	; 13a10 <sd_raw_write+0x1cc>
   138e4:	e3a03c02 	mov	r3, #512	; 0x200
   138e8:	ebfffeae 	bl	133a8 <sd_raw_read>
   138ec:	e3500000 	cmp	r0, #0
   138f0:	1afffff6 	bne	138d0 <sd_raw_write+0x8c>
   138f4:	ea00001f 	b	13978 <sd_raw_write+0x134>
                    return 0;
            }
            raw_block_address = block_address;
        }

        if(buffer != raw_block)
   138f8:	e15a0009 	cmp	sl, r9
   138fc:	1a000009 	bne	13928 <sd_raw_write+0xe4>
                return 1;
#endif
        }

        /* address card */
        select_card();
   13900:	e59f310c 	ldr	r3, [pc, #268]	; 13a14 <sd_raw_write+0x1d0>
   13904:	e593200c 	ldr	r2, [r3, #12]
   13908:	e3822080 	orr	r2, r2, #128	; 0x80
   1390c:	e583200c 	str	r2, [r3, #12]

        /* send single block request */
#if SD_RAW_SDHC
        if(sd_raw_send_command(CMD_WRITE_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
   13910:	e5d8320c 	ldrb	r3, [r8, #524]	; 0x20c
   13914:	e3130004 	tst	r3, #4
   13918:	11a014a4 	lsrne	r1, r4, #9
   1391c:	11811b85 	orrne	r1, r1, r5, lsl #23
   13920:	1a00000c 	bne	13958 <sd_raw_write+0x114>
   13924:	ea00000a 	b	13954 <sd_raw_write+0x110>
            raw_block_address = block_address;
        }

        if(buffer != raw_block)
        {
            memcpy(raw_block + block_offset, buffer, write_length);
   13928:	e59d1008 	ldr	r1, [sp, #8]
   1392c:	e1a02006 	mov	r2, r6
   13930:	e0890001 	add	r0, r9, r1
   13934:	e1a0100a 	mov	r1, sl
   13938:	eb00096a 	bl	15ee8 <memcpy>

#if SD_RAW_WRITE_BUFFERING
            raw_block_written = 0;
   1393c:	e3a03000 	mov	r3, #0

            if(length == write_length)
   13940:	e1570006 	cmp	r7, r6
        if(buffer != raw_block)
        {
            memcpy(raw_block + block_offset, buffer, write_length);

#if SD_RAW_WRITE_BUFFERING
            raw_block_written = 0;
   13944:	e5c83000 	strb	r3, [r8]

            if(length == write_length)
   13948:	1affffec 	bne	13900 <sd_raw_write+0xbc>
                return 1;
   1394c:	e3a00001 	mov	r0, #1
   13950:	ea000029 	b	139fc <sd_raw_write+0x1b8>
        /* address card */
        select_card();

        /* send single block request */
#if SD_RAW_SDHC
        if(sd_raw_send_command(CMD_WRITE_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
   13954:	e1a01004 	mov	r1, r4
   13958:	e3a00018 	mov	r0, #24
   1395c:	ebfffe5a 	bl	132cc <sd_raw_send_command>
   13960:	e2504000 	subs	r4, r0, #0
   13964:	0a000005 	beq	13980 <sd_raw_write+0x13c>
#else
        if(sd_raw_send_command(CMD_WRITE_SINGLE_BLOCK, block_address))
#endif
        {
            unselect_card();
   13968:	e59f30a4 	ldr	r3, [pc, #164]	; 13a14 <sd_raw_write+0x1d0>
   1396c:	e5932004 	ldr	r2, [r3, #4]
   13970:	e3822080 	orr	r2, r2, #128	; 0x80
   13974:	e5832004 	str	r2, [r3, #4]
            return 0;
   13978:	e3a00000 	mov	r0, #0
   1397c:	ea00001e 	b	139fc <sd_raw_write+0x1b8>
        }

        /* send start byte */
        sd_raw_send_byte(0xfe);
   13980:	e3a000fe 	mov	r0, #254	; 0xfe
   13984:	ebfffe3e 	bl	13284 <sd_raw_send_byte>

        /* write byte block */
        uint8_t* cache = raw_block;
        for(uint16_t i = 0; i < 512; ++i)
            sd_raw_send_byte(*cache++);
   13988:	e59f5080 	ldr	r5, [pc, #128]	; 13a10 <sd_raw_write+0x1cc>
   1398c:	e7d50004 	ldrb	r0, [r5, r4]
   13990:	e2844001 	add	r4, r4, #1
   13994:	ebfffe3a 	bl	13284 <sd_raw_send_byte>
        /* send start byte */
        sd_raw_send_byte(0xfe);

        /* write byte block */
        uint8_t* cache = raw_block;
        for(uint16_t i = 0; i < 512; ++i)
   13998:	e3540c02 	cmp	r4, #512	; 0x200
   1399c:	1afffffa 	bne	1398c <sd_raw_write+0x148>
            sd_raw_send_byte(*cache++);

        /* write dummy crc16 */
        sd_raw_send_byte(0xff);
   139a0:	e3a000ff 	mov	r0, #255	; 0xff
   139a4:	ebfffe36 	bl	13284 <sd_raw_send_byte>
        sd_raw_send_byte(0xff);
   139a8:	e3a000ff 	mov	r0, #255	; 0xff
   139ac:	ebfffe34 	bl	13284 <sd_raw_send_byte>

        /* wait while card is busy */
        while(sd_raw_rec_byte() != 0xff);
   139b0:	ebfffe3a 	bl	132a0 <sd_raw_rec_byte>
   139b4:	e35000ff 	cmp	r0, #255	; 0xff
   139b8:	1afffffc 	bne	139b0 <sd_raw_write+0x16c>
        sd_raw_rec_byte();
   139bc:	ebfffe37 	bl	132a0 <sd_raw_rec_byte>

        /* deaddress card */
        unselect_card();
   139c0:	e59f304c 	ldr	r3, [pc, #76]	; 13a14 <sd_raw_write+0x1d0>
   139c4:	e5932004 	ldr	r2, [r3, #4]
   139c8:	e3822080 	orr	r2, r2, #128	; 0x80
   139cc:	e5832004 	str	r2, [r3, #4]

        buffer += write_length;
        offset += write_length;
   139d0:	e89d000c 	ldm	sp, {r2, r3}
   139d4:	e0922006 	adds	r2, r2, r6
   139d8:	e2a33000 	adc	r3, r3, #0
   139dc:	e88d000c 	stm	sp, {r2, r3}
        length -= write_length;

#if SD_RAW_WRITE_BUFFERING
        raw_block_written = 1;
   139e0:	e3a03001 	mov	r3, #1
   139e4:	e5c83000 	strb	r3, [r8]
        sd_raw_rec_byte();

        /* deaddress card */
        unselect_card();

        buffer += write_length;
   139e8:	e08aa006 	add	sl, sl, r6
        offset += write_length;
        length -= write_length;
   139ec:	e0667007 	rsb	r7, r6, r7
        return 0;

    offset_t block_address;
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
   139f0:	e3570000 	cmp	r7, #0
   139f4:	1affff99 	bne	13860 <sd_raw_write+0x1c>
   139f8:	eaffffd3 	b	1394c <sd_raw_write+0x108>
        raw_block_written = 1;
#endif
    }

    return 1;
}
   139fc:	e28dd010 	add	sp, sp, #16
   13a00:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a04:	e12fff1e 	bx	lr
   13a08:	400008f4 	.word	0x400008f4
   13a0c:	000001ff 	.word	0x000001ff
   13a10:	40000900 	.word	0x40000900
   13a14:	e0028000 	.word	0xe0028000

00013a18 <sd_raw_write_interval>:
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_read
 */
uint8_t sd_raw_write_interval(offset_t offset, uint8_t* buffer, uintptr_t length, sd_raw_write_interval_handler_t callback, void* p)
{
   13a18:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a1c:	e59da024 	ldr	sl, [sp, #36]	; 0x24
#if SD_RAW_SAVE_RAM
    #error "SD_RAW_WRITE_SUPPORT is not supported together with SD_RAW_SAVE_RAM"
#endif

    if(!buffer || !callback)
   13a20:	e3520000 	cmp	r2, #0
   13a24:	135a0000 	cmpne	sl, #0
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_read
 */
uint8_t sd_raw_write_interval(offset_t offset, uint8_t* buffer, uintptr_t length, sd_raw_write_interval_handler_t callback, void* p)
{
   13a28:	e1a04000 	mov	r4, r0
   13a2c:	e1a05001 	mov	r5, r1
   13a30:	e1a06003 	mov	r6, r3
#if SD_RAW_SAVE_RAM
    #error "SD_RAW_WRITE_SUPPORT is not supported together with SD_RAW_SAVE_RAM"
#endif

    if(!buffer || !callback)
   13a34:	e1a07002 	mov	r7, r2
   13a38:	1a000001 	bne	13a44 <sd_raw_write_interval+0x2c>
        return 0;
   13a3c:	e3a00000 	mov	r0, #0
   13a40:	ea000023 	b	13ad4 <sd_raw_write_interval+0xbc>

    uint8_t endless = (length == 0);
   13a44:	e2738001 	rsbs	r8, r3, #1
   13a48:	33a08000 	movcc	r8, #0
    while(endless || length > 0)
   13a4c:	ea00001a 	b	13abc <sd_raw_write_interval+0xa4>
    {
        uint16_t bytes_to_write = callback(buffer, offset, p);
   13a50:	e1a00007 	mov	r0, r7
   13a54:	e1a01004 	mov	r1, r4
   13a58:	e1a02005 	mov	r2, r5
   13a5c:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
   13a60:	e1a0e00f 	mov	lr, pc
   13a64:	e12fff1a 	bx	sl
   13a68:	e1a0c800 	lsl	ip, r0, #16
        if(!bytes_to_write)
   13a6c:	e1b0b82c 	lsrs	fp, ip, #16
   13a70:	1a000001 	bne	13a7c <sd_raw_write_interval+0x64>

        offset += bytes_to_write;
        length -= bytes_to_write;
    }

    return 1;
   13a74:	e3a00001 	mov	r0, #1
   13a78:	ea000015 	b	13ad4 <sd_raw_write_interval+0xbc>
    while(endless || length > 0)
    {
        uint16_t bytes_to_write = callback(buffer, offset, p);
        if(!bytes_to_write)
            break;
        if(!endless && bytes_to_write > length)
   13a7c:	e3580000 	cmp	r8, #0
   13a80:	1a000001 	bne	13a8c <sd_raw_write_interval+0x74>
   13a84:	e15b0006 	cmp	fp, r6
   13a88:	8affffeb 	bhi	13a3c <sd_raw_write_interval+0x24>
            return 0;

        /* as writing is always buffered, we directly
         * hand over the request to sd_raw_write()
         */
        if(!sd_raw_write(offset, buffer, bytes_to_write))
   13a8c:	e1a09800 	lsl	r9, r0, #16
   13a90:	e1a09829 	lsr	r9, r9, #16
   13a94:	e1a00004 	mov	r0, r4
   13a98:	e1a01005 	mov	r1, r5
   13a9c:	e1a02007 	mov	r2, r7
   13aa0:	e1a03009 	mov	r3, r9
   13aa4:	ebffff66 	bl	13844 <sd_raw_write>
   13aa8:	e3500000 	cmp	r0, #0
   13aac:	0affffe2 	beq	13a3c <sd_raw_write_interval+0x24>
            return 0;

        offset += bytes_to_write;
   13ab0:	e094400b 	adds	r4, r4, fp
   13ab4:	e2a55000 	adc	r5, r5, #0
        length -= bytes_to_write;
   13ab8:	e0696006 	rsb	r6, r9, r6

    if(!buffer || !callback)
        return 0;

    uint8_t endless = (length == 0);
    while(endless || length > 0)
   13abc:	e3560000 	cmp	r6, #0
   13ac0:	01a03008 	moveq	r3, r8
   13ac4:	13883001 	orrne	r3, r8, #1
   13ac8:	e3530000 	cmp	r3, #0
   13acc:	1affffdf 	bne	13a50 <sd_raw_write_interval+0x38>
   13ad0:	eaffffe7 	b	13a74 <sd_raw_write_interval+0x5c>
        offset += bytes_to_write;
        length -= bytes_to_write;
    }

    return 1;
}
   13ad4:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ad8:	e12fff1e 	bx	lr

00013adc <sd_raw_get_info>:
 *
 * \param[in] info A pointer to the structure into which to save the information.
 * \returns 0 on failure, 1 on success.
 */
uint8_t sd_raw_get_info(struct sd_raw_info* info)
{
   13adc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(!info || !sd_raw_available())
   13ae0:	e2504000 	subs	r4, r0, #0
        return 0;
   13ae4:	01a00004 	moveq	r0, r4
 * \param[in] info A pointer to the structure into which to save the information.
 * \returns 0 on failure, 1 on success.
 */
uint8_t sd_raw_get_info(struct sd_raw_info* info)
{
    if(!info || !sd_raw_available())
   13ae8:	0a0000a5 	beq	13d84 <sd_raw_get_info+0x2a8>
        return 0;

    memset(info, 0, sizeof(*info));

    select_card();
   13aec:	e59f5298 	ldr	r5, [pc, #664]	; 13d8c <sd_raw_get_info+0x2b0>
uint8_t sd_raw_get_info(struct sd_raw_info* info)
{
    if(!info || !sd_raw_available())
        return 0;

    memset(info, 0, sizeof(*info));
   13af0:	e3a01000 	mov	r1, #0
   13af4:	e3a02020 	mov	r2, #32
   13af8:	eb000902 	bl	15f08 <memset>

    select_card();
   13afc:	e595300c 	ldr	r3, [r5, #12]
   13b00:	e3833080 	orr	r3, r3, #128	; 0x80
   13b04:	e585300c 	str	r3, [r5, #12]

    /* read cid register */
    if(sd_raw_send_command(CMD_SEND_CID, 0))
   13b08:	e3a0000a 	mov	r0, #10
   13b0c:	e3a01000 	mov	r1, #0
   13b10:	ebfffded 	bl	132cc <sd_raw_send_command>
   13b14:	e3500000 	cmp	r0, #0
    {
        unselect_card();
   13b18:	15953004 	ldrne	r3, [r5, #4]
   13b1c:	13833080 	orrne	r3, r3, #128	; 0x80
   13b20:	15853004 	strne	r3, [r5, #4]
   13b24:	1a00003a 	bne	13c14 <sd_raw_get_info+0x138>
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
   13b28:	ebfffddc 	bl	132a0 <sd_raw_rec_byte>
   13b2c:	e35000fe 	cmp	r0, #254	; 0xfe
   13b30:	1afffffc 	bne	13b28 <sd_raw_get_info+0x4c>
   13b34:	e1a05004 	mov	r5, r4
   13b38:	e3a06060 	mov	r6, #96	; 0x60
 *        to the user.
 *
 * \param[in] info A pointer to the structure into which to save the information.
 * \returns 0 on failure, 1 on success.
 */
uint8_t sd_raw_get_info(struct sd_raw_info* info)
   13b3c:	e0647005 	rsb	r7, r4, r5
   13b40:	e20770ff 	and	r7, r7, #255	; 0xff
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
    {
        uint8_t b = sd_raw_rec_byte();
   13b44:	ebfffdd5 	bl	132a0 <sd_raw_rec_byte>

        switch(i)
   13b48:	e357000e 	cmp	r7, #14
   13b4c:	979ff107 	ldrls	pc, [pc, r7, lsl #2]
   13b50:	ea000022 	b	13be0 <sd_raw_get_info+0x104>
   13b54:	00013b90 	.word	0x00013b90
   13b58:	00013b98 	.word	0x00013b98
   13b5c:	00013b98 	.word	0x00013b98
   13b60:	00013ba0 	.word	0x00013ba0
   13b64:	00013ba0 	.word	0x00013ba0
   13b68:	00013ba0 	.word	0x00013ba0
   13b6c:	00013ba0 	.word	0x00013ba0
   13b70:	00013ba0 	.word	0x00013ba0
   13b74:	00013ba8 	.word	0x00013ba8
   13b78:	00013bb0 	.word	0x00013bb0
   13b7c:	00013bb0 	.word	0x00013bb0
   13b80:	00013bb0 	.word	0x00013bb0
   13b84:	00013bb0 	.word	0x00013bb0
   13b88:	00013bc0 	.word	0x00013bc0
   13b8c:	00013bcc 	.word	0x00013bcc
        {
            case 0:
                info->manufacturer = b;
   13b90:	e5c40000 	strb	r0, [r4]
                break;
   13b94:	ea000011 	b	13be0 <sd_raw_get_info+0x104>
            case 1:
            case 2:
                info->oem[i - 1] = b;
   13b98:	e5c50000 	strb	r0, [r5]
                break;
   13b9c:	ea00000f 	b	13be0 <sd_raw_get_info+0x104>
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
                info->product[i - 3] = b;
   13ba0:	e5c50001 	strb	r0, [r5, #1]
                break;
   13ba4:	ea00000d 	b	13be0 <sd_raw_get_info+0x104>
            case 8:
                info->revision = b;
   13ba8:	e5c4000a 	strb	r0, [r4, #10]
                break;
   13bac:	ea00000b 	b	13be0 <sd_raw_get_info+0x104>
            case 9:
            case 10:
            case 11:
            case 12:
                info->serial |= (uint32_t) b << ((12 - i) * 8);
   13bb0:	e594300c 	ldr	r3, [r4, #12]
   13bb4:	e1830610 	orr	r0, r3, r0, lsl r6
   13bb8:	e584000c 	str	r0, [r4, #12]
                break;
   13bbc:	ea000007 	b	13be0 <sd_raw_get_info+0x104>
            case 13:
                info->manufacturing_year = b << 4;
   13bc0:	e1a00200 	lsl	r0, r0, #4
   13bc4:	e5c40010 	strb	r0, [r4, #16]
                break;
   13bc8:	ea000004 	b	13be0 <sd_raw_get_info+0x104>
            case 14:
                info->manufacturing_year |= b >> 4;
   13bcc:	e5d43010 	ldrb	r3, [r4, #16]
   13bd0:	e1833220 	orr	r3, r3, r0, lsr #4
                info->manufacturing_month = b & 0x0f;
   13bd4:	e200000f 	and	r0, r0, #15
                break;
            case 13:
                info->manufacturing_year = b << 4;
                break;
            case 14:
                info->manufacturing_year |= b >> 4;
   13bd8:	e5c43010 	strb	r3, [r4, #16]
                info->manufacturing_month = b & 0x0f;
   13bdc:	e5c40011 	strb	r0, [r4, #17]
   13be0:	e2466008 	sub	r6, r6, #8
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
   13be4:	e3760030 	cmn	r6, #48	; 0x30
   13be8:	e2855001 	add	r5, r5, #1
   13bec:	1affffd2 	bne	13b3c <sd_raw_get_info+0x60>
#if SD_RAW_SDHC
    uint16_t csd_c_size = 0;
#else
    uint32_t csd_c_size = 0;
#endif
    if(sd_raw_send_command(CMD_SEND_CSD, 0))
   13bf0:	e3a00009 	mov	r0, #9
   13bf4:	e3a01000 	mov	r1, #0
   13bf8:	ebfffdb3 	bl	132cc <sd_raw_send_command>
   13bfc:	e3500000 	cmp	r0, #0
   13c00:	0a000005 	beq	13c1c <sd_raw_get_info+0x140>
    {
        unselect_card();
   13c04:	e59f3180 	ldr	r3, [pc, #384]	; 13d8c <sd_raw_get_info+0x2b0>
   13c08:	e5932004 	ldr	r2, [r3, #4]
   13c0c:	e3822080 	orr	r2, r2, #128	; 0x80
   13c10:	e5832004 	str	r2, [r3, #4]
        return 0;
   13c14:	e3a00000 	mov	r0, #0
   13c18:	ea000059 	b	13d84 <sd_raw_get_info+0x2a8>
    }
    while(sd_raw_rec_byte() != 0xfe);
   13c1c:	ebfffd9f 	bl	132a0 <sd_raw_rec_byte>
   13c20:	e35000fe 	cmp	r0, #254	; 0xfe
   13c24:	1afffffc 	bne	13c1c <sd_raw_get_info+0x140>
   13c28:	e3a06000 	mov	r6, #0
            info->format = (b & 0x0c) >> 2;
        }
        else
        {
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
   13c2c:	e59f915c 	ldr	r9, [pc, #348]	; 13d90 <sd_raw_get_info+0x2b4>
    if(sd_raw_send_command(CMD_SEND_CSD, 0))
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
   13c30:	e1a05006 	mov	r5, r6
   13c34:	e1a07006 	mov	r7, r6
   13c38:	e1a0a006 	mov	sl, r6
                        csd_c_size_mult <<= 1;
                        break;
                    case 10:
                        csd_c_size_mult |= b >> 7;

                        info->capacity = (uint32_t) csd_c_size << (csd_c_size_mult + csd_read_bl_len + 2);
   13c3c:	e1a0b006 	mov	fp, r6
            if(b & 0x40)
                info->flag_copy = 1;
            if(b & 0x20)
                info->flag_write_protect = 1;
            if(b & 0x10)
                info->flag_write_protect_temp = 1;
   13c40:	e3a08001 	mov	r8, #1
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
    {
        uint8_t b = sd_raw_rec_byte();
   13c44:	ebfffd95 	bl	132a0 <sd_raw_rec_byte>

        if(i == 14)
   13c48:	e356000e 	cmp	r6, #14
   13c4c:	1a000009 	bne	13c78 <sd_raw_get_info+0x19c>
        {
            if(b & 0x40)
   13c50:	e3100040 	tst	r0, #64	; 0x40
                info->flag_copy = 1;
   13c54:	15c4801c 	strbne	r8, [r4, #28]
            if(b & 0x20)
   13c58:	e3100020 	tst	r0, #32
                info->flag_write_protect = 1;
   13c5c:	15c4801d 	strbne	r8, [r4, #29]
            if(b & 0x10)
   13c60:	e3100010 	tst	r0, #16
                info->flag_write_protect_temp = 1;
            info->format = (b & 0x0c) >> 2;
   13c64:	e200000c 	and	r0, r0, #12
   13c68:	e1a00140 	asr	r0, r0, #2
            if(b & 0x40)
                info->flag_copy = 1;
            if(b & 0x20)
                info->flag_write_protect = 1;
            if(b & 0x10)
                info->flag_write_protect_temp = 1;
   13c6c:	15c4801e 	strbne	r8, [r4, #30]
            info->format = (b & 0x0c) >> 2;
   13c70:	e5c4001f 	strb	r0, [r4, #31]
   13c74:	ea000038 	b	13d5c <sd_raw_get_info+0x280>
        }
        else
        {
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
   13c78:	e5d9320c 	ldrb	r3, [r9, #524]	; 0x20c
   13c7c:	e3130002 	tst	r3, #2
   13c80:	0a000013 	beq	13cd4 <sd_raw_get_info+0x1f8>
            {
                switch(i)
   13c84:	e3560007 	cmp	r6, #7
   13c88:	0a000003 	beq	13c9c <sd_raw_get_info+0x1c0>
   13c8c:	3a000006 	bcc	13cac <sd_raw_get_info+0x1d0>
   13c90:	e3560009 	cmp	r6, #9
   13c94:	8a000030 	bhi	13d5c <sd_raw_get_info+0x280>
   13c98:	ea000000 	b	13ca0 <sd_raw_get_info+0x1c4>
                {
                    case 7:
                        b &= 0x3f;
   13c9c:	e200003f 	and	r0, r0, #63	; 0x3f
                    case 8:
                    case 9:
                        csd_c_size <<= 8;
                        csd_c_size |= b;
   13ca0:	e1805405 	orr	r5, r0, r5, lsl #8
   13ca4:	e1a05805 	lsl	r5, r5, #16
   13ca8:	e1a05825 	lsr	r5, r5, #16
                        break;
                }
                if(i == 9)
   13cac:	e3560009 	cmp	r6, #9
   13cb0:	1a000029 	bne	13d5c <sd_raw_get_info+0x280>
                {
                    ++csd_c_size;
   13cb4:	e2855001 	add	r5, r5, #1
   13cb8:	e1a03805 	lsl	r3, r5, #16
   13cbc:	e1a05823 	lsr	r5, r3, #16
                    info->capacity = (offset_t) csd_c_size * 512 * 1024;
   13cc0:	e1a03ea3 	lsr	r3, r3, #29
   13cc4:	e5843018 	str	r3, [r4, #24]
   13cc8:	e1a03985 	lsl	r3, r5, #19
   13ccc:	e5843014 	str	r3, [r4, #20]
   13cd0:	ea000021 	b	13d5c <sd_raw_get_info+0x280>
                }
            }
            else
#endif
            {
                switch(i)
   13cd4:	e2463005 	sub	r3, r6, #5
   13cd8:	e3530005 	cmp	r3, #5
   13cdc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   13ce0:	ea00001d 	b	13d5c <sd_raw_get_info+0x280>
   13ce4:	00013cfc 	.word	0x00013cfc
   13ce8:	00013d04 	.word	0x00013d04
   13cec:	00013d10 	.word	0x00013d10
   13cf0:	00013d1c 	.word	0x00013d1c
   13cf4:	00013d34 	.word	0x00013d34
   13cf8:	00013d40 	.word	0x00013d40
                {
                    case 5:
                        csd_read_bl_len = b & 0x0f;
   13cfc:	e200a00f 	and	sl, r0, #15
                        break;
   13d00:	ea000015 	b	13d5c <sd_raw_get_info+0x280>
                    case 6:
                        csd_c_size = b & 0x03;
   13d04:	e2005003 	and	r5, r0, #3
                        csd_c_size <<= 8;
   13d08:	e1a05405 	lsl	r5, r5, #8
                        break;
   13d0c:	ea000012 	b	13d5c <sd_raw_get_info+0x280>
                    case 7:
                        csd_c_size |= b;
   13d10:	e1805005 	orr	r5, r0, r5
                        csd_c_size <<= 2;
   13d14:	e1a05905 	lsl	r5, r5, #18
   13d18:	ea000003 	b	13d2c <sd_raw_get_info+0x250>
                        break;
                    case 8:
                        csd_c_size |= b >> 6;
   13d1c:	e1a00900 	lsl	r0, r0, #18
   13d20:	e1855c20 	orr	r5, r5, r0, lsr #24
   13d24:	e1a05805 	lsl	r5, r5, #16
                        ++csd_c_size;
   13d28:	e2855801 	add	r5, r5, #65536	; 0x10000
   13d2c:	e1a05825 	lsr	r5, r5, #16
                        break;
   13d30:	ea000009 	b	13d5c <sd_raw_get_info+0x280>
                    case 9:
                        csd_c_size_mult = b & 0x03;
   13d34:	e2000003 	and	r0, r0, #3
                        csd_c_size_mult <<= 1;
   13d38:	e1a07080 	lsl	r7, r0, #1
                        break;
   13d3c:	ea000006 	b	13d5c <sd_raw_get_info+0x280>
                    case 10:
                        csd_c_size_mult |= b >> 7;
   13d40:	e18773a0 	orr	r7, r7, r0, lsr #7
   13d44:	e20770ff 	and	r7, r7, #255	; 0xff

                        info->capacity = (uint32_t) csd_c_size << (csd_c_size_mult + csd_read_bl_len + 2);
   13d48:	e087300a 	add	r3, r7, sl
   13d4c:	e2833002 	add	r3, r3, #2
   13d50:	e1a03315 	lsl	r3, r5, r3
   13d54:	e584b018 	str	fp, [r4, #24]
   13d58:	e5843014 	str	r3, [r4, #20]
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
   13d5c:	e2866001 	add	r6, r6, #1
   13d60:	e20660ff 	and	r6, r6, #255	; 0xff
   13d64:	e3560012 	cmp	r6, #18
   13d68:	1affffb5 	bne	13c44 <sd_raw_get_info+0x168>
                }
            }
        }
    }

    unselect_card();
   13d6c:	e59f3018 	ldr	r3, [pc, #24]	; 13d8c <sd_raw_get_info+0x2b0>
   13d70:	e5932004 	ldr	r2, [r3, #4]
   13d74:	e3822080 	orr	r2, r2, #128	; 0x80
   13d78:	e5832004 	str	r2, [r3, #4]

    return 1;
   13d7c:	e3a00001 	mov	r0, #1
   13d80:	eaffffff 	b	13d84 <sd_raw_get_info+0x2a8>
}
   13d84:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d88:	e12fff1e 	bx	lr
   13d8c:	e0028000 	.word	0xe0028000
   13d90:	400008f4 	.word	0x400008f4

00013d94 <fat_clear_cluster_callback>:
 * Callback function for clearing a cluster.
 */
uintptr_t fat_clear_cluster_callback(uint8_t* buffer, offset_t offset, void* p)
{
    return 16;
}
   13d94:	e3a00010 	mov	r0, #16
   13d98:	e12fff1e 	bx	lr

00013d9c <fat_calc_83_checksum>:
 * \param[in] file_name_83 The 11-byte file name buffer.
 * \returns The checksum of the given file name.
 */
uint8_t fat_calc_83_checksum(const uint8_t* file_name_83)
{
    uint8_t checksum = file_name_83[0];
   13d9c:	e5d03000 	ldrb	r3, [r0]
    for(uint8_t i = 1; i < 11; ++i)
   13da0:	e3a02001 	mov	r2, #1
        checksum = ((checksum >> 1) | (checksum << 7)) + file_name_83[i];
   13da4:	e1a010a3 	lsr	r1, r3, #1
   13da8:	e1813383 	orr	r3, r1, r3, lsl #7
 * \returns The checksum of the given file name.
 */
uint8_t fat_calc_83_checksum(const uint8_t* file_name_83)
{
    uint8_t checksum = file_name_83[0];
    for(uint8_t i = 1; i < 11; ++i)
   13dac:	e2822001 	add	r2, r2, #1
        checksum = ((checksum >> 1) | (checksum << 7)) + file_name_83[i];
   13db0:	e5f01001 	ldrb	r1, [r0, #1]!
 * \returns The checksum of the given file name.
 */
uint8_t fat_calc_83_checksum(const uint8_t* file_name_83)
{
    uint8_t checksum = file_name_83[0];
    for(uint8_t i = 1; i < 11; ++i)
   13db4:	e20220ff 	and	r2, r2, #255	; 0xff
        checksum = ((checksum >> 1) | (checksum << 7)) + file_name_83[i];
   13db8:	e0833001 	add	r3, r3, r1
 * \returns The checksum of the given file name.
 */
uint8_t fat_calc_83_checksum(const uint8_t* file_name_83)
{
    uint8_t checksum = file_name_83[0];
    for(uint8_t i = 1; i < 11; ++i)
   13dbc:	e352000b 	cmp	r2, #11
        checksum = ((checksum >> 1) | (checksum << 7)) + file_name_83[i];
   13dc0:	e20330ff 	and	r3, r3, #255	; 0xff
 * \returns The checksum of the given file name.
 */
uint8_t fat_calc_83_checksum(const uint8_t* file_name_83)
{
    uint8_t checksum = file_name_83[0];
    for(uint8_t i = 1; i < 11; ++i)
   13dc4:	1afffff6 	bne	13da4 <fat_calc_83_checksum+0x8>
        checksum = ((checksum >> 1) | (checksum << 7)) + file_name_83[i];

    return checksum;
}
   13dc8:	e1a00003 	mov	r0, r3
   13dcc:	e12fff1e 	bx	lr

00013dd0 <fat_get_fs_free_32_callback>:
/**
 * \ingroup fat_fs
 * Callback function used for counting free clusters in a FAT32.
 */
uint8_t fat_get_fs_free_32_callback(uint8_t* buffer, offset_t offset, void* p)
{
   13dd0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   13dd4:	e1a06000 	mov	r6, r0
   13dd8:	e1a05003 	mov	r5, r3
    struct fat_usage_count_callback_arg* count_arg = (struct fat_usage_count_callback_arg*) p;
    uintptr_t buffer_size = count_arg->buffer_size;
   13ddc:	e5937004 	ldr	r7, [r3, #4]

    for(uintptr_t i = 0; i < buffer_size; i += 4, buffer += 4)
   13de0:	e3a04000 	mov	r4, #0
   13de4:	ea000005 	b	13e00 <fat_get_fs_free_32_callback+0x30>
    {
        uint32_t cluster = read32(buffer);
   13de8:	eb000809 	bl	15e14 <read32>
        if(cluster == HTOL32(FAT32_CLUSTER_FREE))
   13dec:	e3500000 	cmp	r0, #0
            ++(count_arg->cluster_count);
   13df0:	05953000 	ldreq	r3, [r5]
   13df4:	02833001 	addeq	r3, r3, #1
   13df8:	05853000 	streq	r3, [r5]
uint8_t fat_get_fs_free_32_callback(uint8_t* buffer, offset_t offset, void* p)
{
    struct fat_usage_count_callback_arg* count_arg = (struct fat_usage_count_callback_arg*) p;
    uintptr_t buffer_size = count_arg->buffer_size;

    for(uintptr_t i = 0; i < buffer_size; i += 4, buffer += 4)
   13dfc:	e2844004 	add	r4, r4, #4
   13e00:	e1540007 	cmp	r4, r7
#if DOXYGEN || FAT_FAT32_SUPPORT
/**
 * \ingroup fat_fs
 * Callback function used for counting free clusters in a FAT32.
 */
uint8_t fat_get_fs_free_32_callback(uint8_t* buffer, offset_t offset, void* p)
   13e04:	e0860004 	add	r0, r6, r4
{
    struct fat_usage_count_callback_arg* count_arg = (struct fat_usage_count_callback_arg*) p;
    uintptr_t buffer_size = count_arg->buffer_size;

    for(uintptr_t i = 0; i < buffer_size; i += 4, buffer += 4)
   13e08:	3afffff6 	bcc	13de8 <fat_get_fs_free_32_callback+0x18>
        if(cluster == HTOL32(FAT32_CLUSTER_FREE))
            ++(count_arg->cluster_count);
    }

    return 1;
}
   13e0c:	e3a00001 	mov	r0, #1
   13e10:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   13e14:	e12fff1e 	bx	lr

00013e18 <fat_get_fs_free_16_callback>:
/**
 * \ingroup fat_fs
 * Callback function used for counting free clusters in a FAT.
 */
uint8_t fat_get_fs_free_16_callback(uint8_t* buffer, offset_t offset, void* p)
{
   13e18:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   13e1c:	e1a06000 	mov	r6, r0
   13e20:	e1a05003 	mov	r5, r3
    struct fat_usage_count_callback_arg* count_arg = (struct fat_usage_count_callback_arg*) p;
    uintptr_t buffer_size = count_arg->buffer_size;
   13e24:	e5937004 	ldr	r7, [r3, #4]

    for(uintptr_t i = 0; i < buffer_size; i += 2, buffer += 2)
   13e28:	e3a04000 	mov	r4, #0
   13e2c:	ea000005 	b	13e48 <fat_get_fs_free_16_callback+0x30>
    {
        uint16_t cluster = read16(buffer);
   13e30:	eb0007f3 	bl	15e04 <read16>
        if(cluster == HTOL16(FAT16_CLUSTER_FREE))
   13e34:	e3500000 	cmp	r0, #0
            ++(count_arg->cluster_count);
   13e38:	05953000 	ldreq	r3, [r5]
   13e3c:	02833001 	addeq	r3, r3, #1
   13e40:	05853000 	streq	r3, [r5]
uint8_t fat_get_fs_free_16_callback(uint8_t* buffer, offset_t offset, void* p)
{
    struct fat_usage_count_callback_arg* count_arg = (struct fat_usage_count_callback_arg*) p;
    uintptr_t buffer_size = count_arg->buffer_size;

    for(uintptr_t i = 0; i < buffer_size; i += 2, buffer += 2)
   13e44:	e2844002 	add	r4, r4, #2
   13e48:	e1540007 	cmp	r4, r7

/**
 * \ingroup fat_fs
 * Callback function used for counting free clusters in a FAT.
 */
uint8_t fat_get_fs_free_16_callback(uint8_t* buffer, offset_t offset, void* p)
   13e4c:	e0860004 	add	r0, r6, r4
{
    struct fat_usage_count_callback_arg* count_arg = (struct fat_usage_count_callback_arg*) p;
    uintptr_t buffer_size = count_arg->buffer_size;

    for(uintptr_t i = 0; i < buffer_size; i += 2, buffer += 2)
   13e50:	3afffff6 	bcc	13e30 <fat_get_fs_free_16_callback+0x18>
        if(cluster == HTOL16(FAT16_CLUSTER_FREE))
            ++(count_arg->cluster_count);
    }

    return 1;
}
   13e54:	e3a00001 	mov	r0, #1
   13e58:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   13e5c:	e12fff1e 	bx	lr

00013e60 <fat_dir_entry_read_callback>:
 * \param[in,out] p An argument structure controlling operation.
 * \returns 0 on failure or completion, 1 if reading has
 *          to be continued
 */
uint8_t fat_dir_entry_read_callback(uint8_t* buffer, offset_t offset, void* p)
{
   13e60:	e92d41ff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   13e64:	e1a08003 	mov	r8, r3
    struct fat_read_dir_callback_arg* arg = p;
    struct fat_dir_entry_struct* dir_entry = arg->dir_entry;
   13e68:	e5936000 	ldr	r6, [r3]

    arg->bytes_read += 32;
   13e6c:	e5933004 	ldr	r3, [r3, #4]
   13e70:	e2833020 	add	r3, r3, #32
   13e74:	e5883004 	str	r3, [r8, #4]

    /* skip deleted or empty entries */
    if(buffer[0] == FAT_DIRENTRY_DELETED || !buffer[0])
   13e78:	e5d03000 	ldrb	r3, [r0]
   13e7c:	e35300e5 	cmp	r3, #229	; 0xe5
   13e80:	13530000 	cmpne	r3, #0
    {
#if FAT_LFN_SUPPORT
        arg->checksum = 0;
   13e84:	03a03000 	moveq	r3, #0
 * \param[in,out] p An argument structure controlling operation.
 * \returns 0 on failure or completion, 1 if reading has
 *          to be continued
 */
uint8_t fat_dir_entry_read_callback(uint8_t* buffer, offset_t offset, void* p)
{
   13e88:	e1a07000 	mov	r7, r0
   13e8c:	e1a04001 	mov	r4, r1
   13e90:	e1a05002 	mov	r5, r2

    /* skip deleted or empty entries */
    if(buffer[0] == FAT_DIRENTRY_DELETED || !buffer[0])
    {
#if FAT_LFN_SUPPORT
        arg->checksum = 0;
   13e94:	05c83008 	strbeq	r3, [r8, #8]
    struct fat_dir_entry_struct* dir_entry = arg->dir_entry;

    arg->bytes_read += 32;

    /* skip deleted or empty entries */
    if(buffer[0] == FAT_DIRENTRY_DELETED || !buffer[0])
   13e98:	0a000023 	beq	13f2c <fat_dir_entry_read_callback+0xcc>
        return 1;
#endif

    char* long_name = dir_entry->long_name;
#if FAT_LFN_SUPPORT
    if(buffer[11] == 0x0f)
   13e9c:	e5d0300b 	ldrb	r3, [r0, #11]
   13ea0:	e353000f 	cmp	r3, #15
   13ea4:	1a000026 	bne	13f44 <fat_dir_entry_read_callback+0xe4>
    {
        /* checksum validation */
        if(arg->checksum == 0 || arg->checksum != buffer[13])
   13ea8:	e5d83008 	ldrb	r3, [r8, #8]
   13eac:	e3530000 	cmp	r3, #0
   13eb0:	0a000002 	beq	13ec0 <fat_dir_entry_read_callback+0x60>
   13eb4:	e5d0200d 	ldrb	r2, [r0, #13]
   13eb8:	e1520003 	cmp	r2, r3
   13ebc:	0a000007 	beq	13ee0 <fat_dir_entry_read_callback+0x80>
        {
            /* reset directory entry */
            memset(dir_entry, 0, sizeof(*dir_entry));
   13ec0:	e1a00006 	mov	r0, r6
   13ec4:	e3a01000 	mov	r1, #0
   13ec8:	e3a02034 	mov	r2, #52	; 0x34
   13ecc:	eb00080d 	bl	15f08 <memset>

            arg->checksum = buffer[13];
   13ed0:	e5d7300d 	ldrb	r3, [r7, #13]
   13ed4:	e5c83008 	strb	r3, [r8, #8]
            dir_entry->entry_offset = offset;
   13ed8:	e586402c 	str	r4, [r6, #44]	; 0x2c
   13edc:	e5865030 	str	r5, [r6, #48]	; 0x30

        /* lfn supports unicode, but we do not, for now.
         * So we assume pure ascii and read only every
         * second byte.
         */
        uint16_t char_offset = ((buffer[0] & 0x3f) - 1) * 13;
   13ee0:	e5d74000 	ldrb	r4, [r7]
   13ee4:	e204403f 	and	r4, r4, #63	; 0x3f
   13ee8:	e3a0200d 	mov	r2, #13
   13eec:	e2444001 	sub	r4, r4, #1
   13ef0:	e0040492 	mul	r4, r2, r4
   13ef4:	e1a04804 	lsl	r4, r4, #16
   13ef8:	e1a04824 	lsr	r4, r4, #16
        const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
   13efc:	e1a0000d 	mov	r0, sp
   13f00:	e59f118c 	ldr	r1, [pc, #396]	; 14094 <fat_dir_entry_read_callback+0x234>
   13f04:	eb0007f7 	bl	15ee8 <memcpy>
 * \param[in] offset The absolute offset of the raw data.
 * \param[in,out] p An argument structure controlling operation.
 * \returns 0 on failure or completion, 1 if reading has
 *          to be continued
 */
uint8_t fat_dir_entry_read_callback(uint8_t* buffer, offset_t offset, void* p)
   13f08:	e0866004 	add	r6, r6, r4
        /* lfn supports unicode, but we do not, for now.
         * So we assume pure ascii and read only every
         * second byte.
         */
        uint16_t char_offset = ((buffer[0] & 0x3f) - 1) * 13;
        const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
   13f0c:	e3a03000 	mov	r3, #0
   13f10:	ea000007 	b	13f34 <fat_dir_entry_read_callback+0xd4>
        for(uint8_t i = 0; i <= 12 && char_offset + i < sizeof(dir_entry->long_name) - 1; ++i)
            long_name[char_offset + i] = buffer[char_mapping[i]];
   13f14:	e7dd2003 	ldrb	r2, [sp, r3]
   13f18:	e7d72002 	ldrb	r2, [r7, r2]
   13f1c:	e7c62003 	strb	r2, [r6, r3]
   13f20:	e2833001 	add	r3, r3, #1
         * So we assume pure ascii and read only every
         * second byte.
         */
        uint16_t char_offset = ((buffer[0] & 0x3f) - 1) * 13;
        const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
        for(uint8_t i = 0; i <= 12 && char_offset + i < sizeof(dir_entry->long_name) - 1; ++i)
   13f24:	e353000d 	cmp	r3, #13
   13f28:	1a000001 	bne	13f34 <fat_dir_entry_read_callback+0xd4>
            long_name[char_offset + i] = buffer[char_mapping[i]];

        return 1;
   13f2c:	e3a00001 	mov	r0, #1
   13f30:	ea000054 	b	14088 <fat_dir_entry_read_callback+0x228>
         * So we assume pure ascii and read only every
         * second byte.
         */
        uint16_t char_offset = ((buffer[0] & 0x3f) - 1) * 13;
        const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
        for(uint8_t i = 0; i <= 12 && char_offset + i < sizeof(dir_entry->long_name) - 1; ++i)
   13f34:	e0832004 	add	r2, r3, r4
   13f38:	e352001e 	cmp	r2, #30
   13f3c:	9afffff4 	bls	13f14 <fat_dir_entry_read_callback+0xb4>
   13f40:	eafffff9 	b	13f2c <fat_dir_entry_read_callback+0xcc>
    else
#endif
    {
#if FAT_LFN_SUPPORT
        /* if we do not have a long name or the previous lfn does not match, take the 8.3 name */
        if(long_name[0] == '\0' || arg->checksum != fat_calc_83_checksum(buffer))
   13f44:	e5d63000 	ldrb	r3, [r6]
   13f48:	e3530000 	cmp	r3, #0
   13f4c:	0a000003 	beq	13f60 <fat_dir_entry_read_callback+0x100>
   13f50:	ebffff91 	bl	13d9c <fat_calc_83_checksum>
   13f54:	e5d83008 	ldrb	r3, [r8, #8]
   13f58:	e1530000 	cmp	r3, r0
   13f5c:	0a000039 	beq	14048 <fat_dir_entry_read_callback+0x1e8>
#endif
        {
            /* reset directory entry */
            memset(dir_entry, 0, sizeof(*dir_entry));
   13f60:	e3a01000 	mov	r1, #0
   13f64:	e1a00006 	mov	r0, r6
   13f68:	e3a02034 	mov	r2, #52	; 0x34
   13f6c:	eb0007e5 	bl	15f08 <memset>
            dir_entry->entry_offset = offset;
   13f70:	e586402c 	str	r4, [r6, #44]	; 0x2c
   13f74:	e5865030 	str	r5, [r6, #48]	; 0x30
   13f78:	e3a01000 	mov	r1, #0

            uint8_t i;
            for(i = 0; i < 8; ++i)
            {
                if(buffer[i] == ' ')
   13f7c:	e7d73001 	ldrb	r3, [r7, r1]
   13f80:	e3530020 	cmp	r3, #32
   13f84:	e20120ff 	and	r2, r1, #255	; 0xff
   13f88:	0a00000d 	beq	13fc4 <fat_dir_entry_read_callback+0x164>
                    break;
                long_name[i] = buffer[i];
   13f8c:	e7c63001 	strb	r3, [r6, r1]
                /* Windows NT and later versions do not store lfn entries
                 * for 8.3 names which have a lowercase basename, extension
                 * or both when everything else is uppercase. They use two
                 * extra bits to signal a lowercase basename or extension.
                 */
                if((buffer[12] & 0x08) && buffer[i] >= 'A' && buffer[i] <= 'Z')
   13f90:	e5d7200c 	ldrb	r2, [r7, #12]
   13f94:	e3120008 	tst	r2, #8
   13f98:	0a000005 	beq	13fb4 <fat_dir_entry_read_callback+0x154>
   13f9c:	e7d72001 	ldrb	r2, [r7, r1]
   13fa0:	e3520040 	cmp	r2, #64	; 0x40
   13fa4:	9a000002 	bls	13fb4 <fat_dir_entry_read_callback+0x154>
   13fa8:	e352005a 	cmp	r2, #90	; 0x5a
                    long_name[i] += 'a' - 'A';
   13fac:	92833020 	addls	r3, r3, #32
   13fb0:	97c63001 	strbls	r3, [r6, r1]
   13fb4:	e2811001 	add	r1, r1, #1
            /* reset directory entry */
            memset(dir_entry, 0, sizeof(*dir_entry));
            dir_entry->entry_offset = offset;

            uint8_t i;
            for(i = 0; i < 8; ++i)
   13fb8:	e3510008 	cmp	r1, #8
   13fbc:	1affffee 	bne	13f7c <fat_dir_entry_read_callback+0x11c>
   13fc0:	e1a02001 	mov	r2, r1
                 * extra bits to signal a lowercase basename or extension.
                 */
                if((buffer[12] & 0x08) && buffer[i] >= 'A' && buffer[i] <= 'Z')
                    long_name[i] += 'a' - 'A';
            }
            if(long_name[0] == 0x05)
   13fc4:	e5d63000 	ldrb	r3, [r6]
   13fc8:	e3530005 	cmp	r3, #5
                long_name[0] = (char) FAT_DIRENTRY_DELETED;
   13fcc:	03e0301a 	mvneq	r3, #26
   13fd0:	05c63000 	strbeq	r3, [r6]

            if(buffer[8] != ' ')
   13fd4:	e5d73008 	ldrb	r3, [r7, #8]
   13fd8:	e3530020 	cmp	r3, #32
   13fdc:	0a000017 	beq	14040 <fat_dir_entry_read_callback+0x1e0>
            {
                long_name[i++] = '.';
   13fe0:	e3a0302e 	mov	r3, #46	; 0x2e
   13fe4:	e7c63002 	strb	r3, [r6, r2]
   13fe8:	e2821001 	add	r1, r2, #1
 * \param[in] offset The absolute offset of the raw data.
 * \param[in,out] p An argument structure controlling operation.
 * \returns 0 on failure or completion, 1 if reading has
 *          to be continued
 */
uint8_t fat_dir_entry_read_callback(uint8_t* buffer, offset_t offset, void* p)
   13fec:	e2822004 	add	r2, r2, #4
   13ff0:	e202c0ff 	and	ip, r2, #255	; 0xff
   13ff4:	e2873008 	add	r3, r7, #8
            if(long_name[0] == 0x05)
                long_name[0] = (char) FAT_DIRENTRY_DELETED;

            if(buffer[8] != ' ')
            {
                long_name[i++] = '.';
   13ff8:	e20120ff 	and	r2, r1, #255	; 0xff

                uint8_t j = 8;
                for(; j < 11; ++j)
                {
                    if(buffer[j] == ' ')
   13ffc:	e4d31001 	ldrb	r1, [r3], #1
   14000:	e3510020 	cmp	r1, #32
   14004:	0a00000d 	beq	14040 <fat_dir_entry_read_callback+0x1e0>
                        break;
                    long_name[i] = buffer[j];
   14008:	e7c61002 	strb	r1, [r6, r2]

                    /* See above for the lowercase 8.3 name handling of
                     * Windows NT and later.
                     */
                    if((buffer[12] & 0x10) && buffer[j] >= 'A' && buffer[j] <= 'Z')
   1400c:	e5d7000c 	ldrb	r0, [r7, #12]
   14010:	e3100010 	tst	r0, #16
   14014:	0a000005 	beq	14030 <fat_dir_entry_read_callback+0x1d0>
   14018:	e5530001 	ldrb	r0, [r3, #-1]
   1401c:	e3500040 	cmp	r0, #64	; 0x40
   14020:	9a000002 	bls	14030 <fat_dir_entry_read_callback+0x1d0>
   14024:	e350005a 	cmp	r0, #90	; 0x5a
                        long_name[i] += 'a' - 'A';
   14028:	92811020 	addls	r1, r1, #32
   1402c:	97c61002 	strbls	r1, [r6, r2]

                    ++i;
   14030:	e2822001 	add	r2, r2, #1
   14034:	e20220ff 	and	r2, r2, #255	; 0xff
            if(buffer[8] != ' ')
            {
                long_name[i++] = '.';

                uint8_t j = 8;
                for(; j < 11; ++j)
   14038:	e152000c 	cmp	r2, ip
   1403c:	1affffee 	bne	13ffc <fat_dir_entry_read_callback+0x19c>

                    ++i;
                }
            } 

            long_name[i] = '\0';
   14040:	e3a03000 	mov	r3, #0
   14044:	e7c63002 	strb	r3, [r6, r2]
        }
        
        /* extract properties of file and store them within the structure */
        dir_entry->attributes = buffer[11];
   14048:	e5d7300b 	ldrb	r3, [r7, #11]
        dir_entry->cluster = read16(&buffer[26]);
   1404c:	e287001a 	add	r0, r7, #26

            long_name[i] = '\0';
        }
        
        /* extract properties of file and store them within the structure */
        dir_entry->attributes = buffer[11];
   14050:	e5c63020 	strb	r3, [r6, #32]
        dir_entry->cluster = read16(&buffer[26]);
   14054:	eb00076a 	bl	15e04 <read16>
   14058:	e1a04000 	mov	r4, r0
   1405c:	e5860024 	str	r0, [r6, #36]	; 0x24
#if FAT_FAT32_SUPPORT
        dir_entry->cluster |= ((cluster_t) read16(&buffer[20])) << 16;
   14060:	e2870014 	add	r0, r7, #20
   14064:	eb000766 	bl	15e04 <read16>
   14068:	e1840800 	orr	r0, r4, r0, lsl #16
   1406c:	e5860024 	str	r0, [r6, #36]	; 0x24
#endif
        dir_entry->file_size = read32(&buffer[28]);
   14070:	e287001c 	add	r0, r7, #28
   14074:	eb000766 	bl	15e14 <read32>
#if FAT_DATETIME_SUPPORT
        dir_entry->modification_time = read16(&buffer[22]);
        dir_entry->modification_date = read16(&buffer[24]);
#endif

        arg->finished = 1;
   14078:	e3a03001 	mov	r3, #1
        dir_entry->attributes = buffer[11];
        dir_entry->cluster = read16(&buffer[26]);
#if FAT_FAT32_SUPPORT
        dir_entry->cluster |= ((cluster_t) read16(&buffer[20])) << 16;
#endif
        dir_entry->file_size = read32(&buffer[28]);
   1407c:	e5860028 	str	r0, [r6, #40]	; 0x28
#if FAT_DATETIME_SUPPORT
        dir_entry->modification_time = read16(&buffer[22]);
        dir_entry->modification_date = read16(&buffer[24]);
#endif

        arg->finished = 1;
   14080:	e5c83009 	strb	r3, [r8, #9]
        return 0;
   14084:	e3a00000 	mov	r0, #0
    }
}
   14088:	e28dd010 	add	sp, sp, #16
   1408c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   14090:	e12fff1e 	bx	lr
   14094:	0001c374 	.word	0x0001c374

00014098 <fat_get_next_cluster>:
 * \param[in] cluster_num The number of the cluster for which to determine its successor.
 * \returns The wanted cluster number, or 0 on error.
 */
cluster_t fat_get_next_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
   14098:	e3500000 	cmp	r0, #0
   1409c:	13510001 	cmpne	r1, #1
 * \param[in] fs The filesystem for which to determine the next cluster.
 * \param[in] cluster_num The number of the cluster for which to determine its successor.
 * \returns The wanted cluster number, or 0 on error.
 */
cluster_t fat_get_next_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
   140a0:	e92d4003 	push	{r0, r1, lr}
   140a4:	e1a02001 	mov	r2, r1
    if(!fs || cluster_num < 2)
   140a8:	9a00002b 	bls	1415c <fat_get_next_cluster+0xc4>
        return 0;

#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
   140ac:	e590c000 	ldr	ip, [r0]
   140b0:	e5dc3010 	ldrb	r3, [ip, #16]
   140b4:	e353000b 	cmp	r3, #11
   140b8:	e280100c 	add	r1, r0, #12
   140bc:	e8910003 	ldm	r1, {r0, r1}
   140c0:	1a000011 	bne	1410c <fat_get_next_cluster+0x74>
    {
        /* read appropriate fat entry */
        uint32_t fat_entry;
        if(!fs->partition->device_read(fs->header.fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
   140c4:	e3a03004 	mov	r3, #4
   140c8:	e0a10293 	umlal	r0, r1, r3, r2
   140cc:	e08d2003 	add	r2, sp, r3
   140d0:	e59cc000 	ldr	ip, [ip]
   140d4:	e1a0e00f 	mov	lr, pc
   140d8:	e12fff1c 	bx	ip
   140dc:	e3500000 	cmp	r0, #0
   140e0:	0a00001d 	beq	1415c <fat_get_next_cluster+0xc4>
            return 0;

        /* determine next cluster from fat */
        cluster_num = ltoh32(fat_entry);
   140e4:	e59d0004 	ldr	r0, [sp, #4]
        
        if(cluster_num == FAT32_CLUSTER_FREE ||
   140e8:	e370029f 	cmn	r0, #-268435447	; 0xf0000009
   140ec:	13500000 	cmpne	r0, #0
   140f0:	0a000019 	beq	1415c <fat_get_next_cluster+0xc4>
           cluster_num == FAT32_CLUSTER_BAD ||
           (cluster_num >= FAT32_CLUSTER_RESERVED_MIN && cluster_num <= FAT32_CLUSTER_RESERVED_MAX) ||
   140f4:	e280320f 	add	r3, r0, #-268435456	; 0xf0000000
   140f8:	e2833010 	add	r3, r3, #16

        /* determine next cluster from fat */
        cluster_num = ltoh32(fat_entry);
        
        if(cluster_num == FAT32_CLUSTER_FREE ||
           cluster_num == FAT32_CLUSTER_BAD ||
   140fc:	e3530006 	cmp	r3, #6
           (cluster_num >= FAT32_CLUSTER_RESERVED_MIN && cluster_num <= FAT32_CLUSTER_RESERVED_MAX) ||
           (cluster_num >= FAT32_CLUSTER_LAST_MIN && cluster_num <= FAT32_CLUSTER_LAST_MAX))
   14100:	8280328f 	addhi	r3, r0, #-268435448	; 0xf0000008

        /* determine next cluster from fat */
        cluster_num = ltoh32(fat_entry);
        
        if(cluster_num == FAT32_CLUSTER_FREE ||
           cluster_num == FAT32_CLUSTER_BAD ||
   14104:	8a000012 	bhi	14154 <fat_get_next_cluster+0xbc>
   14108:	ea000013 	b	1415c <fat_get_next_cluster+0xc4>
    else
#endif
    {
        /* read appropriate fat entry */
        uint16_t fat_entry;
        if(!fs->partition->device_read(fs->header.fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
   1410c:	e3a03002 	mov	r3, #2
   14110:	e0a10293 	umlal	r0, r1, r3, r2
   14114:	e08d2003 	add	r2, sp, r3
   14118:	e59cc000 	ldr	ip, [ip]
   1411c:	e1a0e00f 	mov	lr, pc
   14120:	e12fff1c 	bx	ip
   14124:	e3500000 	cmp	r0, #0
   14128:	0a00000b 	beq	1415c <fat_get_next_cluster+0xc4>
            return 0;

        /* determine next cluster from fat */
        cluster_num = ltoh16(fat_entry);
   1412c:	e1dd00b2 	ldrh	r0, [sp, #2]
        
        if(cluster_num == FAT16_CLUSTER_FREE ||
   14130:	e59f3030 	ldr	r3, [pc, #48]	; 14168 <fat_get_next_cluster+0xd0>
   14134:	e3500000 	cmp	r0, #0
   14138:	11500003 	cmpne	r0, r3
   1413c:	0a000006 	beq	1415c <fat_get_next_cluster+0xc4>
           cluster_num == FAT16_CLUSTER_BAD ||
           (cluster_num >= FAT16_CLUSTER_RESERVED_MIN && cluster_num <= FAT16_CLUSTER_RESERVED_MAX) ||
   14140:	e2403cff 	sub	r3, r0, #65280	; 0xff00
   14144:	e24320f0 	sub	r2, r3, #240	; 0xf0

        /* determine next cluster from fat */
        cluster_num = ltoh16(fat_entry);
        
        if(cluster_num == FAT16_CLUSTER_FREE ||
           cluster_num == FAT16_CLUSTER_BAD ||
   14148:	e3520006 	cmp	r2, #6
   1414c:	9a000002 	bls	1415c <fat_get_next_cluster+0xc4>
           (cluster_num >= FAT16_CLUSTER_RESERVED_MIN && cluster_num <= FAT16_CLUSTER_RESERVED_MAX) ||
           (cluster_num >= FAT16_CLUSTER_LAST_MIN && cluster_num <= FAT16_CLUSTER_LAST_MAX))
   14150:	e24330f8 	sub	r3, r3, #248	; 0xf8
        /* determine next cluster from fat */
        cluster_num = ltoh16(fat_entry);
        
        if(cluster_num == FAT16_CLUSTER_FREE ||
           cluster_num == FAT16_CLUSTER_BAD ||
           (cluster_num >= FAT16_CLUSTER_RESERVED_MIN && cluster_num <= FAT16_CLUSTER_RESERVED_MAX) ||
   14154:	e3530007 	cmp	r3, #7
   14158:	8a000000 	bhi	14160 <fat_get_next_cluster+0xc8>
 * \returns The wanted cluster number, or 0 on error.
 */
cluster_t fat_get_next_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
        return 0;
   1415c:	e3a00000 	mov	r0, #0
           (cluster_num >= FAT16_CLUSTER_LAST_MIN && cluster_num <= FAT16_CLUSTER_LAST_MAX))
            return 0;
    }

    return cluster_num;
}
   14160:	e8bd400c 	pop	{r2, r3, lr}
   14164:	e12fff1e 	bx	lr
   14168:	0000fff7 	.word	0x0000fff7

0001416c <fat_free_clusters>:
 * \returns 0 on failure, 1 on success.
 * \see fat_terminate_clusters
 */
uint8_t fat_free_clusters(struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
   1416c:	e3500000 	cmp	r0, #0
   14170:	13510001 	cmpne	r1, #1
 * \param[in] cluster_num The starting cluster of the chain which to free.
 * \returns 0 on failure, 1 on success.
 * \see fat_terminate_clusters
 */
uint8_t fat_free_clusters(struct fat_fs_struct* fs, cluster_t cluster_num)
{
   14174:	e92d4ff7 	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14178:	e1a0a001 	mov	sl, r1
    if(!fs || cluster_num < 2)
   1417c:	e1a08000 	mov	r8, r0
   14180:	83a09000 	movhi	r9, #0
   14184:	93a09001 	movls	r9, #1
   14188:	9a000057 	bls	142ec <fat_free_clusters+0x180>
        return 0;

    offset_t fat_offset = fs->header.fat_offset;
#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
   1418c:	e5903000 	ldr	r3, [r0]
   14190:	e5d33010 	ldrb	r3, [r3, #16]
   14194:	e353000b 	cmp	r3, #11
uint8_t fat_free_clusters(struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
        return 0;

    offset_t fat_offset = fs->header.fat_offset;
   14198:	e280500c 	add	r5, r0, #12
   1419c:	e8950030 	ldm	r5, {r4, r5}
#endif
    {
        uint16_t fat_entry;
        while(cluster_num)
        {
            if(!fs->partition->device_read(fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
   141a0:	13a0b002 	movne	fp, #2
               (cluster_num_next >= FAT16_CLUSTER_RESERVED_MIN &&
                cluster_num_next <= FAT16_CLUSTER_RESERVED_MAX
               )
              )
                return 0;
            if(cluster_num_next >= FAT16_CLUSTER_LAST_MIN && cluster_num_next <= FAT16_CLUSTER_LAST_MAX)
   141a4:	159f914c 	ldrne	r9, [pc, #332]	; 142f8 <fat_free_clusters+0x18c>
    if(!fs || cluster_num < 2)
        return 0;

    offset_t fat_offset = fs->header.fat_offset;
#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
   141a8:	1a00002b 	bne	1425c <fat_free_clusters+0xf0>
   141ac:	ea000001 	b	141b8 <fat_free_clusters+0x4c>

            /* We continue in any case here, even if freeing the cluster failed.
             * The cluster is lost, but maybe we can still free up some later ones.
             */

            cluster_num = cluster_num_next;
   141b0:	e1a0a00c 	mov	sl, ip
   141b4:	ea000000 	b	141bc <fat_free_clusters+0x50>
    if(fs->partition->type == PARTITION_TYPE_FAT32)
    {
        uint32_t fat_entry;
        while(cluster_num)
        {
            if(!fs->partition->device_read(fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
   141b8:	e3a0b004 	mov	fp, #4
   141bc:	e1a06004 	mov	r6, r4
   141c0:	e1a07005 	mov	r7, r5
   141c4:	e0a76a9b 	umlal	r6, r7, fp, sl
   141c8:	e598c000 	ldr	ip, [r8]
   141cc:	e1a00006 	mov	r0, r6
   141d0:	e1a01007 	mov	r1, r7
   141d4:	e28d2008 	add	r2, sp, #8
   141d8:	e3a03004 	mov	r3, #4
   141dc:	e59cc000 	ldr	ip, [ip]
   141e0:	e1a0e00f 	mov	lr, pc
   141e4:	e12fff1c 	bx	ip
   141e8:	e3500000 	cmp	r0, #0
   141ec:	0a00003f 	beq	142f0 <fat_free_clusters+0x184>
                return 0;

            /* get next cluster of current cluster before freeing current cluster */
            uint32_t cluster_num_next = ltoh32(fat_entry);
   141f0:	e59dc008 	ldr	ip, [sp, #8]

            if(cluster_num_next == FAT32_CLUSTER_FREE)
   141f4:	e35c0000 	cmp	ip, #0
   141f8:	0a000039 	beq	142e4 <fat_free_clusters+0x178>
                return 1;
            if(cluster_num_next == FAT32_CLUSTER_BAD ||
   141fc:	e28c320f 	add	r3, ip, #-268435456	; 0xf0000000
   14200:	e2833010 	add	r3, r3, #16
   14204:	e3530007 	cmp	r3, #7
   14208:	9a000037 	bls	142ec <fat_free_clusters+0x180>
               (cluster_num_next >= FAT32_CLUSTER_RESERVED_MIN &&
                cluster_num_next <= FAT32_CLUSTER_RESERVED_MAX
               )
              )
                return 0;
            if(cluster_num_next >= FAT32_CLUSTER_LAST_MIN && cluster_num_next <= FAT32_CLUSTER_LAST_MAX)
   1420c:	e28c328f 	add	r3, ip, #-268435448	; 0xf0000008
                cluster_num_next = 0;
   14210:	e3530007 	cmp	r3, #7

            /* We know we will free the cluster, so remember it as
             * free for the next allocation.
             */
            if(!fs->cluster_free)
   14214:	e5983030 	ldr	r3, [r8, #48]	; 0x30
                cluster_num_next <= FAT32_CLUSTER_RESERVED_MAX
               )
              )
                return 0;
            if(cluster_num_next >= FAT32_CLUSTER_LAST_MIN && cluster_num_next <= FAT32_CLUSTER_LAST_MAX)
                cluster_num_next = 0;
   14218:	93a0c000 	movls	ip, #0

            /* We know we will free the cluster, so remember it as
             * free for the next allocation.
             */
            if(!fs->cluster_free)
   1421c:	e3530000 	cmp	r3, #0
                fs->cluster_free = cluster_num;
   14220:	0588a030 	streq	sl, [r8, #48]	; 0x30

            /* free cluster */
            fat_entry = HTOL32(FAT32_CLUSTER_FREE);
   14224:	e58d9008 	str	r9, [sp, #8]
            fs->partition->device_write(fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry));
   14228:	e598a000 	ldr	sl, [r8]
   1422c:	e1a00006 	mov	r0, r6
   14230:	e58dc000 	str	ip, [sp]
   14234:	e1a01007 	mov	r1, r7
   14238:	e28d2008 	add	r2, sp, #8
   1423c:	e3a03004 	mov	r3, #4
   14240:	e59ac008 	ldr	ip, [sl, #8]
   14244:	e1a0e00f 	mov	lr, pc
   14248:	e12fff1c 	bx	ip
    offset_t fat_offset = fs->header.fat_offset;
#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
    {
        uint32_t fat_entry;
        while(cluster_num)
   1424c:	e59dc000 	ldr	ip, [sp]
   14250:	e35c0000 	cmp	ip, #0
   14254:	1affffd5 	bne	141b0 <fat_free_clusters+0x44>
   14258:	ea000021 	b	142e4 <fat_free_clusters+0x178>
#endif
    {
        uint16_t fat_entry;
        while(cluster_num)
        {
            if(!fs->partition->device_read(fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
   1425c:	e1a06004 	mov	r6, r4
   14260:	e1a07005 	mov	r7, r5
   14264:	e0a76a9b 	umlal	r6, r7, fp, sl
   14268:	e598c000 	ldr	ip, [r8]
   1426c:	e1a00006 	mov	r0, r6
   14270:	e1a01007 	mov	r1, r7
   14274:	e28d2006 	add	r2, sp, #6
   14278:	e3a03002 	mov	r3, #2
   1427c:	e59cc000 	ldr	ip, [ip]
   14280:	e1a0e00f 	mov	lr, pc
   14284:	e12fff1c 	bx	ip
   14288:	e3500000 	cmp	r0, #0
   1428c:	0a000017 	beq	142f0 <fat_free_clusters+0x184>
                return 0;

            /* get next cluster of current cluster before freeing current cluster */
            uint16_t cluster_num_next = ltoh16(fat_entry);
   14290:	e1dda0b6 	ldrh	sl, [sp, #6]

            if(cluster_num_next == FAT16_CLUSTER_FREE)
   14294:	e35a0000 	cmp	sl, #0
   14298:	0a000011 	beq	142e4 <fat_free_clusters+0x178>
                return 1;
            if(cluster_num_next == FAT16_CLUSTER_BAD ||
   1429c:	e28a3010 	add	r3, sl, #16
   142a0:	e1a03803 	lsl	r3, r3, #16
   142a4:	e3530807 	cmp	r3, #458752	; 0x70000
   142a8:	9a00000f 	bls	142ec <fat_free_clusters+0x180>
                cluster_num_next <= FAT16_CLUSTER_RESERVED_MAX
               )
              )
                return 0;
            if(cluster_num_next >= FAT16_CLUSTER_LAST_MIN && cluster_num_next <= FAT16_CLUSTER_LAST_MAX)
                cluster_num_next = 0;
   142ac:	e15a0009 	cmp	sl, r9

            /* free cluster */
            fat_entry = HTOL16(FAT16_CLUSTER_FREE);
   142b0:	e3a03000 	mov	r3, #0
                cluster_num_next <= FAT16_CLUSTER_RESERVED_MAX
               )
              )
                return 0;
            if(cluster_num_next >= FAT16_CLUSTER_LAST_MIN && cluster_num_next <= FAT16_CLUSTER_LAST_MAX)
                cluster_num_next = 0;
   142b4:	83a0a000 	movhi	sl, #0

            /* free cluster */
            fat_entry = HTOL16(FAT16_CLUSTER_FREE);
   142b8:	e1cd30b6 	strh	r3, [sp, #6]
            fs->partition->device_write(fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry));
   142bc:	e598c000 	ldr	ip, [r8]
   142c0:	e1a00006 	mov	r0, r6
   142c4:	e1a01007 	mov	r1, r7
   142c8:	e28d2006 	add	r2, sp, #6
   142cc:	e3a03002 	mov	r3, #2
   142d0:	e59cc008 	ldr	ip, [ip, #8]
   142d4:	e1a0e00f 	mov	lr, pc
   142d8:	e12fff1c 	bx	ip
    }
    else
#endif
    {
        uint16_t fat_entry;
        while(cluster_num)
   142dc:	e35a0000 	cmp	sl, #0
   142e0:	1affffdd 	bne	1425c <fat_free_clusters+0xf0>

            /* get next cluster of current cluster before freeing current cluster */
            uint16_t cluster_num_next = ltoh16(fat_entry);

            if(cluster_num_next == FAT16_CLUSTER_FREE)
                return 1;
   142e4:	e3a00001 	mov	r0, #1
   142e8:	ea000000 	b	142f0 <fat_free_clusters+0x184>
 * \see fat_terminate_clusters
 */
uint8_t fat_free_clusters(struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
        return 0;
   142ec:	e3a00000 	mov	r0, #0
            cluster_num = cluster_num_next;
        }
    }

    return 1;
}
   142f0:	e8bd4ffe 	pop	{r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   142f4:	e12fff1e 	bx	lr
   142f8:	0000fff7 	.word	0x0000fff7

000142fc <fat_append_clusters>:
 * \param[in] cluster_num The cluster to which to append the new chain.
 * \param[in] count The number of clusters to allocate.
 * \returns 0 on failure, the number of the first new cluster on success.
 */
cluster_t fat_append_clusters(struct fat_fs_struct* fs, cluster_t cluster_num, cluster_t count)
{
   142fc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(!fs)
   14300:	e2507000 	subs	r7, r0, #0
 * \param[in] cluster_num The cluster to which to append the new chain.
 * \param[in] count The number of clusters to allocate.
 * \returns 0 on failure, the number of the first new cluster on success.
 */
cluster_t fat_append_clusters(struct fat_fs_struct* fs, cluster_t cluster_num, cluster_t count)
{
   14304:	e24dd020 	sub	sp, sp, #32
   14308:	e1a0b001 	mov	fp, r1
    if(!fs)
   1430c:	0a000074 	beq	144e4 <fat_append_clusters+0x1e8>
        return 0;

    device_read_t device_read = fs->partition->device_read;
   14310:	e5973000 	ldr	r3, [r7]
    device_write_t device_write = fs->partition->device_write;
    offset_t fat_offset = fs->header.fat_offset;
   14314:	e287100c 	add	r1, r7, #12
   14318:	e8910003 	ldm	r1, {r0, r1}
cluster_t fat_append_clusters(struct fat_fs_struct* fs, cluster_t cluster_num, cluster_t count)
{
    if(!fs)
        return 0;

    device_read_t device_read = fs->partition->device_read;
   1431c:	e593c000 	ldr	ip, [r3]
    device_write_t device_write = fs->partition->device_write;
   14320:	e593a008 	ldr	sl, [r3, #8]
    cluster_t cluster_next = 0;
    cluster_t cluster_count;
    uint16_t fat_entry16;
#if FAT_FAT32_SUPPORT
    uint32_t fat_entry32;
    uint8_t is_fat32 = (fs->partition->type == PARTITION_TYPE_FAT32);
   14324:	e5d33010 	ldrb	r3, [r3, #16]
    if(!fs)
        return 0;

    device_read_t device_read = fs->partition->device_read;
    device_write_t device_write = fs->partition->device_write;
    offset_t fat_offset = fs->header.fat_offset;
   14328:	e88d0003 	stm	sp, {r0, r1}
    cluster_t cluster_next = 0;
    cluster_t cluster_count;
    uint16_t fat_entry16;
#if FAT_FAT32_SUPPORT
    uint32_t fat_entry32;
    uint8_t is_fat32 = (fs->partition->type == PARTITION_TYPE_FAT32);
   1432c:	e253100b 	subs	r1, r3, #11
   14330:	e2713000 	rsbs	r3, r1, #0
   14334:	e0b33001 	adcs	r3, r3, r1

    if(is_fat32)
   14338:	e3530000 	cmp	r3, #0
    cluster_t cluster_next = 0;
    cluster_t cluster_count;
    uint16_t fat_entry16;
#if FAT_FAT32_SUPPORT
    uint32_t fat_entry32;
    uint8_t is_fat32 = (fs->partition->type == PARTITION_TYPE_FAT32);
   1433c:	e58d3010 	str	r3, [sp, #16]
   14340:	e5973014 	ldr	r3, [r7, #20]

    if(is_fat32)
        cluster_count = fs->header.fat_size / sizeof(fat_entry32);
   14344:	11a03123 	lsrne	r3, r3, #2
    else
#endif
        cluster_count = fs->header.fat_size / sizeof(fat_entry16);
   14348:	01a030a3 	lsreq	r3, r3, #1
   1434c:	e58d3008 	str	r3, [sp, #8]
cluster_t fat_append_clusters(struct fat_fs_struct* fs, cluster_t cluster_num, cluster_t count)
{
    if(!fs)
        return 0;

    device_read_t device_read = fs->partition->device_read;
   14350:	e58dc014 	str	ip, [sp, #20]
    else
#endif
        cluster_count = fs->header.fat_size / sizeof(fat_entry16);

    fs->cluster_free = 0;
    for(cluster_t cluster_left = cluster_count; cluster_left > 0; --cluster_left, ++cluster_current)
   14354:	e59dc008 	ldr	ip, [sp, #8]
        cluster_count = fs->header.fat_size / sizeof(fat_entry32);
    else
#endif
        cluster_count = fs->header.fat_size / sizeof(fat_entry16);

    fs->cluster_free = 0;
   14358:	e3a06000 	mov	r6, #0

    device_read_t device_read = fs->partition->device_read;
    device_write_t device_write = fs->partition->device_write;
    offset_t fat_offset = fs->header.fat_offset;
    cluster_t count_left = count;
    cluster_t cluster_current = fs->cluster_free;
   1435c:	e5979030 	ldr	r9, [r7, #48]	; 0x30
    else
#endif
        cluster_count = fs->header.fat_size / sizeof(fat_entry16);

    fs->cluster_free = 0;
    for(cluster_t cluster_left = cluster_count; cluster_left > 0; --cluster_left, ++cluster_current)
   14360:	e58dc00c 	str	ip, [sp, #12]
        cluster_count = fs->header.fat_size / sizeof(fat_entry32);
    else
#endif
        cluster_count = fs->header.fat_size / sizeof(fat_entry16);

    fs->cluster_free = 0;
   14364:	e5876030 	str	r6, [r7, #48]	; 0x30
        return 0;

    device_read_t device_read = fs->partition->device_read;
    device_write_t device_write = fs->partition->device_write;
    offset_t fat_offset = fs->header.fat_offset;
    cluster_t count_left = count;
   14368:	e1a08002 	mov	r8, r2
    else
#endif
        cluster_count = fs->header.fat_size / sizeof(fat_entry16);

    fs->cluster_free = 0;
    for(cluster_t cluster_left = cluster_count; cluster_left > 0; --cluster_left, ++cluster_current)
   1436c:	ea000045 	b	14488 <fat_append_clusters+0x18c>
    {
        if(cluster_current < 2 || cluster_current >= cluster_count)
   14370:	e3590001 	cmp	r9, #1
   14374:	e59dc008 	ldr	ip, [sp, #8]
   14378:	83a03000 	movhi	r3, #0
   1437c:	93a03001 	movls	r3, #1
   14380:	e159000c 	cmp	r9, ip
   14384:	23833001 	orrcs	r3, r3, #1
            cluster_current = 2;

#if FAT_FAT32_SUPPORT
        if(is_fat32)
   14388:	e59dc010 	ldr	ip, [sp, #16]

    fs->cluster_free = 0;
    for(cluster_t cluster_left = cluster_count; cluster_left > 0; --cluster_left, ++cluster_current)
    {
        if(cluster_current < 2 || cluster_current >= cluster_count)
            cluster_current = 2;
   1438c:	e3530000 	cmp	r3, #0
   14390:	13a09002 	movne	r9, #2

#if FAT_FAT32_SUPPORT
        if(is_fat32)
   14394:	e35c0000 	cmp	ip, #0
   14398:	0a00000b 	beq	143cc <fat_append_clusters+0xd0>
        {
            if(!device_read(fat_offset + (offset_t) cluster_current * sizeof(fat_entry32), (uint8_t*) &fat_entry32, sizeof(fat_entry32)))
   1439c:	e89d0030 	ldm	sp, {r4, r5}
   143a0:	e3a03004 	mov	r3, #4
   143a4:	e0a54993 	umlal	r4, r5, r3, r9
   143a8:	e28d201c 	add	r2, sp, #28
   143ac:	e1a00004 	mov	r0, r4
   143b0:	e1a01005 	mov	r1, r5
   143b4:	e59dc014 	ldr	ip, [sp, #20]
   143b8:	e1a0e00f 	mov	lr, pc
   143bc:	e12fff1c 	bx	ip
   143c0:	e3500000 	cmp	r0, #0
   143c4:	1a00004c 	bne	144fc <fat_append_clusters+0x200>
   143c8:	ea000045 	b	144e4 <fat_append_clusters+0x1e8>
                return 0;
        }
        else
#endif
        {
            if(!device_read(fat_offset + (offset_t) cluster_current * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
   143cc:	e89d0030 	ldm	sp, {r4, r5}
   143d0:	e3a00002 	mov	r0, #2
   143d4:	e0a54990 	umlal	r4, r5, r0, r9
   143d8:	e28d201a 	add	r2, sp, #26
   143dc:	e1a00004 	mov	r0, r4
   143e0:	e1a01005 	mov	r1, r5
   143e4:	e3a03002 	mov	r3, #2
   143e8:	e59dc014 	ldr	ip, [sp, #20]
   143ec:	e1a0e00f 	mov	lr, pc
   143f0:	e12fff1c 	bx	ip
   143f4:	e3500000 	cmp	r0, #0
   143f8:	1a00003b 	bne	144ec <fat_append_clusters+0x1f0>
   143fc:	ea000038 	b	144e4 <fat_append_clusters+0x1e8>

            /* If we don't need this free cluster for the
             * current allocation, we keep it in mind for
             * the next time.
             */
            if(count_left == 0)
   14400:	e3580000 	cmp	r8, #0
   14404:	0a000010 	beq	1444c <fat_append_clusters+0x150>
                fs->cluster_free = cluster_current;
                break;
            }

            /* allocate cluster */
            if(cluster_next == 0)
   14408:	e3560000 	cmp	r6, #0
                fat_entry32 = HTOL32(FAT32_CLUSTER_LAST_MAX);
   1440c:	03e0320f 	mvneq	r3, #-268435456	; 0xf0000000
            else
                fat_entry32 = htol32(cluster_next);
   14410:	158d601c 	strne	r6, [sp, #28]
                break;
            }

            /* allocate cluster */
            if(cluster_next == 0)
                fat_entry32 = HTOL32(FAT32_CLUSTER_LAST_MAX);
   14414:	058d301c 	streq	r3, [sp, #28]
            else
                fat_entry32 = htol32(cluster_next);

            if(!device_write(fat_offset + (offset_t) cluster_current * sizeof(fat_entry32), (uint8_t*) &fat_entry32, sizeof(fat_entry32)))
   14418:	e1a00004 	mov	r0, r4
   1441c:	e1a01005 	mov	r1, r5
   14420:	e28d201c 	add	r2, sp, #28
   14424:	e3a03004 	mov	r3, #4
   14428:	e1a0e00f 	mov	lr, pc
   1442c:	e12fff1a 	bx	sl
   14430:	e3500000 	cmp	r0, #0
   14434:	0a000027 	beq	144d8 <fat_append_clusters+0x1dc>
            if(!device_write(fat_offset + (offset_t) cluster_current * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
                break;
        }

        cluster_next = cluster_current;
        --count_left;
   14438:	e2488001 	sub	r8, r8, #1
   1443c:	e1a06009 	mov	r6, r9
   14440:	ea00000c 	b	14478 <fat_append_clusters+0x17c>

            /* If we don't need this free cluster for the
             * current allocation, we keep it in mind for
             * the next time.
             */
            if(count_left == 0)
   14444:	e3580000 	cmp	r8, #0
   14448:	1a000001 	bne	14454 <fat_append_clusters+0x158>
            {
                fs->cluster_free = cluster_current;
   1444c:	e5879030 	str	r9, [r7, #48]	; 0x30
                break;
   14450:	ea000011 	b	1449c <fat_append_clusters+0x1a0>
            }

            /* allocate cluster */
            if(cluster_next == 0)
   14454:	e3560000 	cmp	r6, #0
                fat_entry16 = HTOL16(FAT16_CLUSTER_LAST_MAX);
   14458:	03e03000 	mvneq	r3, #0
   1445c:	01cd31ba 	strheq	r3, [sp, #26]
            else
                fat_entry16 = htol16((uint16_t) cluster_next);
   14460:	11cd61ba 	strhne	r6, [sp, #26]

            if(!device_write(fat_offset + (offset_t) cluster_current * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
   14464:	e1a00004 	mov	r0, r4
   14468:	e1a01005 	mov	r1, r5
   1446c:	e28d201a 	add	r2, sp, #26
   14470:	e3a03002 	mov	r3, #2
   14474:	eaffffeb 	b	14428 <fat_append_clusters+0x12c>
    else
#endif
        cluster_count = fs->header.fat_size / sizeof(fat_entry16);

    fs->cluster_free = 0;
    for(cluster_t cluster_left = cluster_count; cluster_left > 0; --cluster_left, ++cluster_current)
   14478:	e59dc00c 	ldr	ip, [sp, #12]
   1447c:	e24cc001 	sub	ip, ip, #1
   14480:	e58dc00c 	str	ip, [sp, #12]
   14484:	e2899001 	add	r9, r9, #1
   14488:	e59dc00c 	ldr	ip, [sp, #12]
   1448c:	e35c0000 	cmp	ip, #0
   14490:	1affffb6 	bne	14370 <fat_append_clusters+0x74>
        --count_left;
    }

    do
    {
        if(count_left > 0)
   14494:	e3580000 	cmp	r8, #0
   14498:	1a00000e 	bne	144d8 <fat_append_clusters+0x1dc>
            break;

        /* We allocated a new cluster chain. Now join
         * it with the existing one (if any).
         */
        if(cluster_num >= 2)
   1449c:	e35b0001 	cmp	fp, #1
   144a0:	9a000019 	bls	1450c <fat_append_clusters+0x210>
        {
#if FAT_FAT32_SUPPORT
            if(is_fat32)
   144a4:	e59dc010 	ldr	ip, [sp, #16]
            else
#endif
            {
                fat_entry16 = htol16((uint16_t) cluster_next);

                if(!device_write(fat_offset + (offset_t) cluster_num * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
   144a8:	e89d0003 	ldm	sp, {r0, r1}
         * it with the existing one (if any).
         */
        if(cluster_num >= 2)
        {
#if FAT_FAT32_SUPPORT
            if(is_fat32)
   144ac:	e35c0000 	cmp	ip, #0
            {
                fat_entry32 = htol32(cluster_next);
   144b0:	e28d2020 	add	r2, sp, #32

                if(!device_write(fat_offset + (offset_t) cluster_num * sizeof(fat_entry32), (uint8_t*) &fat_entry32, sizeof(fat_entry32)))
   144b4:	13a03004 	movne	r3, #4
            else
#endif
            {
                fat_entry16 = htol16((uint16_t) cluster_next);

                if(!device_write(fat_offset + (offset_t) cluster_num * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
   144b8:	03a03002 	moveq	r3, #2
        if(cluster_num >= 2)
        {
#if FAT_FAT32_SUPPORT
            if(is_fat32)
            {
                fat_entry32 = htol32(cluster_next);
   144bc:	15226004 	strne	r6, [r2, #-4]!
                    break;
            }
            else
#endif
            {
                fat_entry16 = htol16((uint16_t) cluster_next);
   144c0:	016260b6 	strheq	r6, [r2, #-6]!

                if(!device_write(fat_offset + (offset_t) cluster_num * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
   144c4:	e0a10b93 	umlal	r0, r1, r3, fp
   144c8:	e1a0e00f 	mov	lr, pc
   144cc:	e12fff1a 	bx	sl
   144d0:	e3500000 	cmp	r0, #0
   144d4:	1a00000c 	bne	1450c <fat_append_clusters+0x210>
    } while(0);

    /* No space left on device or writing error.
     * Free up all clusters already allocated.
     */
    fat_free_clusters(fs, cluster_next);
   144d8:	e1a00007 	mov	r0, r7
   144dc:	e1a01006 	mov	r1, r6
   144e0:	ebffff21 	bl	1416c <fat_free_clusters>

    return 0;
   144e4:	e3a06000 	mov	r6, #0
   144e8:	ea000007 	b	1450c <fat_append_clusters+0x210>
        }
        else
#endif
        {
            /* check if this is a free cluster */
            if(fat_entry16 != HTOL16(FAT16_CLUSTER_FREE))
   144ec:	e1dd31ba 	ldrh	r3, [sp, #26]
   144f0:	e3530000 	cmp	r3, #0
   144f4:	1affffdf 	bne	14478 <fat_append_clusters+0x17c>
   144f8:	eaffffd1 	b	14444 <fat_append_clusters+0x148>

#if FAT_FAT32_SUPPORT
        if(is_fat32)
        {
            /* check if this is a free cluster */
            if(fat_entry32 != HTOL32(FAT32_CLUSTER_FREE))
   144fc:	e59d301c 	ldr	r3, [sp, #28]
   14500:	e3530000 	cmp	r3, #0
   14504:	1affffdb 	bne	14478 <fat_append_clusters+0x17c>
   14508:	eaffffbc 	b	14400 <fat_append_clusters+0x104>
     * Free up all clusters already allocated.
     */
    fat_free_clusters(fs, cluster_next);

    return 0;
}
   1450c:	e1a00006 	mov	r0, r6
   14510:	e28dd020 	add	sp, sp, #32
   14514:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14518:	e12fff1e 	bx	lr

0001451c <fat_cluster_offset>:
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
   1451c:	e3500000 	cmp	r0, #0
   14520:	13510001 	cmpne	r1, #1
        return 0;
   14524:	93a02000 	movls	r2, #0
   14528:	93a03000 	movls	r3, #0

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
   1452c:	81d0c1ba 	ldrhhi	ip, [r0, #26]
   14530:	8280301c 	addhi	r3, r0, #28
   14534:	8893000c 	ldmhi	r3, {r2, r3}
   14538:	82411002 	subhi	r1, r1, #2
   1453c:	80a3219c 	umlalhi	r2, r3, ip, r1
   14540:	eaffffff 	b	14544 <fat_cluster_offset+0x28>
}
   14544:	e1a00002 	mov	r0, r2
   14548:	e1a01003 	mov	r1, r3
   1454c:	e12fff1e 	bx	lr

00014550 <fat_clear_cluster.part.3>:
 *
 * \param[in] fs The filesystem on which to operate.
 * \param[in] cluster_num The cluster to clear.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_clear_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
   14550:	e92d4070 	push	{r4, r5, r6, lr}
   14554:	e24dd018 	sub	sp, sp, #24
   14558:	e1a06000 	mov	r6, r0
{
    if(cluster_num < 2)
        return 0;

    offset_t cluster_offset = fat_cluster_offset(fs, cluster_num);
   1455c:	ebffffee 	bl	1451c <fat_cluster_offset>

    uint8_t zero[16];
    memset(zero, 0, sizeof(zero));
   14560:	e3a02010 	mov	r2, #16
uint8_t fat_clear_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(cluster_num < 2)
        return 0;

    offset_t cluster_offset = fat_cluster_offset(fs, cluster_num);
   14564:	e1a04000 	mov	r4, r0
   14568:	e1a05001 	mov	r5, r1

    uint8_t zero[16];
    memset(zero, 0, sizeof(zero));
   1456c:	e28d0008 	add	r0, sp, #8
   14570:	e3a01000 	mov	r1, #0
   14574:	eb000663 	bl	15f08 <memset>
    return fs->partition->device_write_interval(cluster_offset,
   14578:	e59f2034 	ldr	r2, [pc, #52]	; 145b4 <fat_clear_cluster.part.3+0x64>
   1457c:	e58d2000 	str	r2, [sp]
   14580:	e3a02000 	mov	r2, #0
   14584:	e58d2004 	str	r2, [sp, #4]
   14588:	e596c000 	ldr	ip, [r6]
   1458c:	e1d631ba 	ldrh	r3, [r6, #26]
   14590:	e1a00004 	mov	r0, r4
   14594:	e1a01005 	mov	r1, r5
   14598:	e28d2008 	add	r2, sp, #8
   1459c:	e59cc00c 	ldr	ip, [ip, #12]
   145a0:	e1a0e00f 	mov	lr, pc
   145a4:	e12fff1c 	bx	ip
                                                zero,
                                                fs->header.cluster_size,
                                                fat_clear_cluster_callback,
                                                0
                                               );
}
   145a8:	e28dd018 	add	sp, sp, #24
   145ac:	e8bd4070 	pop	{r4, r5, r6, lr}
   145b0:	e12fff1e 	bx	lr
   145b4:	00013d94 	.word	0x00013d94

000145b8 <fat_write_dir_entry>:
 * \param[in] fs The filesystem on which to operate.
 * \param[in] dir_entry The directory entry to write.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_write_dir_entry(const struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
{
   145b8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(!fs || !dir_entry)
   145bc:	e3500000 	cmp	r0, #0
   145c0:	13510000 	cmpne	r1, #0
 * \param[in] fs The filesystem on which to operate.
 * \param[in] dir_entry The directory entry to write.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_write_dir_entry(const struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
{
   145c4:	e24dd024 	sub	sp, sp, #36	; 0x24
    if(!fs || !dir_entry)
   145c8:	e1a06001 	mov	r6, r1
        return 0;
   145cc:	03a00000 	moveq	r0, #0
 * \param[in] dir_entry The directory entry to write.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_write_dir_entry(const struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry)
   145d0:	0a00009a 	beq	14840 <fat_write_dir_entry+0x288>
        fat_set_file_modification_date(dir_entry, year, month, day);
        fat_set_file_modification_time(dir_entry, hour, min, sec);
    }
#endif

    device_write_t device_write = fs->partition->device_write;
   145d4:	e5903000 	ldr	r3, [r0]
    offset_t offset = dir_entry->entry_offset;
    const char* name = dir_entry->long_name;
    uint8_t name_len = strlen(name);
   145d8:	e1a00001 	mov	r0, r1
        fat_set_file_modification_date(dir_entry, year, month, day);
        fat_set_file_modification_time(dir_entry, hour, min, sec);
    }
#endif

    device_write_t device_write = fs->partition->device_write;
   145dc:	e593a008 	ldr	sl, [r3, #8]
    offset_t offset = dir_entry->entry_offset;
   145e0:	e281502c 	add	r5, r1, #44	; 0x2c
   145e4:	e8950030 	ldm	r5, {r4, r5}
    const char* name = dir_entry->long_name;
    uint8_t name_len = strlen(name);
   145e8:	eb000699 	bl	16054 <strlen>
   145ec:	e20080ff 	and	r8, r0, #255	; 0xff
#if FAT_LFN_SUPPORT
    uint8_t lfn_entry_count = (name_len + 12) / 13;
   145f0:	e3a0100d 	mov	r1, #13
   145f4:	e288000c 	add	r0, r8, #12
   145f8:	eb001c20 	bl	1b680 <__aeabi_idiv>
    uint8_t buffer[32];

    /* write 8.3 entry */

    /* generate 8.3 file name */
    memset(&buffer[0], ' ', 11);
   145fc:	e3a01020 	mov	r1, #32
   14600:	e3a0200b 	mov	r2, #11
    device_write_t device_write = fs->partition->device_write;
    offset_t offset = dir_entry->entry_offset;
    const char* name = dir_entry->long_name;
    uint8_t name_len = strlen(name);
#if FAT_LFN_SUPPORT
    uint8_t lfn_entry_count = (name_len + 12) / 13;
   14604:	e20070ff 	and	r7, r0, #255	; 0xff
    uint8_t buffer[32];

    /* write 8.3 entry */

    /* generate 8.3 file name */
    memset(&buffer[0], ' ', 11);
   14608:	e28d0004 	add	r0, sp, #4
   1460c:	eb00063d 	bl	15f08 <memset>
    char* name_ext = strrchr(name, '.');
   14610:	e1a00006 	mov	r0, r6
   14614:	e3a0102e 	mov	r1, #46	; 0x2e
   14618:	eb0006c2 	bl	16128 <strrchr>
    if(name_ext && *++name_ext)
   1461c:	e3500000 	cmp	r0, #0
   14620:	0a00000e 	beq	14660 <fat_write_dir_entry+0xa8>
   14624:	e5d03001 	ldrb	r3, [r0, #1]
   14628:	e3530000 	cmp	r3, #0
   1462c:	0a00000b 	beq	14660 <fat_write_dir_entry+0xa8>
   14630:	e2809001 	add	r9, r0, #1
    {
        uint8_t name_ext_len = strlen(name_ext);
   14634:	e1a00009 	mov	r0, r9
   14638:	eb000685 	bl	16054 <strlen>
   1463c:	e20020ff 	and	r2, r0, #255	; 0xff
        name_len -= name_ext_len + 1;
   14640:	e1e03002 	mvn	r3, r2
   14644:	e0888003 	add	r8, r8, r3
            name_ext_len = 3;
#else
            return 0;
#endif
        
        memcpy(&buffer[8], name_ext, name_ext_len);
   14648:	e28d000c 	add	r0, sp, #12
   1464c:	e1a01009 	mov	r1, r9
   14650:	e3520003 	cmp	r2, #3
   14654:	23a02003 	movcs	r2, #3
    memset(&buffer[0], ' ', 11);
    char* name_ext = strrchr(name, '.');
    if(name_ext && *++name_ext)
    {
        uint8_t name_ext_len = strlen(name_ext);
        name_len -= name_ext_len + 1;
   14658:	e20880ff 	and	r8, r8, #255	; 0xff
            name_ext_len = 3;
#else
            return 0;
#endif
        
        memcpy(&buffer[8], name_ext, name_ext_len);
   1465c:	eb000621 	bl	15ee8 <memcpy>
    }
    
    if(name_len <= 8)
   14660:	e3580008 	cmp	r8, #8
    {
        memcpy(buffer, name, name_len);
   14664:	e28d0004 	add	r0, sp, #4
   14668:	e1a01006 	mov	r1, r6
#endif
        
        memcpy(&buffer[8], name_ext, name_ext_len);
    }
    
    if(name_len <= 8)
   1466c:	8a00000a 	bhi	1469c <fat_write_dir_entry+0xe4>
    {
        memcpy(buffer, name, name_len);
   14670:	e1a02008 	mov	r2, r8
   14674:	eb00061b 	bl	15ee8 <memcpy>
         *
         * Theoretically it would be possible to leave
         * the 8.3 entry alone if the basename and the
         * extension have no mixed capitalization.
         */
        if(name[0] == '.' &&
   14678:	e5d63000 	ldrb	r3, [r6]
   1467c:	e353002e 	cmp	r3, #46	; 0x2e
   14680:	1a000013 	bne	146d4 <fat_write_dir_entry+0x11c>
           ((name[1] == '.' && name[2] == '\0') ||
   14684:	e5d63001 	ldrb	r3, [r6, #1]
         *
         * Theoretically it would be possible to leave
         * the 8.3 entry alone if the basename and the
         * extension have no mixed capitalization.
         */
        if(name[0] == '.' &&
   14688:	e353002e 	cmp	r3, #46	; 0x2e
           ((name[1] == '.' && name[2] == '\0') ||
   1468c:	05d63002 	ldrbeq	r3, [r6, #2]
            name[1] == '\0')
          )
            lfn_entry_count = 0;
   14690:	e3530000 	cmp	r3, #0
   14694:	03a07000 	moveq	r7, #0
   14698:	ea00000d 	b	146d4 <fat_write_dir_entry+0x11c>
#endif
    }
    else
    {
#if FAT_LFN_SUPPORT
        memcpy(buffer, name, 8);
   1469c:	e3a02008 	mov	r2, #8
   146a0:	eb000610 	bl	15ee8 <memcpy>

        /* Minimize 8.3 name clashes by appending
         * the lower byte of the cluster number.
         */
        uint8_t num = dir_entry->cluster & 0xff;
   146a4:	e5963024 	ldr	r3, [r6, #36]	; 0x24
   146a8:	e20320ff 	and	r2, r3, #255	; 0xff

        buffer[6] = (num < 0xa0) ? ('0' + (num >> 4)) : ('a' + (num >> 4));
   146ac:	e352009f 	cmp	r2, #159	; 0x9f
        num &= 0x0f;
   146b0:	e203300f 	and	r3, r3, #15
   146b4:	e1a02222 	lsr	r2, r2, #4
        /* Minimize 8.3 name clashes by appending
         * the lower byte of the cluster number.
         */
        uint8_t num = dir_entry->cluster & 0xff;

        buffer[6] = (num < 0xa0) ? ('0' + (num >> 4)) : ('a' + (num >> 4));
   146b8:	92822030 	addls	r2, r2, #48	; 0x30
   146bc:	82822061 	addhi	r2, r2, #97	; 0x61
        num &= 0x0f;
        buffer[7] = (num < 0x0a) ? ('0' + num) : ('a' + num);
   146c0:	e3530009 	cmp	r3, #9
   146c4:	92833030 	addls	r3, r3, #48	; 0x30
   146c8:	82833061 	addhi	r3, r3, #97	; 0x61
        /* Minimize 8.3 name clashes by appending
         * the lower byte of the cluster number.
         */
        uint8_t num = dir_entry->cluster & 0xff;

        buffer[6] = (num < 0xa0) ? ('0' + (num >> 4)) : ('a' + (num >> 4));
   146cc:	e5cd200a 	strb	r2, [sp, #10]
        num &= 0x0f;
        buffer[7] = (num < 0x0a) ? ('0' + num) : ('a' + num);
   146d0:	e5cd300b 	strb	r3, [sp, #11]
#else
        return 0;
#endif
    }
    if(buffer[0] == FAT_DIRENTRY_DELETED)
   146d4:	e5dd3004 	ldrb	r3, [sp, #4]
        buffer[0] = 0x05;

    /* fill directory entry buffer */
    memset(&buffer[11], 0, sizeof(buffer) - 11);
   146d8:	e28d9004 	add	r9, sp, #4
        buffer[7] = (num < 0x0a) ? ('0' + num) : ('a' + num);
#else
        return 0;
#endif
    }
    if(buffer[0] == FAT_DIRENTRY_DELETED)
   146dc:	e35300e5 	cmp	r3, #229	; 0xe5
        buffer[0] = 0x05;
   146e0:	03a03005 	moveq	r3, #5

    /* fill directory entry buffer */
    memset(&buffer[11], 0, sizeof(buffer) - 11);
   146e4:	e3a02015 	mov	r2, #21
   146e8:	e3a01000 	mov	r1, #0
   146ec:	e289000b 	add	r0, r9, #11
#else
        return 0;
#endif
    }
    if(buffer[0] == FAT_DIRENTRY_DELETED)
        buffer[0] = 0x05;
   146f0:	05cd3004 	strbeq	r3, [sp, #4]

    /* fill directory entry buffer */
    memset(&buffer[11], 0, sizeof(buffer) - 11);
   146f4:	eb000603 	bl	15f08 <memset>
    buffer[0x0b] = dir_entry->attributes;
   146f8:	e5d63020 	ldrb	r3, [r6, #32]
#if FAT_DATETIME_SUPPORT
    write16(&buffer[0x16], dir_entry->modification_time);
    write16(&buffer[0x18], dir_entry->modification_date);
#endif
#if FAT_FAT32_SUPPORT
    write16(&buffer[0x14], (uint16_t) (dir_entry->cluster >> 16));
   146fc:	e2890014 	add	r0, r9, #20
   14700:	e1d612b6 	ldrh	r1, [r6, #38]	; 0x26
    if(buffer[0] == FAT_DIRENTRY_DELETED)
        buffer[0] = 0x05;

    /* fill directory entry buffer */
    memset(&buffer[11], 0, sizeof(buffer) - 11);
    buffer[0x0b] = dir_entry->attributes;
   14704:	e5cd300f 	strb	r3, [sp, #15]
#if FAT_DATETIME_SUPPORT
    write16(&buffer[0x16], dir_entry->modification_time);
    write16(&buffer[0x18], dir_entry->modification_date);
#endif
#if FAT_FAT32_SUPPORT
    write16(&buffer[0x14], (uint16_t) (dir_entry->cluster >> 16));
   14708:	eb0005ca 	bl	15e38 <write16>
#endif
    write16(&buffer[0x1a], dir_entry->cluster);
   1470c:	e289001a 	add	r0, r9, #26
   14710:	e1d612b4 	ldrh	r1, [r6, #36]	; 0x24
   14714:	eb0005c7 	bl	15e38 <write16>
    write32(&buffer[0x1c], dir_entry->file_size);
   14718:	e289001c 	add	r0, r9, #28
   1471c:	e5961028 	ldr	r1, [r6, #40]	; 0x28
   14720:	eb0005ca 	bl	15e50 <write32>

    /* write to disk */
#if FAT_LFN_SUPPORT
    if(!device_write(offset + (uint16_t) lfn_entry_count * 32, buffer, sizeof(buffer)))
   14724:	e3a03020 	mov	r3, #32
   14728:	e1a00004 	mov	r0, r4
   1472c:	e1a01005 	mov	r1, r5
   14730:	e0a10793 	umlal	r0, r1, r3, r7
   14734:	e1a02009 	mov	r2, r9
   14738:	e1a0e00f 	mov	lr, pc
   1473c:	e12fff1a 	bx	sl
   14740:	e3500000 	cmp	r0, #0
   14744:	0a00003d 	beq	14840 <fat_write_dir_entry+0x288>
#endif
        return 0;
    
#if FAT_LFN_SUPPORT
    /* calculate checksum of 8.3 name */
    uint8_t checksum = fat_calc_83_checksum(buffer);
   14748:	e1a00009 	mov	r0, r9
   1474c:	ebfffd92 	bl	13d9c <fat_calc_83_checksum>
   14750:	e1a08007 	mov	r8, r7
   14754:	e58d0000 	str	r0, [sp]
        const char* long_name_curr = name + (lfn_entry - 1) * 13;
        uint8_t i = 1;
        while(i < 0x1f)
        {
            buffer[i++] = *long_name_curr;
            buffer[i++] = 0;
   14758:	e3a0b000 	mov	fp, #0
   1475c:	ea000033 	b	14830 <fat_write_dir_entry+0x278>
    uint8_t checksum = fat_calc_83_checksum(buffer);
    
    /* write lfn entries */
    for(uint8_t lfn_entry = lfn_entry_count; lfn_entry > 0; --lfn_entry)
    {
        memset(buffer, 0xff, sizeof(buffer));
   14760:	e3a02020 	mov	r2, #32
   14764:	e1a00009 	mov	r0, r9
   14768:	e3a010ff 	mov	r1, #255	; 0xff
   1476c:	eb0005e5 	bl	15f08 <memset>
        
        /* set file name */
        const char* long_name_curr = name + (lfn_entry - 1) * 13;
   14770:	e2483001 	sub	r3, r8, #1
   14774:	e3a0200d 	mov	r2, #13
   14778:	e0226293 	mla	r2, r3, r2, r6
        uint8_t i = 1;
   1477c:	e3a03001 	mov	r3, #1
        while(i < 0x1f)
        {
            buffer[i++] = *long_name_curr;
   14780:	e4d20001 	ldrb	r0, [r2], #1
   14784:	e28dc024 	add	ip, sp, #36	; 0x24
   14788:	e08c1003 	add	r1, ip, r3
   1478c:	e5410020 	strb	r0, [r1, #-32]	; 0xffffffe0
   14790:	e2831001 	add	r1, r3, #1
            buffer[i++] = 0;
   14794:	e2833002 	add	r3, r3, #2
   14798:	e20330ff 	and	r3, r3, #255	; 0xff
   1479c:	e20110ff 	and	r1, r1, #255	; 0xff
   147a0:	e08c1001 	add	r1, ip, r1

            switch(i)
   147a4:	e353000b 	cmp	r3, #11
        const char* long_name_curr = name + (lfn_entry - 1) * 13;
        uint8_t i = 1;
        while(i < 0x1f)
        {
            buffer[i++] = *long_name_curr;
            buffer[i++] = 0;
   147a8:	e541b020 	strb	fp, [r1, #-32]	; 0xffffffe0

            switch(i)
            {
                case 0x0b:
                    i = 0x0e;
   147ac:	03a0300e 	moveq	r3, #14
        while(i < 0x1f)
        {
            buffer[i++] = *long_name_curr;
            buffer[i++] = 0;

            switch(i)
   147b0:	0a000002 	beq	147c0 <fat_write_dir_entry+0x208>
            {
                case 0x0b:
                    i = 0x0e;
                    break;
                case 0x1a:
                    i = 0x1c;
   147b4:	e353001a 	cmp	r3, #26
   147b8:	03a0301c 	moveq	r3, #28
   147bc:	eaffffff 	b	147c0 <fat_write_dir_entry+0x208>
                    break;
            }

            if(!*long_name_curr++)
   147c0:	e5521001 	ldrb	r1, [r2, #-1]
   147c4:	e3510000 	cmp	r1, #0
   147c8:	0a000001 	beq	147d4 <fat_write_dir_entry+0x21c>
        memset(buffer, 0xff, sizeof(buffer));
        
        /* set file name */
        const char* long_name_curr = name + (lfn_entry - 1) * 13;
        uint8_t i = 1;
        while(i < 0x1f)
   147cc:	e353001e 	cmp	r3, #30
   147d0:	9affffea 	bls	14780 <fat_write_dir_entry+0x1c8>
                break;
        }
        
        /* set index of lfn entry */
        buffer[0x00] = lfn_entry;
        if(lfn_entry == lfn_entry_count)
   147d4:	e1580007 	cmp	r8, r7
            buffer[0x00] |= FAT_DIRENTRY_LFNLAST;
   147d8:	03883040 	orreq	r3, r8, #64	; 0x40

        /* mark as lfn entry */
        buffer[0x0b] = 0x0f;

        /* set 8.3 checksum */
        buffer[0x0d] = checksum;
   147dc:	e59dc000 	ldr	ip, [sp]
        }
        
        /* set index of lfn entry */
        buffer[0x00] = lfn_entry;
        if(lfn_entry == lfn_entry_count)
            buffer[0x00] |= FAT_DIRENTRY_LFNLAST;
   147e0:	05cd3004 	strbeq	r3, [sp, #4]

        /* mark as lfn entry */
        buffer[0x0b] = 0x0f;
   147e4:	e3a0300f 	mov	r3, #15
            if(!*long_name_curr++)
                break;
        }
        
        /* set index of lfn entry */
        buffer[0x00] = lfn_entry;
   147e8:	15cd8004 	strbne	r8, [sp, #4]
        if(lfn_entry == lfn_entry_count)
            buffer[0x00] |= FAT_DIRENTRY_LFNLAST;

        /* mark as lfn entry */
        buffer[0x0b] = 0x0f;
   147ec:	e5cd300f 	strb	r3, [sp, #15]
        buffer[0x0c] = 0;
        buffer[0x1a] = 0;
        buffer[0x1b] = 0;

        /* write entry */
        device_write(offset, buffer, sizeof(buffer));
   147f0:	e1a00004 	mov	r0, r4
   147f4:	e1a01005 	mov	r1, r5
   147f8:	e1a02009 	mov	r2, r9
   147fc:	e3a03020 	mov	r3, #32

        /* mark as lfn entry */
        buffer[0x0b] = 0x0f;

        /* set 8.3 checksum */
        buffer[0x0d] = checksum;
   14800:	e5cdc011 	strb	ip, [sp, #17]

        /* clear reserved bytes */
        buffer[0x0c] = 0;
   14804:	e5cdb010 	strb	fp, [sp, #16]
        buffer[0x1a] = 0;
   14808:	e5cdb01e 	strb	fp, [sp, #30]
        buffer[0x1b] = 0;
   1480c:	e5cdb01f 	strb	fp, [sp, #31]

        /* write entry */
        device_write(offset, buffer, sizeof(buffer));
   14810:	e1a0e00f 	mov	lr, pc
   14814:	e12fff1a 	bx	sl
    
        offset += sizeof(buffer);
   14818:	e3a02020 	mov	r2, #32
   1481c:	e3a03000 	mov	r3, #0
   14820:	e0944002 	adds	r4, r4, r2
#if FAT_LFN_SUPPORT
    /* calculate checksum of 8.3 name */
    uint8_t checksum = fat_calc_83_checksum(buffer);
    
    /* write lfn entries */
    for(uint8_t lfn_entry = lfn_entry_count; lfn_entry > 0; --lfn_entry)
   14824:	e2488001 	sub	r8, r8, #1
        buffer[0x1b] = 0;

        /* write entry */
        device_write(offset, buffer, sizeof(buffer));
    
        offset += sizeof(buffer);
   14828:	e0a55003 	adc	r5, r5, r3
#if FAT_LFN_SUPPORT
    /* calculate checksum of 8.3 name */
    uint8_t checksum = fat_calc_83_checksum(buffer);
    
    /* write lfn entries */
    for(uint8_t lfn_entry = lfn_entry_count; lfn_entry > 0; --lfn_entry)
   1482c:	e20880ff 	and	r8, r8, #255	; 0xff
   14830:	e3580000 	cmp	r8, #0
   14834:	1affffc9 	bne	14760 <fat_write_dir_entry+0x1a8>
    
        offset += sizeof(buffer);
    }
#endif
    
    return 1;
   14838:	e3a00001 	mov	r0, #1
   1483c:	eaffffff 	b	14840 <fat_write_dir_entry+0x288>
}
   14840:	e28dd024 	add	sp, sp, #36	; 0x24
   14844:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14848:	e12fff1e 	bx	lr

0001484c <fat_find_offset_for_dir_entry.part.4>:
 * \param[in] fs The filesystem on which to operate.
 * \param[in] parent The directory in which to search.
 * \param[in] dir_entry The directory entry for which to search space.
 * \returns 0 on failure, a device offset on success.
 */
offset_t fat_find_offset_for_dir_entry(struct fat_fs_struct* fs, const struct fat_dir_struct* parent, const struct fat_dir_entry_struct* dir_entry)
   1484c:	e92d4fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14850:	e1a08000 	mov	r8, r0
    if(!fs || !dir_entry)
        return 0;

    /* search for a place where to write the directory entry to disk */
#if FAT_LFN_SUPPORT
    uint8_t free_dir_entries_needed = (strlen(dir_entry->long_name) + 12) / 13 + 1;
   14854:	e1a00002 	mov	r0, r2
 * \param[in] fs The filesystem on which to operate.
 * \param[in] parent The directory in which to search.
 * \param[in] dir_entry The directory entry for which to search space.
 * \returns 0 on failure, a device offset on success.
 */
offset_t fat_find_offset_for_dir_entry(struct fat_fs_struct* fs, const struct fat_dir_struct* parent, const struct fat_dir_entry_struct* dir_entry)
   14858:	e1a04001 	mov	r4, r1
    if(!fs || !dir_entry)
        return 0;

    /* search for a place where to write the directory entry to disk */
#if FAT_LFN_SUPPORT
    uint8_t free_dir_entries_needed = (strlen(dir_entry->long_name) + 12) / 13 + 1;
   1485c:	eb0005fc 	bl	16054 <strlen>
   14860:	e3a0100d 	mov	r1, #13
   14864:	e280000c 	add	r0, r0, #12
   14868:	eb001b3e 	bl	1b568 <__aeabi_uidiv>
    uint8_t free_dir_entries_found = 0;
#endif
    cluster_t cluster_num = parent->dir_entry.cluster;
   1486c:	e594a028 	ldr	sl, [r4, #40]	; 0x28
    if(!fs || !dir_entry)
        return 0;

    /* search for a place where to write the directory entry to disk */
#if FAT_LFN_SUPPORT
    uint8_t free_dir_entries_needed = (strlen(dir_entry->long_name) + 12) / 13 + 1;
   14870:	e2800001 	add	r0, r0, #1
    cluster_t cluster_num = parent->dir_entry.cluster;
    offset_t dir_entry_offset = 0;
    offset_t offset = 0;
    offset_t offset_to = 0;
#if FAT_FAT32_SUPPORT
    uint8_t is_fat32 = (fs->partition->type == PARTITION_TYPE_FAT32);
   14874:	e5983000 	ldr	r3, [r8]
    if(!fs || !dir_entry)
        return 0;

    /* search for a place where to write the directory entry to disk */
#if FAT_LFN_SUPPORT
    uint8_t free_dir_entries_needed = (strlen(dir_entry->long_name) + 12) / 13 + 1;
   14878:	e20000ff 	and	r0, r0, #255	; 0xff
    offset_t offset_to = 0;
#if FAT_FAT32_SUPPORT
    uint8_t is_fat32 = (fs->partition->type == PARTITION_TYPE_FAT32);
#endif

    if(cluster_num == 0)
   1487c:	e35a0000 	cmp	sl, #0
    if(!fs || !dir_entry)
        return 0;

    /* search for a place where to write the directory entry to disk */
#if FAT_LFN_SUPPORT
    uint8_t free_dir_entries_needed = (strlen(dir_entry->long_name) + 12) / 13 + 1;
   14880:	e58d0008 	str	r0, [sp, #8]
    cluster_t cluster_num = parent->dir_entry.cluster;
    offset_t dir_entry_offset = 0;
    offset_t offset = 0;
    offset_t offset_to = 0;
#if FAT_FAT32_SUPPORT
    uint8_t is_fat32 = (fs->partition->type == PARTITION_TYPE_FAT32);
   14884:	e5d33010 	ldrb	r3, [r3, #16]
#endif

    if(cluster_num == 0)
   14888:	1a000007 	bne	148ac <fat_find_offset_for_dir_entry.part.4+0x60>
    {
#if FAT_FAT32_SUPPORT
        if(is_fat32)
   1488c:	e353000b 	cmp	r3, #11
        {
            cluster_num = fs->header.root_dir_cluster;
   14890:	0598a02c 	ldreq	sl, [r8, #44]	; 0x2c
#endif

    if(cluster_num == 0)
    {
#if FAT_FAT32_SUPPORT
        if(is_fat32)
   14894:	0a000004 	beq	148ac <fat_find_offset_for_dir_entry.part.4+0x60>
        }
        else
#endif
        {
            /* we read/write from the root directory entry */
            offset = fs->header.root_dir_offset;
   14898:	e2885024 	add	r5, r8, #36	; 0x24
   1489c:	e8950030 	ldm	r5, {r4, r5}
            offset_to = fs->header.cluster_zero_offset;
   148a0:	e288c01c 	add	ip, r8, #28
   148a4:	e89c1800 	ldm	ip, {fp, ip}
   148a8:	ea000003 	b	148bc <fat_find_offset_for_dir_entry.part.4+0x70>
    uint8_t free_dir_entries_found = 0;
#endif
    cluster_t cluster_num = parent->dir_entry.cluster;
    offset_t dir_entry_offset = 0;
    offset_t offset = 0;
    offset_t offset_to = 0;
   148ac:	e3a0b000 	mov	fp, #0
   148b0:	e3a0c000 	mov	ip, #0
#if FAT_LFN_SUPPORT
    uint8_t free_dir_entries_needed = (strlen(dir_entry->long_name) + 12) / 13 + 1;
    uint8_t free_dir_entries_found = 0;
#endif
    cluster_t cluster_num = parent->dir_entry.cluster;
    offset_t dir_entry_offset = 0;
   148b4:	e1a0400b 	mov	r4, fp
   148b8:	e1a0500c 	mov	r5, ip
   148bc:	e3a09000 	mov	r9, #0
   148c0:	e58d9000 	str	r9, [sp]
   148c4:	e1a06004 	mov	r6, r4
   148c8:	e1a07005 	mov	r7, r5
        }
    }
    
    while(1)
    {
        if(offset == offset_to)
   148cc:	e155000c 	cmp	r5, ip
   148d0:	0154000b 	cmpeq	r4, fp
   148d4:	1a000025 	bne	14970 <fat_find_offset_for_dir_entry.part.4+0x124>
        {
            if(cluster_num == 0)
   148d8:	e35a0000 	cmp	sl, #0
   148dc:	0a000049 	beq	14a08 <fat_find_offset_for_dir_entry.part.4+0x1bc>
                /* We iterated through the whole root directory and
                 * could not find enough space for the directory entry.
                 */
                return 0;

            if(offset)
   148e0:	e1942005 	orrs	r2, r4, r5
   148e4:	0a000015 	beq	14940 <fat_find_offset_for_dir_entry.part.4+0xf4>
            {
                /* We reached a cluster boundary and have to
                 * switch to the next cluster.
                 */

                cluster_t cluster_next = fat_get_next_cluster(fs, cluster_num);
   148e8:	e1a00008 	mov	r0, r8
   148ec:	e1a0100a 	mov	r1, sl
   148f0:	ebfffde8 	bl	14098 <fat_get_next_cluster>
                if(!cluster_next)
   148f4:	e3500000 	cmp	r0, #0
   148f8:	1a00000f 	bne	1493c <fat_find_offset_for_dir_entry.part.4+0xf0>
                {
                    cluster_next = fat_append_clusters(fs, cluster_num, 1);
   148fc:	e1a0100a 	mov	r1, sl
   14900:	e1a00008 	mov	r0, r8
   14904:	e3a02001 	mov	r2, #1
   14908:	ebfffe7b 	bl	142fc <fat_append_clusters>
                    if(!cluster_next)
   1490c:	e2501000 	subs	r1, r0, #0
   14910:	0a00003c 	beq	14a08 <fat_find_offset_for_dir_entry.part.4+0x1bc>
                        return 0;

                    /* we appended a new cluster and know it is free */
                    dir_entry_offset = fs->header.cluster_zero_offset +
                                       (offset_t) (cluster_next - 2) * fs->header.cluster_size;
   14914:	e1d831ba 	ldrh	r3, [r8, #26]
                    cluster_next = fat_append_clusters(fs, cluster_num, 1);
                    if(!cluster_next)
                        return 0;

                    /* we appended a new cluster and know it is free */
                    dir_entry_offset = fs->header.cluster_zero_offset +
   14918:	e288701c 	add	r7, r8, #28
   1491c:	e89700c0 	ldm	r7, {r6, r7}
                                       (offset_t) (cluster_next - 2) * fs->header.cluster_size;
   14920:	e2412002 	sub	r2, r1, #2
 * \param[in] cluster_num The cluster to clear.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_clear_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(cluster_num < 2)
   14924:	e3510001 	cmp	r1, #1
                    cluster_next = fat_append_clusters(fs, cluster_num, 1);
                    if(!cluster_next)
                        return 0;

                    /* we appended a new cluster and know it is free */
                    dir_entry_offset = fs->header.cluster_zero_offset +
   14928:	e0a76293 	umlal	r6, r7, r3, r2
 * \param[in] cluster_num The cluster to clear.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_clear_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(cluster_num < 2)
   1492c:	9a000037 	bls	14a10 <fat_find_offset_for_dir_entry.part.4+0x1c4>
   14930:	e1a00008 	mov	r0, r8
   14934:	ebffff05 	bl	14550 <fat_clear_cluster.part.3>
   14938:	ea000034 	b	14a10 <fat_find_offset_for_dir_entry.part.4+0x1c4>
                /* We reached a cluster boundary and have to
                 * switch to the next cluster.
                 */

                cluster_t cluster_next = fat_get_next_cluster(fs, cluster_num);
                if(!cluster_next)
   1493c:	e1a0a000 	mov	sl, r0
                    break;
                }
                cluster_num = cluster_next;
            }

            offset = fat_cluster_offset(fs, cluster_num);
   14940:	e1a00008 	mov	r0, r8
   14944:	e1a0100a 	mov	r1, sl
   14948:	ebfffef3 	bl	1451c <fat_cluster_offset>
            offset_to = offset + fs->header.cluster_size;
   1494c:	e1d831ba 	ldrh	r3, [r8, #26]
            dir_entry_offset = offset;
#if FAT_LFN_SUPPORT
            free_dir_entries_found = 0;
   14950:	e3a09000 	mov	r9, #0
                }
                cluster_num = cluster_next;
            }

            offset = fat_cluster_offset(fs, cluster_num);
            offset_to = offset + fs->header.cluster_size;
   14954:	e090b003 	adds	fp, r0, r3
            dir_entry_offset = offset;
#if FAT_LFN_SUPPORT
            free_dir_entries_found = 0;
   14958:	e58d9000 	str	r9, [sp]
                    break;
                }
                cluster_num = cluster_next;
            }

            offset = fat_cluster_offset(fs, cluster_num);
   1495c:	e1a04000 	mov	r4, r0
   14960:	e1a05001 	mov	r5, r1
            offset_to = offset + fs->header.cluster_size;
   14964:	e2a1c000 	adc	ip, r1, #0
            dir_entry_offset = offset;
   14968:	e1a06000 	mov	r6, r0
   1496c:	e1a07001 	mov	r7, r1
#endif
        }
        
        /* read next lfn or 8.3 entry */
        uint8_t first_char;
        if(!fs->partition->device_read(offset, &first_char, sizeof(first_char)))
   14970:	e58dc004 	str	ip, [sp, #4]
   14974:	e1a00004 	mov	r0, r4
   14978:	e1a01005 	mov	r1, r5
   1497c:	e28d200f 	add	r2, sp, #15
   14980:	e3a03001 	mov	r3, #1
   14984:	e5989000 	ldr	r9, [r8]
   14988:	e599c000 	ldr	ip, [r9]
   1498c:	e1a0e00f 	mov	lr, pc
   14990:	e12fff1c 	bx	ip
   14994:	e3500000 	cmp	r0, #0
   14998:	e59dc004 	ldr	ip, [sp, #4]
   1499c:	0a000019 	beq	14a08 <fat_find_offset_for_dir_entry.part.4+0x1bc>
            return 0;

        /* check if we found a free directory entry */
        if(first_char == FAT_DIRENTRY_DELETED || !first_char)
   149a0:	e5dd300f 	ldrb	r3, [sp, #15]
   149a4:	e35300e5 	cmp	r3, #229	; 0xe5
   149a8:	13530000 	cmpne	r3, #0
   149ac:	13a03000 	movne	r3, #0
   149b0:	03a03001 	moveq	r3, #1
   149b4:	1a00000b 	bne	149e8 <fat_find_offset_for_dir_entry.part.4+0x19c>
        {
            /* check if we have the needed number of available entries */
#if FAT_LFN_SUPPORT
            ++free_dir_entries_found;
   149b8:	e59d2000 	ldr	r2, [sp]
            if(free_dir_entries_found >= free_dir_entries_needed)
   149bc:	e59d3008 	ldr	r3, [sp, #8]
        /* check if we found a free directory entry */
        if(first_char == FAT_DIRENTRY_DELETED || !first_char)
        {
            /* check if we have the needed number of available entries */
#if FAT_LFN_SUPPORT
            ++free_dir_entries_found;
   149c0:	e2829001 	add	r9, r2, #1
   149c4:	e20990ff 	and	r9, r9, #255	; 0xff
            if(free_dir_entries_found >= free_dir_entries_needed)
   149c8:	e1590003 	cmp	r9, r3
        /* check if we found a free directory entry */
        if(first_char == FAT_DIRENTRY_DELETED || !first_char)
        {
            /* check if we have the needed number of available entries */
#if FAT_LFN_SUPPORT
            ++free_dir_entries_found;
   149cc:	e58d9000 	str	r9, [sp]
            if(free_dir_entries_found >= free_dir_entries_needed)
   149d0:	2a00000e 	bcs	14a10 <fat_find_offset_for_dir_entry.part.4+0x1c4>
#endif
                break;

            offset += 32;
   149d4:	e3a02020 	mov	r2, #32
   149d8:	e3a03000 	mov	r3, #0
   149dc:	e0944002 	adds	r4, r4, r2
   149e0:	e0a55003 	adc	r5, r5, r3
   149e4:	eaffffb8 	b	148cc <fat_find_offset_for_dir_entry.part.4+0x80>
        }
        else
        {
            offset += 32;
   149e8:	e3a06020 	mov	r6, #32
   149ec:	e0966004 	adds	r6, r6, r4
   149f0:	e3a07000 	mov	r7, #0
   149f4:	e0a77005 	adc	r7, r7, r5
   149f8:	e1a04006 	mov	r4, r6
   149fc:	e1a05007 	mov	r5, r7
            dir_entry_offset = offset;
#if FAT_LFN_SUPPORT
            free_dir_entries_found = 0;
   14a00:	e58d3000 	str	r3, [sp]
   14a04:	eaffffb0 	b	148cc <fat_find_offset_for_dir_entry.part.4+0x80>
   14a08:	e3a06000 	mov	r6, #0
   14a0c:	e3a07000 	mov	r7, #0
#endif
        }
    }

    return dir_entry_offset;
}
   14a10:	e1a00006 	mov	r0, r6
   14a14:	e1a01007 	mov	r1, r7
   14a18:	e28dd010 	add	sp, sp, #16
   14a1c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a20:	e12fff1e 	bx	lr

00014a24 <fat_open>:
 * \param[in] partition Discriptor of partition on which the filesystem resides.
 * \returns 0 on error, a FAT filesystem descriptor on success.
 * \see fat_close
 */
struct fat_fs_struct* fat_open(struct partition_struct* partition)
{
   14a24:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(!partition ||
   14a28:	e2504000 	subs	r4, r0, #0
 * \param[in] partition Discriptor of partition on which the filesystem resides.
 * \returns 0 on error, a FAT filesystem descriptor on success.
 * \see fat_close
 */
struct fat_fs_struct* fat_open(struct partition_struct* partition)
{
   14a2c:	e24dd040 	sub	sp, sp, #64	; 0x40
    if(!partition ||
   14a30:	0a000093 	beq	14c84 <fat_open+0x260>
   14a34:	e5940008 	ldr	r0, [r4, #8]
   14a38:	e3500000 	cmp	r0, #0
   14a3c:	0a000091 	beq	14c88 <fat_open+0x264>
#if FAT_WRITE_SUPPORT
       !partition->device_write ||
   14a40:	e594000c 	ldr	r0, [r4, #12]
   14a44:	e3500000 	cmp	r0, #0
   14a48:	1a000089 	bne	14c74 <fat_open+0x250>
   14a4c:	ea00008d 	b	14c88 <fat_open+0x264>
    offset_t partition_offset = (offset_t) partition->offset * 512;

    if(!partition->device_read(partition_offset + 0x0b, buffer, sizeof(buffer)))
        return 0;

    uint16_t bytes_per_sector = read16(&buffer[0x00]);
   14a50:	e28d0018 	add	r0, sp, #24
   14a54:	eb0004ea 	bl	15e04 <read16>
   14a58:	e1a06000 	mov	r6, r0
    uint16_t reserved_sectors = read16(&buffer[0x03]);
   14a5c:	e28d001b 	add	r0, sp, #27
   14a60:	eb0004e7 	bl	15e04 <read16>
    uint8_t sectors_per_cluster = buffer[0x02];
   14a64:	e5dd301a 	ldrb	r3, [sp, #26]

    if(!partition->device_read(partition_offset + 0x0b, buffer, sizeof(buffer)))
        return 0;

    uint16_t bytes_per_sector = read16(&buffer[0x00]);
    uint16_t reserved_sectors = read16(&buffer[0x03]);
   14a68:	e1a0b000 	mov	fp, r0
    uint8_t sectors_per_cluster = buffer[0x02];
    uint8_t fat_copies = buffer[0x05];
    uint16_t max_root_entries = read16(&buffer[0x06]);
   14a6c:	e28d001e 	add	r0, sp, #30
    if(!partition->device_read(partition_offset + 0x0b, buffer, sizeof(buffer)))
        return 0;

    uint16_t bytes_per_sector = read16(&buffer[0x00]);
    uint16_t reserved_sectors = read16(&buffer[0x03]);
    uint8_t sectors_per_cluster = buffer[0x02];
   14a70:	e58d300c 	str	r3, [sp, #12]
    uint8_t fat_copies = buffer[0x05];
   14a74:	e5dda01d 	ldrb	sl, [sp, #29]
    uint16_t max_root_entries = read16(&buffer[0x06]);
   14a78:	eb0004e1 	bl	15e04 <read16>
   14a7c:	e58d0010 	str	r0, [sp, #16]
    uint16_t sector_count_16 = read16(&buffer[0x08]);
   14a80:	e28d0020 	add	r0, sp, #32
   14a84:	eb0004de 	bl	15e04 <read16>
   14a88:	e1a05000 	mov	r5, r0
    uint16_t sectors_per_fat = read16(&buffer[0x0b]);
   14a8c:	e28d0023 	add	r0, sp, #35	; 0x23
   14a90:	eb0004db 	bl	15e04 <read16>
   14a94:	e1a09000 	mov	r9, r0
    uint32_t sector_count = read32(&buffer[0x15]);
   14a98:	e28d002d 	add	r0, sp, #45	; 0x2d
   14a9c:	eb0004dc 	bl	15e14 <read32>
   14aa0:	e1a08000 	mov	r8, r0
#if FAT_FAT32_SUPPORT
    uint32_t sectors_per_fat32 = read32(&buffer[0x19]);
   14aa4:	e28d0031 	add	r0, sp, #49	; 0x31
   14aa8:	eb0004d9 	bl	15e14 <read32>
   14aac:	e1a07000 	mov	r7, r0
    uint32_t cluster_root_dir = read32(&buffer[0x21]);
   14ab0:	e28d0039 	add	r0, sp, #57	; 0x39
   14ab4:	eb0004d6 	bl	15e14 <read32>
#endif

    if(sector_count == 0)
   14ab8:	e3580000 	cmp	r8, #0
    uint16_t sector_count_16 = read16(&buffer[0x08]);
    uint16_t sectors_per_fat = read16(&buffer[0x0b]);
    uint32_t sector_count = read32(&buffer[0x15]);
#if FAT_FAT32_SUPPORT
    uint32_t sectors_per_fat32 = read32(&buffer[0x19]);
    uint32_t cluster_root_dir = read32(&buffer[0x21]);
   14abc:	e58d0014 	str	r0, [sp, #20]
#endif

    if(sector_count == 0)
   14ac0:	1a000006 	bne	14ae0 <fat_open+0xbc>
    {
        if(sector_count_16 == 0)
   14ac4:	e3550000 	cmp	r5, #0
            /* illegal volume size */
            return 0;
        else
            sector_count = sector_count_16;
   14ac8:	11a08005 	movne	r8, r5
    uint32_t cluster_root_dir = read32(&buffer[0x21]);
#endif

    if(sector_count == 0)
    {
        if(sector_count_16 == 0)
   14acc:	1a000003 	bne	14ae0 <fat_open+0xbc>
    if(!fat_read_header(fs))
    {
#if USE_DYNAMIC_MEMORY
        free(fs);
#else
        fs->partition = 0;
   14ad0:	e59f31bc 	ldr	r3, [pc, #444]	; 14c94 <fat_open+0x270>

    if(sector_count == 0)
    {
        if(sector_count_16 == 0)
            /* illegal volume size */
            return 0;
   14ad4:	e3a00000 	mov	r0, #0
    if(!fat_read_header(fs))
    {
#if USE_DYNAMIC_MEMORY
        free(fs);
#else
        fs->partition = 0;
   14ad8:	e5830000 	str	r0, [r3]
#endif
        return 0;
   14adc:	ea000069 	b	14c88 <fat_open+0x264>
            return 0;
        else
            sector_count = sector_count_16;
    }
#if FAT_FAT32_SUPPORT
    if(sectors_per_fat != 0)
   14ae0:	e3590000 	cmp	r9, #0
        sectors_per_fat32 = sectors_per_fat;
   14ae4:	11a07009 	movne	r7, r9
            return 0;
        else
            sector_count = sector_count_16;
    }
#if FAT_FAT32_SUPPORT
    if(sectors_per_fat != 0)
   14ae8:	1a000001 	bne	14af4 <fat_open+0xd0>
        sectors_per_fat32 = sectors_per_fat;
    else if(sectors_per_fat32 == 0)
   14aec:	e3570000 	cmp	r7, #0
   14af0:	0afffff6 	beq	14ad0 <fat_open+0xac>
#if FAT_FAT32_SUPPORT
                                 - sectors_per_fat32 * fat_copies
#else
                                 - (uint32_t) sectors_per_fat * fat_copies
#endif
                                 - ((max_root_entries * 32 + bytes_per_sector - 1) / bytes_per_sector);
   14af4:	e59d3010 	ldr	r3, [sp, #16]
   14af8:	e3e0001f 	mvn	r0, #31
   14afc:	e0000093 	mul	r0, r3, r0
   14b00:	e0660000 	rsb	r0, r6, r0
   14b04:	e1a01006 	mov	r1, r6
   14b08:	e2800001 	add	r0, r0, #1
   14b0c:	eb001adb 	bl	1b680 <__aeabi_idiv>

    /* determine the type of FAT we have here */
    uint32_t data_sector_count = sector_count
                                 - reserved_sectors
#if FAT_FAT32_SUPPORT
                                 - sectors_per_fat32 * fat_copies
   14b10:	e003079a 	mul	r3, sl, r7
        return 0;
#endif

    /* determine the type of FAT we have here */
    uint32_t data_sector_count = sector_count
                                 - reserved_sectors
   14b14:	e06b0000 	rsb	r0, fp, r0
#if FAT_FAT32_SUPPORT
                                 - sectors_per_fat32 * fat_copies
   14b18:	e0800008 	add	r0, r0, r8
#else
                                 - (uint32_t) sectors_per_fat * fat_copies
#endif
                                 - ((max_root_entries * 32 + bytes_per_sector - 1) / bytes_per_sector);
    uint32_t data_cluster_count = data_sector_count / sectors_per_cluster;
   14b1c:	e0630000 	rsb	r0, r3, r0
   14b20:	e59d100c 	ldr	r1, [sp, #12]
   14b24:	eb001a8f 	bl	1b568 <__aeabi_uidiv>
    if(data_cluster_count < 4085)
   14b28:	e59f2168 	ldr	r2, [pc, #360]	; 14c98 <fat_open+0x274>
   14b2c:	e1500002 	cmp	r0, r2
                                 - sectors_per_fat32 * fat_copies
#else
                                 - (uint32_t) sectors_per_fat * fat_copies
#endif
                                 - ((max_root_entries * 32 + bytes_per_sector - 1) / bytes_per_sector);
    uint32_t data_cluster_count = data_sector_count / sectors_per_cluster;
   14b30:	e1a03000 	mov	r3, r0
    if(data_cluster_count < 4085)
   14b34:	9affffe5 	bls	14ad0 <fat_open+0xac>
        /* this is a FAT12, not supported */
        return 0;
    else if(data_cluster_count < 65525)
   14b38:	e2822a0f 	add	r2, r2, #61440	; 0xf000
   14b3c:	e1500002 	cmp	r0, r2
    else
        /* this is a FAT32 */
        partition->type = PARTITION_TYPE_FAT32;

    /* fill header information */
    struct fat_header_struct* header = &fs->header;
   14b40:	e59f514c 	ldr	r5, [pc, #332]	; 14c94 <fat_open+0x270>
    if(data_cluster_count < 4085)
        /* this is a FAT12, not supported */
        return 0;
    else if(data_cluster_count < 65525)
        /* this is a FAT16 */
        partition->type = PARTITION_TYPE_FAT16;
   14b44:	93a02006 	movls	r2, #6
    else
        /* this is a FAT32 */
        partition->type = PARTITION_TYPE_FAT32;
   14b48:	83a0200b 	movhi	r2, #11
   14b4c:	e5c42010 	strb	r2, [r4, #16]

    /* fill header information */
    struct fat_header_struct* header = &fs->header;
    memset(header, 0, sizeof(*header));
   14b50:	e3a01000 	mov	r1, #0
   14b54:	e3a0202c 	mov	r2, #44	; 0x2c
   14b58:	e2850004 	add	r0, r5, #4
   14b5c:	e58d3000 	str	r3, [sp]
   14b60:	eb0004e8 	bl	15f08 <memset>
    
    header->size = (offset_t) sector_count * bytes_per_sector;
   14b64:	e0810698 	umull	r0, r1, r8, r6
   14b68:	e9850003 	stmib	r5, {r0, r1}

    header->fat_offset = /* jump to partition */
                         partition_offset +
   14b6c:	e99d0003 	ldmib	sp, {r0, r1}
   14b70:	e0a10b96 	umlal	r0, r1, r6, fp
    struct fat_header_struct* header = &fs->header;
    memset(header, 0, sizeof(*header));
    
    header->size = (offset_t) sector_count * bytes_per_sector;

    header->fat_offset = /* jump to partition */
   14b74:	e585000c 	str	r0, [r5, #12]
   14b78:	e5851010 	str	r1, [r5, #16]
                         partition_offset +
                         /* jump to fat */
                         (offset_t) reserved_sectors * bytes_per_sector;
    header->fat_size = (data_cluster_count + 2) * (partition->type == PARTITION_TYPE_FAT16 ? 2 : 4);
   14b7c:	e5d42010 	ldrb	r2, [r4, #16]
   14b80:	e59d3000 	ldr	r3, [sp]
   14b84:	e3520006 	cmp	r2, #6
   14b88:	13a02004 	movne	r2, #4
   14b8c:	03a02002 	moveq	r2, #2
   14b90:	e2833002 	add	r3, r3, #2
   14b94:	e0030392 	mul	r3, r2, r3

    header->sector_size = bytes_per_sector;
    header->cluster_size = (uint16_t) bytes_per_sector * sectors_per_cluster;
   14b98:	e59d200c 	ldr	r2, [sp, #12]

    header->fat_offset = /* jump to partition */
                         partition_offset +
                         /* jump to fat */
                         (offset_t) reserved_sectors * bytes_per_sector;
    header->fat_size = (data_cluster_count + 2) * (partition->type == PARTITION_TYPE_FAT16 ? 2 : 4);
   14b9c:	e5853014 	str	r3, [r5, #20]

    header->sector_size = bytes_per_sector;
    header->cluster_size = (uint16_t) bytes_per_sector * sectors_per_cluster;
   14ba0:	e0030692 	mul	r3, r2, r6
                         partition_offset +
                         /* jump to fat */
                         (offset_t) reserved_sectors * bytes_per_sector;
    header->fat_size = (data_cluster_count + 2) * (partition->type == PARTITION_TYPE_FAT16 ? 2 : 4);

    header->sector_size = bytes_per_sector;
   14ba4:	e1c561b8 	strh	r6, [r5, #24]
    header->cluster_size = (uint16_t) bytes_per_sector * sectors_per_cluster;
   14ba8:	e1c531ba 	strh	r3, [r5, #26]

#if FAT_FAT32_SUPPORT
    if(partition->type == PARTITION_TYPE_FAT16)
   14bac:	e5d43010 	ldrb	r3, [r4, #16]
   14bb0:	e3530006 	cmp	r3, #6
   14bb4:	1a00000d 	bne	14bf0 <fat_open+0x1cc>
#endif
    {
        header->root_dir_offset = /* jump to fats */
                                  header->fat_offset +
                                  /* jump to root directory entries */
                                  (offset_t) fat_copies * sectors_per_fat * bytes_per_sector;
   14bb8:	e0832996 	umull	r2, r3, r6, r9
   14bbc:	e20ac0ff 	and	ip, sl, #255	; 0xff
   14bc0:	e0876c92 	umull	r6, r7, r2, ip
   14bc4:	e027739c 	mla	r7, ip, r3, r7
#if FAT_FAT32_SUPPORT
    if(partition->type == PARTITION_TYPE_FAT16)
#endif
    {
        header->root_dir_offset = /* jump to fats */
                                  header->fat_offset +
   14bc8:	e0900006 	adds	r0, r0, r6
                                  /* jump to root directory entries */
                                  (offset_t) fat_copies * sectors_per_fat * bytes_per_sector;

        header->cluster_zero_offset = /* jump to root directory entries */
                                      header->root_dir_offset +
   14bcc:	e59d2010 	ldr	r2, [sp, #16]
#if FAT_FAT32_SUPPORT
    if(partition->type == PARTITION_TYPE_FAT16)
#endif
    {
        header->root_dir_offset = /* jump to fats */
                                  header->fat_offset +
   14bd0:	e0a11007 	adc	r1, r1, r7
                                  /* jump to root directory entries */
                                  (offset_t) fat_copies * sectors_per_fat * bytes_per_sector;

        header->cluster_zero_offset = /* jump to root directory entries */
                                      header->root_dir_offset +
   14bd4:	e3a03020 	mov	r3, #32

#if FAT_FAT32_SUPPORT
    if(partition->type == PARTITION_TYPE_FAT16)
#endif
    {
        header->root_dir_offset = /* jump to fats */
   14bd8:	e5850024 	str	r0, [r5, #36]	; 0x24
   14bdc:	e5851028 	str	r1, [r5, #40]	; 0x28
                                  header->fat_offset +
                                  /* jump to root directory entries */
                                  (offset_t) fat_copies * sectors_per_fat * bytes_per_sector;

        header->cluster_zero_offset = /* jump to root directory entries */
                                      header->root_dir_offset +
   14be0:	e0a10293 	umlal	r0, r1, r3, r2
        header->root_dir_offset = /* jump to fats */
                                  header->fat_offset +
                                  /* jump to root directory entries */
                                  (offset_t) fat_copies * sectors_per_fat * bytes_per_sector;

        header->cluster_zero_offset = /* jump to root directory entries */
   14be4:	e585001c 	str	r0, [r5, #28]
   14be8:	e5851020 	str	r1, [r5, #32]
   14bec:	ea000008 	b	14c14 <fat_open+0x1f0>
    else
    {
        header->cluster_zero_offset = /* jump to fats */
                                      header->fat_offset +
                                      /* skip fats */
                                      (offset_t) fat_copies * sectors_per_fat32 * bytes_per_sector;
   14bf0:	e0832a96 	umull	r2, r3, r6, sl
   14bf4:	e0898792 	umull	r8, r9, r2, r7
   14bf8:	e0299397 	mla	r9, r7, r3, r9
    }
#if FAT_FAT32_SUPPORT
    else
    {
        header->cluster_zero_offset = /* jump to fats */
                                      header->fat_offset +
   14bfc:	e0900008 	adds	r0, r0, r8
   14c00:	e0a11009 	adc	r1, r1, r9
                                      /* skip fats */
                                      (offset_t) fat_copies * sectors_per_fat32 * bytes_per_sector;

        header->root_dir_cluster = cluster_root_dir;
   14c04:	e59d3014 	ldr	r3, [sp, #20]
                                      (offset_t) max_root_entries * 32;
    }
#if FAT_FAT32_SUPPORT
    else
    {
        header->cluster_zero_offset = /* jump to fats */
   14c08:	e585001c 	str	r0, [r5, #28]
   14c0c:	e5851020 	str	r1, [r5, #32]
                                      header->fat_offset +
                                      /* skip fats */
                                      (offset_t) fat_copies * sectors_per_fat32 * bytes_per_sector;

        header->root_dir_cluster = cluster_root_dir;
   14c10:	e585302c 	str	r3, [r5, #44]	; 0x2c
#if USE_DYNAMIC_MEMORY
    struct fat_fs_struct* fs = malloc(sizeof(*fs));
    if(!fs)
        return 0;
#else
    struct fat_fs_struct* fs = fat_fs_handles;
   14c14:	e59f0078 	ldr	r0, [pc, #120]	; 14c94 <fat_open+0x270>
   14c18:	ea00001a 	b	14c88 <fat_open+0x264>
        ++fs;
    }
    if(i >= FAT_FS_COUNT)
        return 0;
#endif
    memset(fs, 0, sizeof(*fs));
   14c1c:	e1a01005 	mov	r1, r5
   14c20:	e3a02034 	mov	r2, #52	; 0x34
   14c24:	e1a00006 	mov	r0, r6
   14c28:	eb0004b6 	bl	15f08 <memset>
#if FAT_FAT32_SUPPORT
    uint8_t buffer[37];
#else
    uint8_t buffer[25];
#endif
    offset_t partition_offset = (offset_t) partition->offset * 512;
   14c2c:	e5943014 	ldr	r3, [r4, #20]
   14c30:	e1a02ba3 	lsr	r2, r3, #23
   14c34:	e1a01483 	lsl	r1, r3, #9
   14c38:	e58d2008 	str	r2, [sp, #8]
   14c3c:	e58d1004 	str	r1, [sp, #4]

    if(!partition->device_read(partition_offset + 0x0b, buffer, sizeof(buffer)))
   14c40:	e3a02c02 	mov	r2, #512	; 0x200
   14c44:	e3a0000b 	mov	r0, #11
   14c48:	e3a01000 	mov	r1, #0
   14c4c:	e0a10392 	umlal	r0, r1, r2, r3
    if(i >= FAT_FS_COUNT)
        return 0;
#endif
    memset(fs, 0, sizeof(*fs));

    fs->partition = partition;
   14c50:	e5864000 	str	r4, [r6]
#else
    uint8_t buffer[25];
#endif
    offset_t partition_offset = (offset_t) partition->offset * 512;

    if(!partition->device_read(partition_offset + 0x0b, buffer, sizeof(buffer)))
   14c54:	e28d2018 	add	r2, sp, #24
   14c58:	e3a03025 	mov	r3, #37	; 0x25
   14c5c:	e594c000 	ldr	ip, [r4]
   14c60:	e1a0e00f 	mov	lr, pc
   14c64:	e12fff1c 	bx	ip
   14c68:	e3500000 	cmp	r0, #0
   14c6c:	0affff97 	beq	14ad0 <fat_open+0xac>
   14c70:	eaffff76 	b	14a50 <fat_open+0x2c>
#else
    struct fat_fs_struct* fs = fat_fs_handles;
    uint8_t i;
    for(i = 0; i < FAT_FS_COUNT; ++i)
    {
        if(!fs->partition)
   14c74:	e59f6018 	ldr	r6, [pc, #24]	; 14c94 <fat_open+0x270>
   14c78:	e5965000 	ldr	r5, [r6]
   14c7c:	e3550000 	cmp	r5, #0
   14c80:	0affffe5 	beq	14c1c <fat_open+0x1f8>
       !partition->device_write_interval
#else
       0
#endif
      )
        return 0;
   14c84:	e3a00000 	mov	r0, #0
#endif
        return 0;
    }
    
    return fs;
}
   14c88:	e28dd040 	add	sp, sp, #64	; 0x40
   14c8c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c90:	e12fff1e 	bx	lr
   14c94:	40000b04 	.word	0x40000b04
   14c98:	00000ff4 	.word	0x00000ff4

00014c9c <fat_close>:
 * \param[in] fs The filesystem to close.
 * \see fat_open
 */
void fat_close(struct fat_fs_struct* fs)
{
    if(!fs)
   14c9c:	e3500000 	cmp	r0, #0
        return;

#if USE_DYNAMIC_MEMORY
    free(fs);
#else
    fs->partition = 0;
   14ca0:	13a03000 	movne	r3, #0
   14ca4:	15803000 	strne	r3, [r0]
   14ca8:	e12fff1e 	bx	lr

00014cac <fat_open_file>:
 * \returns The file handle, or 0 on failure.
 * \see fat_close_file
 */
struct fat_file_struct* fat_open_file(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry || (dir_entry->attributes & FAT_ATTRIB_DIR))
   14cac:	e3500000 	cmp	r0, #0
   14cb0:	13510000 	cmpne	r1, #0
 * \param[in] dir_entry The directory entry of the file to open.
 * \returns The file handle, or 0 on failure.
 * \see fat_close_file
 */
struct fat_file_struct* fat_open_file(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
   14cb4:	e92d4070 	push	{r4, r5, r6, lr}
    if(!fs || !dir_entry || (dir_entry->attributes & FAT_ATTRIB_DIR))
   14cb8:	e1a05000 	mov	r5, r0
   14cbc:	e1a06001 	mov	r6, r1
   14cc0:	13a00000 	movne	r0, #0
   14cc4:	03a00001 	moveq	r0, #1
   14cc8:	0a000003 	beq	14cdc <fat_open_file+0x30>
   14ccc:	e5d13020 	ldrb	r3, [r1, #32]
   14cd0:	e2133010 	ands	r3, r3, #16
   14cd4:	0a00000e 	beq	14d14 <fat_open_file+0x68>
   14cd8:	ea000012 	b	14d28 <fat_open_file+0x7c>
        return 0;
   14cdc:	e3a00000 	mov	r0, #0
   14ce0:	ea000010 	b	14d28 <fat_open_file+0x7c>
    }
    if(i >= FAT_FILE_COUNT)
        return 0;
#endif
    
    memcpy(&fd->dir_entry, dir_entry, sizeof(*dir_entry));
   14ce4:	e3a02034 	mov	r2, #52	; 0x34
   14ce8:	e2840038 	add	r0, r4, #56	; 0x38
   14cec:	eb00047d 	bl	15ee8 <memcpy>
    fd->fs = fs;
    fd->pos = 0;
   14cf0:	e3a03000 	mov	r3, #0
   14cf4:	e3a02000 	mov	r2, #0
   14cf8:	e584206c 	str	r2, [r4, #108]	; 0x6c
   14cfc:	e5843070 	str	r3, [r4, #112]	; 0x70
    fd->pos_cluster = dir_entry->cluster;
   14d00:	e5963024 	ldr	r3, [r6, #36]	; 0x24
    if(i >= FAT_FILE_COUNT)
        return 0;
#endif
    
    memcpy(&fd->dir_entry, dir_entry, sizeof(*dir_entry));
    fd->fs = fs;
   14d04:	e5845034 	str	r5, [r4, #52]	; 0x34
    fd->pos = 0;
    fd->pos_cluster = dir_entry->cluster;
   14d08:	e5843074 	str	r3, [r4, #116]	; 0x74
#if USE_DYNAMIC_MEMORY
    struct fat_file_struct* fd = malloc(sizeof(*fd));
    if(!fd)
        return 0;
#else
    struct fat_file_struct* fd = fat_file_handles;
   14d0c:	e2840034 	add	r0, r4, #52	; 0x34
    memcpy(&fd->dir_entry, dir_entry, sizeof(*dir_entry));
    fd->fs = fs;
    fd->pos = 0;
    fd->pos_cluster = dir_entry->cluster;

    return fd;
   14d10:	ea000004 	b	14d28 <fat_open_file+0x7c>
#else
    struct fat_file_struct* fd = fat_file_handles;
    uint8_t i;
    for(i = 0; i < FAT_FILE_COUNT; ++i)
    {
        if(!fd->fs)
   14d14:	e59f4014 	ldr	r4, [pc, #20]	; 14d30 <fat_open_file+0x84>
   14d18:	e5942034 	ldr	r2, [r4, #52]	; 0x34
   14d1c:	e3520000 	cmp	r2, #0
   14d20:	0affffef 	beq	14ce4 <fat_open_file+0x38>
 * \see fat_close_file
 */
struct fat_file_struct* fat_open_file(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry || (dir_entry->attributes & FAT_ATTRIB_DIR))
        return 0;
   14d24:	e1a00003 	mov	r0, r3
    fd->fs = fs;
    fd->pos = 0;
    fd->pos_cluster = dir_entry->cluster;

    return fd;
}
   14d28:	e8bd4070 	pop	{r4, r5, r6, lr}
   14d2c:	e12fff1e 	bx	lr
   14d30:	40000b04 	.word	0x40000b04

00014d34 <fat_close_file>:
 * \param[in] fd The file handle of the file to close.
 * \see fat_open_file
 */
void fat_close_file(struct fat_file_struct* fd)
{
    if(fd)
   14d34:	e3500000 	cmp	r0, #0
#endif

#if USE_DYNAMIC_MEMORY
        free(fd);
#else
        fd->fs = 0;
   14d38:	13a03000 	movne	r3, #0
   14d3c:	15803000 	strne	r3, [r0]
   14d40:	e12fff1e 	bx	lr

00014d44 <fat_read_file>:
 * \param[in] buffer_len The amount of data to read.
 * \returns The number of bytes read, 0 on end of file, or -1 on failure.
 * \see fat_write_file
 */
intptr_t fat_read_file(struct fat_file_struct* fd, uint8_t* buffer, uintptr_t buffer_len)
{
   14d44:	e92d4ff1 	push	{r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
   14d48:	e3500000 	cmp	r0, #0
   14d4c:	13510000 	cmpne	r1, #0
 * \param[in] buffer_len The amount of data to read.
 * \returns The number of bytes read, 0 on end of file, or -1 on failure.
 * \see fat_write_file
 */
intptr_t fat_read_file(struct fat_file_struct* fd, uint8_t* buffer, uintptr_t buffer_len)
{
   14d50:	e1a0b002 	mov	fp, r2
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
   14d54:	e58d1000 	str	r1, [sp]
   14d58:	e1a0a000 	mov	sl, r0
   14d5c:	0a000019 	beq	14dc8 <fat_read_file+0x84>
   14d60:	e3520000 	cmp	r2, #0
   14d64:	0a000017 	beq	14dc8 <fat_read_file+0x84>
        return -1;

    /* determine number of bytes to read */
    if(fd->pos + buffer_len > fd->dir_entry.file_size)
   14d68:	e2805038 	add	r5, r0, #56	; 0x38
   14d6c:	e8950030 	ldm	r5, {r4, r5}
   14d70:	e590302c 	ldr	r3, [r0, #44]	; 0x2c
   14d74:	e0948002 	adds	r8, r4, r2
   14d78:	e2a59000 	adc	r9, r5, #0
   14d7c:	e1a06003 	mov	r6, r3
   14d80:	e3a07000 	mov	r7, #0
   14d84:	e1570009 	cmp	r7, r9
   14d88:	01560008 	cmpeq	r6, r8
   14d8c:	2a000003 	bcs	14da0 <fat_read_file+0x5c>
        buffer_len = fd->dir_entry.file_size - fd->pos;
    if(buffer_len == 0)
   14d90:	e053b004 	subs	fp, r3, r4
   14d94:	1a000001 	bne	14da0 <fat_read_file+0x5c>
        return 0;
   14d98:	e3a00000 	mov	r0, #0
   14d9c:	ea00004a 	b	14ecc <fat_read_file+0x188>
    
    uint16_t cluster_size = fd->fs->header.cluster_size;
    cluster_t cluster_num = fd->pos_cluster;
   14da0:	e59a6040 	ldr	r6, [sl, #64]	; 0x40
    if(fd->pos + buffer_len > fd->dir_entry.file_size)
        buffer_len = fd->dir_entry.file_size - fd->pos;
    if(buffer_len == 0)
        return 0;
    
    uint16_t cluster_size = fd->fs->header.cluster_size;
   14da4:	e59a3000 	ldr	r3, [sl]
    cluster_t cluster_num = fd->pos_cluster;
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));

    /* find cluster in which to start reading */
    if(!cluster_num)
   14da8:	e3560000 	cmp	r6, #0
    if(fd->pos + buffer_len > fd->dir_entry.file_size)
        buffer_len = fd->dir_entry.file_size - fd->pos;
    if(buffer_len == 0)
        return 0;
    
    uint16_t cluster_size = fd->fs->header.cluster_size;
   14dac:	e1d371ba 	ldrh	r7, [r3, #26]
    cluster_t cluster_num = fd->pos_cluster;
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));

    /* find cluster in which to start reading */
    if(!cluster_num)
   14db0:	1a000012 	bne	14e00 <fat_read_file+0xbc>
    {
        cluster_num = fd->dir_entry.cluster;
   14db4:	e59a6028 	ldr	r6, [sl, #40]	; 0x28
        
        if(!cluster_num)
   14db8:	e3560000 	cmp	r6, #0
   14dbc:	1a000003 	bne	14dd0 <fat_read_file+0x8c>
        {
            if(!fd->pos)
   14dc0:	e1943005 	orrs	r3, r4, r5
   14dc4:	0afffff3 	beq	14d98 <fat_read_file+0x54>
                return 0;
            else
                return -1;
   14dc8:	e3e00000 	mvn	r0, #0
   14dcc:	ea00003e 	b	14ecc <fat_read_file+0x188>
        }

        if(fd->pos)
   14dd0:	e1943005 	orrs	r3, r4, r5
        {
            uint32_t pos = fd->pos;
   14dd4:	11a08004 	movne	r8, r4
                return 0;
            else
                return -1;
        }

        if(fd->pos)
   14dd8:	1a000006 	bne	14df8 <fat_read_file+0xb4>
   14ddc:	ea000007 	b	14e00 <fat_read_file+0xbc>
        {
            uint32_t pos = fd->pos;
            while(pos >= cluster_size)
            {
                pos -= cluster_size;
                cluster_num = fat_get_next_cluster(fd->fs, cluster_num);
   14de0:	e1a01006 	mov	r1, r6
   14de4:	e59a0000 	ldr	r0, [sl]
   14de8:	ebfffcaa 	bl	14098 <fat_get_next_cluster>
                if(!cluster_num)
   14dec:	e2506000 	subs	r6, r0, #0
 * \param[out] buffer The buffer into which to write.
 * \param[in] buffer_len The amount of data to read.
 * \returns The number of bytes read, 0 on end of file, or -1 on failure.
 * \see fat_write_file
 */
intptr_t fat_read_file(struct fat_file_struct* fd, uint8_t* buffer, uintptr_t buffer_len)
   14df0:	e0678008 	rsb	r8, r7, r8
            uint32_t pos = fd->pos;
            while(pos >= cluster_size)
            {
                pos -= cluster_size;
                cluster_num = fat_get_next_cluster(fd->fs, cluster_num);
                if(!cluster_num)
   14df4:	0afffff3 	beq	14dc8 <fat_read_file+0x84>
        }

        if(fd->pos)
        {
            uint32_t pos = fd->pos;
            while(pos >= cluster_size)
   14df8:	e1580007 	cmp	r8, r7
   14dfc:	2afffff7 	bcs	14de0 <fat_read_file+0x9c>
        return 0;
    
    uint16_t cluster_size = fd->fs->header.cluster_size;
    cluster_t cluster_num = fd->pos_cluster;
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));
   14e00:	e2473001 	sub	r3, r7, #1
   14e04:	e0034004 	and	r4, r3, r4
   14e08:	e1a04804 	lsl	r4, r4, #16
   14e0c:	e1a04824 	lsr	r4, r4, #16
   14e10:	e1a0500b 	mov	r5, fp
    
    /* read data */
    do
    {
        /* calculate data size to copy from cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
   14e14:	e59a9000 	ldr	r9, [sl]
   14e18:	e1a01006 	mov	r1, r6
   14e1c:	e1a00009 	mov	r0, r9
   14e20:	ebfffdbd 	bl	1451c <fat_cluster_offset>
        uint16_t copy_length = cluster_size - first_cluster_offset;
   14e24:	e0648007 	rsb	r8, r4, r7
   14e28:	e1a08808 	lsl	r8, r8, #16
   14e2c:	e1a08828 	lsr	r8, r8, #16
    
    /* read data */
    do
    {
        /* calculate data size to copy from cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
   14e30:	e0900004 	adds	r0, r0, r4
   14e34:	e2a11000 	adc	r1, r1, #0
        uint16_t copy_length = cluster_size - first_cluster_offset;
        if(copy_length > buffer_left)
   14e38:	e1580005 	cmp	r8, r5
            copy_length = buffer_left;
   14e3c:	81a08805 	lslhi	r8, r5, #16
   14e40:	81a08828 	lsrhi	r8, r8, #16

        /* read data */
        if(!fd->fs->partition->device_read(cluster_offset, buffer, copy_length))
   14e44:	e5999000 	ldr	r9, [r9]
   14e48:	e59d2000 	ldr	r2, [sp]
   14e4c:	e1a03008 	mov	r3, r8
   14e50:	e599c000 	ldr	ip, [r9]
   14e54:	e1a0e00f 	mov	lr, pc
   14e58:	e12fff1c 	bx	ip
   14e5c:	e3500000 	cmp	r0, #0
   14e60:	0a000012 	beq	14eb0 <fat_read_file+0x16c>
            return buffer_len - buffer_left;

        /* calculate new file position */
        buffer += copy_length;
   14e64:	e59d3000 	ldr	r3, [sp]
   14e68:	e0833008 	add	r3, r3, r8
   14e6c:	e58d3000 	str	r3, [sp]
        buffer_left -= copy_length;
        fd->pos += copy_length;
   14e70:	e28a3038 	add	r3, sl, #56	; 0x38
   14e74:	e893000c 	ldm	r3, {r2, r3}
        if(!fd->fs->partition->device_read(cluster_offset, buffer, copy_length))
            return buffer_len - buffer_left;

        /* calculate new file position */
        buffer += copy_length;
        buffer_left -= copy_length;
   14e78:	e0685005 	rsb	r5, r8, r5
        fd->pos += copy_length;
   14e7c:	e0922008 	adds	r2, r2, r8

        if(first_cluster_offset + copy_length >= cluster_size)
   14e80:	e0848008 	add	r8, r4, r8
            return buffer_len - buffer_left;

        /* calculate new file position */
        buffer += copy_length;
        buffer_left -= copy_length;
        fd->pos += copy_length;
   14e84:	e2a33000 	adc	r3, r3, #0

        if(first_cluster_offset + copy_length >= cluster_size)
   14e88:	e1580007 	cmp	r8, r7
            return buffer_len - buffer_left;

        /* calculate new file position */
        buffer += copy_length;
        buffer_left -= copy_length;
        fd->pos += copy_length;
   14e8c:	e58a2038 	str	r2, [sl, #56]	; 0x38
   14e90:	e58a303c 	str	r3, [sl, #60]	; 0x3c

        if(first_cluster_offset + copy_length >= cluster_size)
   14e94:	ba000008 	blt	14ebc <fat_read_file+0x178>
        {
            /* we are on a cluster boundary, so get the next cluster */
            if((cluster_num = fat_get_next_cluster(fd->fs, cluster_num)))
   14e98:	e1a01006 	mov	r1, r6
   14e9c:	e59a0000 	ldr	r0, [sl]
   14ea0:	ebfffc7c 	bl	14098 <fat_get_next_cluster>
   14ea4:	e2506000 	subs	r6, r0, #0
   14ea8:	1a000002 	bne	14eb8 <fat_read_file+0x174>
            {
                first_cluster_offset = 0;
            }
            else
            {
                fd->pos_cluster = 0;
   14eac:	e58a6040 	str	r6, [sl, #64]	; 0x40
                return buffer_len - buffer_left;
   14eb0:	e065000b 	rsb	r0, r5, fp
   14eb4:	ea000004 	b	14ecc <fat_read_file+0x188>
        if(first_cluster_offset + copy_length >= cluster_size)
        {
            /* we are on a cluster boundary, so get the next cluster */
            if((cluster_num = fat_get_next_cluster(fd->fs, cluster_num)))
            {
                first_cluster_offset = 0;
   14eb8:	e3a04000 	mov	r4, #0
            }
        }

        fd->pos_cluster = cluster_num;

    } while(buffer_left > 0); /* check if we are done */
   14ebc:	e3550000 	cmp	r5, #0
                fd->pos_cluster = 0;
                return buffer_len - buffer_left;
            }
        }

        fd->pos_cluster = cluster_num;
   14ec0:	e58a6040 	str	r6, [sl, #64]	; 0x40

    } while(buffer_left > 0); /* check if we are done */
   14ec4:	1affffd2 	bne	14e14 <fat_read_file+0xd0>

    return buffer_len;
   14ec8:	e1a0000b 	mov	r0, fp
}
   14ecc:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ed0:	e12fff1e 	bx	lr

00014ed4 <fat_write_file>:
 * \param[in] buffer_len The amount of data to write.
 * \returns The number of bytes written (0 or something less than \c buffer_len on disk full) or -1 on failure.
 * \see fat_read_file
 */
intptr_t fat_write_file(struct fat_file_struct* fd, const uint8_t* buffer, uintptr_t buffer_len)
{
   14ed4:	e92d4ff1 	push	{r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
   14ed8:	e3500000 	cmp	r0, #0
   14edc:	13510000 	cmpne	r1, #0
 * \param[in] buffer_len The amount of data to write.
 * \returns The number of bytes written (0 or something less than \c buffer_len on disk full) or -1 on failure.
 * \see fat_read_file
 */
intptr_t fat_write_file(struct fat_file_struct* fd, const uint8_t* buffer, uintptr_t buffer_len)
{
   14ee0:	e58d2000 	str	r2, [sp]
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
   14ee4:	e1a09001 	mov	r9, r1
   14ee8:	e1a08000 	mov	r8, r0
   14eec:	1a000001 	bne	14ef8 <fat_write_file+0x24>
        return -1;
   14ef0:	e3e00000 	mvn	r0, #0
   14ef4:	ea00007f 	b	150f8 <fat_write_file+0x224>
 * \see fat_read_file
 */
intptr_t fat_write_file(struct fat_file_struct* fd, const uint8_t* buffer, uintptr_t buffer_len)
{
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
   14ef8:	e59d1000 	ldr	r1, [sp]
   14efc:	e3510000 	cmp	r1, #0
   14f00:	0afffffa 	beq	14ef0 <fat_write_file+0x1c>
        return -1;
    if(fd->pos > fd->dir_entry.file_size)
   14f04:	e590302c 	ldr	r3, [r0, #44]	; 0x2c
   14f08:	e2805038 	add	r5, r0, #56	; 0x38
   14f0c:	e8950030 	ldm	r5, {r4, r5}
   14f10:	e1a06003 	mov	r6, r3
   14f14:	e3a07000 	mov	r7, #0
   14f18:	e1570005 	cmp	r7, r5
   14f1c:	01560004 	cmpeq	r6, r4
   14f20:	3afffff2 	bcc	14ef0 <fat_write_file+0x1c>
        return -1;

    uint16_t cluster_size = fd->fs->header.cluster_size;
   14f24:	e5900000 	ldr	r0, [r0]
   14f28:	e1d071ba 	ldrh	r7, [r0, #26]
    cluster_t cluster_num = fd->pos_cluster;
   14f2c:	e598a040 	ldr	sl, [r8, #64]	; 0x40
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));
   14f30:	e247b001 	sub	fp, r7, #1
   14f34:	e00bb004 	and	fp, fp, r4
   14f38:	e1a0b80b 	lsl	fp, fp, #16

    /* find cluster in which to start writing */
    if(!cluster_num)
   14f3c:	e35a0000 	cmp	sl, #0
        return -1;

    uint16_t cluster_size = fd->fs->header.cluster_size;
    cluster_t cluster_num = fd->pos_cluster;
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));
   14f40:	e1a0b82b 	lsr	fp, fp, #16

    /* find cluster in which to start writing */
    if(!cluster_num)
   14f44:	1a000024 	bne	14fdc <fat_write_file+0x108>
    {
        cluster_num = fd->dir_entry.cluster;
   14f48:	e598a028 	ldr	sl, [r8, #40]	; 0x28
        
        if(!cluster_num)
   14f4c:	e35a0000 	cmp	sl, #0
   14f50:	1a00000a 	bne	14f80 <fat_write_file+0xac>
        {
            if(!fd->pos)
   14f54:	e1943005 	orrs	r3, r4, r5
   14f58:	1affffe4 	bne	14ef0 <fat_write_file+0x1c>
            {
                /* empty file */
                fd->dir_entry.cluster = cluster_num = fat_append_clusters(fd->fs, 0, 1);
   14f5c:	e1a0100a 	mov	r1, sl
   14f60:	e3a02001 	mov	r2, #1
   14f64:	ebfffce4 	bl	142fc <fat_append_clusters>
                if(!cluster_num)
   14f68:	e3500000 	cmp	r0, #0
        if(!cluster_num)
        {
            if(!fd->pos)
            {
                /* empty file */
                fd->dir_entry.cluster = cluster_num = fat_append_clusters(fd->fs, 0, 1);
   14f6c:	e1a0a000 	mov	sl, r0
   14f70:	e5880028 	str	r0, [r8, #40]	; 0x28
                if(!cluster_num)
   14f74:	1a000001 	bne	14f80 <fat_write_file+0xac>
                    return 0;
   14f78:	e3a00000 	mov	r0, #0
   14f7c:	ea00005d 	b	150f8 <fat_write_file+0x224>
            {
                return -1;
            }
        }

        if(fd->pos)
   14f80:	e2883038 	add	r3, r8, #56	; 0x38
   14f84:	e893000c 	ldm	r3, {r2, r3}
   14f88:	e1921003 	orrs	r1, r2, r3
        {
            uint32_t pos = fd->pos;
   14f8c:	11a04002 	movne	r4, r2
            {
                return -1;
            }
        }

        if(fd->pos)
   14f90:	1a00000f 	bne	14fd4 <fat_write_file+0x100>
   14f94:	ea000010 	b	14fdc <fat_write_file+0x108>
            uint32_t pos = fd->pos;
            cluster_t cluster_num_next;
            while(pos >= cluster_size)
            {
                pos -= cluster_size;
                cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
   14f98:	e5980000 	ldr	r0, [r8]
   14f9c:	e1a0100a 	mov	r1, sl
   14fa0:	ebfffc3c 	bl	14098 <fat_get_next_cluster>
                if(!cluster_num_next)
   14fa4:	e3500000 	cmp	r0, #0
        {
            uint32_t pos = fd->pos;
            cluster_t cluster_num_next;
            while(pos >= cluster_size)
            {
                pos -= cluster_size;
   14fa8:	e0674004 	rsb	r4, r7, r4
                cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
                if(!cluster_num_next)
   14fac:	1a000007 	bne	14fd0 <fat_write_file+0xfc>
                {
                    if(pos != 0)
   14fb0:	e3540000 	cmp	r4, #0
   14fb4:	1affffcd 	bne	14ef0 <fat_write_file+0x1c>
                        return -1; /* current file position points beyond end of file */

                    /* the file exactly ends on a cluster boundary, and we append to it */
                    cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
   14fb8:	e5980000 	ldr	r0, [r8]
   14fbc:	e1a0100a 	mov	r1, sl
   14fc0:	e3a02001 	mov	r2, #1
   14fc4:	ebfffccc 	bl	142fc <fat_append_clusters>
                    if(!cluster_num_next)
   14fc8:	e3500000 	cmp	r0, #0
   14fcc:	0affffe9 	beq	14f78 <fat_write_file+0xa4>
            cluster_t cluster_num_next;
            while(pos >= cluster_size)
            {
                pos -= cluster_size;
                cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
                if(!cluster_num_next)
   14fd0:	e1a0a000 	mov	sl, r0

        if(fd->pos)
        {
            uint32_t pos = fd->pos;
            cluster_t cluster_num_next;
            while(pos >= cluster_size)
   14fd4:	e1540007 	cmp	r4, r7
   14fd8:	2affffee 	bcs	14f98 <fat_write_file+0xc4>
                    if(pos != 0)
                        return -1; /* current file position points beyond end of file */

                    /* the file exactly ends on a cluster boundary, and we append to it */
                    cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
                    if(!cluster_num_next)
   14fdc:	e59d6000 	ldr	r6, [sp]
    
    /* write data */
    do
    {
        /* calculate data size to write to cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
   14fe0:	e5985000 	ldr	r5, [r8]
   14fe4:	e1a0100a 	mov	r1, sl
   14fe8:	e1a00005 	mov	r0, r5
   14fec:	ebfffd4a 	bl	1451c <fat_cluster_offset>
        uint16_t write_length = cluster_size - first_cluster_offset;
   14ff0:	e06b4007 	rsb	r4, fp, r7
   14ff4:	e1a04804 	lsl	r4, r4, #16
   14ff8:	e1a04824 	lsr	r4, r4, #16
    
    /* write data */
    do
    {
        /* calculate data size to write to cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
   14ffc:	e090000b 	adds	r0, r0, fp
   15000:	e2a11000 	adc	r1, r1, #0
        uint16_t write_length = cluster_size - first_cluster_offset;
        if(write_length > buffer_left)
   15004:	e1540006 	cmp	r4, r6
            write_length = buffer_left;
   15008:	81a04806 	lslhi	r4, r6, #16
   1500c:	81a04824 	lsrhi	r4, r4, #16

        /* write data which fits into the current cluster */
        if(!fd->fs->partition->device_write(cluster_offset, buffer, write_length))
   15010:	e5955000 	ldr	r5, [r5]
   15014:	e1a02009 	mov	r2, r9
   15018:	e1a03004 	mov	r3, r4
   1501c:	e595c008 	ldr	ip, [r5, #8]
   15020:	e1a0e00f 	mov	lr, pc
   15024:	e12fff1c 	bx	ip
   15028:	e3500000 	cmp	r0, #0
   1502c:	0a00001e 	beq	150ac <fat_write_file+0x1d8>
            break;

        /* calculate new file position */
        buffer += write_length;
        buffer_left -= write_length;
        fd->pos += write_length;
   15030:	e2883038 	add	r3, r8, #56	; 0x38
   15034:	e893000c 	ldm	r3, {r2, r3}
        /* write data which fits into the current cluster */
        if(!fd->fs->partition->device_write(cluster_offset, buffer, write_length))
            break;

        /* calculate new file position */
        buffer += write_length;
   15038:	e0899004 	add	r9, r9, r4
        buffer_left -= write_length;
        fd->pos += write_length;
   1503c:	e0922004 	adds	r2, r2, r4
        if(!fd->fs->partition->device_write(cluster_offset, buffer, write_length))
            break;

        /* calculate new file position */
        buffer += write_length;
        buffer_left -= write_length;
   15040:	e0646006 	rsb	r6, r4, r6
        fd->pos += write_length;

        if(first_cluster_offset + write_length >= cluster_size)
   15044:	e08b4004 	add	r4, fp, r4
            break;

        /* calculate new file position */
        buffer += write_length;
        buffer_left -= write_length;
        fd->pos += write_length;
   15048:	e2a33000 	adc	r3, r3, #0

        if(first_cluster_offset + write_length >= cluster_size)
   1504c:	e1540007 	cmp	r4, r7
            break;

        /* calculate new file position */
        buffer += write_length;
        buffer_left -= write_length;
        fd->pos += write_length;
   15050:	e5882038 	str	r2, [r8, #56]	; 0x38
   15054:	e588303c 	str	r3, [r8, #60]	; 0x3c

        if(first_cluster_offset + write_length >= cluster_size)
   15058:	ba000010 	blt	150a0 <fat_write_file+0x1cc>
        {
            /* we are on a cluster boundary, so get the next cluster */
            cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
   1505c:	e5980000 	ldr	r0, [r8]
   15060:	e1a0100a 	mov	r1, sl
   15064:	ebfffc0b 	bl	14098 <fat_get_next_cluster>
            if(!cluster_num_next && buffer_left > 0)
   15068:	e2703001 	rsbs	r3, r0, #1
   1506c:	33a03000 	movcc	r3, #0
   15070:	e3560000 	cmp	r6, #0
   15074:	03a03000 	moveq	r3, #0
   15078:	e3530000 	cmp	r3, #0
                /* we reached the last cluster, append a new one */
                cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
   1507c:	15980000 	ldrne	r0, [r8]
   15080:	11a0100a 	movne	r1, sl
   15084:	13a02001 	movne	r2, #1
   15088:	1bfffc9b 	blne	142fc <fat_append_clusters>
            if(!cluster_num_next)
   1508c:	e3500000 	cmp	r0, #0
            {
                fd->pos_cluster = 0;
   15090:	05880040 	streq	r0, [r8, #64]	; 0x40
                break;
   15094:	0a000004 	beq	150ac <fat_write_file+0x1d8>
            /* we are on a cluster boundary, so get the next cluster */
            cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
            if(!cluster_num_next && buffer_left > 0)
                /* we reached the last cluster, append a new one */
                cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
            if(!cluster_num_next)
   15098:	e1a0a000 	mov	sl, r0
                fd->pos_cluster = 0;
                break;
            }

            cluster_num = cluster_num_next;
            first_cluster_offset = 0;
   1509c:	e3a0b000 	mov	fp, #0
        }

        fd->pos_cluster = cluster_num;

    } while(buffer_left > 0); /* check if we are done */
   150a0:	e3560000 	cmp	r6, #0

            cluster_num = cluster_num_next;
            first_cluster_offset = 0;
        }

        fd->pos_cluster = cluster_num;
   150a4:	e588a040 	str	sl, [r8, #64]	; 0x40

    } while(buffer_left > 0); /* check if we are done */
   150a8:	1affffcc 	bne	14fe0 <fat_write_file+0x10c>

    /* update directory entry */
    if(fd->pos > fd->dir_entry.file_size)
   150ac:	e598702c 	ldr	r7, [r8, #44]	; 0x2c
   150b0:	e2883038 	add	r3, r8, #56	; 0x38
   150b4:	e893000c 	ldm	r3, {r2, r3}
   150b8:	e1a04007 	mov	r4, r7
   150bc:	e3a05000 	mov	r5, #0
   150c0:	e1550003 	cmp	r5, r3
   150c4:	01540002 	cmpeq	r4, r2
   150c8:	2a000008 	bcs	150f0 <fat_write_file+0x21c>
#if !FAT_DELAY_DIRENTRY_UPDATE
        uint32_t size_old = fd->dir_entry.file_size;
#endif

        /* update file size */
        fd->dir_entry.file_size = fd->pos;
   150cc:	e588202c 	str	r2, [r8, #44]	; 0x2c

#if !FAT_DELAY_DIRENTRY_UPDATE
        /* write directory entry */
        if(!fat_write_dir_entry(fd->fs, &fd->dir_entry))
   150d0:	e5980000 	ldr	r0, [r8]
   150d4:	e2881004 	add	r1, r8, #4
   150d8:	ebfffd36 	bl	145b8 <fat_write_dir_entry>
   150dc:	e1500005 	cmp	r0, r5
        {
            /* We do not return an error here since we actually wrote
             * some data to disk. So we calculate the amount of data
             * we wrote to disk and which lies within the old file size.
             */
            buffer_left = fd->pos - size_old;
   150e0:	05986038 	ldreq	r6, [r8, #56]	; 0x38
            fd->pos = size_old;
   150e4:	05884038 	streq	r4, [r8, #56]	; 0x38
   150e8:	0588503c 	streq	r5, [r8, #60]	; 0x3c
        {
            /* We do not return an error here since we actually wrote
             * some data to disk. So we calculate the amount of data
             * we wrote to disk and which lies within the old file size.
             */
            buffer_left = fd->pos - size_old;
   150ec:	00676006 	rsbeq	r6, r7, r6
            fd->pos = size_old;
        }
#endif
    }

    return buffer_len - buffer_left;
   150f0:	e59d3000 	ldr	r3, [sp]
   150f4:	e0660003 	rsb	r0, r6, r3
}
   150f8:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   150fc:	e12fff1e 	bx	lr

00015100 <fat_resize_file>:
 * \param[in] fd The file decriptor of the file which to resize.
 * \param[in] size The new size of the file.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_resize_file(struct fat_file_struct* fd, uint32_t size)
{
   15100:	e92d47f3 	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    if(!fd)
   15104:	e2506000 	subs	r6, r0, #0
 * \param[in] fd The file decriptor of the file which to resize.
 * \param[in] size The new size of the file.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_resize_file(struct fat_file_struct* fd, uint32_t size)
{
   15108:	e1a08001 	mov	r8, r1
    if(!fd)
   1510c:	1a000001 	bne	15118 <fat_resize_file+0x18>
        return 0;
   15110:	e3a00000 	mov	r0, #0
   15114:	ea000055 	b	15270 <fat_resize_file+0x170>

    cluster_t cluster_num = fd->dir_entry.cluster;
    uint16_t cluster_size = fd->fs->header.cluster_size;
   15118:	e5963000 	ldr	r3, [r6]
uint8_t fat_resize_file(struct fat_file_struct* fd, uint32_t size)
{
    if(!fd)
        return 0;

    cluster_t cluster_num = fd->dir_entry.cluster;
   1511c:	e5967028 	ldr	r7, [r6, #40]	; 0x28
    uint16_t cluster_size = fd->fs->header.cluster_size;
   15120:	e1d341ba 	ldrh	r4, [r3, #26]
    uint32_t size_new = size;

    do
    {
        if(cluster_num == 0 && size_new == 0)
   15124:	e1913007 	orrs	r3, r1, r7
   15128:	11a05001 	movne	r5, r1
   1512c:	1a000007 	bne	15150 <fat_resize_file+0x50>
   15130:	ea000044 	b	15248 <fat_resize_file+0x148>

        /* seek to the next cluster as long as we need the space */
        while(size_new > cluster_size)
        {
            /* get next cluster of file */
            cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
   15134:	e5960000 	ldr	r0, [r6]
   15138:	e1a01007 	mov	r1, r7
   1513c:	ebfffbd5 	bl	14098 <fat_get_next_cluster>
            if(cluster_num_next)
   15140:	e3500000 	cmp	r0, #0
   15144:	0a000005 	beq	15160 <fat_resize_file+0x60>
 *
 * \param[in] fd The file decriptor of the file which to resize.
 * \param[in] size The new size of the file.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_resize_file(struct fat_file_struct* fd, uint32_t size)
   15148:	e0645005 	rsb	r5, r4, r5
        {
            /* get next cluster of file */
            cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
            if(cluster_num_next)
            {
                cluster_num = cluster_num_next;
   1514c:	e1a07000 	mov	r7, r0
        if(cluster_num == 0 && size_new == 0)
            /* the file stays empty */
            break;

        /* seek to the next cluster as long as we need the space */
        while(size_new > cluster_size)
   15150:	e1550004 	cmp	r5, r4
   15154:	8afffff6 	bhi	15134 <fat_resize_file+0x34>
            {
                break;
            }
        }

        if(size_new > cluster_size || cluster_num == 0)
   15158:	e3570000 	cmp	r7, #0
   1515c:	1a00000c 	bne	15194 <fat_resize_file+0x94>
        {
            /* Allocate new cluster chain and append
             * it to the existing one, if available.
             */
            cluster_t cluster_count = (size_new + cluster_size - 1) / cluster_size;
   15160:	e0850004 	add	r0, r5, r4
   15164:	e1a01004 	mov	r1, r4
   15168:	e2400001 	sub	r0, r0, #1
   1516c:	eb0018fd 	bl	1b568 <__aeabi_uidiv>
            cluster_t cluster_new_chain = fat_append_clusters(fd->fs, cluster_num, cluster_count);
   15170:	e1a01007 	mov	r1, r7
        if(size_new > cluster_size || cluster_num == 0)
        {
            /* Allocate new cluster chain and append
             * it to the existing one, if available.
             */
            cluster_t cluster_count = (size_new + cluster_size - 1) / cluster_size;
   15174:	e1a02000 	mov	r2, r0
            cluster_t cluster_new_chain = fat_append_clusters(fd->fs, cluster_num, cluster_count);
   15178:	e5960000 	ldr	r0, [r6]
   1517c:	ebfffc5e 	bl	142fc <fat_append_clusters>
            if(!cluster_new_chain)
   15180:	e3500000 	cmp	r0, #0
   15184:	0affffe1 	beq	15110 <fat_resize_file+0x10>
                return 0;

            if(!cluster_num)
   15188:	e3570000 	cmp	r7, #0
            {
                cluster_num = cluster_new_chain;
                fd->dir_entry.cluster = cluster_num;
   1518c:	05860028 	streq	r0, [r6, #40]	; 0x28
   15190:	01a07000 	moveq	r7, r0
            }
        }

        /* write new directory entry */
        fd->dir_entry.file_size = size;
        if(size == 0)
   15194:	e3580000 	cmp	r8, #0
            fd->dir_entry.cluster = 0;
   15198:	05868028 	streq	r8, [r6, #40]	; 0x28
                fd->dir_entry.cluster = cluster_num;
            }
        }

        /* write new directory entry */
        fd->dir_entry.file_size = size;
   1519c:	e586802c 	str	r8, [r6, #44]	; 0x2c
        if(size == 0)
            fd->dir_entry.cluster = 0;
        if(!fat_write_dir_entry(fd->fs, &fd->dir_entry))
   151a0:	e5960000 	ldr	r0, [r6]
   151a4:	e2861004 	add	r1, r6, #4
   151a8:	ebfffd02 	bl	145b8 <fat_write_dir_entry>
   151ac:	e3500000 	cmp	r0, #0
   151b0:	0affffd6 	beq	15110 <fat_resize_file+0x10>
            return 0;

        if(size == 0)
   151b4:	e3580000 	cmp	r8, #0
        {
            /* free all clusters of file */
            fat_free_clusters(fd->fs, cluster_num);
   151b8:	05960000 	ldreq	r0, [r6]
   151bc:	01a01007 	moveq	r1, r7
        if(size == 0)
            fd->dir_entry.cluster = 0;
        if(!fat_write_dir_entry(fd->fs, &fd->dir_entry))
            return 0;

        if(size == 0)
   151c0:	0a00001f 	beq	15244 <fat_resize_file+0x144>
        {
            /* free all clusters of file */
            fat_free_clusters(fd->fs, cluster_num);
        }
        else if(size_new <= cluster_size)
   151c4:	e1550004 	cmp	r5, r4
   151c8:	8a00001e 	bhi	15248 <fat_resize_file+0x148>
        {
            /* free all clusters no longer needed */
            fat_terminate_clusters(fd->fs, cluster_num);
   151cc:	e596a000 	ldr	sl, [r6]
 * \returns 0 on failure, 1 on success.
 * \see fat_free_clusters
 */
uint8_t fat_terminate_clusters(struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
   151d0:	e35a0000 	cmp	sl, #0
   151d4:	13570001 	cmpne	r7, #1
   151d8:	9a00001a 	bls	15248 <fat_resize_file+0x148>
        return 0;

    /* fetch next cluster before overwriting the cluster entry */
    cluster_t cluster_num_next = fat_get_next_cluster(fs, cluster_num);
   151dc:	e1a01007 	mov	r1, r7
   151e0:	e1a0000a 	mov	r0, sl
   151e4:	ebfffbab 	bl	14098 <fat_get_next_cluster>

    /* mark cluster as the last one */
#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
   151e8:	e59ac000 	ldr	ip, [sl]
   151ec:	e5dc3010 	ldrb	r3, [ip, #16]
   151f0:	e353000b 	cmp	r3, #11
    {
        uint32_t fat_entry = HTOL32(FAT32_CLUSTER_LAST_MAX);
   151f4:	03e0320f 	mvneq	r3, #-268435456	; 0xf0000000
            return 0;
    }
    else
#endif
    {
        uint16_t fat_entry = HTOL16(FAT16_CLUSTER_LAST_MAX);
   151f8:	13e03000 	mvnne	r3, #0

    /* mark cluster as the last one */
#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
    {
        uint32_t fat_entry = HTOL32(FAT32_CLUSTER_LAST_MAX);
   151fc:	e28d2008 	add	r2, sp, #8
{
    if(!fs || cluster_num < 2)
        return 0;

    /* fetch next cluster before overwriting the cluster entry */
    cluster_t cluster_num_next = fat_get_next_cluster(fs, cluster_num);
   15200:	e1a09000 	mov	r9, r0
   15204:	e28a100c 	add	r1, sl, #12
   15208:	e8910003 	ldm	r1, {r0, r1}

    /* mark cluster as the last one */
#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
    {
        uint32_t fat_entry = HTOL32(FAT32_CLUSTER_LAST_MAX);
   1520c:	05223004 	streq	r3, [r2, #-4]!
            return 0;
    }
    else
#endif
    {
        uint16_t fat_entry = HTOL16(FAT16_CLUSTER_LAST_MAX);
   15210:	116230b6 	strhne	r3, [r2, #-6]!
    /* mark cluster as the last one */
#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
    {
        uint32_t fat_entry = HTOL32(FAT32_CLUSTER_LAST_MAX);
        if(!fs->partition->device_write(fs->header.fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
   15214:	03a03004 	moveq	r3, #4
    }
    else
#endif
    {
        uint16_t fat_entry = HTOL16(FAT16_CLUSTER_LAST_MAX);
        if(!fs->partition->device_write(fs->header.fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
   15218:	13a03002 	movne	r3, #2
   1521c:	e0a10793 	umlal	r0, r1, r3, r7
   15220:	e59cc008 	ldr	ip, [ip, #8]
   15224:	e1a0e00f 	mov	lr, pc
   15228:	e12fff1c 	bx	ip
   1522c:	e3500000 	cmp	r0, #0
   15230:	0a000004 	beq	15248 <fat_resize_file+0x148>
            return 0;
    }

    /* free remaining clusters */
    if(cluster_num_next)
   15234:	e3590000 	cmp	r9, #0
   15238:	0a000002 	beq	15248 <fat_resize_file+0x148>
        return fat_free_clusters(fs, cluster_num_next);
   1523c:	e1a0000a 	mov	r0, sl
   15240:	e1a01009 	mov	r1, r9
   15244:	ebfffbc8 	bl	1416c <fat_free_clusters>
        }

    } while(0);

    /* correct file position */
    if(size < fd->pos)
   15248:	e2865038 	add	r5, r6, #56	; 0x38
   1524c:	e8950030 	ldm	r5, {r4, r5}
   15250:	e1a02008 	mov	r2, r8
   15254:	e3a03000 	mov	r3, #0
   15258:	e1530005 	cmp	r3, r5
   1525c:	01520004 	cmpeq	r2, r4
    {
        fd->pos = size;
   15260:	35862038 	strcc	r2, [r6, #56]	; 0x38
   15264:	3586303c 	strcc	r3, [r6, #60]	; 0x3c
        fd->pos_cluster = 0;
   15268:	35863040 	strcc	r3, [r6, #64]	; 0x40
    }

    return 1;
   1526c:	e3a00001 	mov	r0, #1
}
   15270:	e8bd47fc 	pop	{r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   15274:	e12fff1e 	bx	lr

00015278 <fat_seek_file>:
 * \param[in] whence Affects the way \c offset is interpreted, see above.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_seek_file(struct fat_file_struct* fd, int32_t* offset, uint8_t whence)
{
    if(!fd || !offset)
   15278:	e3500000 	cmp	r0, #0
   1527c:	13510000 	cmpne	r1, #0
 *                   to this location before it returns.
 * \param[in] whence Affects the way \c offset is interpreted, see above.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_seek_file(struct fat_file_struct* fd, int32_t* offset, uint8_t whence)
{
   15280:	e92d4070 	push	{r4, r5, r6, lr}
   15284:	e20220ff 	and	r2, r2, #255	; 0xff
    if(!fd || !offset)
   15288:	e1a04000 	mov	r4, r0
   1528c:	e1a06001 	mov	r6, r1
   15290:	13a00000 	movne	r0, #0
   15294:	03a00001 	moveq	r0, #1
   15298:	1a000001 	bne	152a4 <fat_seek_file+0x2c>
        return 0;
   1529c:	e3a00000 	mov	r0, #0
   152a0:	ea00001d 	b	1531c <fat_seek_file+0xa4>

    uint32_t new_pos = fd->pos;
    switch(whence)
   152a4:	e3520001 	cmp	r2, #1
uint8_t fat_seek_file(struct fat_file_struct* fd, int32_t* offset, uint8_t whence)
{
    if(!fd || !offset)
        return 0;

    uint32_t new_pos = fd->pos;
   152a8:	e5945038 	ldr	r5, [r4, #56]	; 0x38
    switch(whence)
   152ac:	0a000005 	beq	152c8 <fat_seek_file+0x50>
   152b0:	3a000002 	bcc	152c0 <fat_seek_file+0x48>
   152b4:	e3520002 	cmp	r2, #2
   152b8:	1a000017 	bne	1531c <fat_seek_file+0xa4>
   152bc:	ea000003 	b	152d0 <fat_seek_file+0x58>
    {
        case FAT_SEEK_SET:
            new_pos = *offset;
   152c0:	e5915000 	ldr	r5, [r1]
            break;
   152c4:	ea000004 	b	152dc <fat_seek_file+0x64>
        case FAT_SEEK_CUR:
            new_pos += *offset;
   152c8:	e5913000 	ldr	r3, [r1]
   152cc:	ea000001 	b	152d8 <fat_seek_file+0x60>
            break;
        case FAT_SEEK_END:
            new_pos = fd->dir_entry.file_size + *offset;
   152d0:	e5915000 	ldr	r5, [r1]
   152d4:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   152d8:	e0855003 	add	r5, r5, r3
            break;
        default:
            return 0;
    }

    if(new_pos > fd->dir_entry.file_size
   152dc:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   152e0:	e1550003 	cmp	r5, r3
   152e4:	8a000006 	bhi	15304 <fat_seek_file+0x8c>
       && !fat_resize_file(fd, new_pos)
#endif
       )
        return 0;

    fd->pos = new_pos;
   152e8:	e3a03000 	mov	r3, #0
   152ec:	e5845038 	str	r5, [r4, #56]	; 0x38
   152f0:	e584303c 	str	r3, [r4, #60]	; 0x3c
    fd->pos_cluster = 0;
   152f4:	e5843040 	str	r3, [r4, #64]	; 0x40

    *offset = (int32_t) new_pos;
    return 1;
   152f8:	e3a00001 	mov	r0, #1
        return 0;

    fd->pos = new_pos;
    fd->pos_cluster = 0;

    *offset = (int32_t) new_pos;
   152fc:	e5865000 	str	r5, [r6]
    return 1;
   15300:	ea000005 	b	1531c <fat_seek_file+0xa4>
            return 0;
    }

    if(new_pos > fd->dir_entry.file_size
#if FAT_WRITE_SUPPORT
       && !fat_resize_file(fd, new_pos)
   15304:	e1a00004 	mov	r0, r4
   15308:	e1a01005 	mov	r1, r5
   1530c:	ebffff7b 	bl	15100 <fat_resize_file>
   15310:	e3500000 	cmp	r0, #0
   15314:	1afffff3 	bne	152e8 <fat_seek_file+0x70>
   15318:	eaffffdf 	b	1529c <fat_seek_file+0x24>
    fd->pos = new_pos;
    fd->pos_cluster = 0;

    *offset = (int32_t) new_pos;
    return 1;
}
   1531c:	e8bd4070 	pop	{r4, r5, r6, lr}
   15320:	e12fff1e 	bx	lr

00015324 <fat_open_dir>:
 * \returns An opaque directory descriptor on success, 0 on failure.
 * \see fat_close_dir
 */
struct fat_dir_struct* fat_open_dir(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry || !(dir_entry->attributes & FAT_ATTRIB_DIR))
   15324:	e3500000 	cmp	r0, #0
   15328:	13510000 	cmpne	r1, #0
 * \param[in] dir_entry The directory entry which stands for the directory to open.
 * \returns An opaque directory descriptor on success, 0 on failure.
 * \see fat_close_dir
 */
struct fat_dir_struct* fat_open_dir(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
   1532c:	e92d4070 	push	{r4, r5, r6, lr}
    if(!fs || !dir_entry || !(dir_entry->attributes & FAT_ATTRIB_DIR))
   15330:	e1a05001 	mov	r5, r1
   15334:	e1a06000 	mov	r6, r0
   15338:	13a04000 	movne	r4, #0
   1533c:	03a04001 	moveq	r4, #1
   15340:	0a00000a 	beq	15370 <fat_open_dir+0x4c>
   15344:	e5d13020 	ldrb	r3, [r1, #32]
   15348:	e2133010 	ands	r3, r3, #16
   1534c:	0a000007 	beq	15370 <fat_open_dir+0x4c>
#else
    struct fat_dir_struct* dd = fat_dir_handles;
    uint8_t i;
    for(i = 0; i < FAT_DIR_COUNT; ++i)
    {
        if(!dd->fs)
   15350:	e59f305c 	ldr	r3, [pc, #92]	; 153b4 <fat_open_dir+0x90>
   15354:	e5932078 	ldr	r2, [r3, #120]	; 0x78
   15358:	e3520000 	cmp	r2, #0
   1535c:	0a000005 	beq	15378 <fat_open_dir+0x54>
   15360:	e59320b8 	ldr	r2, [r3, #184]	; 0xb8
   15364:	e3520000 	cmp	r2, #0
   15368:	0a000004 	beq	15380 <fat_open_dir+0x5c>
   1536c:	ea00000d 	b	153a8 <fat_open_dir+0x84>
 * \see fat_close_dir
 */
struct fat_dir_struct* fat_open_dir(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry || !(dir_entry->attributes & FAT_ATTRIB_DIR))
        return 0;
   15370:	e3a04000 	mov	r4, #0
   15374:	ea00000b 	b	153a8 <fat_open_dir+0x84>
#if USE_DYNAMIC_MEMORY
    struct fat_dir_struct* dd = malloc(sizeof(*dd));
    if(!dd)
        return 0;
#else
    struct fat_dir_struct* dd = fat_dir_handles;
   15378:	e2834078 	add	r4, r3, #120	; 0x78
   1537c:	ea000000 	b	15384 <fat_open_dir+0x60>
    for(i = 0; i < FAT_DIR_COUNT; ++i)
    {
        if(!dd->fs)
            break;

        ++dd;
   15380:	e28340b8 	add	r4, r3, #184	; 0xb8
    }
    if(i >= FAT_DIR_COUNT)
        return 0;
#endif
    
    memcpy(&dd->dir_entry, dir_entry, sizeof(*dir_entry));
   15384:	e2840004 	add	r0, r4, #4
   15388:	e1a01005 	mov	r1, r5
   1538c:	e3a02034 	mov	r2, #52	; 0x34
   15390:	eb0002d4 	bl	15ee8 <memcpy>
    dd->fs = fs;
    dd->entry_cluster = dir_entry->cluster;
   15394:	e5953024 	ldr	r3, [r5, #36]	; 0x24
   15398:	e5843038 	str	r3, [r4, #56]	; 0x38
    dd->entry_offset = 0;
   1539c:	e3a03000 	mov	r3, #0
    if(i >= FAT_DIR_COUNT)
        return 0;
#endif
    
    memcpy(&dd->dir_entry, dir_entry, sizeof(*dir_entry));
    dd->fs = fs;
   153a0:	e5846000 	str	r6, [r4]
    dd->entry_cluster = dir_entry->cluster;
    dd->entry_offset = 0;
   153a4:	e1c433bc 	strh	r3, [r4, #60]	; 0x3c

    return dd;
}
   153a8:	e1a00004 	mov	r0, r4
   153ac:	e8bd4070 	pop	{r4, r5, r6, lr}
   153b0:	e12fff1e 	bx	lr
   153b4:	40000b04 	.word	0x40000b04

000153b8 <fat_close_dir>:
 * \param[in] dd The directory descriptor to close.
 * \see fat_open_dir
 */
void fat_close_dir(struct fat_dir_struct* dd)
{
    if(dd)
   153b8:	e3500000 	cmp	r0, #0
#if USE_DYNAMIC_MEMORY
        free(dd);
#else
        dd->fs = 0;
   153bc:	13a03000 	movne	r3, #0
   153c0:	15803000 	strne	r3, [r0]
   153c4:	e12fff1e 	bx	lr

000153c8 <fat_reset_dir>:
 * \returns 0 on failure, 1 on success.
 * \see fat_read_dir
 */
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
    if(!dd)
   153c8:	e3500000 	cmp	r0, #0
   153cc:	012fff1e 	bxeq	lr
        return 0;

    dd->entry_cluster = dd->dir_entry.cluster;
   153d0:	e5903028 	ldr	r3, [r0, #40]	; 0x28
   153d4:	e5803038 	str	r3, [r0, #56]	; 0x38
    dd->entry_offset = 0;
   153d8:	e3a03000 	mov	r3, #0
   153dc:	e1c033bc 	strh	r3, [r0, #60]	; 0x3c
    return 1;
   153e0:	e3a00001 	mov	r0, #1
}
   153e4:	e12fff1e 	bx	lr

000153e8 <fat_read_dir>:
 * \param[out] dir_entry Pointer to a buffer into which to write the directory entry information.
 * \returns 0 on failure, 1 on success.
 * \see fat_reset_dir
 */
uint8_t fat_read_dir(struct fat_dir_struct* dd, struct fat_dir_entry_struct* dir_entry)
{
   153e8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(!dd || !dir_entry)
   153ec:	e3500000 	cmp	r0, #0
   153f0:	13510000 	cmpne	r1, #0
 * \param[out] dir_entry Pointer to a buffer into which to write the directory entry information.
 * \returns 0 on failure, 1 on success.
 * \see fat_reset_dir
 */
uint8_t fat_read_dir(struct fat_dir_struct* dd, struct fat_dir_entry_struct* dir_entry)
{
   153f4:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    if(!dd || !dir_entry)
   153f8:	e1a05001 	mov	r5, r1
   153fc:	e1a07000 	mov	r7, r0
   15400:	13a0a000 	movne	sl, #0
   15404:	03a0a001 	moveq	sl, #1
   15408:	0a000054 	beq	15560 <fat_read_dir+0x178>
        return 0;

    /* get current position of directory handle */
    struct fat_fs_struct* fs = dd->fs;
   1540c:	e5906000 	ldr	r6, [r0]
    const struct fat_header_struct* header = &fs->header;
    uint16_t cluster_size = header->cluster_size;
    cluster_t cluster_num = dd->entry_cluster;
    uint16_t cluster_offset = dd->entry_offset;
   15410:	e1d043bc 	ldrh	r4, [r0, #60]	; 0x3c
        return 0;

    /* get current position of directory handle */
    struct fat_fs_struct* fs = dd->fs;
    const struct fat_header_struct* header = &fs->header;
    uint16_t cluster_size = header->cluster_size;
   15414:	e1d691ba 	ldrh	r9, [r6, #26]
    cluster_t cluster_num = dd->entry_cluster;
    uint16_t cluster_offset = dd->entry_offset;
    struct fat_read_dir_callback_arg arg;

    if(cluster_offset >= cluster_size)
   15418:	e1540009 	cmp	r4, r9

    /* get current position of directory handle */
    struct fat_fs_struct* fs = dd->fs;
    const struct fat_header_struct* header = &fs->header;
    uint16_t cluster_size = header->cluster_size;
    cluster_t cluster_num = dd->entry_cluster;
   1541c:	e5908038 	ldr	r8, [r0, #56]	; 0x38
    uint16_t cluster_offset = dd->entry_offset;
    struct fat_read_dir_callback_arg arg;

    if(cluster_offset >= cluster_size)
   15420:	3a000002 	bcc	15430 <fat_read_dir+0x48>
        /* The latest call hit the border of the last cluster in
         * the chain, but it still returned a directory entry.
         * So we now reset the handle and signal the caller the
         * end of the listing.
         */
        fat_reset_dir(dd);
   15424:	e1a00007 	mov	r0, r7
   15428:	ebffffe6 	bl	153c8 <fat_reset_dir>
   1542c:	ea00004b 	b	15560 <fat_read_dir+0x178>
        return 0;
    }

    /* reset callback arguments */
    memset(&arg, 0, sizeof(arg));
   15430:	e1a0100a 	mov	r1, sl
   15434:	e3a0200c 	mov	r2, #12
   15438:	e28d0010 	add	r0, sp, #16
   1543c:	eb0002b1 	bl	15f08 <memset>
    memset(dir_entry, 0, sizeof(*dir_entry));
   15440:	e1a00005 	mov	r0, r5
   15444:	e1a0100a 	mov	r1, sl
   15448:	e3a02034 	mov	r2, #52	; 0x34
   1544c:	eb0002ad 	bl	15f08 <memset>
    arg.dir_entry = dir_entry;

    /* check if we read from the root directory */
    if(cluster_num == 0)
   15450:	e3580000 	cmp	r8, #0
    }

    /* reset callback arguments */
    memset(&arg, 0, sizeof(arg));
    memset(dir_entry, 0, sizeof(*dir_entry));
    arg.dir_entry = dir_entry;
   15454:	e58d5010 	str	r5, [sp, #16]

    /* check if we read from the root directory */
    if(cluster_num == 0)
   15458:	1a000037 	bne	1553c <fat_read_dir+0x154>
    {
#if FAT_FAT32_SUPPORT
        if(fs->partition->type == PARTITION_TYPE_FAT32)
   1545c:	e5963000 	ldr	r3, [r6]
   15460:	e5d33010 	ldrb	r3, [r3, #16]
   15464:	e353000b 	cmp	r3, #11
            cluster_num = header->root_dir_cluster;
        else
#endif
            cluster_size = header->cluster_zero_offset - header->root_dir_offset;
   15468:	11d691bc 	ldrhne	r9, [r6, #28]
   1546c:	11d632b4 	ldrhne	r3, [r6, #36]	; 0x24
   15470:	10639009 	rsbne	r9, r3, r9
   15474:	11a09809 	lslne	r9, r9, #16
    /* check if we read from the root directory */
    if(cluster_num == 0)
    {
#if FAT_FAT32_SUPPORT
        if(fs->partition->type == PARTITION_TYPE_FAT32)
            cluster_num = header->root_dir_cluster;
   15478:	0596802c 	ldreq	r8, [r6, #44]	; 0x2c
        else
#endif
            cluster_size = header->cluster_zero_offset - header->root_dir_offset;
   1547c:	11a09829 	lsrne	r9, r9, #16
   15480:	ea00002d 	b	1553c <fat_read_dir+0x154>
    /* read entries */
    uint8_t buffer[32];
    while(!arg.finished)
    {
        /* read directory entries up to the cluster border */
        uint16_t cluster_left = cluster_size - cluster_offset;
   15484:	e06a3009 	rsb	r3, sl, r9
        offset_t pos = cluster_offset;
   15488:	e3a05000 	mov	r5, #0
    /* read entries */
    uint8_t buffer[32];
    while(!arg.finished)
    {
        /* read directory entries up to the cluster border */
        uint16_t cluster_left = cluster_size - cluster_offset;
   1548c:	e1a03803 	lsl	r3, r3, #16
        offset_t pos = cluster_offset;
        if(cluster_num == 0)
   15490:	e1580005 	cmp	r8, r5
    /* read entries */
    uint8_t buffer[32];
    while(!arg.finished)
    {
        /* read directory entries up to the cluster border */
        uint16_t cluster_left = cluster_size - cluster_offset;
   15494:	e1a03823 	lsr	r3, r3, #16
        offset_t pos = cluster_offset;
        if(cluster_num == 0)
   15498:	1a000004 	bne	154b0 <fat_read_dir+0xc8>
            pos += header->root_dir_offset;
   1549c:	e2861024 	add	r1, r6, #36	; 0x24
   154a0:	e8910003 	ldm	r1, {r0, r1}
   154a4:	e090000a 	adds	r0, r0, sl
   154a8:	e0a11005 	adc	r1, r1, r5
   154ac:	ea000006 	b	154cc <fat_read_dir+0xe4>
        else
            pos += fat_cluster_offset(fs, cluster_num);
   154b0:	e1a00006 	mov	r0, r6
   154b4:	e1a01008 	mov	r1, r8
   154b8:	e58d300c 	str	r3, [sp, #12]
   154bc:	ebfffc16 	bl	1451c <fat_cluster_offset>
   154c0:	e59d300c 	ldr	r3, [sp, #12]
   154c4:	e090000a 	adds	r0, r0, sl
   154c8:	e0a11005 	adc	r1, r1, r5

        arg.bytes_read = 0;
        if(!fs->partition->device_read_interval(pos,
   154cc:	e596c000 	ldr	ip, [r6]
        if(cluster_num == 0)
            pos += header->root_dir_offset;
        else
            pos += fat_cluster_offset(fs, cluster_num);

        arg.bytes_read = 0;
   154d0:	e3a04000 	mov	r4, #0
        if(!fs->partition->device_read_interval(pos,
   154d4:	e88d0808 	stm	sp, {r3, fp}
   154d8:	e28d3010 	add	r3, sp, #16
   154dc:	e58d3008 	str	r3, [sp, #8]
        if(cluster_num == 0)
            pos += header->root_dir_offset;
        else
            pos += fat_cluster_offset(fs, cluster_num);

        arg.bytes_read = 0;
   154e0:	e58d4014 	str	r4, [sp, #20]
        if(!fs->partition->device_read_interval(pos,
   154e4:	e28d201c 	add	r2, sp, #28
   154e8:	e3a03020 	mov	r3, #32
   154ec:	e59cc004 	ldr	ip, [ip, #4]
   154f0:	e1a0e00f 	mov	lr, pc
   154f4:	e12fff1c 	bx	ip
   154f8:	e3500000 	cmp	r0, #0
   154fc:	0a000018 	beq	15564 <fat_read_dir+0x17c>
                                                fat_dir_entry_read_callback,
                                                &arg)
          )
            return 0;

        cluster_offset += arg.bytes_read;
   15500:	e59d3014 	ldr	r3, [sp, #20]
   15504:	e08aa003 	add	sl, sl, r3
   15508:	e1a0a80a 	lsl	sl, sl, #16
   1550c:	e1a0a82a 	lsr	sl, sl, #16

        if(cluster_offset >= cluster_size)
   15510:	e15a0009 	cmp	sl, r9
   15514:	3a00000a 	bcc	15544 <fat_read_dir+0x15c>
        {
            /* we reached the cluster border and switch to the next cluster */

            /* get number of next cluster */
            if((cluster_num = fat_get_next_cluster(fs, cluster_num)) != 0)
   15518:	e1a01008 	mov	r1, r8
   1551c:	e1a00006 	mov	r0, r6
   15520:	ebfffadc 	bl	14098 <fat_get_next_cluster>
   15524:	e2508000 	subs	r8, r0, #0
   15528:	1a000004 	bne	15540 <fat_read_dir+0x158>
                cluster_offset = 0;
                continue;
            }

            /* we are at the end of the cluster chain */
            if(!arg.finished)
   1552c:	e5dd3019 	ldrb	r3, [sp, #25]
   15530:	e1530004 	cmp	r3, r4
   15534:	1a000005 	bne	15550 <fat_read_dir+0x168>
   15538:	eaffffb9 	b	15424 <fat_read_dir+0x3c>
            pos += header->root_dir_offset;
        else
            pos += fat_cluster_offset(fs, cluster_num);

        arg.bytes_read = 0;
        if(!fs->partition->device_read_interval(pos,
   1553c:	e59fb02c 	ldr	fp, [pc, #44]	; 15570 <fat_read_dir+0x188>
 * \param[out] dir_entry Pointer to a buffer into which to write the directory entry information.
 * \returns 0 on failure, 1 on success.
 * \see fat_reset_dir
 */
uint8_t fat_read_dir(struct fat_dir_struct* dd, struct fat_dir_entry_struct* dir_entry)
{
   15540:	e1a0a004 	mov	sl, r4
            cluster_size = header->cluster_zero_offset - header->root_dir_offset;
    }

    /* read entries */
    uint8_t buffer[32];
    while(!arg.finished)
   15544:	e5dd3019 	ldrb	r3, [sp, #25]
   15548:	e3530000 	cmp	r3, #0
   1554c:	0affffcc 	beq	15484 <fat_read_dir+0x9c>

            break;
        }
    }

    dd->entry_cluster = cluster_num;
   15550:	e5878038 	str	r8, [r7, #56]	; 0x38
    dd->entry_offset = cluster_offset;
   15554:	e1c7a3bc 	strh	sl, [r7, #60]	; 0x3c

    return arg.finished;
   15558:	e5dd0019 	ldrb	r0, [sp, #25]
   1555c:	ea000000 	b	15564 <fat_read_dir+0x17c>
 * \see fat_reset_dir
 */
uint8_t fat_read_dir(struct fat_dir_struct* dd, struct fat_dir_entry_struct* dir_entry)
{
    if(!dd || !dir_entry)
        return 0;
   15560:	e3a00000 	mov	r0, #0

    dd->entry_cluster = cluster_num;
    dd->entry_offset = cluster_offset;

    return arg.finished;
}
   15564:	e28dd03c 	add	sp, sp, #60	; 0x3c
   15568:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1556c:	e12fff1e 	bx	lr
   15570:	00013e60 	.word	0x00013e60

00015574 <fat_get_dir_entry_of_path>:
 * \returns 0 on failure, 1 on success.
 * \see fat_read_dir
 */
uint8_t fat_get_dir_entry_of_path(struct fat_fs_struct* fs, const char* path, struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !path || path[0] == '\0' || !dir_entry)
   15574:	e3500000 	cmp	r0, #0
   15578:	13510000 	cmpne	r1, #0
 * \param[out] dir_entry The directory entry to fill.
 * \returns 0 on failure, 1 on success.
 * \see fat_read_dir
 */
uint8_t fat_get_dir_entry_of_path(struct fat_fs_struct* fs, const char* path, struct fat_dir_entry_struct* dir_entry)
{
   1557c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15580:	e1a05002 	mov	r5, r2
    if(!fs || !path || path[0] == '\0' || !dir_entry)
   15584:	e1a04001 	mov	r4, r1
   15588:	e1a08000 	mov	r8, r0
   1558c:	0a000041 	beq	15698 <fat_get_dir_entry_of_path+0x124>
   15590:	e5d13000 	ldrb	r3, [r1]
   15594:	e3530000 	cmp	r3, #0
   15598:	0a00003e 	beq	15698 <fat_get_dir_entry_of_path+0x124>
   1559c:	e3520000 	cmp	r2, #0
   155a0:	0a00003c 	beq	15698 <fat_get_dir_entry_of_path+0x124>
        return 0;

    if(path[0] == '/')
   155a4:	e353002f 	cmp	r3, #47	; 0x2f
        ++path;
   155a8:	02814001 	addeq	r4, r1, #1

    /* begin with the root directory */
    memset(dir_entry, 0, sizeof(*dir_entry));
   155ac:	e1a00002 	mov	r0, r2
   155b0:	e3a01000 	mov	r1, #0
   155b4:	e3a02034 	mov	r2, #52	; 0x34
   155b8:	eb000252 	bl	15f08 <memset>
    dir_entry->attributes = FAT_ATTRIB_DIR;
   155bc:	e3a03010 	mov	r3, #16
   155c0:	e5c53020 	strb	r3, [r5, #32]

    while(1)
    {
        if(path[0] == '\0')
   155c4:	e5d43000 	ldrb	r3, [r4]
   155c8:	e3530000 	cmp	r3, #0
   155cc:	1a000001 	bne	155d8 <fat_get_dir_entry_of_path+0x64>
            return 1;
   155d0:	e3a00001 	mov	r0, #1
   155d4:	ea000030 	b	1569c <fat_get_dir_entry_of_path+0x128>

        struct fat_dir_struct* dd = fat_open_dir(fs, dir_entry);
   155d8:	e1a00008 	mov	r0, r8
   155dc:	e1a01005 	mov	r1, r5
   155e0:	ebffff4f 	bl	15324 <fat_open_dir>
        if(!dd)
   155e4:	e2507000 	subs	r7, r0, #0
   155e8:	0a00002a 	beq	15698 <fat_get_dir_entry_of_path+0x124>
            break;

        /* extract the next hierarchy we will search for */
        const char* sub_path = strchr(path, '/');
   155ec:	e1a00004 	mov	r0, r4
   155f0:	e3a0102f 	mov	r1, #47	; 0x2f
   155f4:	eb00027d 	bl	15ff0 <strchr>
        uint8_t length_to_sep;
        if(sub_path)
   155f8:	e3500000 	cmp	r0, #0
        {
            length_to_sep = sub_path - path;
   155fc:	10646000 	rsbne	r6, r4, r0
   15600:	120660ff 	andne	r6, r6, #255	; 0xff
            ++sub_path;
   15604:	1280a001 	addne	sl, r0, #1
   15608:	1a000017 	bne	1566c <fat_get_dir_entry_of_path+0xf8>
        }
        else
        {
            length_to_sep = strlen(path);
   1560c:	e1a00004 	mov	r0, r4
   15610:	eb00028f 	bl	16054 <strlen>
   15614:	e20060ff 	and	r6, r0, #255	; 0xff
            sub_path = path + length_to_sep;
   15618:	e084a006 	add	sl, r4, r6
   1561c:	ea000012 	b	1566c <fat_get_dir_entry_of_path+0xf8>
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
   15620:	e1a00005 	mov	r0, r5
   15624:	eb00028a 	bl	16054 <strlen>
   15628:	e1500006 	cmp	r0, r6
   1562c:	1a00000e 	bne	1566c <fat_get_dir_entry_of_path+0xf8>
                strncmp(path, dir_entry->long_name, length_to_sep) != 0))
   15630:	e1a00004 	mov	r0, r4
   15634:	e1a01005 	mov	r1, r5
   15638:	e1a02006 	mov	r2, r6
   1563c:	eb00028b 	bl	16070 <strncmp>
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
   15640:	e2509000 	subs	r9, r0, #0
   15644:	1a000008 	bne	1566c <fat_get_dir_entry_of_path+0xf8>
                strncmp(path, dir_entry->long_name, length_to_sep) != 0))
                continue;

            fat_close_dir(dd);
   15648:	e1a00007 	mov	r0, r7
   1564c:	ebffff59 	bl	153b8 <fat_close_dir>
            dd = 0;

            if(path[length_to_sep] == '\0')
   15650:	e7d43006 	ldrb	r3, [r4, r6]
   15654:	e3530000 	cmp	r3, #0
   15658:	0affffdc 	beq	155d0 <fat_get_dir_entry_of_path+0x5c>
                /* we iterated through the whole path and have found the file */
                return 1;

            if(dir_entry->attributes & FAT_ATTRIB_DIR)
   1565c:	e5d53020 	ldrb	r3, [r5, #32]
   15660:	e3130010 	tst	r3, #16
   15664:	1a000006 	bne	15684 <fat_get_dir_entry_of_path+0x110>
   15668:	ea00000a 	b	15698 <fat_get_dir_entry_of_path+0x124>
            length_to_sep = strlen(path);
            sub_path = path + length_to_sep;
        }
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
   1566c:	e1a00007 	mov	r0, r7
   15670:	e1a01005 	mov	r1, r5
   15674:	ebffff5b 	bl	153e8 <fat_read_dir>
   15678:	e3500000 	cmp	r0, #0
   1567c:	1affffe7 	bne	15620 <fat_get_dir_entry_of_path+0xac>
   15680:	ea000001 	b	1568c <fat_get_dir_entry_of_path+0x118>
                return 1;

            if(dir_entry->attributes & FAT_ATTRIB_DIR)
            {
                /* we found a parent directory of the file we are searching for */
                path = sub_path;
   15684:	e1a0400a 	mov	r4, sl
            if((strlen(dir_entry->long_name) != length_to_sep ||
                strncmp(path, dir_entry->long_name, length_to_sep) != 0))
                continue;

            fat_close_dir(dd);
            dd = 0;
   15688:	e1a07009 	mov	r7, r9

            /* a parent of the file exists, but not the file itself */
            return 0;
        }

        fat_close_dir(dd);
   1568c:	e1a00007 	mov	r0, r7
   15690:	ebffff48 	bl	153b8 <fat_close_dir>
    }
   15694:	eaffffca 	b	155c4 <fat_get_dir_entry_of_path+0x50>
 * \see fat_read_dir
 */
uint8_t fat_get_dir_entry_of_path(struct fat_fs_struct* fs, const char* path, struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !path || path[0] == '\0' || !dir_entry)
        return 0;
   15698:	e3a00000 	mov	r0, #0

        fat_close_dir(dd);
    }
    
    return 0;
}
   1569c:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   156a0:	e12fff1e 	bx	lr

000156a4 <fat_create_file>:
 * \returns 0 on failure, 1 on success, 2 if the file already existed.
 * \see fat_delete_file
 */
uint8_t fat_create_file(struct fat_dir_struct* parent, const char* file, struct fat_dir_entry_struct* dir_entry)
{
    if(!parent || !file || !file[0] || !dir_entry)
   156a4:	e3500000 	cmp	r0, #0
   156a8:	13510000 	cmpne	r1, #0
 * \param[out] dir_entry The directory entry to fill for the new (or existing) file.
 * \returns 0 on failure, 1 on success, 2 if the file already existed.
 * \see fat_delete_file
 */
uint8_t fat_create_file(struct fat_dir_struct* parent, const char* file, struct fat_dir_entry_struct* dir_entry)
{
   156ac:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   156b0:	e1a06002 	mov	r6, r2
    if(!parent || !file || !file[0] || !dir_entry)
   156b4:	e1a05001 	mov	r5, r1
   156b8:	e1a04000 	mov	r4, r0
   156bc:	1a000001 	bne	156c8 <fat_create_file+0x24>
        return 0;
   156c0:	e3a00000 	mov	r0, #0
   156c4:	ea00002c 	b	1577c <fat_create_file+0xd8>
 * \returns 0 on failure, 1 on success, 2 if the file already existed.
 * \see fat_delete_file
 */
uint8_t fat_create_file(struct fat_dir_struct* parent, const char* file, struct fat_dir_entry_struct* dir_entry)
{
    if(!parent || !file || !file[0] || !dir_entry)
   156c8:	e5d13000 	ldrb	r3, [r1]
   156cc:	e3530000 	cmp	r3, #0
   156d0:	0afffffa 	beq	156c0 <fat_create_file+0x1c>
   156d4:	e3520000 	cmp	r2, #0
   156d8:	0afffff8 	beq	156c0 <fat_create_file+0x1c>
        return 0;

    /* check if the file already exists */
    while(1)
    {
        if(!fat_read_dir(parent, dir_entry))
   156dc:	e1a01006 	mov	r1, r6
   156e0:	e1a00004 	mov	r0, r4
   156e4:	ebffff3f 	bl	153e8 <fat_read_dir>
   156e8:	e2501000 	subs	r1, r0, #0
   156ec:	0a000008 	beq	15714 <fat_create_file+0x70>
            break;

        if(strcmp(file, dir_entry->long_name) == 0)
   156f0:	e1a00005 	mov	r0, r5
   156f4:	e1a01006 	mov	r1, r6
   156f8:	eb000248 	bl	16020 <strcmp>
   156fc:	e3500000 	cmp	r0, #0
   15700:	1afffff5 	bne	156dc <fat_create_file+0x38>
        {
            fat_reset_dir(parent);
   15704:	e1a00004 	mov	r0, r4
   15708:	ebffff2e 	bl	153c8 <fat_reset_dir>
            return 2;
   1570c:	e3a00002 	mov	r0, #2
   15710:	ea000019 	b	1577c <fat_create_file+0xd8>
        }
    }

    struct fat_fs_struct* fs = parent->fs;
   15714:	e5947000 	ldr	r7, [r4]

    /* prepare directory entry with values already known */
    memset(dir_entry, 0, sizeof(*dir_entry));
   15718:	e3a02034 	mov	r2, #52	; 0x34
   1571c:	e1a00006 	mov	r0, r6
   15720:	eb0001f8 	bl	15f08 <memset>
    strncpy(dir_entry->long_name, file, sizeof(dir_entry->long_name) - 1);
   15724:	e1a01005 	mov	r1, r5
   15728:	e1a00006 	mov	r0, r6
   1572c:	e3a0201f 	mov	r2, #31
   15730:	eb000267 	bl	160d4 <strncpy>
 * \param[in] dir_entry The directory entry for which to search space.
 * \returns 0 on failure, a device offset on success.
 */
offset_t fat_find_offset_for_dir_entry(struct fat_fs_struct* fs, const struct fat_dir_struct* parent, const struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry)
   15734:	e3570000 	cmp	r7, #0
        return 0;
   15738:	03a00000 	moveq	r0, #0
   1573c:	03a01000 	moveq	r1, #0
 * \param[in] dir_entry The directory entry for which to search space.
 * \returns 0 on failure, a device offset on success.
 */
offset_t fat_find_offset_for_dir_entry(struct fat_fs_struct* fs, const struct fat_dir_struct* parent, const struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry)
   15740:	0a000004 	beq	15758 <fat_create_file+0xb4>
   15744:	e1a00007 	mov	r0, r7
   15748:	e1a01004 	mov	r1, r4
   1574c:	e1a02006 	mov	r2, r6
   15750:	ebfffc3d 	bl	1484c <fat_find_offset_for_dir_entry.part.4>
   15754:	eaffffff 	b	15758 <fat_create_file+0xb4>
    /* prepare directory entry with values already known */
    memset(dir_entry, 0, sizeof(*dir_entry));
    strncpy(dir_entry->long_name, file, sizeof(dir_entry->long_name) - 1);

    /* find place where to store directory entry */
    if(!(dir_entry->entry_offset = fat_find_offset_for_dir_entry(fs, parent, dir_entry)))
   15758:	e1903001 	orrs	r3, r0, r1
   1575c:	e586002c 	str	r0, [r6, #44]	; 0x2c
   15760:	e5861030 	str	r1, [r6, #48]	; 0x30
   15764:	0affffd5 	beq	156c0 <fat_create_file+0x1c>
        return 0;
    
    /* write directory entry to disk */
    if(!fat_write_dir_entry(fs, dir_entry))
   15768:	e1a00007 	mov	r0, r7
   1576c:	e1a01006 	mov	r1, r6
   15770:	ebfffb90 	bl	145b8 <fat_write_dir_entry>
 * \see fat_delete_file
 */
uint8_t fat_create_file(struct fat_dir_struct* parent, const char* file, struct fat_dir_entry_struct* dir_entry)
{
    if(!parent || !file || !file[0] || !dir_entry)
        return 0;
   15774:	e2900000 	adds	r0, r0, #0
   15778:	13a00001 	movne	r0, #1
    /* write directory entry to disk */
    if(!fat_write_dir_entry(fs, dir_entry))
        return 0;
    
    return 1;
}
   1577c:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   15780:	e12fff1e 	bx	lr

00015784 <fat_delete_file>:
 * \returns 0 on failure, 1 on success.
 * \see fat_create_file
 */
uint8_t fat_delete_file(struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry)
   15784:	e3500000 	cmp	r0, #0
   15788:	13510000 	cmpne	r1, #0
 * \param[in] dir_entry The directory entry of the file to delete.
 * \returns 0 on failure, 1 on success.
 * \see fat_create_file
 */
uint8_t fat_delete_file(struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
{
   1578c:	e92d47f7 	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, lr}
    if(!fs || !dir_entry)
   15790:	e1a0a001 	mov	sl, r1
   15794:	e1a08000 	mov	r8, r0
   15798:	0a00002c 	beq	15850 <fat_delete_file+0xcc>
        return 0;

    /* get offset of the file's directory entry */
    offset_t dir_entry_offset = dir_entry->entry_offset;
   1579c:	e281502c 	add	r5, r1, #44	; 0x2c
   157a0:	e8950030 	ldm	r5, {r4, r5}
    if(!dir_entry_offset)
   157a4:	e1943005 	orrs	r3, r4, r5
   157a8:	0a000028 	beq	15850 <fat_delete_file+0xcc>
        /* read directory entry */
        if(!fs->partition->device_read(dir_entry_offset, buffer, sizeof(buffer)))
            return 0;
        
        /* mark the directory entry as deleted */
        buffer[0] = FAT_DIRENTRY_DELETED;
   157ac:	e3e0901a 	mvn	r9, #26

        /* check if we deleted the whole entry */
        if(buffer[11] != 0x0f)
            break;

        dir_entry_offset += 32;
   157b0:	e3a06020 	mov	r6, #32
   157b4:	e3a07000 	mov	r7, #0
#if FAT_LFN_SUPPORT
    uint8_t buffer[12];
    while(1)
    {
        /* read directory entry */
        if(!fs->partition->device_read(dir_entry_offset, buffer, sizeof(buffer)))
   157b8:	e598c000 	ldr	ip, [r8]
   157bc:	e1a00004 	mov	r0, r4
   157c0:	e1a01005 	mov	r1, r5
   157c4:	e1a0200d 	mov	r2, sp
   157c8:	e3a0300c 	mov	r3, #12
   157cc:	e59cc000 	ldr	ip, [ip]
   157d0:	e1a0e00f 	mov	lr, pc
   157d4:	e12fff1c 	bx	ip
   157d8:	e3500000 	cmp	r0, #0
   157dc:	0a00001b 	beq	15850 <fat_delete_file+0xcc>
            return 0;
        
        /* mark the directory entry as deleted */
        buffer[0] = FAT_DIRENTRY_DELETED;
   157e0:	e5cd9000 	strb	r9, [sp]
        
        /* write back entry */
        if(!fs->partition->device_write(dir_entry_offset, buffer, sizeof(buffer)))
   157e4:	e598c000 	ldr	ip, [r8]
   157e8:	e1a00004 	mov	r0, r4
   157ec:	e1a01005 	mov	r1, r5
   157f0:	e1a0200d 	mov	r2, sp
   157f4:	e3a0300c 	mov	r3, #12
   157f8:	e59cc008 	ldr	ip, [ip, #8]
   157fc:	e1a0e00f 	mov	lr, pc
   15800:	e12fff1c 	bx	ip
   15804:	e3500000 	cmp	r0, #0
   15808:	0a000010 	beq	15850 <fat_delete_file+0xcc>
            return 0;

        /* check if we deleted the whole entry */
        if(buffer[11] != 0x0f)
   1580c:	e5dd300b 	ldrb	r3, [sp, #11]
   15810:	e353000f 	cmp	r3, #15
   15814:	1a000002 	bne	15824 <fat_delete_file+0xa0>
            break;

        dir_entry_offset += 32;
   15818:	e0944006 	adds	r4, r4, r6
   1581c:	e0a55007 	adc	r5, r5, r7
   15820:	eaffffe4 	b	157b8 <fat_delete_file+0x34>
#endif

    /* We deleted the directory entry. The next thing to do is
     * marking all occupied clusters as free.
     */
    return (dir_entry->cluster == 0 || fat_free_clusters(fs, dir_entry->cluster));
   15824:	e59a1024 	ldr	r1, [sl, #36]	; 0x24
   15828:	e3510000 	cmp	r1, #0
   1582c:	03a00001 	moveq	r0, #1
   15830:	0a000004 	beq	15848 <fat_delete_file+0xc4>
   15834:	e1a00008 	mov	r0, r8
   15838:	ebfffa4b 	bl	1416c <fat_free_clusters>
   1583c:	e2900000 	adds	r0, r0, #0
   15840:	13a00001 	movne	r0, #1
   15844:	eaffffff 	b	15848 <fat_delete_file+0xc4>
   15848:	e20000ff 	and	r0, r0, #255	; 0xff
   1584c:	ea000000 	b	15854 <fat_delete_file+0xd0>
 * \see fat_create_file
 */
uint8_t fat_delete_file(struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry)
        return 0;
   15850:	e3a00000 	mov	r0, #0

    /* We deleted the directory entry. The next thing to do is
     * marking all occupied clusters as free.
     */
    return (dir_entry->cluster == 0 || fat_free_clusters(fs, dir_entry->cluster));
}
   15854:	e8bd47fe 	pop	{r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   15858:	e12fff1e 	bx	lr

0001585c <fat_move_file>:
 * \param[in] file_new The file's new name.
 * \returns 0 on failure, 1 on success.
 * \see fat_create_file, fat_delete_file, fat_move_dir
 */
uint8_t fat_move_file(struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry, struct fat_dir_struct* parent_new, const char* file_new)
{
   1585c:	e92d4070 	push	{r4, r5, r6, lr}
    if(!fs || !dir_entry || !parent_new || (file_new && !file_new[0]))
   15860:	e3500000 	cmp	r0, #0
   15864:	13510000 	cmpne	r1, #0
 * \param[in] file_new The file's new name.
 * \returns 0 on failure, 1 on success.
 * \see fat_create_file, fat_delete_file, fat_move_dir
 */
uint8_t fat_move_file(struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry, struct fat_dir_struct* parent_new, const char* file_new)
{
   15868:	e24dd034 	sub	sp, sp, #52	; 0x34
    if(!fs || !dir_entry || !parent_new || (file_new && !file_new[0]))
   1586c:	e1a04001 	mov	r4, r1
   15870:	e1a05000 	mov	r5, r0
   15874:	1a000001 	bne	15880 <fat_move_file+0x24>
        return 0;
   15878:	e3a00000 	mov	r0, #0
   1587c:	ea000032 	b	1594c <fat_move_file+0xf0>
 * \returns 0 on failure, 1 on success.
 * \see fat_create_file, fat_delete_file, fat_move_dir
 */
uint8_t fat_move_file(struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry, struct fat_dir_struct* parent_new, const char* file_new)
{
    if(!fs || !dir_entry || !parent_new || (file_new && !file_new[0]))
   15880:	e3520000 	cmp	r2, #0
   15884:	0afffffb 	beq	15878 <fat_move_file+0x1c>
   15888:	e3530000 	cmp	r3, #0
   1588c:	0a000002 	beq	1589c <fat_move_file+0x40>
   15890:	e5d31000 	ldrb	r1, [r3]
   15894:	e3510000 	cmp	r1, #0
   15898:	0afffff6 	beq	15878 <fat_move_file+0x1c>
        return 0;
    if(fs != parent_new->fs)
   1589c:	e5921000 	ldr	r1, [r2]
   158a0:	e1550001 	cmp	r5, r1
   158a4:	1afffff3 	bne	15878 <fat_move_file+0x1c>
    if(!file_new)
        file_new = dir_entry->long_name;

    /* create file with new file name */
    struct fat_dir_entry_struct dir_entry_new;
    if(!fat_create_file(parent_new, file_new, &dir_entry_new))
   158a8:	e3530000 	cmp	r3, #0
   158ac:	e1a00002 	mov	r0, r2
   158b0:	11a01003 	movne	r1, r3
   158b4:	01a01004 	moveq	r1, r4
   158b8:	e1a0200d 	mov	r2, sp
   158bc:	ebffff78 	bl	156a4 <fat_create_file>
   158c0:	e3500000 	cmp	r0, #0
   158c4:	0affffeb 	beq	15878 <fat_move_file+0x1c>
        return 0;

    /* copy members of directory entry which do not change with rename */
    dir_entry_new.attributes = dir_entry->attributes;
   158c8:	e5d43020 	ldrb	r3, [r4, #32]
   158cc:	e5cd3020 	strb	r3, [sp, #32]
#if FAT_DATETIME_SUPPORT
    dir_entry_new.modification_time = dir_entry->modification_time;
    dir_entry_new.modification_date = dir_entry->modification_date;
#endif
    dir_entry_new.cluster = dir_entry->cluster;
   158d0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   158d4:	e58d3024 	str	r3, [sp, #36]	; 0x24
    dir_entry_new.file_size = dir_entry->file_size;
   158d8:	e5943028 	ldr	r3, [r4, #40]	; 0x28

    /* make the new file name point to the old file's content */
    if(!fat_write_dir_entry(fs, &dir_entry_new))
   158dc:	e1a00005 	mov	r0, r5
   158e0:	e1a0100d 	mov	r1, sp
#if FAT_DATETIME_SUPPORT
    dir_entry_new.modification_time = dir_entry->modification_time;
    dir_entry_new.modification_date = dir_entry->modification_date;
#endif
    dir_entry_new.cluster = dir_entry->cluster;
    dir_entry_new.file_size = dir_entry->file_size;
   158e4:	e58d3028 	str	r3, [sp, #40]	; 0x28

    /* make the new file name point to the old file's content */
    if(!fat_write_dir_entry(fs, &dir_entry_new))
   158e8:	ebfffb32 	bl	145b8 <fat_write_dir_entry>
   158ec:	e2506000 	subs	r6, r0, #0
   158f0:	1a000003 	bne	15904 <fat_move_file+0xa8>
    {
        fat_delete_file(fs, &dir_entry_new);
   158f4:	e1a00005 	mov	r0, r5
   158f8:	e1a0100d 	mov	r1, sp
   158fc:	ebffffa0 	bl	15784 <fat_delete_file>
   15900:	eaffffdc 	b	15878 <fat_move_file+0x1c>
        return 0;
    }
    
    /* delete the old file, but not its clusters, which have already been remapped above */
    dir_entry->cluster = 0;
   15904:	e3a03000 	mov	r3, #0
   15908:	e5843024 	str	r3, [r4, #36]	; 0x24
    if(!fat_delete_file(fs, dir_entry))
   1590c:	e1a00005 	mov	r0, r5
   15910:	e1a01004 	mov	r1, r4
   15914:	ebffff9a 	bl	15784 <fat_delete_file>
   15918:	e3500000 	cmp	r0, #0
   1591c:	0affffd5 	beq	15878 <fat_move_file+0x1c>
        return 0;

    *dir_entry = dir_entry_new;
   15920:	e1a0c004 	mov	ip, r4
   15924:	e1a0400d 	mov	r4, sp
   15928:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
   1592c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   15930:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
   15934:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   15938:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
   1593c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   15940:	e5943000 	ldr	r3, [r4]
   15944:	e58c3000 	str	r3, [ip]
    return 1;
   15948:	e3a00001 	mov	r0, #1
}
   1594c:	e28dd034 	add	sp, sp, #52	; 0x34
   15950:	e8bd4070 	pop	{r4, r5, r6, lr}
   15954:	e12fff1e 	bx	lr

00015958 <fat_create_dir>:
 * \returns 0 on failure, 1 on success.
 * \see fat_delete_dir
 */
uint8_t fat_create_dir(struct fat_dir_struct* parent, const char* dir, struct fat_dir_entry_struct* dir_entry)
{
    if(!parent || !dir || !dir[0] || !dir_entry)
   15958:	e3500000 	cmp	r0, #0
   1595c:	13510000 	cmpne	r1, #0
 * \param[out] dir_entry The directory entry to fill for the new directory.
 * \returns 0 on failure, 1 on success.
 * \see fat_delete_dir
 */
uint8_t fat_create_dir(struct fat_dir_struct* parent, const char* dir, struct fat_dir_entry_struct* dir_entry)
{
   15960:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15964:	e1a06002 	mov	r6, r2
    if(!parent || !dir || !dir[0] || !dir_entry)
   15968:	e1a0b001 	mov	fp, r1
   1596c:	e1a09000 	mov	r9, r0
   15970:	0a000051 	beq	15abc <fat_create_dir+0x164>
   15974:	e5d12000 	ldrb	r2, [r1]
   15978:	e3520000 	cmp	r2, #0
   1597c:	0a00004e 	beq	15abc <fat_create_dir+0x164>
   15980:	e3560000 	cmp	r6, #0
   15984:	1a000008 	bne	159ac <fat_create_dir+0x54>
   15988:	ea00004b 	b	15abc <fat_create_dir+0x164>
        return 0;

    /* check if the file or directory already exists */
    while(fat_read_dir(parent, dir_entry))
    {
        if(strcmp(dir, dir_entry->long_name) == 0)
   1598c:	e1a0000b 	mov	r0, fp
   15990:	e1a01006 	mov	r1, r6
   15994:	eb0001a1 	bl	16020 <strcmp>
   15998:	e2504000 	subs	r4, r0, #0
   1599c:	1a000002 	bne	159ac <fat_create_dir+0x54>
        {
            fat_reset_dir(parent);
   159a0:	e1a00009 	mov	r0, r9
   159a4:	ebfffe87 	bl	153c8 <fat_reset_dir>
   159a8:	ea000043 	b	15abc <fat_create_dir+0x164>
{
    if(!parent || !dir || !dir[0] || !dir_entry)
        return 0;

    /* check if the file or directory already exists */
    while(fat_read_dir(parent, dir_entry))
   159ac:	e1a01006 	mov	r1, r6
   159b0:	e1a00009 	mov	r0, r9
   159b4:	ebfffe8b 	bl	153e8 <fat_read_dir>
   159b8:	e2501000 	subs	r1, r0, #0
   159bc:	1afffff2 	bne	1598c <fat_create_dir+0x34>
            fat_reset_dir(parent);
            return 0;
        }
    }

    struct fat_fs_struct* fs = parent->fs;
   159c0:	e5998000 	ldr	r8, [r9]

    /* allocate cluster which will hold directory entries */
    cluster_t dir_cluster = fat_append_clusters(fs, 0, 1);
   159c4:	e3a02001 	mov	r2, #1
   159c8:	e1a00008 	mov	r0, r8
   159cc:	ebfffa4a 	bl	142fc <fat_append_clusters>
    if(!dir_cluster)
   159d0:	e250a000 	subs	sl, r0, #0
   159d4:	0a000038 	beq	15abc <fat_create_dir+0x164>
 * \param[in] cluster_num The cluster to clear.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_clear_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(cluster_num < 2)
   159d8:	e35a0001 	cmp	sl, #1
   159dc:	81a00008 	movhi	r0, r8
   159e0:	81a0100a 	movhi	r1, sl
   159e4:	8bfffad9 	blhi	14550 <fat_clear_cluster.part.3>
        return 0;

    /* clear cluster to prevent bogus directory entries */
    fat_clear_cluster(fs, dir_cluster);
    
    memset(dir_entry, 0, sizeof(*dir_entry));
   159e8:	e3a01000 	mov	r1, #0
   159ec:	e3a02034 	mov	r2, #52	; 0x34
   159f0:	e1a00006 	mov	r0, r6
   159f4:	eb000143 	bl	15f08 <memset>
    dir_entry->attributes = FAT_ATTRIB_DIR;
   159f8:	e3a02010 	mov	r2, #16
   159fc:	e5c62020 	strb	r2, [r6, #32]

    /* create "." directory self reference */
    dir_entry->entry_offset = fs->header.cluster_zero_offset +
                              (offset_t) (dir_cluster - 2) * fs->header.cluster_size;
   15a00:	e1d821ba 	ldrh	r2, [r8, #26]
    
    memset(dir_entry, 0, sizeof(*dir_entry));
    dir_entry->attributes = FAT_ATTRIB_DIR;

    /* create "." directory self reference */
    dir_entry->entry_offset = fs->header.cluster_zero_offset +
   15a04:	e288101c 	add	r1, r8, #28
   15a08:	e8910003 	ldm	r1, {r0, r1}
                              (offset_t) (dir_cluster - 2) * fs->header.cluster_size;
   15a0c:	e24ac002 	sub	ip, sl, #2
    
    memset(dir_entry, 0, sizeof(*dir_entry));
    dir_entry->attributes = FAT_ATTRIB_DIR;

    /* create "." directory self reference */
    dir_entry->entry_offset = fs->header.cluster_zero_offset +
   15a10:	e0a10c92 	umlal	r0, r1, r2, ip
                              (offset_t) (dir_cluster - 2) * fs->header.cluster_size;
    dir_entry->long_name[0] = '.';
   15a14:	e3a0702e 	mov	r7, #46	; 0x2e
    
    memset(dir_entry, 0, sizeof(*dir_entry));
    dir_entry->attributes = FAT_ATTRIB_DIR;

    /* create "." directory self reference */
    dir_entry->entry_offset = fs->header.cluster_zero_offset +
   15a18:	e586002c 	str	r0, [r6, #44]	; 0x2c
   15a1c:	e5861030 	str	r1, [r6, #48]	; 0x30
                              (offset_t) (dir_cluster - 2) * fs->header.cluster_size;
    dir_entry->long_name[0] = '.';
   15a20:	e5c67000 	strb	r7, [r6]
    dir_entry->cluster = dir_cluster;
   15a24:	e586a024 	str	sl, [r6, #36]	; 0x24
    if(!fat_write_dir_entry(fs, dir_entry))
   15a28:	e1a00008 	mov	r0, r8
   15a2c:	e1a01006 	mov	r1, r6
   15a30:	ebfffae0 	bl	145b8 <fat_write_dir_entry>
   15a34:	e2504000 	subs	r4, r0, #0
   15a38:	0a000026 	beq	15ad8 <fat_create_dir+0x180>
        fat_free_clusters(fs, dir_cluster);
        return 0;
    }

    /* create ".." parent directory reference */
    dir_entry->entry_offset += 32;
   15a3c:	e286502c 	add	r5, r6, #44	; 0x2c
   15a40:	e8950030 	ldm	r5, {r4, r5}
   15a44:	e3a02020 	mov	r2, #32
   15a48:	e0944002 	adds	r4, r4, r2
   15a4c:	e3a03000 	mov	r3, #0
    dir_entry->long_name[1] = '.';
    dir_entry->cluster = parent->dir_entry.cluster;
   15a50:	e5992028 	ldr	r2, [r9, #40]	; 0x28
        fat_free_clusters(fs, dir_cluster);
        return 0;
    }

    /* create ".." parent directory reference */
    dir_entry->entry_offset += 32;
   15a54:	e0a55003 	adc	r5, r5, r3
   15a58:	e586402c 	str	r4, [r6, #44]	; 0x2c
   15a5c:	e5865030 	str	r5, [r6, #48]	; 0x30
    dir_entry->long_name[1] = '.';
   15a60:	e5c67001 	strb	r7, [r6, #1]
    dir_entry->cluster = parent->dir_entry.cluster;
   15a64:	e5862024 	str	r2, [r6, #36]	; 0x24
    if(!fat_write_dir_entry(fs, dir_entry))
   15a68:	e1a00008 	mov	r0, r8
   15a6c:	e1a01006 	mov	r1, r6
   15a70:	ebfffad0 	bl	145b8 <fat_write_dir_entry>
   15a74:	e2504000 	subs	r4, r0, #0
   15a78:	0a000016 	beq	15ad8 <fat_create_dir+0x180>
        fat_free_clusters(fs, dir_cluster);
        return 0;
    }

    /* fill directory entry */
    strncpy(dir_entry->long_name, dir, sizeof(dir_entry->long_name) - 1);
   15a7c:	e1a0100b 	mov	r1, fp
   15a80:	e3a0201f 	mov	r2, #31
   15a84:	e1a00006 	mov	r0, r6
   15a88:	eb000191 	bl	160d4 <strncpy>
    dir_entry->cluster = dir_cluster;
   15a8c:	e586a024 	str	sl, [r6, #36]	; 0x24
   15a90:	e1a00008 	mov	r0, r8
   15a94:	e1a01009 	mov	r1, r9
   15a98:	e1a02006 	mov	r2, r6
   15a9c:	ebfffb6a 	bl	1484c <fat_find_offset_for_dir_entry.part.4>

    /* find place where to store directory entry */
    if(!(dir_entry->entry_offset = fat_find_offset_for_dir_entry(fs, parent, dir_entry)))
   15aa0:	e1903001 	orrs	r3, r0, r1
   15aa4:	e586002c 	str	r0, [r6, #44]	; 0x2c
   15aa8:	e5861030 	str	r1, [r6, #48]	; 0x30
    {
        fat_free_clusters(fs, dir_cluster);
   15aac:	e1a00008 	mov	r0, r8
    /* fill directory entry */
    strncpy(dir_entry->long_name, dir, sizeof(dir_entry->long_name) - 1);
    dir_entry->cluster = dir_cluster;

    /* find place where to store directory entry */
    if(!(dir_entry->entry_offset = fat_find_offset_for_dir_entry(fs, parent, dir_entry)))
   15ab0:	1a000003 	bne	15ac4 <fat_create_dir+0x16c>
    {
        fat_free_clusters(fs, dir_cluster);
   15ab4:	e1a0100a 	mov	r1, sl
   15ab8:	ebfff9ab 	bl	1416c <fat_free_clusters>
        return 0;
   15abc:	e3a00000 	mov	r0, #0
   15ac0:	ea000006 	b	15ae0 <fat_create_dir+0x188>
    }

    /* write directory to disk */
    if(!fat_write_dir_entry(fs, dir_entry))
   15ac4:	e1a01006 	mov	r1, r6
   15ac8:	ebfffaba 	bl	145b8 <fat_write_dir_entry>
   15acc:	e2504000 	subs	r4, r0, #0
    {
        fat_free_clusters(fs, dir_cluster);
        return 0;
    }

    return 1;
   15ad0:	13a00001 	movne	r0, #1
        fat_free_clusters(fs, dir_cluster);
        return 0;
    }

    /* write directory to disk */
    if(!fat_write_dir_entry(fs, dir_entry))
   15ad4:	1a000001 	bne	15ae0 <fat_create_dir+0x188>
    {
        fat_free_clusters(fs, dir_cluster);
   15ad8:	e1a00008 	mov	r0, r8
   15adc:	eafffff4 	b	15ab4 <fat_create_dir+0x15c>
        return 0;
    }

    return 1;
}
   15ae0:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ae4:	e12fff1e 	bx	lr

00015ae8 <fat_get_fs_size>:
 * \param[in] fs The filesystem on which to operate.
 * \returns 0 on failure, the filesystem size in bytes otherwise.
 */
offset_t fat_get_fs_size(const struct fat_fs_struct* fs)
{
    if(!fs)
   15ae8:	e3500000 	cmp	r0, #0
   15aec:	0a000009 	beq	15b18 <fat_get_fs_size+0x30>
        return 0;

#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
   15af0:	e5903000 	ldr	r3, [r0]
   15af4:	e5d33010 	ldrb	r3, [r3, #16]
   15af8:	e353000b 	cmp	r3, #11
   15afc:	e5903014 	ldr	r3, [r0, #20]
   15b00:	e1d011ba 	ldrh	r1, [r0, #26]
        return (offset_t) (fs->header.fat_size / 4 - 2) * fs->header.cluster_size;
   15b04:	01a03123 	lsreq	r3, r3, #2
    else
#endif
        return (offset_t) (fs->header.fat_size / 2 - 2) * fs->header.cluster_size;
   15b08:	11a030a3 	lsrne	r3, r3, #1
   15b0c:	e2430002 	sub	r0, r3, #2
   15b10:	e0832190 	umull	r2, r3, r0, r1
   15b14:	ea000001 	b	15b20 <fat_get_fs_size+0x38>
 * \returns 0 on failure, the filesystem size in bytes otherwise.
 */
offset_t fat_get_fs_size(const struct fat_fs_struct* fs)
{
    if(!fs)
        return 0;
   15b18:	e3a02000 	mov	r2, #0
   15b1c:	e3a03000 	mov	r3, #0
    if(fs->partition->type == PARTITION_TYPE_FAT32)
        return (offset_t) (fs->header.fat_size / 4 - 2) * fs->header.cluster_size;
    else
#endif
        return (offset_t) (fs->header.fat_size / 2 - 2) * fs->header.cluster_size;
}
   15b20:	e1a00002 	mov	r0, r2
   15b24:	e1a01003 	mov	r1, r3
   15b28:	e12fff1e 	bx	lr

00015b2c <fat_get_fs_free>:
 *
 * \param[in] fs The filesystem on which to operate.
 * \returns 0 on failure, the free filesystem space in bytes otherwise.
 */
offset_t fat_get_fs_free(const struct fat_fs_struct* fs)
{
   15b2c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    if(!fs)
   15b30:	e2507000 	subs	r7, r0, #0
 *
 * \param[in] fs The filesystem on which to operate.
 * \returns 0 on failure, the free filesystem space in bytes otherwise.
 */
offset_t fat_get_fs_free(const struct fat_fs_struct* fs)
{
   15b34:	e24dd034 	sub	sp, sp, #52	; 0x34
    if(!fs)
   15b38:	1a000002 	bne	15b48 <fat_get_fs_free+0x1c>
        return 0;
   15b3c:	e3a02000 	mov	r2, #0
   15b40:	e3a03000 	mov	r3, #0
   15b44:	ea000026 	b	15be4 <fat_get_fs_free+0xb8>

    uint8_t fat[32];
    struct fat_usage_count_callback_arg count_arg;
    count_arg.cluster_count = 0;
   15b48:	e3a03000 	mov	r3, #0
   15b4c:	e58d300c 	str	r3, [sp, #12]
    count_arg.buffer_size = sizeof(fat);
   15b50:	e3a03020 	mov	r3, #32
   15b54:	e58d3010 	str	r3, [sp, #16]

    offset_t fat_offset = fs->header.fat_offset;
   15b58:	e287500c 	add	r5, r7, #12
   15b5c:	e8950030 	ldm	r5, {r4, r5}
    uint32_t fat_size = fs->header.fat_size;
   15b60:	e5976014 	ldr	r6, [r7, #20]
    {
        uintptr_t length = UINT32_MAX - 1;
        if(fat_size < length)
            length = fat_size;

        if(!fs->partition->device_read_interval(fat_offset,
   15b64:	e59fa08c 	ldr	sl, [pc, #140]	; 15bf8 <fat_get_fs_free+0xcc>
   15b68:	e59f908c 	ldr	r9, [pc, #140]	; 15bfc <fat_get_fs_free+0xd0>
    count_arg.cluster_count = 0;
    count_arg.buffer_size = sizeof(fat);

    offset_t fat_offset = fs->header.fat_offset;
    uint32_t fat_size = fs->header.fat_size;
    while(fat_size > 0)
   15b6c:	ea000017 	b	15bd0 <fat_get_fs_free+0xa4>
    {
        uintptr_t length = UINT32_MAX - 1;
        if(fat_size < length)
            length = fat_size;

        if(!fs->partition->device_read_interval(fat_offset,
   15b70:	e5973000 	ldr	r3, [r7]
   15b74:	e593c004 	ldr	ip, [r3, #4]
   15b78:	e5d33010 	ldrb	r3, [r3, #16]

    offset_t fat_offset = fs->header.fat_offset;
    uint32_t fat_size = fs->header.fat_size;
    while(fat_size > 0)
    {
        uintptr_t length = UINT32_MAX - 1;
   15b7c:	e3760003 	cmn	r6, #3
   15b80:	91a08006 	movls	r8, r6
   15b84:	83e08001 	mvnhi	r8, #1
        if(fat_size < length)
            length = fat_size;

        if(!fs->partition->device_read_interval(fat_offset,
   15b88:	e3530006 	cmp	r3, #6
   15b8c:	11a0300a 	movne	r3, sl
   15b90:	01a03009 	moveq	r3, r9
   15b94:	e58d3004 	str	r3, [sp, #4]
   15b98:	e28d300c 	add	r3, sp, #12
   15b9c:	e58d3008 	str	r3, [sp, #8]
   15ba0:	e58d8000 	str	r8, [sp]
   15ba4:	e1a00004 	mov	r0, r4
   15ba8:	e1a01005 	mov	r1, r5
   15bac:	e28d2014 	add	r2, sp, #20
   15bb0:	e3a03020 	mov	r3, #32
   15bb4:	e1a0e00f 	mov	lr, pc
   15bb8:	e12fff1c 	bx	ip
   15bbc:	e3500000 	cmp	r0, #0
   15bc0:	0affffdd 	beq	15b3c <fat_get_fs_free+0x10>
                                                &count_arg
                                               )
          )
            return 0;

        fat_offset += length;
   15bc4:	e0944008 	adds	r4, r4, r8
   15bc8:	e2a55000 	adc	r5, r5, #0
        fat_size -= length;
   15bcc:	e0686006 	rsb	r6, r8, r6
    count_arg.cluster_count = 0;
    count_arg.buffer_size = sizeof(fat);

    offset_t fat_offset = fs->header.fat_offset;
    uint32_t fat_size = fs->header.fat_size;
    while(fat_size > 0)
   15bd0:	e3560000 	cmp	r6, #0
   15bd4:	1affffe5 	bne	15b70 <fat_get_fs_free+0x44>

        fat_offset += length;
        fat_size -= length;
    }

    return (offset_t) count_arg.cluster_count * fs->header.cluster_size;
   15bd8:	e1d711ba 	ldrh	r1, [r7, #26]
   15bdc:	e59d000c 	ldr	r0, [sp, #12]
   15be0:	e0832190 	umull	r2, r3, r0, r1
}
   15be4:	e1a00002 	mov	r0, r2
   15be8:	e1a01003 	mov	r1, r3
   15bec:	e28dd034 	add	sp, sp, #52	; 0x34
   15bf0:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   15bf4:	e12fff1e 	bx	lr
   15bf8:	00013dd0 	.word	0x00013dd0
   15bfc:	00013e18 	.word	0x00013e18

00015c00 <find_file_in_dir>:
    return 1;
}
#endif

uint8_t find_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name, struct fat_dir_entry_struct* dir_entry)
{
   15c00:	e92d4070 	push	{r4, r5, r6, lr}
   15c04:	e1a05001 	mov	r5, r1
   15c08:	e1a06002 	mov	r6, r2
   15c0c:	e1a04003 	mov	r4, r3
    while(fat_read_dir(dd, dir_entry))
   15c10:	ea000008 	b	15c38 <find_file_in_dir+0x38>
    {
        if(strcmp(dir_entry->long_name, name) == 0)
   15c14:	e1a00004 	mov	r0, r4
   15c18:	e1a01006 	mov	r1, r6
   15c1c:	eb0000ff 	bl	16020 <strcmp>
   15c20:	e3500000 	cmp	r0, #0
   15c24:	1a000003 	bne	15c38 <find_file_in_dir+0x38>
        {
            fat_reset_dir(dd);
   15c28:	e1a00005 	mov	r0, r5
   15c2c:	ebfffde5 	bl	153c8 <fat_reset_dir>
            return 1;
   15c30:	e3a00001 	mov	r0, #1
   15c34:	ea000004 	b	15c4c <find_file_in_dir+0x4c>
}
#endif

uint8_t find_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name, struct fat_dir_entry_struct* dir_entry)
{
    while(fat_read_dir(dd, dir_entry))
   15c38:	e1a00005 	mov	r0, r5
   15c3c:	e1a01004 	mov	r1, r4
   15c40:	ebfffde8 	bl	153e8 <fat_read_dir>
   15c44:	e3500000 	cmp	r0, #0
   15c48:	1afffff1 	bne	15c14 <find_file_in_dir+0x14>
            return 1;
        }
    }

    return 0;
}
   15c4c:	e8bd4070 	pop	{r4, r5, r6, lr}
   15c50:	e12fff1e 	bx	lr

00015c54 <open_file_in_dir>:

struct fat_file_struct* open_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name)
{
   15c54:	e92d4010 	push	{r4, lr}
   15c58:	e24dd034 	sub	sp, sp, #52	; 0x34
    struct fat_dir_entry_struct file_entry;
    if(!find_file_in_dir(fs, dd, name, &file_entry))
   15c5c:	e1a0300d 	mov	r3, sp

    return 0;
}

struct fat_file_struct* open_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name)
{
   15c60:	e1a04000 	mov	r4, r0
    struct fat_dir_entry_struct file_entry;
    if(!find_file_in_dir(fs, dd, name, &file_entry))
   15c64:	ebffffe5 	bl	15c00 <find_file_in_dir>
   15c68:	e3500000 	cmp	r0, #0
        return 0;

    return fat_open_file(fs, &file_entry);
   15c6c:	11a00004 	movne	r0, r4
   15c70:	11a0100d 	movne	r1, sp
   15c74:	1bfffc0c 	blne	14cac <fat_open_file>
}
   15c78:	e28dd034 	add	sp, sp, #52	; 0x34
   15c7c:	e8bd4010 	pop	{r4, lr}
   15c80:	e12fff1e 	bx	lr

00015c84 <partition_open>:
 *                  as a single partition (e.g. for "super floppy" use).
 * \returns 0 on failure, a partition descriptor on success.
 * \see partition_close
 */
struct partition_struct* partition_open(device_read_t device_read, device_read_interval_t device_read_interval, device_write_t device_write, device_write_interval_t device_write_interval, int8_t index)
{
   15c84:	e92d45ff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, sl, lr}
    struct partition_struct* new_partition = 0;
    uint8_t buffer[0x10];

    if(!device_read || !device_read_interval || index >= 4)
   15c88:	e3500000 	cmp	r0, #0
   15c8c:	13510000 	cmpne	r1, #0
 *                  as a single partition (e.g. for "super floppy" use).
 * \returns 0 on failure, a partition descriptor on success.
 * \see partition_close
 */
struct partition_struct* partition_open(device_read_t device_read, device_read_interval_t device_read_interval, device_write_t device_write, device_write_interval_t device_write_interval, int8_t index)
{
   15c90:	e1a0a002 	mov	sl, r2
   15c94:	e1a08003 	mov	r8, r3
   15c98:	e1dd52dc 	ldrsb	r5, [sp, #44]	; 0x2c
    struct partition_struct* new_partition = 0;
    uint8_t buffer[0x10];

    if(!device_read || !device_read_interval || index >= 4)
   15c9c:	e1a07001 	mov	r7, r1
   15ca0:	e1a06000 	mov	r6, r0
   15ca4:	1a000001 	bne	15cb0 <partition_open+0x2c>
        return 0;
   15ca8:	e3a00000 	mov	r0, #0
   15cac:	ea00002c 	b	15d64 <partition_open+0xe0>
struct partition_struct* partition_open(device_read_t device_read, device_read_interval_t device_read_interval, device_write_t device_write, device_write_interval_t device_write_interval, int8_t index)
{
    struct partition_struct* new_partition = 0;
    uint8_t buffer[0x10];

    if(!device_read || !device_read_interval || index >= 4)
   15cb0:	e3550003 	cmp	r5, #3
   15cb4:	cafffffb 	bgt	15ca8 <partition_open+0x24>
        return 0;

    if(index >= 0)
   15cb8:	e3550000 	cmp	r5, #0
   15cbc:	aa000004 	bge	15cd4 <partition_open+0x50>
#else
    new_partition = partition_handles;
    uint8_t i;
    for(i = 0; i < PARTITION_COUNT; ++i)
    {
        if(new_partition->type == PARTITION_TYPE_FREE)
   15cc0:	e59f40a8 	ldr	r4, [pc, #168]	; 15d70 <partition_open+0xec>
   15cc4:	e5d41010 	ldrb	r1, [r4, #16]
   15cc8:	e3510000 	cmp	r1, #0
   15ccc:	1afffff5 	bne	15ca8 <partition_open+0x24>
   15cd0:	ea00001b 	b	15d44 <partition_open+0xc0>
        return 0;

    if(index >= 0)
    {
        /* read specified partition table index */
        if(!device_read(0x01be + index * 0x10, buffer, sizeof(buffer)))
   15cd4:	e1a03205 	lsl	r3, r5, #4
   15cd8:	e2833f6f 	add	r3, r3, #444	; 0x1bc
   15cdc:	e2833002 	add	r3, r3, #2
   15ce0:	e1a00003 	mov	r0, r3
   15ce4:	e1a01fc3 	asr	r1, r3, #31
   15ce8:	e1a0200d 	mov	r2, sp
   15cec:	e3a03010 	mov	r3, #16
   15cf0:	e1a0e00f 	mov	lr, pc
   15cf4:	e12fff16 	bx	r6
   15cf8:	e3500000 	cmp	r0, #0
   15cfc:	0affffe9 	beq	15ca8 <partition_open+0x24>
            return 0;

        /* abort on empty partition entry */
        if(buffer[4] == 0x00)
   15d00:	e5dd3004 	ldrb	r3, [sp, #4]
   15d04:	e3530000 	cmp	r3, #0
   15d08:	1affffec 	bne	15cc0 <partition_open+0x3c>
   15d0c:	eaffffe5 	b	15ca8 <partition_open+0x24>
    new_partition->device_write = device_write;
    new_partition->device_write_interval = device_write_interval;

    if(index >= 0)
    {
        new_partition->type = buffer[4];
   15d10:	e5dd3004 	ldrb	r3, [sp, #4]
        new_partition->offset = read32(&buffer[8]);
   15d14:	e28d0008 	add	r0, sp, #8
    new_partition->device_write = device_write;
    new_partition->device_write_interval = device_write_interval;

    if(index >= 0)
    {
        new_partition->type = buffer[4];
   15d18:	e5c43010 	strb	r3, [r4, #16]
        new_partition->offset = read32(&buffer[8]);
   15d1c:	eb00003c 	bl	15e14 <read32>
   15d20:	e5840014 	str	r0, [r4, #20]
        new_partition->length = read32(&buffer[12]);
   15d24:	e28d000c 	add	r0, sp, #12
   15d28:	eb000039 	bl	15e14 <read32>
   15d2c:	e5840018 	str	r0, [r4, #24]
   15d30:	ea000001 	b	15d3c <partition_open+0xb8>
    }
    else
    {
        new_partition->type = 0xff;
   15d34:	e3e03000 	mvn	r3, #0
   15d38:	e5c43010 	strb	r3, [r4, #16]
   15d3c:	e1a00004 	mov	r0, r4
   15d40:	ea000007 	b	15d64 <partition_open+0xe0>
    }
    if(i >= PARTITION_COUNT)
        return 0;
#endif

    memset(new_partition, 0, sizeof(*new_partition));
   15d44:	e1a00004 	mov	r0, r4
   15d48:	e3a0201c 	mov	r2, #28
   15d4c:	eb00006d 	bl	15f08 <memset>
    new_partition->device_read = device_read;
    new_partition->device_read_interval = device_read_interval;
    new_partition->device_write = device_write;
    new_partition->device_write_interval = device_write_interval;

    if(index >= 0)
   15d50:	e3550000 	cmp	r5, #0
    memset(new_partition, 0, sizeof(*new_partition));

    /* fill partition descriptor */
    new_partition->device_read = device_read;
    new_partition->device_read_interval = device_read_interval;
    new_partition->device_write = device_write;
   15d54:	e88404c0 	stm	r4, {r6, r7, sl}
    new_partition->device_write_interval = device_write_interval;
   15d58:	e584800c 	str	r8, [r4, #12]

    if(index >= 0)
   15d5c:	aaffffeb 	bge	15d10 <partition_open+0x8c>
   15d60:	eafffff3 	b	15d34 <partition_open+0xb0>
    {
        new_partition->type = 0xff;
    }

    return new_partition;
}
   15d64:	e28dd010 	add	sp, sp, #16
   15d68:	e8bd45f0 	pop	{r4, r5, r6, r7, r8, sl, lr}
   15d6c:	e12fff1e 	bx	lr
   15d70:	40000bfc 	.word	0x40000bfc

00015d74 <partition_close>:
 * \returns 0 on failure, 1 on success.
 * \see partition_open
 */
uint8_t partition_close(struct partition_struct* partition)
{
    if(!partition)
   15d74:	e3500000 	cmp	r0, #0

    /* destroy partition descriptor */
#if USE_DYNAMIC_MEMORY
    free(partition);
#else
    partition->type = PARTITION_TYPE_FREE;
   15d78:	13a03000 	movne	r3, #0
   15d7c:	15c03010 	strbne	r3, [r0, #16]
#endif

    return 1;
   15d80:	13a00001 	movne	r0, #1
}
   15d84:	e12fff1e 	bx	lr

00015d88 <convert>:
Print integers in a given base 2-16 (default 10)
*/
//#include <stdio.h>
//#include <stdlib.h>

int convert(int n, int b, char str[], int i) {
   15d88:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   15d8c:	e1a07000 	mov	r7, r0
   15d90:	e1a06001 	mov	r6, r1
   15d94:	e1a05002 	mov	r5, r2
   15d98:	e1a04003 	mov	r4, r3
	if (n/b > 0)
   15d9c:	eb001637 	bl	1b680 <__aeabi_idiv>
   15da0:	e3500000 	cmp	r0, #0
   15da4:	da000004 	ble	15dbc <convert+0x34>
		i = convert(n/b, b, str, i);
   15da8:	e1a03004 	mov	r3, r4
   15dac:	e1a01006 	mov	r1, r6
   15db0:	e1a02005 	mov	r2, r5
   15db4:	ebfffff3 	bl	15d88 <convert>
   15db8:	e1a04000 	mov	r4, r0
	str[i++] = "0123456789ABCDEF"[n%b];
   15dbc:	e1a00007 	mov	r0, r7
   15dc0:	e1a01006 	mov	r1, r6
   15dc4:	eb0016b2 	bl	1b894 <__modsi3>
   15dc8:	e59f3010 	ldr	r3, [pc, #16]	; 15de0 <convert+0x58>
   15dcc:	e7d33000 	ldrb	r3, [r3, r0]
	return i;
}
   15dd0:	e2840001 	add	r0, r4, #1
//#include <stdlib.h>

int convert(int n, int b, char str[], int i) {
	if (n/b > 0)
		i = convert(n/b, b, str, i);
	str[i++] = "0123456789ABCDEF"[n%b];
   15dd4:	e7c53004 	strb	r3, [r5, r4]
	return i;
}
   15dd8:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   15ddc:	e12fff1e 	bx	lr
   15de0:	0001c8cf 	.word	0x0001c8cf

00015de4 <itoa>:

int itoa(int n, int b, char str[]) {
   15de4:	e92d4010 	push	{r4, lr}
	int i = convert(n, b, str, 0);
   15de8:	e3a03000 	mov	r3, #0
		i = convert(n/b, b, str, i);
	str[i++] = "0123456789ABCDEF"[n%b];
	return i;
}

int itoa(int n, int b, char str[]) {
   15dec:	e1a04002 	mov	r4, r2
	int i = convert(n, b, str, 0);
   15df0:	ebffffe4 	bl	15d88 <convert>
	str[i] = '\0';
   15df4:	e3a02000 	mov	r2, #0
   15df8:	e7c42000 	strb	r2, [r4, r0]
	return i;
}
   15dfc:	e8bd4010 	pop	{r4, lr}
   15e00:	e12fff1e 	bx	lr

00015e04 <read16>:
 * \param[in] p Pointer from where to read the integer.
 * \returns The 16-bit integer read from memory.
 */
uint16_t read16(const uint8_t* p)
{
    return (((uint16_t) p[1]) << 8) |
   15e04:	e5d02001 	ldrb	r2, [r0, #1]
   15e08:	e5d00000 	ldrb	r0, [r0]
           (((uint16_t) p[0]) << 0);
}
   15e0c:	e1800402 	orr	r0, r0, r2, lsl #8
   15e10:	e12fff1e 	bx	lr

00015e14 <read32>:
 * \returns The 32-bit integer read from memory.
 */
uint32_t read32(const uint8_t* p)
{
    return (((uint32_t) p[3]) << 24) |
           (((uint32_t) p[2]) << 16) |
   15e14:	e5d03002 	ldrb	r3, [r0, #2]
 * \param[in] p Pointer from where to read the integer.
 * \returns The 32-bit integer read from memory.
 */
uint32_t read32(const uint8_t* p)
{
    return (((uint32_t) p[3]) << 24) |
   15e18:	e5d02003 	ldrb	r2, [r0, #3]
           (((uint32_t) p[2]) << 16) |
   15e1c:	e1a03803 	lsl	r3, r3, #16
 * \param[in] p Pointer from where to read the integer.
 * \returns The 32-bit integer read from memory.
 */
uint32_t read32(const uint8_t* p)
{
    return (((uint32_t) p[3]) << 24) |
   15e20:	e1833c02 	orr	r3, r3, r2, lsl #24
           (((uint32_t) p[2]) << 16) |
           (((uint32_t) p[1]) <<  8) |
           (((uint32_t) p[0]) <<  0);
   15e24:	e5d02000 	ldrb	r2, [r0]
 */
uint32_t read32(const uint8_t* p)
{
    return (((uint32_t) p[3]) << 24) |
           (((uint32_t) p[2]) << 16) |
           (((uint32_t) p[1]) <<  8) |
   15e28:	e5d00001 	ldrb	r0, [r0, #1]
 * \returns The 32-bit integer read from memory.
 */
uint32_t read32(const uint8_t* p)
{
    return (((uint32_t) p[3]) << 24) |
           (((uint32_t) p[2]) << 16) |
   15e2c:	e1833002 	orr	r3, r3, r2
           (((uint32_t) p[1]) <<  8) |
           (((uint32_t) p[0]) <<  0);
}
   15e30:	e1830400 	orr	r0, r3, r0, lsl #8
   15e34:	e12fff1e 	bx	lr

00015e38 <write16>:
 *
 * \param[in] p Pointer where to write the integer to.
 * \param[in] i The 16-bit integer to write.
 */
void write16(uint8_t* p, uint16_t i)
{
   15e38:	e1a01801 	lsl	r1, r1, #16
   15e3c:	e1a03821 	lsr	r3, r1, #16
    p[1] = (uint8_t) ((i & 0xff00) >> 8);
   15e40:	e1a01c21 	lsr	r1, r1, #24
   15e44:	e5c01001 	strb	r1, [r0, #1]
    p[0] = (uint8_t) ((i & 0x00ff) >> 0);
   15e48:	e5c03000 	strb	r3, [r0]
   15e4c:	e12fff1e 	bx	lr

00015e50 <write32>:
 * \param[in] p Pointer where to write the integer to.
 * \param[in] i The 32-bit integer to write.
 */
void write32(uint8_t* p, uint32_t i)
{
    p[3] = (uint8_t) ((i & 0xff000000) >> 24);
   15e50:	e1a03c21 	lsr	r3, r1, #24
   15e54:	e5c03003 	strb	r3, [r0, #3]
    p[2] = (uint8_t) ((i & 0x00ff0000) >> 16);
   15e58:	e1a03821 	lsr	r3, r1, #16
   15e5c:	e5c03002 	strb	r3, [r0, #2]
    p[1] = (uint8_t) ((i & 0x0000ff00) >>  8);
   15e60:	e1a03421 	lsr	r3, r1, #8
   15e64:	e5c03001 	strb	r3, [r0, #1]
    p[0] = (uint8_t) ((i & 0x000000ff) >>  0);
   15e68:	e5c01000 	strb	r1, [r0]
   15e6c:	e12fff1e 	bx	lr

00015e70 <disableIRQ>:
#define INT_MASK (IRQ_MASK | FIQ_MASK)

static inline unsigned __get_cpsr(void)
{
  unsigned long retval;
  asm volatile (" mrs  %0, cpsr" : "=r" (retval) : /* no inputs */  ); 
   15e70:	e10f0000 	mrs	r0, CPSR
unsigned disableIRQ(void)
{
  unsigned _cpsr;

  _cpsr = __get_cpsr();
  __set_cpsr(_cpsr | IRQ_MASK);
   15e74:	e3803080 	orr	r3, r0, #128	; 0x80
  return retval;
}

static inline void __set_cpsr(unsigned val)
{
  asm volatile (" msr  cpsr, %0" : /* no outputs */ : "r" (val)  );	
   15e78:	e129f003 	msr	CPSR_fc, r3
  unsigned _cpsr;

  _cpsr = __get_cpsr();
  __set_cpsr(_cpsr | IRQ_MASK);
  return _cpsr;
}
   15e7c:	e12fff1e 	bx	lr

00015e80 <restoreIRQ>:
#define INT_MASK (IRQ_MASK | FIQ_MASK)

static inline unsigned __get_cpsr(void)
{
  unsigned long retval;
  asm volatile (" mrs  %0, cpsr" : "=r" (retval) : /* no inputs */  ); 
   15e80:	e10f3000 	mrs	r3, CPSR
unsigned restoreIRQ(unsigned oldCPSR)
{
  unsigned _cpsr;

  _cpsr = __get_cpsr();
  __set_cpsr((_cpsr & ~IRQ_MASK) | (oldCPSR & IRQ_MASK));
   15e84:	e3c32080 	bic	r2, r3, #128	; 0x80
   15e88:	e2000080 	and	r0, r0, #128	; 0x80
   15e8c:	e1820000 	orr	r0, r2, r0
  return retval;
}

static inline void __set_cpsr(unsigned val)
{
  asm volatile (" msr  cpsr, %0" : /* no outputs */ : "r" (val)  );	
   15e90:	e129f000 	msr	CPSR_fc, r0
  unsigned _cpsr;

  _cpsr = __get_cpsr();
  __set_cpsr((_cpsr & ~IRQ_MASK) | (oldCPSR & IRQ_MASK));
  return _cpsr;
}
   15e94:	e1a00003 	mov	r0, r3
   15e98:	e12fff1e 	bx	lr

00015e9c <enableIRQ>:
#define INT_MASK (IRQ_MASK | FIQ_MASK)

static inline unsigned __get_cpsr(void)
{
  unsigned long retval;
  asm volatile (" mrs  %0, cpsr" : "=r" (retval) : /* no inputs */  ); 
   15e9c:	e10f0000 	mrs	r0, CPSR
unsigned enableIRQ(void)
{
  unsigned _cpsr;

  _cpsr = __get_cpsr();
  __set_cpsr(_cpsr & ~IRQ_MASK);
   15ea0:	e3c03080 	bic	r3, r0, #128	; 0x80
  return retval;
}

static inline void __set_cpsr(unsigned val)
{
  asm volatile (" msr  cpsr, %0" : /* no outputs */ : "r" (val)  );	
   15ea4:	e129f003 	msr	CPSR_fc, r3
  unsigned _cpsr;

  _cpsr = __get_cpsr();
  __set_cpsr(_cpsr & ~IRQ_MASK);
  return _cpsr;
}
   15ea8:	e12fff1e 	bx	lr

00015eac <disableFIQ>:
#define INT_MASK (IRQ_MASK | FIQ_MASK)

static inline unsigned __get_cpsr(void)
{
  unsigned long retval;
  asm volatile (" mrs  %0, cpsr" : "=r" (retval) : /* no inputs */  ); 
   15eac:	e10f0000 	mrs	r0, CPSR
unsigned disableFIQ(void)
{
  unsigned _cpsr;

  _cpsr = __get_cpsr();
  __set_cpsr(_cpsr | FIQ_MASK);
   15eb0:	e3803040 	orr	r3, r0, #64	; 0x40
  return retval;
}

static inline void __set_cpsr(unsigned val)
{
  asm volatile (" msr  cpsr, %0" : /* no outputs */ : "r" (val)  );	
   15eb4:	e129f003 	msr	CPSR_fc, r3
  unsigned _cpsr;

  _cpsr = __get_cpsr();
  __set_cpsr(_cpsr | FIQ_MASK);
  return _cpsr;
}
   15eb8:	e12fff1e 	bx	lr

00015ebc <restoreFIQ>:
#define INT_MASK (IRQ_MASK | FIQ_MASK)

static inline unsigned __get_cpsr(void)
{
  unsigned long retval;
  asm volatile (" mrs  %0, cpsr" : "=r" (retval) : /* no inputs */  ); 
   15ebc:	e10f3000 	mrs	r3, CPSR
unsigned restoreFIQ(unsigned oldCPSR)
{
  unsigned _cpsr;

  _cpsr = __get_cpsr();
  __set_cpsr((_cpsr & ~FIQ_MASK) | (oldCPSR & FIQ_MASK));
   15ec0:	e3c32040 	bic	r2, r3, #64	; 0x40
   15ec4:	e2000040 	and	r0, r0, #64	; 0x40
   15ec8:	e1820000 	orr	r0, r2, r0
  return retval;
}

static inline void __set_cpsr(unsigned val)
{
  asm volatile (" msr  cpsr, %0" : /* no outputs */ : "r" (val)  );	
   15ecc:	e129f000 	msr	CPSR_fc, r0
  unsigned _cpsr;

  _cpsr = __get_cpsr();
  __set_cpsr((_cpsr & ~FIQ_MASK) | (oldCPSR & FIQ_MASK));
  return _cpsr;
}
   15ed0:	e1a00003 	mov	r0, r3
   15ed4:	e12fff1e 	bx	lr

00015ed8 <enableFIQ>:
#define INT_MASK (IRQ_MASK | FIQ_MASK)

static inline unsigned __get_cpsr(void)
{
  unsigned long retval;
  asm volatile (" mrs  %0, cpsr" : "=r" (retval) : /* no inputs */  ); 
   15ed8:	e10f0000 	mrs	r0, CPSR
unsigned enableFIQ(void)
{
  unsigned _cpsr;

  _cpsr = __get_cpsr();
  __set_cpsr(_cpsr & ~FIQ_MASK);
   15edc:	e3c03040 	bic	r3, r0, #64	; 0x40
  return retval;
}

static inline void __set_cpsr(unsigned val)
{
  asm volatile (" msr  cpsr, %0" : /* no outputs */ : "r" (val)  );	
   15ee0:	e129f003 	msr	CPSR_fc, r3
  unsigned _cpsr;

  _cpsr = __get_cpsr();
  __set_cpsr(_cpsr & ~FIQ_MASK);
  return _cpsr;
}
   15ee4:	e12fff1e 	bx	lr

00015ee8 <memcpy>:
   15ee8:	e3a03000 	mov	r3, #0
   15eec:	ea000002 	b	15efc <memcpy+0x14>
   15ef0:	e7d1c003 	ldrb	ip, [r1, r3]
   15ef4:	e7c0c003 	strb	ip, [r0, r3]
   15ef8:	e2833001 	add	r3, r3, #1
   15efc:	e1530002 	cmp	r3, r2
   15f00:	1afffffa 	bne	15ef0 <memcpy+0x8>
   15f04:	e12fff1e 	bx	lr

00015f08 <memset>:
   15f08:	e0802002 	add	r2, r0, r2
   15f0c:	e1a03000 	mov	r3, r0
   15f10:	ea000000 	b	15f18 <memset+0x10>
   15f14:	e4c31001 	strb	r1, [r3], #1
   15f18:	e1530002 	cmp	r3, r2
   15f1c:	1afffffc 	bne	15f14 <memset+0xc>
   15f20:	e12fff1e 	bx	lr

00015f24 <_sprintf_r>:
   15f24:	e92d000c 	push	{r2, r3}
   15f28:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   15f2c:	e3a03f82 	mov	r3, #520	; 0x208
   15f30:	e24dd06c 	sub	sp, sp, #108	; 0x6c
   15f34:	e1cd31b0 	strh	r3, [sp, #16]
   15f38:	e3e03102 	mvn	r3, #-2147483648	; 0x80000000
   15f3c:	e58d300c 	str	r3, [sp, #12]
   15f40:	e58d3018 	str	r3, [sp, #24]
   15f44:	e3e03000 	mvn	r3, #0
   15f48:	e58d1004 	str	r1, [sp, #4]
   15f4c:	e58d1014 	str	r1, [sp, #20]
   15f50:	e1cd31b2 	strh	r3, [sp, #18]
   15f54:	e59d2070 	ldr	r2, [sp, #112]	; 0x70
   15f58:	e28d3074 	add	r3, sp, #116	; 0x74
   15f5c:	e28d1004 	add	r1, sp, #4
   15f60:	e58d3000 	str	r3, [sp]
   15f64:	eb000082 	bl	16174 <_svfprintf_r>
   15f68:	e59d3004 	ldr	r3, [sp, #4]
   15f6c:	e3a02000 	mov	r2, #0
   15f70:	e5c32000 	strb	r2, [r3]
   15f74:	e28dd06c 	add	sp, sp, #108	; 0x6c
   15f78:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   15f7c:	e28dd008 	add	sp, sp, #8
   15f80:	e12fff1e 	bx	lr

00015f84 <sprintf>:
   15f84:	e92d000e 	push	{r1, r2, r3}
   15f88:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   15f8c:	e3a03f82 	mov	r3, #520	; 0x208
   15f90:	e24dd06c 	sub	sp, sp, #108	; 0x6c
   15f94:	e1cd31b0 	strh	r3, [sp, #16]
   15f98:	e59f204c 	ldr	r2, [pc, #76]	; 15fec <sprintf+0x68>
   15f9c:	e3e03102 	mvn	r3, #-2147483648	; 0x80000000
   15fa0:	e58d300c 	str	r3, [sp, #12]
   15fa4:	e58d3018 	str	r3, [sp, #24]
   15fa8:	e3e03000 	mvn	r3, #0
   15fac:	e58d0004 	str	r0, [sp, #4]
   15fb0:	e58d0014 	str	r0, [sp, #20]
   15fb4:	e1cd31b2 	strh	r3, [sp, #18]
   15fb8:	e5920000 	ldr	r0, [r2]
   15fbc:	e28d3074 	add	r3, sp, #116	; 0x74
   15fc0:	e59d2070 	ldr	r2, [sp, #112]	; 0x70
   15fc4:	e28d1004 	add	r1, sp, #4
   15fc8:	e58d3000 	str	r3, [sp]
   15fcc:	eb000068 	bl	16174 <_svfprintf_r>
   15fd0:	e59d3004 	ldr	r3, [sp, #4]
   15fd4:	e3a02000 	mov	r2, #0
   15fd8:	e5c32000 	strb	r2, [r3]
   15fdc:	e28dd06c 	add	sp, sp, #108	; 0x6c
   15fe0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   15fe4:	e28dd00c 	add	sp, sp, #12
   15fe8:	e12fff1e 	bx	lr
   15fec:	40000018 	.word	0x40000018

00015ff0 <strchr>:
   15ff0:	e20110ff 	and	r1, r1, #255	; 0xff
   15ff4:	e1a03000 	mov	r3, r0
   15ff8:	e4d02001 	ldrb	r2, [r0], #1
   15ffc:	e3520000 	cmp	r2, #0
   16000:	0a000002 	beq	16010 <strchr+0x20>
   16004:	e1520001 	cmp	r2, r1
   16008:	1afffff9 	bne	15ff4 <strchr+0x4>
   1600c:	ea000001 	b	16018 <strchr+0x28>
   16010:	e3510000 	cmp	r1, #0
   16014:	13a03000 	movne	r3, #0
   16018:	e1a00003 	mov	r0, r3
   1601c:	e12fff1e 	bx	lr

00016020 <strcmp>:
   16020:	e4d02001 	ldrb	r2, [r0], #1
   16024:	e4d13001 	ldrb	r3, [r1], #1
   16028:	e3520001 	cmp	r2, #1
   1602c:	21520003 	cmpcs	r2, r3
   16030:	0afffffa 	beq	16020 <strcmp>
   16034:	e0420003 	sub	r0, r2, r3
   16038:	e12fff1e 	bx	lr

0001603c <strcpy>:
   1603c:	e1a03000 	mov	r3, r0
   16040:	e4d12001 	ldrb	r2, [r1], #1
   16044:	e4c32001 	strb	r2, [r3], #1
   16048:	e3520000 	cmp	r2, #0
   1604c:	1afffffb 	bne	16040 <strcpy+0x4>
   16050:	e12fff1e 	bx	lr

00016054 <strlen>:
   16054:	e1a03000 	mov	r3, r0
   16058:	e4d32001 	ldrb	r2, [r3], #1
   1605c:	e3520000 	cmp	r2, #0
   16060:	1afffffc 	bne	16058 <strlen+0x4>
   16064:	e0600003 	rsb	r0, r0, r3
   16068:	e2400001 	sub	r0, r0, #1
   1606c:	e12fff1e 	bx	lr

00016070 <strncmp>:
   16070:	e3520000 	cmp	r2, #0
   16074:	e92d4030 	push	{r4, r5, lr}
   16078:	0a000013 	beq	160cc <strncmp+0x5c>
   1607c:	ea000008 	b	160a4 <strncmp+0x34>
   16080:	e3520001 	cmp	r2, #1
   16084:	1a000003 	bne	16098 <strncmp+0x28>
   16088:	e5d40000 	ldrb	r0, [r4]
   1608c:	e5d33000 	ldrb	r3, [r3]
   16090:	e0630000 	rsb	r0, r3, r0
   16094:	e8bd8030 	pop	{r4, r5, pc}
   16098:	e35c0000 	cmp	ip, #0
   1609c:	e2422001 	sub	r2, r2, #1
   160a0:	0afffff8 	beq	16088 <strncmp+0x18>
   160a4:	e3520000 	cmp	r2, #0
   160a8:	e1a03001 	mov	r3, r1
   160ac:	e1a04000 	mov	r4, r0
   160b0:	0afffff4 	beq	16088 <strncmp+0x18>
   160b4:	e4d05001 	ldrb	r5, [r0], #1
   160b8:	e5d3c000 	ldrb	ip, [r3]
   160bc:	e15c0005 	cmp	ip, r5
   160c0:	e2811001 	add	r1, r1, #1
   160c4:	0affffed 	beq	16080 <strncmp+0x10>
   160c8:	eaffffee 	b	16088 <strncmp+0x18>
   160cc:	e1a00002 	mov	r0, r2
   160d0:	e8bd8030 	pop	{r4, r5, pc}

000160d4 <strncpy>:
   160d4:	e92d4010 	push	{r4, lr}
   160d8:	e2411001 	sub	r1, r1, #1
   160dc:	e1a03000 	mov	r3, r0
   160e0:	ea000008 	b	16108 <strncpy+0x34>
   160e4:	e5f14001 	ldrb	r4, [r1, #1]!
   160e8:	e4c34001 	strb	r4, [r3], #1
   160ec:	e3540000 	cmp	r4, #0
   160f0:	e2422001 	sub	r2, r2, #1
   160f4:	e1a0c003 	mov	ip, r3
   160f8:	1a000002 	bne	16108 <strncpy+0x34>
   160fc:	e0833002 	add	r3, r3, r2
   16100:	e3a02000 	mov	r2, #0
   16104:	ea000004 	b	1611c <strncpy+0x48>
   16108:	e3520000 	cmp	r2, #0
   1610c:	e1a0c003 	mov	ip, r3
   16110:	1afffff3 	bne	160e4 <strncpy+0x10>
   16114:	eafffff8 	b	160fc <strncpy+0x28>
   16118:	e4cc2001 	strb	r2, [ip], #1
   1611c:	e15c0003 	cmp	ip, r3
   16120:	1afffffc 	bne	16118 <strncpy+0x44>
   16124:	e8bd8010 	pop	{r4, pc}

00016128 <strrchr>:
   16128:	e92d4030 	push	{r4, r5, lr}
   1612c:	e2515000 	subs	r5, r1, #0
   16130:	e1a03000 	mov	r3, r0
   16134:	13a04000 	movne	r4, #0
   16138:	1a000003 	bne	1614c <strrchr+0x24>
   1613c:	ea000008 	b	16164 <strrchr+0x3c>
   16140:	e2803001 	add	r3, r0, #1
   16144:	e1a04000 	mov	r4, r0
   16148:	eaffffff 	b	1614c <strrchr+0x24>
   1614c:	e1a00003 	mov	r0, r3
   16150:	e1a01005 	mov	r1, r5
   16154:	ebffffa5 	bl	15ff0 <strchr>
   16158:	e3500000 	cmp	r0, #0
   1615c:	1afffff7 	bne	16140 <strrchr+0x18>
   16160:	ea000001 	b	1616c <strrchr+0x44>
   16164:	e8bd4030 	pop	{r4, r5, lr}
   16168:	eaffffa0 	b	15ff0 <strchr>
   1616c:	e1a00004 	mov	r0, r4
   16170:	e8bd8030 	pop	{r4, r5, pc}

00016174 <_svfprintf_r>:
   16174:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16178:	e24dd0f4 	sub	sp, sp, #244	; 0xf4
   1617c:	e1a0b001 	mov	fp, r1
   16180:	e1a05002 	mov	r5, r2
   16184:	e1a09003 	mov	r9, r3
   16188:	e58d0014 	str	r0, [sp, #20]
   1618c:	eb000b03 	bl	18da0 <_localeconv_r>
   16190:	e5900000 	ldr	r0, [r0]
   16194:	e58d0044 	str	r0, [sp, #68]	; 0x44
   16198:	ebffffad 	bl	16054 <strlen>
   1619c:	e1db30bc 	ldrh	r3, [fp, #12]
   161a0:	e3a01000 	mov	r1, #0
   161a4:	e3a02000 	mov	r2, #0
   161a8:	e3130080 	tst	r3, #128	; 0x80
   161ac:	e58d0038 	str	r0, [sp, #56]	; 0x38
   161b0:	e58d1028 	str	r1, [sp, #40]	; 0x28
   161b4:	e58d202c 	str	r2, [sp, #44]	; 0x2c
   161b8:	0a000011 	beq	16204 <_svfprintf_r+0x90>
   161bc:	e59b3010 	ldr	r3, [fp, #16]
   161c0:	e3530000 	cmp	r3, #0
   161c4:	1a00000e 	bne	16204 <_svfprintf_r+0x90>
   161c8:	e59d0014 	ldr	r0, [sp, #20]
   161cc:	e3a01040 	mov	r1, #64	; 0x40
   161d0:	eb000aff 	bl	18dd4 <_malloc_r>
   161d4:	e3500000 	cmp	r0, #0
   161d8:	13a03040 	movne	r3, #64	; 0x40
   161dc:	e58b0000 	str	r0, [fp]
   161e0:	e58b0010 	str	r0, [fp, #16]
   161e4:	158b3014 	strne	r3, [fp, #20]
   161e8:	1a000005 	bne	16204 <_svfprintf_r+0x90>
   161ec:	e59d4014 	ldr	r4, [sp, #20]
   161f0:	e3a0300c 	mov	r3, #12
   161f4:	e3e05000 	mvn	r5, #0
   161f8:	e5843000 	str	r3, [r4]
   161fc:	e58d5030 	str	r5, [sp, #48]	; 0x30
   16200:	ea0005b0 	b	178c8 <_svfprintf_r+0x1754>
   16204:	e3a03000 	mov	r3, #0
   16208:	e28d40b4 	add	r4, sp, #180	; 0xb4
   1620c:	e28d707f 	add	r7, sp, #127	; 0x7f
   16210:	e58d4080 	str	r4, [sp, #128]	; 0x80
   16214:	e58d3088 	str	r3, [sp, #136]	; 0x88
   16218:	e58d3084 	str	r3, [sp, #132]	; 0x84
   1621c:	e58d5024 	str	r5, [sp, #36]	; 0x24
   16220:	e58d301c 	str	r3, [sp, #28]
   16224:	e58d304c 	str	r3, [sp, #76]	; 0x4c
   16228:	e58d3048 	str	r3, [sp, #72]	; 0x48
   1622c:	e58d3030 	str	r3, [sp, #48]	; 0x30
   16230:	e58d7058 	str	r7, [sp, #88]	; 0x58
   16234:	e59d2024 	ldr	r2, [sp, #36]	; 0x24
   16238:	e5d23000 	ldrb	r3, [r2]
   1623c:	e3530025 	cmp	r3, #37	; 0x25
   16240:	13530000 	cmpne	r3, #0
   16244:	e1a05002 	mov	r5, r2
   16248:	e2822001 	add	r2, r2, #1
   1624c:	1afffff9 	bne	16238 <_svfprintf_r+0xc4>
   16250:	e59d7024 	ldr	r7, [sp, #36]	; 0x24
   16254:	e0556007 	subs	r6, r5, r7
   16258:	0a000014 	beq	162b0 <_svfprintf_r+0x13c>
   1625c:	e59d3088 	ldr	r3, [sp, #136]	; 0x88
   16260:	e0833006 	add	r3, r3, r6
   16264:	e5847000 	str	r7, [r4]
   16268:	e5846004 	str	r6, [r4, #4]
   1626c:	e58d3088 	str	r3, [sp, #136]	; 0x88
   16270:	e59d3084 	ldr	r3, [sp, #132]	; 0x84
   16274:	e2833001 	add	r3, r3, #1
   16278:	e3530007 	cmp	r3, #7
   1627c:	e58d3084 	str	r3, [sp, #132]	; 0x84
   16280:	d2844008 	addle	r4, r4, #8
   16284:	da000006 	ble	162a4 <_svfprintf_r+0x130>
   16288:	e59d0014 	ldr	r0, [sp, #20]
   1628c:	e1a0100b 	mov	r1, fp
   16290:	e28d2080 	add	r2, sp, #128	; 0x80
   16294:	eb000f6f 	bl	1a058 <__ssprint_r>
   16298:	e3500000 	cmp	r0, #0
   1629c:	1a000584 	bne	178b4 <_svfprintf_r+0x1740>
   162a0:	e28d40b4 	add	r4, sp, #180	; 0xb4
   162a4:	e59d7030 	ldr	r7, [sp, #48]	; 0x30
   162a8:	e0877006 	add	r7, r7, r6
   162ac:	e58d7030 	str	r7, [sp, #48]	; 0x30
   162b0:	e5d53000 	ldrb	r3, [r5]
   162b4:	e3530000 	cmp	r3, #0
   162b8:	0a000577 	beq	1789c <_svfprintf_r+0x1728>
   162bc:	e3a03000 	mov	r3, #0
   162c0:	e2855001 	add	r5, r5, #1
   162c4:	e58d5024 	str	r5, [sp, #36]	; 0x24
   162c8:	e5cd305f 	strb	r3, [sp, #95]	; 0x5f
   162cc:	e3e06000 	mvn	r6, #0
   162d0:	e58d3034 	str	r3, [sp, #52]	; 0x34
   162d4:	e1a0a003 	mov	sl, r3
   162d8:	e3a0100a 	mov	r1, #10
   162dc:	e3a00020 	mov	r0, #32
   162e0:	e3a0c02b 	mov	ip, #43	; 0x2b
   162e4:	ea000001 	b	162f0 <_svfprintf_r+0x17c>
   162e8:	e1a09003 	mov	r9, r3
   162ec:	e3e06000 	mvn	r6, #0
   162f0:	e59d7024 	ldr	r7, [sp, #36]	; 0x24
   162f4:	e4d75001 	ldrb	r5, [r7], #1
   162f8:	e58d7024 	str	r7, [sp, #36]	; 0x24
   162fc:	e58d5018 	str	r5, [sp, #24]
   16300:	e59d5018 	ldr	r5, [sp, #24]
   16304:	e2453020 	sub	r3, r5, #32
   16308:	e3530058 	cmp	r3, #88	; 0x58
   1630c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   16310:	ea00024b 	b	16c44 <_svfprintf_r+0xad0>
   16314:	00016478 	.word	0x00016478
   16318:	00016c44 	.word	0x00016c44
   1631c:	00016c44 	.word	0x00016c44
   16320:	00016488 	.word	0x00016488
   16324:	00016c44 	.word	0x00016c44
   16328:	00016c44 	.word	0x00016c44
   1632c:	00016c44 	.word	0x00016c44
   16330:	00016c44 	.word	0x00016c44
   16334:	00016c44 	.word	0x00016c44
   16338:	00016c44 	.word	0x00016c44
   1633c:	00016490 	.word	0x00016490
   16340:	000164b8 	.word	0x000164b8
   16344:	00016c44 	.word	0x00016c44
   16348:	000164b0 	.word	0x000164b0
   1634c:	000164c0 	.word	0x000164c0
   16350:	00016c44 	.word	0x00016c44
   16354:	00016524 	.word	0x00016524
   16358:	0001652c 	.word	0x0001652c
   1635c:	0001652c 	.word	0x0001652c
   16360:	0001652c 	.word	0x0001652c
   16364:	0001652c 	.word	0x0001652c
   16368:	0001652c 	.word	0x0001652c
   1636c:	0001652c 	.word	0x0001652c
   16370:	0001652c 	.word	0x0001652c
   16374:	0001652c 	.word	0x0001652c
   16378:	0001652c 	.word	0x0001652c
   1637c:	00016c44 	.word	0x00016c44
   16380:	00016c44 	.word	0x00016c44
   16384:	00016c44 	.word	0x00016c44
   16388:	00016c44 	.word	0x00016c44
   1638c:	00016c44 	.word	0x00016c44
   16390:	00016c44 	.word	0x00016c44
   16394:	00016c44 	.word	0x00016c44
   16398:	00016c44 	.word	0x00016c44
   1639c:	00016c44 	.word	0x00016c44
   163a0:	00016c44 	.word	0x00016c44
   163a4:	00016590 	.word	0x00016590
   163a8:	000165cc 	.word	0x000165cc
   163ac:	00016c44 	.word	0x00016c44
   163b0:	000165cc 	.word	0x000165cc
   163b4:	00016c44 	.word	0x00016c44
   163b8:	00016c44 	.word	0x00016c44
   163bc:	00016c44 	.word	0x00016c44
   163c0:	00016c44 	.word	0x00016c44
   163c4:	00016560 	.word	0x00016560
   163c8:	00016c44 	.word	0x00016c44
   163cc:	00016c44 	.word	0x00016c44
   163d0:	000169fc 	.word	0x000169fc
   163d4:	00016c44 	.word	0x00016c44
   163d8:	00016c44 	.word	0x00016c44
   163dc:	00016c44 	.word	0x00016c44
   163e0:	00016c44 	.word	0x00016c44
   163e4:	00016c44 	.word	0x00016c44
   163e8:	00016ab4 	.word	0x00016ab4
   163ec:	00016c44 	.word	0x00016c44
   163f0:	00016c44 	.word	0x00016c44
   163f4:	00016aec 	.word	0x00016aec
   163f8:	00016c44 	.word	0x00016c44
   163fc:	00016c44 	.word	0x00016c44
   16400:	00016c44 	.word	0x00016c44
   16404:	00016c44 	.word	0x00016c44
   16408:	00016c44 	.word	0x00016c44
   1640c:	00016c44 	.word	0x00016c44
   16410:	00016c44 	.word	0x00016c44
   16414:	00016c44 	.word	0x00016c44
   16418:	00016c44 	.word	0x00016c44
   1641c:	00016c44 	.word	0x00016c44
   16420:	00016578 	.word	0x00016578
   16424:	00016594 	.word	0x00016594
   16428:	000165cc 	.word	0x000165cc
   1642c:	000165cc 	.word	0x000165cc
   16430:	000165cc 	.word	0x000165cc
   16434:	00016568 	.word	0x00016568
   16438:	00016594 	.word	0x00016594
   1643c:	00016c44 	.word	0x00016c44
   16440:	00016c44 	.word	0x00016c44
   16444:	00016570 	.word	0x00016570
   16448:	00016c44 	.word	0x00016c44
   1644c:	000169c8 	.word	0x000169c8
   16450:	00016a00 	.word	0x00016a00
   16454:	00016a34 	.word	0x00016a34
   16458:	00016570 	.word	0x00016570
   1645c:	00016c44 	.word	0x00016c44
   16460:	00016a64 	.word	0x00016a64
   16464:	00016c44 	.word	0x00016c44
   16468:	00016ab8 	.word	0x00016ab8
   1646c:	00016c44 	.word	0x00016c44
   16470:	00016c44 	.word	0x00016c44
   16474:	00016ae0 	.word	0x00016ae0
   16478:	e5dd305f 	ldrb	r3, [sp, #95]	; 0x5f
   1647c:	e3530000 	cmp	r3, #0
   16480:	05cd005f 	strbeq	r0, [sp, #95]	; 0x5f
   16484:	eaffff99 	b	162f0 <_svfprintf_r+0x17c>
   16488:	e38aa001 	orr	sl, sl, #1
   1648c:	eaffff97 	b	162f0 <_svfprintf_r+0x17c>
   16490:	e2893004 	add	r3, r9, #4
   16494:	e5999000 	ldr	r9, [r9]
   16498:	e3590000 	cmp	r9, #0
   1649c:	e58d9034 	str	r9, [sp, #52]	; 0x34
   164a0:	aa000010 	bge	164e8 <_svfprintf_r+0x374>
   164a4:	e2697000 	rsb	r7, r9, #0
   164a8:	e58d7034 	str	r7, [sp, #52]	; 0x34
   164ac:	e1a09003 	mov	r9, r3
   164b0:	e38aa004 	orr	sl, sl, #4
   164b4:	eaffff8d 	b	162f0 <_svfprintf_r+0x17c>
   164b8:	e5cdc05f 	strb	ip, [sp, #95]	; 0x5f
   164bc:	eaffff8b 	b	162f0 <_svfprintf_r+0x17c>
   164c0:	e59d7024 	ldr	r7, [sp, #36]	; 0x24
   164c4:	e4d75001 	ldrb	r5, [r7], #1
   164c8:	e355002a 	cmp	r5, #42	; 0x2a
   164cc:	e58d7024 	str	r7, [sp, #36]	; 0x24
   164d0:	e58d5018 	str	r5, [sp, #24]
   164d4:	1a00000b 	bne	16508 <_svfprintf_r+0x394>
   164d8:	e5996000 	ldr	r6, [r9]
   164dc:	e3560000 	cmp	r6, #0
   164e0:	e2893004 	add	r3, r9, #4
   164e4:	baffff7f 	blt	162e8 <_svfprintf_r+0x174>
   164e8:	e1a09003 	mov	r9, r3
   164ec:	eaffff7f 	b	162f0 <_svfprintf_r+0x17c>
   164f0:	e59d7024 	ldr	r7, [sp, #36]	; 0x24
   164f4:	e4d75001 	ldrb	r5, [r7], #1
   164f8:	e0263691 	mla	r6, r1, r6, r3
   164fc:	e58d7024 	str	r7, [sp, #36]	; 0x24
   16500:	e58d5018 	str	r5, [sp, #24]
   16504:	ea000000 	b	1650c <_svfprintf_r+0x398>
   16508:	e3a06000 	mov	r6, #0
   1650c:	e59d5018 	ldr	r5, [sp, #24]
   16510:	e2453030 	sub	r3, r5, #48	; 0x30
   16514:	e3530009 	cmp	r3, #9
   16518:	9afffff4 	bls	164f0 <_svfprintf_r+0x37c>
   1651c:	e1866fc6 	orr	r6, r6, r6, asr #31
   16520:	eaffff76 	b	16300 <_svfprintf_r+0x18c>
   16524:	e38aa080 	orr	sl, sl, #128	; 0x80
   16528:	eaffff70 	b	162f0 <_svfprintf_r+0x17c>
   1652c:	e59d2024 	ldr	r2, [sp, #36]	; 0x24
   16530:	e3a03000 	mov	r3, #0
   16534:	e59d7018 	ldr	r7, [sp, #24]
   16538:	e2475030 	sub	r5, r7, #48	; 0x30
   1653c:	e0235391 	mla	r3, r1, r3, r5
   16540:	e4d25001 	ldrb	r5, [r2], #1
   16544:	e58d5018 	str	r5, [sp, #24]
   16548:	e2455030 	sub	r5, r5, #48	; 0x30
   1654c:	e3550009 	cmp	r5, #9
   16550:	e58d2024 	str	r2, [sp, #36]	; 0x24
   16554:	9afffff6 	bls	16534 <_svfprintf_r+0x3c0>
   16558:	e58d3034 	str	r3, [sp, #52]	; 0x34
   1655c:	eaffff67 	b	16300 <_svfprintf_r+0x18c>
   16560:	e38aa008 	orr	sl, sl, #8
   16564:	eaffff61 	b	162f0 <_svfprintf_r+0x17c>
   16568:	e38aa040 	orr	sl, sl, #64	; 0x40
   1656c:	eaffff5f 	b	162f0 <_svfprintf_r+0x17c>
   16570:	e38aa010 	orr	sl, sl, #16
   16574:	eaffff5d 	b	162f0 <_svfprintf_r+0x17c>
   16578:	e5993000 	ldr	r3, [r9]
   1657c:	e3a06000 	mov	r6, #0
   16580:	e5cd308c 	strb	r3, [sp, #140]	; 0x8c
   16584:	e5cd605f 	strb	r6, [sp, #95]	; 0x5f
   16588:	e2899004 	add	r9, r9, #4
   1658c:	ea0001b2 	b	16c5c <_svfprintf_r+0xae8>
   16590:	e38aa010 	orr	sl, sl, #16
   16594:	e31a0010 	tst	sl, #16
   16598:	e2893004 	add	r3, r9, #4
   1659c:	15997000 	ldrne	r7, [r9]
   165a0:	1a000003 	bne	165b4 <_svfprintf_r+0x440>
   165a4:	e5997000 	ldr	r7, [r9]
   165a8:	e31a0040 	tst	sl, #64	; 0x40
   165ac:	11a07807 	lslne	r7, r7, #16
   165b0:	11a07847 	asrne	r7, r7, #16
   165b4:	e3570000 	cmp	r7, #0
   165b8:	e1a09003 	mov	r9, r3
   165bc:	b3a0302d 	movlt	r3, #45	; 0x2d
   165c0:	b2677000 	rsblt	r7, r7, #0
   165c4:	b5cd305f 	strblt	r3, [sp, #95]	; 0x5f
   165c8:	ea00015d 	b	16b44 <_svfprintf_r+0x9d0>
   165cc:	e59d7018 	ldr	r7, [sp, #24]
   165d0:	e58da020 	str	sl, [sp, #32]
   165d4:	e58d7040 	str	r7, [sp, #64]	; 0x40
   165d8:	e8990006 	ldm	r9, {r1, r2}
   165dc:	e58d1028 	str	r1, [sp, #40]	; 0x28
   165e0:	e58d202c 	str	r2, [sp, #44]	; 0x2c
   165e4:	e59d202c 	ldr	r2, [sp, #44]	; 0x2c
   165e8:	e59d7028 	ldr	r7, [sp, #40]	; 0x28
   165ec:	e2893008 	add	r3, r9, #8
   165f0:	e1a00007 	mov	r0, r7
   165f4:	e1a01002 	mov	r1, r2
   165f8:	e1a09003 	mov	r9, r3
   165fc:	e58d2054 	str	r2, [sp, #84]	; 0x54
   16600:	e1a05002 	mov	r5, r2
   16604:	eb000e77 	bl	19fe8 <__fpclassifyd>
   16608:	e3500001 	cmp	r0, #1
   1660c:	1a000012 	bne	1665c <_svfprintf_r+0x4e8>
   16610:	e59d202c 	ldr	r2, [sp, #44]	; 0x2c
   16614:	e59d7028 	ldr	r7, [sp, #40]	; 0x28
   16618:	e3a03000 	mov	r3, #0
   1661c:	e1a01002 	mov	r1, r2
   16620:	e1a00007 	mov	r0, r7
   16624:	e3a02000 	mov	r2, #0
   16628:	eb0016f1 	bl	1c1f4 <__ledf2>
   1662c:	e3500000 	cmp	r0, #0
   16630:	b3a0302d 	movlt	r3, #45	; 0x2d
   16634:	b5cd305f 	strblt	r3, [sp, #95]	; 0x5f
   16638:	e59f5f5c 	ldr	r5, [pc, #3932]	; 1759c <_svfprintf_r+0x1428>
   1663c:	e59f3f5c 	ldr	r3, [pc, #3932]	; 175a0 <_svfprintf_r+0x142c>
   16640:	e59d7018 	ldr	r7, [sp, #24]
   16644:	e3570047 	cmp	r7, #71	; 0x47
   16648:	d1a05003 	movle	r5, r3
   1664c:	e3caa080 	bic	sl, sl, #128	; 0x80
   16650:	e3a07003 	mov	r7, #3
   16654:	e3a06000 	mov	r6, #0
   16658:	ea000187 	b	16c7c <_svfprintf_r+0xb08>
   1665c:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
   16660:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
   16664:	e1a00002 	mov	r0, r2
   16668:	e1a01003 	mov	r1, r3
   1666c:	eb000e5d 	bl	19fe8 <__fpclassifyd>
   16670:	e3500000 	cmp	r0, #0
   16674:	059f3f28 	ldreq	r3, [pc, #3880]	; 175a4 <_svfprintf_r+0x1430>
   16678:	059f5f28 	ldreq	r5, [pc, #3880]	; 175a8 <_svfprintf_r+0x1434>
   1667c:	0affffef 	beq	16640 <_svfprintf_r+0x4cc>
   16680:	e3760001 	cmn	r6, #1
   16684:	03a06006 	moveq	r6, #6
   16688:	0a000006 	beq	166a8 <_svfprintf_r+0x534>
   1668c:	e59d5018 	ldr	r5, [sp, #24]
   16690:	e3c53020 	bic	r3, r5, #32
   16694:	e3530047 	cmp	r3, #71	; 0x47
   16698:	1a000002 	bne	166a8 <_svfprintf_r+0x534>
   1669c:	e3560000 	cmp	r6, #0
   166a0:	03a06001 	moveq	r6, #1
   166a4:	eaffffff 	b	166a8 <_svfprintf_r+0x534>
   166a8:	e3570000 	cmp	r7, #0
   166ac:	b3a0502d 	movlt	r5, #45	; 0x2d
   166b0:	a3a05000 	movge	r5, #0
   166b4:	e58d5050 	str	r5, [sp, #80]	; 0x50
   166b8:	e59d5018 	ldr	r5, [sp, #24]
   166bc:	e3c55020 	bic	r5, r5, #32
   166c0:	b2877102 	addlt	r7, r7, #-2147483648	; 0x80000000
   166c4:	e2553046 	subs	r3, r5, #70	; 0x46
   166c8:	e273c000 	rsbs	ip, r3, #0
   166cc:	e0bcc003 	adcs	ip, ip, r3
   166d0:	e35c0000 	cmp	ip, #0
   166d4:	e38aac01 	orr	sl, sl, #256	; 0x100
   166d8:	e58d503c 	str	r5, [sp, #60]	; 0x3c
   166dc:	11a08006 	movne	r8, r6
   166e0:	13a03003 	movne	r3, #3
   166e4:	1a000005 	bne	16700 <_svfprintf_r+0x58c>
   166e8:	e3550045 	cmp	r5, #69	; 0x45
   166ec:	02868001 	addeq	r8, r6, #1
   166f0:	0a000001 	beq	166fc <_svfprintf_r+0x588>
   166f4:	eaffffff 	b	166f8 <_svfprintf_r+0x584>
   166f8:	e1a08006 	mov	r8, r6
   166fc:	e3a03002 	mov	r3, #2
   16700:	e28d2064 	add	r2, sp, #100	; 0x64
   16704:	e58d2004 	str	r2, [sp, #4]
   16708:	e28d2068 	add	r2, sp, #104	; 0x68
   1670c:	e58d2008 	str	r2, [sp, #8]
   16710:	e28d206c 	add	r2, sp, #108	; 0x6c
   16714:	e58d200c 	str	r2, [sp, #12]
   16718:	e1a01007 	mov	r1, r7
   1671c:	e58d8000 	str	r8, [sp]
   16720:	e59d0014 	ldr	r0, [sp, #20]
   16724:	e59d2054 	ldr	r2, [sp, #84]	; 0x54
   16728:	e58dc010 	str	ip, [sp, #16]
   1672c:	eb0004d4 	bl	17a84 <_dtoa_r>
   16730:	e59d103c 	ldr	r1, [sp, #60]	; 0x3c
   16734:	e3510047 	cmp	r1, #71	; 0x47
   16738:	e1a05000 	mov	r5, r0
   1673c:	e59dc010 	ldr	ip, [sp, #16]
   16740:	1a000009 	bne	1676c <_svfprintf_r+0x5f8>
   16744:	e59d2020 	ldr	r2, [sp, #32]
   16748:	e3120001 	tst	r2, #1
   1674c:	1a000006 	bne	1676c <_svfprintf_r+0x5f8>
   16750:	e59d306c 	ldr	r3, [sp, #108]	; 0x6c
   16754:	e59d703c 	ldr	r7, [sp, #60]	; 0x3c
   16758:	e0653003 	rsb	r3, r5, r3
   1675c:	e3570047 	cmp	r7, #71	; 0x47
   16760:	e58d301c 	str	r3, [sp, #28]
   16764:	0a000025 	beq	16800 <_svfprintf_r+0x68c>
   16768:	ea00002d 	b	16824 <_svfprintf_r+0x6b0>
   1676c:	e0851008 	add	r1, r5, r8
   16770:	e35c0000 	cmp	ip, #0
   16774:	e58d101c 	str	r1, [sp, #28]
   16778:	0a00000e 	beq	167b8 <_svfprintf_r+0x644>
   1677c:	e5d53000 	ldrb	r3, [r5]
   16780:	e3530030 	cmp	r3, #48	; 0x30
   16784:	1a000007 	bne	167a8 <_svfprintf_r+0x634>
   16788:	e1a00007 	mov	r0, r7
   1678c:	e59d1054 	ldr	r1, [sp, #84]	; 0x54
   16790:	e3a02000 	mov	r2, #0
   16794:	e3a03000 	mov	r3, #0
   16798:	eb001697 	bl	1c1fc <__cmpdf2>
   1679c:	e3500000 	cmp	r0, #0
   167a0:	12688001 	rsbne	r8, r8, #1
   167a4:	158d8064 	strne	r8, [sp, #100]	; 0x64
   167a8:	e59d201c 	ldr	r2, [sp, #28]
   167ac:	e59d3064 	ldr	r3, [sp, #100]	; 0x64
   167b0:	e0822003 	add	r2, r2, r3
   167b4:	e58d201c 	str	r2, [sp, #28]
   167b8:	e1a00007 	mov	r0, r7
   167bc:	e59d1054 	ldr	r1, [sp, #84]	; 0x54
   167c0:	e3a02000 	mov	r2, #0
   167c4:	e3a03000 	mov	r3, #0
   167c8:	eb00168b 	bl	1c1fc <__cmpdf2>
   167cc:	e3500000 	cmp	r0, #0
   167d0:	059d701c 	ldreq	r7, [sp, #28]
   167d4:	058d706c 	streq	r7, [sp, #108]	; 0x6c
   167d8:	ea000002 	b	167e8 <_svfprintf_r+0x674>
   167dc:	e4c32001 	strb	r2, [r3], #1
   167e0:	e58d306c 	str	r3, [sp, #108]	; 0x6c
   167e4:	ea000000 	b	167ec <_svfprintf_r+0x678>
   167e8:	e3a02030 	mov	r2, #48	; 0x30
   167ec:	e59d306c 	ldr	r3, [sp, #108]	; 0x6c
   167f0:	e59d701c 	ldr	r7, [sp, #28]
   167f4:	e1530007 	cmp	r3, r7
   167f8:	3afffff7 	bcc	167dc <_svfprintf_r+0x668>
   167fc:	eaffffd3 	b	16750 <_svfprintf_r+0x5dc>
   16800:	e59d3064 	ldr	r3, [sp, #100]	; 0x64
   16804:	e3730003 	cmn	r3, #3
   16808:	ba000001 	blt	16814 <_svfprintf_r+0x6a0>
   1680c:	e1530006 	cmp	r3, r6
   16810:	da000051 	ble	1695c <_svfprintf_r+0x7e8>
   16814:	e59d7018 	ldr	r7, [sp, #24]
   16818:	e2477002 	sub	r7, r7, #2
   1681c:	e58d7018 	str	r7, [sp, #24]
   16820:	ea000002 	b	16830 <_svfprintf_r+0x6bc>
   16824:	e59d7018 	ldr	r7, [sp, #24]
   16828:	e3570065 	cmp	r7, #101	; 0x65
   1682c:	ca000034 	bgt	16904 <_svfprintf_r+0x790>
   16830:	e59d6064 	ldr	r6, [sp, #100]	; 0x64
   16834:	e2466001 	sub	r6, r6, #1
   16838:	e3560000 	cmp	r6, #0
   1683c:	e58d6064 	str	r6, [sp, #100]	; 0x64
   16840:	e59d7018 	ldr	r7, [sp, #24]
   16844:	b2666000 	rsblt	r6, r6, #0
   16848:	b3a0302d 	movlt	r3, #45	; 0x2d
   1684c:	a3a0302b 	movge	r3, #43	; 0x2b
   16850:	e3560009 	cmp	r6, #9
   16854:	e5cd7070 	strb	r7, [sp, #112]	; 0x70
   16858:	e5cd3071 	strb	r3, [sp, #113]	; 0x71
   1685c:	da000016 	ble	168bc <_svfprintf_r+0x748>
   16860:	e28d707e 	add	r7, sp, #126	; 0x7e
   16864:	e1a00006 	mov	r0, r6
   16868:	e3a0100a 	mov	r1, #10
   1686c:	eb001408 	bl	1b894 <__modsi3>
   16870:	e2800030 	add	r0, r0, #48	; 0x30
   16874:	e1a08007 	mov	r8, r7
   16878:	e3a0100a 	mov	r1, #10
   1687c:	e4470001 	strb	r0, [r7], #-1
   16880:	e1a00006 	mov	r0, r6
   16884:	eb00137d 	bl	1b680 <__aeabi_idiv>
   16888:	e3500009 	cmp	r0, #9
   1688c:	e1a06000 	mov	r6, r0
   16890:	cafffff3 	bgt	16864 <_svfprintf_r+0x6f0>
   16894:	e2806030 	add	r6, r0, #48	; 0x30
   16898:	e5686001 	strb	r6, [r8, #-1]!
   1689c:	e28d3072 	add	r3, sp, #114	; 0x72
   168a0:	ea000001 	b	168ac <_svfprintf_r+0x738>
   168a4:	e4d82001 	ldrb	r2, [r8], #1
   168a8:	e4c32001 	strb	r2, [r3], #1
   168ac:	e59d7058 	ldr	r7, [sp, #88]	; 0x58
   168b0:	e1580007 	cmp	r8, r7
   168b4:	3afffffa 	bcc	168a4 <_svfprintf_r+0x730>
   168b8:	ea000004 	b	168d0 <_svfprintf_r+0x75c>
   168bc:	e3a03030 	mov	r3, #48	; 0x30
   168c0:	e0866003 	add	r6, r6, r3
   168c4:	e5cd6073 	strb	r6, [sp, #115]	; 0x73
   168c8:	e5cd3072 	strb	r3, [sp, #114]	; 0x72
   168cc:	e28d3074 	add	r3, sp, #116	; 0x74
   168d0:	e59d101c 	ldr	r1, [sp, #28]
   168d4:	e28d2070 	add	r2, sp, #112	; 0x70
   168d8:	e0622003 	rsb	r2, r2, r3
   168dc:	e3510001 	cmp	r1, #1
   168e0:	e58d2048 	str	r2, [sp, #72]	; 0x48
   168e4:	e0827001 	add	r7, r2, r1
   168e8:	ca000002 	bgt	168f8 <_svfprintf_r+0x784>
   168ec:	e59d2020 	ldr	r2, [sp, #32]
   168f0:	e2128001 	ands	r8, r2, #1
   168f4:	0a00002d 	beq	169b0 <_svfprintf_r+0x83c>
   168f8:	e2877001 	add	r7, r7, #1
   168fc:	e3a08000 	mov	r8, #0
   16900:	ea00002a 	b	169b0 <_svfprintf_r+0x83c>
   16904:	e59d7018 	ldr	r7, [sp, #24]
   16908:	e3570066 	cmp	r7, #102	; 0x66
   1690c:	1a000012 	bne	1695c <_svfprintf_r+0x7e8>
   16910:	e59d7064 	ldr	r7, [sp, #100]	; 0x64
   16914:	e3570000 	cmp	r7, #0
   16918:	da000007 	ble	1693c <_svfprintf_r+0x7c8>
   1691c:	e3560000 	cmp	r6, #0
   16920:	1a000002 	bne	16930 <_svfprintf_r+0x7bc>
   16924:	e59d1020 	ldr	r1, [sp, #32]
   16928:	e3110001 	tst	r1, #1
   1692c:	0a00001c 	beq	169a4 <_svfprintf_r+0x830>
   16930:	e2866001 	add	r6, r6, #1
   16934:	e0877006 	add	r7, r7, r6
   16938:	ea000019 	b	169a4 <_svfprintf_r+0x830>
   1693c:	e3560000 	cmp	r6, #0
   16940:	1a000003 	bne	16954 <_svfprintf_r+0x7e0>
   16944:	e59d7020 	ldr	r7, [sp, #32]
   16948:	e3170001 	tst	r7, #1
   1694c:	03a07001 	moveq	r7, #1
   16950:	0a000013 	beq	169a4 <_svfprintf_r+0x830>
   16954:	e2867002 	add	r7, r6, #2
   16958:	ea000011 	b	169a4 <_svfprintf_r+0x830>
   1695c:	e59d7064 	ldr	r7, [sp, #100]	; 0x64
   16960:	e59d101c 	ldr	r1, [sp, #28]
   16964:	e1570001 	cmp	r7, r1
   16968:	ba000003 	blt	1697c <_svfprintf_r+0x808>
   1696c:	e59d2020 	ldr	r2, [sp, #32]
   16970:	e3120001 	tst	r2, #1
   16974:	12877001 	addne	r7, r7, #1
   16978:	ea000007 	b	1699c <_svfprintf_r+0x828>
   1697c:	e3570000 	cmp	r7, #0
   16980:	e59d101c 	ldr	r1, [sp, #28]
   16984:	d2677002 	rsble	r7, r7, #2
   16988:	c3a07001 	movgt	r7, #1
   1698c:	e3a02067 	mov	r2, #103	; 0x67
   16990:	e0817007 	add	r7, r1, r7
   16994:	e58d2040 	str	r2, [sp, #64]	; 0x40
   16998:	ea000001 	b	169a4 <_svfprintf_r+0x830>
   1699c:	e3a03067 	mov	r3, #103	; 0x67
   169a0:	e58d3040 	str	r3, [sp, #64]	; 0x40
   169a4:	e59d1040 	ldr	r1, [sp, #64]	; 0x40
   169a8:	e59d8064 	ldr	r8, [sp, #100]	; 0x64
   169ac:	e58d1018 	str	r1, [sp, #24]
   169b0:	e59d2050 	ldr	r2, [sp, #80]	; 0x50
   169b4:	e3520000 	cmp	r2, #0
   169b8:	13a0302d 	movne	r3, #45	; 0x2d
   169bc:	15cd305f 	strbne	r3, [sp, #95]	; 0x5f
   169c0:	e3a06000 	mov	r6, #0
   169c4:	ea0000ad 	b	16c80 <_svfprintf_r+0xb0c>
   169c8:	e31a0010 	tst	sl, #16
   169cc:	e2893004 	add	r3, r9, #4
   169d0:	1a000004 	bne	169e8 <_svfprintf_r+0x874>
   169d4:	e31a0040 	tst	sl, #64	; 0x40
   169d8:	15992000 	ldrne	r2, [r9]
   169dc:	159d7030 	ldrne	r7, [sp, #48]	; 0x30
   169e0:	11c270b0 	strhne	r7, [r2]
   169e4:	1a000002 	bne	169f4 <_svfprintf_r+0x880>
   169e8:	e5992000 	ldr	r2, [r9]
   169ec:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
   169f0:	e5825000 	str	r5, [r2]
   169f4:	e1a09003 	mov	r9, r3
   169f8:	eafffe0d 	b	16234 <_svfprintf_r+0xc0>
   169fc:	e38aa010 	orr	sl, sl, #16
   16a00:	e21a1010 	ands	r1, sl, #16
   16a04:	e2892004 	add	r2, r9, #4
   16a08:	0a000003 	beq	16a1c <_svfprintf_r+0x8a8>
   16a0c:	e5997000 	ldr	r7, [r9]
   16a10:	e1a09002 	mov	r9, r2
   16a14:	e3a03000 	mov	r3, #0
   16a18:	ea000046 	b	16b38 <_svfprintf_r+0x9c4>
   16a1c:	e21a3040 	ands	r3, sl, #64	; 0x40
   16a20:	05997000 	ldreq	r7, [r9]
   16a24:	11d970b0 	ldrhne	r7, [r9]
   16a28:	01a09002 	moveq	r9, r2
   16a2c:	0a000041 	beq	16b38 <_svfprintf_r+0x9c4>
   16a30:	eafffff6 	b	16a10 <_svfprintf_r+0x89c>
   16a34:	e59f5b70 	ldr	r5, [pc, #2928]	; 175ac <_svfprintf_r+0x1438>
   16a38:	e3a03030 	mov	r3, #48	; 0x30
   16a3c:	e3a02078 	mov	r2, #120	; 0x78
   16a40:	e5997000 	ldr	r7, [r9]
   16a44:	e38aa002 	orr	sl, sl, #2
   16a48:	e5cd3060 	strb	r3, [sp, #96]	; 0x60
   16a4c:	e5cd2061 	strb	r2, [sp, #97]	; 0x61
   16a50:	e2899004 	add	r9, r9, #4
   16a54:	e58d504c 	str	r5, [sp, #76]	; 0x4c
   16a58:	e3a03002 	mov	r3, #2
   16a5c:	e58d2018 	str	r2, [sp, #24]
   16a60:	ea000034 	b	16b38 <_svfprintf_r+0x9c4>
   16a64:	e3a08000 	mov	r8, #0
   16a68:	e5cd805f 	strb	r8, [sp, #95]	; 0x5f
   16a6c:	e1a03009 	mov	r3, r9
   16a70:	e5935000 	ldr	r5, [r3]
   16a74:	e1560008 	cmp	r6, r8
   16a78:	e2899004 	add	r9, r9, #4
   16a7c:	e1a00005 	mov	r0, r5
   16a80:	ba000008 	blt	16aa8 <_svfprintf_r+0x934>
   16a84:	e1a01008 	mov	r1, r8
   16a88:	e1a02006 	mov	r2, r6
   16a8c:	eb000a55 	bl	193e8 <memchr>
   16a90:	e3500000 	cmp	r0, #0
   16a94:	0a000074 	beq	16c6c <_svfprintf_r+0xaf8>
   16a98:	e0657000 	rsb	r7, r5, r0
   16a9c:	e1570006 	cmp	r7, r6
   16aa0:	ca000073 	bgt	16c74 <_svfprintf_r+0xb00>
   16aa4:	eaffffc5 	b	169c0 <_svfprintf_r+0x84c>
   16aa8:	ebfffd69 	bl	16054 <strlen>
   16aac:	e1a07000 	mov	r7, r0
   16ab0:	ea000070 	b	16c78 <_svfprintf_r+0xb04>
   16ab4:	e38aa010 	orr	sl, sl, #16
   16ab8:	e31a0010 	tst	sl, #16
   16abc:	e2893004 	add	r3, r9, #4
   16ac0:	1a000002 	bne	16ad0 <_svfprintf_r+0x95c>
   16ac4:	e31a0040 	tst	sl, #64	; 0x40
   16ac8:	11d970b0 	ldrhne	r7, [r9]
   16acc:	1a000000 	bne	16ad4 <_svfprintf_r+0x960>
   16ad0:	e5997000 	ldr	r7, [r9]
   16ad4:	e1a09003 	mov	r9, r3
   16ad8:	e3a03001 	mov	r3, #1
   16adc:	ea000015 	b	16b38 <_svfprintf_r+0x9c4>
   16ae0:	e59f7ac4 	ldr	r7, [pc, #2756]	; 175ac <_svfprintf_r+0x1438>
   16ae4:	e58d704c 	str	r7, [sp, #76]	; 0x4c
   16ae8:	ea000001 	b	16af4 <_svfprintf_r+0x980>
   16aec:	e59f5abc 	ldr	r5, [pc, #2748]	; 175b0 <_svfprintf_r+0x143c>
   16af0:	e58d504c 	str	r5, [sp, #76]	; 0x4c
   16af4:	e31a0010 	tst	sl, #16
   16af8:	e2893004 	add	r3, r9, #4
   16afc:	1a000002 	bne	16b0c <_svfprintf_r+0x998>
   16b00:	e31a0040 	tst	sl, #64	; 0x40
   16b04:	11d970b0 	ldrhne	r7, [r9]
   16b08:	1a000000 	bne	16b10 <_svfprintf_r+0x99c>
   16b0c:	e5997000 	ldr	r7, [r9]
   16b10:	e31a0001 	tst	sl, #1
   16b14:	e1a09003 	mov	r9, r3
   16b18:	0a000005 	beq	16b34 <_svfprintf_r+0x9c0>
   16b1c:	e3570000 	cmp	r7, #0
   16b20:	159d5018 	ldrne	r5, [sp, #24]
   16b24:	13a03030 	movne	r3, #48	; 0x30
   16b28:	15cd3060 	strbne	r3, [sp, #96]	; 0x60
   16b2c:	15cd5061 	strbne	r5, [sp, #97]	; 0x61
   16b30:	138aa002 	orrne	sl, sl, #2
   16b34:	e3a03002 	mov	r3, #2
   16b38:	e3a02000 	mov	r2, #0
   16b3c:	e5cd205f 	strb	r2, [sp, #95]	; 0x5f
   16b40:	ea000000 	b	16b48 <_svfprintf_r+0x9d4>
   16b44:	e3a03001 	mov	r3, #1
   16b48:	e3560000 	cmp	r6, #0
   16b4c:	a3caa080 	bicge	sl, sl, #128	; 0x80
   16b50:	e3570000 	cmp	r7, #0
   16b54:	03560000 	cmpeq	r6, #0
   16b58:	0a00002c 	beq	16c10 <_svfprintf_r+0xa9c>
   16b5c:	e3530001 	cmp	r3, #1
   16b60:	0a000011 	beq	16bac <_svfprintf_r+0xa38>
   16b64:	e3530002 	cmp	r3, #2
   16b68:	e28d30b3 	add	r3, sp, #179	; 0xb3
   16b6c:	0a00001f 	beq	16bf0 <_svfprintf_r+0xa7c>
   16b70:	e2072007 	and	r2, r7, #7
   16b74:	e2822030 	add	r2, r2, #48	; 0x30
   16b78:	e1b071a7 	lsrs	r7, r7, #3
   16b7c:	e1a05003 	mov	r5, r3
   16b80:	e5c32000 	strb	r2, [r3]
   16b84:	e2433001 	sub	r3, r3, #1
   16b88:	1afffff8 	bne	16b70 <_svfprintf_r+0x9fc>
   16b8c:	e31a0001 	tst	sl, #1
   16b90:	e1a01005 	mov	r1, r5
   16b94:	0a000026 	beq	16c34 <_svfprintf_r+0xac0>
   16b98:	e3520030 	cmp	r2, #48	; 0x30
   16b9c:	11a05003 	movne	r5, r3
   16ba0:	13a03030 	movne	r3, #48	; 0x30
   16ba4:	15413001 	strbne	r3, [r1, #-1]
   16ba8:	ea000021 	b	16c34 <_svfprintf_r+0xac0>
   16bac:	e3570009 	cmp	r7, #9
   16bb0:	92877030 	addls	r7, r7, #48	; 0x30
   16bb4:	95cd70b3 	strbls	r7, [sp, #179]	; 0xb3
   16bb8:	9a00001a 	bls	16c28 <_svfprintf_r+0xab4>
   16bbc:	e28d80b3 	add	r8, sp, #179	; 0xb3
   16bc0:	e1a00007 	mov	r0, r7
   16bc4:	e3a0100a 	mov	r1, #10
   16bc8:	eb0012fe 	bl	1b7c8 <__umodsi3>
   16bcc:	e2800030 	add	r0, r0, #48	; 0x30
   16bd0:	e1a05008 	mov	r5, r8
   16bd4:	e3a0100a 	mov	r1, #10
   16bd8:	e4480001 	strb	r0, [r8], #-1
   16bdc:	e1a00007 	mov	r0, r7
   16be0:	eb001260 	bl	1b568 <__aeabi_uidiv>
   16be4:	e2507000 	subs	r7, r0, #0
   16be8:	1afffff4 	bne	16bc0 <_svfprintf_r+0xa4c>
   16bec:	ea000010 	b	16c34 <_svfprintf_r+0xac0>
   16bf0:	e59d104c 	ldr	r1, [sp, #76]	; 0x4c
   16bf4:	e207200f 	and	r2, r7, #15
   16bf8:	e7d12002 	ldrb	r2, [r1, r2]
   16bfc:	e1b07227 	lsrs	r7, r7, #4
   16c00:	e1a05003 	mov	r5, r3
   16c04:	e4432001 	strb	r2, [r3], #-1
   16c08:	1afffff8 	bne	16bf0 <_svfprintf_r+0xa7c>
   16c0c:	ea000008 	b	16c34 <_svfprintf_r+0xac0>
   16c10:	e3530000 	cmp	r3, #0
   16c14:	1a000005 	bne	16c30 <_svfprintf_r+0xabc>
   16c18:	e31a0001 	tst	sl, #1
   16c1c:	0a000003 	beq	16c30 <_svfprintf_r+0xabc>
   16c20:	e3a03030 	mov	r3, #48	; 0x30
   16c24:	e5cd30b3 	strb	r3, [sp, #179]	; 0xb3
   16c28:	e28d50b3 	add	r5, sp, #179	; 0xb3
   16c2c:	ea000000 	b	16c34 <_svfprintf_r+0xac0>
   16c30:	e28d50b4 	add	r5, sp, #180	; 0xb4
   16c34:	e28d70b4 	add	r7, sp, #180	; 0xb4
   16c38:	e0657007 	rsb	r7, r5, r7
   16c3c:	e3a08000 	mov	r8, #0
   16c40:	ea00000e 	b	16c80 <_svfprintf_r+0xb0c>
   16c44:	e59d5018 	ldr	r5, [sp, #24]
   16c48:	e3550000 	cmp	r5, #0
   16c4c:	0a000312 	beq	1789c <_svfprintf_r+0x1728>
   16c50:	e3a06000 	mov	r6, #0
   16c54:	e5cd508c 	strb	r5, [sp, #140]	; 0x8c
   16c58:	e5cd605f 	strb	r6, [sp, #95]	; 0x5f
   16c5c:	e3a07001 	mov	r7, #1
   16c60:	e1a08006 	mov	r8, r6
   16c64:	e28d508c 	add	r5, sp, #140	; 0x8c
   16c68:	ea000004 	b	16c80 <_svfprintf_r+0xb0c>
   16c6c:	e1a07006 	mov	r7, r6
   16c70:	eafffe77 	b	16654 <_svfprintf_r+0x4e0>
   16c74:	e1a07006 	mov	r7, r6
   16c78:	e1a06008 	mov	r6, r8
   16c7c:	e1a08006 	mov	r8, r6
   16c80:	e5dd305f 	ldrb	r3, [sp, #95]	; 0x5f
   16c84:	e1570006 	cmp	r7, r6
   16c88:	a1a01007 	movge	r1, r7
   16c8c:	b1a01006 	movlt	r1, r6
   16c90:	e3530000 	cmp	r3, #0
   16c94:	e58d1020 	str	r1, [sp, #32]
   16c98:	12811001 	addne	r1, r1, #1
   16c9c:	158d1020 	strne	r1, [sp, #32]
   16ca0:	e21a3002 	ands	r3, sl, #2
   16ca4:	159d1020 	ldrne	r1, [sp, #32]
   16ca8:	12811002 	addne	r1, r1, #2
   16cac:	e58d303c 	str	r3, [sp, #60]	; 0x3c
   16cb0:	158d1020 	strne	r1, [sp, #32]
   16cb4:	e21a3084 	ands	r3, sl, #132	; 0x84
   16cb8:	e58d3040 	str	r3, [sp, #64]	; 0x40
   16cbc:	1a00002f 	bne	16d80 <_svfprintf_r+0xc0c>
   16cc0:	e59d1034 	ldr	r1, [sp, #52]	; 0x34
   16cc4:	e59d2020 	ldr	r2, [sp, #32]
   16cc8:	e062c001 	rsb	ip, r2, r1
   16ccc:	e35c0000 	cmp	ip, #0
   16cd0:	ca000015 	bgt	16d2c <_svfprintf_r+0xbb8>
   16cd4:	ea000029 	b	16d80 <_svfprintf_r+0xc0c>
   16cd8:	e59d3088 	ldr	r3, [sp, #136]	; 0x88
   16cdc:	e3a01010 	mov	r1, #16
   16ce0:	e0833001 	add	r3, r3, r1
   16ce4:	e5841004 	str	r1, [r4, #4]
   16ce8:	e58d3088 	str	r3, [sp, #136]	; 0x88
   16cec:	e59d3084 	ldr	r3, [sp, #132]	; 0x84
   16cf0:	e2833001 	add	r3, r3, #1
   16cf4:	e3530007 	cmp	r3, #7
   16cf8:	e58d3084 	str	r3, [sp, #132]	; 0x84
   16cfc:	d2844008 	addle	r4, r4, #8
   16d00:	da000008 	ble	16d28 <_svfprintf_r+0xbb4>
   16d04:	e59d0014 	ldr	r0, [sp, #20]
   16d08:	e1a0100b 	mov	r1, fp
   16d0c:	e28d2080 	add	r2, sp, #128	; 0x80
   16d10:	e58dc010 	str	ip, [sp, #16]
   16d14:	eb000ccf 	bl	1a058 <__ssprint_r>
   16d18:	e3500000 	cmp	r0, #0
   16d1c:	e59dc010 	ldr	ip, [sp, #16]
   16d20:	1a0002e3 	bne	178b4 <_svfprintf_r+0x1740>
   16d24:	e28d40b4 	add	r4, sp, #180	; 0xb4
   16d28:	e24cc010 	sub	ip, ip, #16
   16d2c:	e59f3888 	ldr	r3, [pc, #2184]	; 175bc <_svfprintf_r+0x1448>
   16d30:	e35c0010 	cmp	ip, #16
   16d34:	e5843000 	str	r3, [r4]
   16d38:	caffffe6 	bgt	16cd8 <_svfprintf_r+0xb64>
   16d3c:	e59d3088 	ldr	r3, [sp, #136]	; 0x88
   16d40:	e083300c 	add	r3, r3, ip
   16d44:	e584c004 	str	ip, [r4, #4]
   16d48:	e58d3088 	str	r3, [sp, #136]	; 0x88
   16d4c:	e59d3084 	ldr	r3, [sp, #132]	; 0x84
   16d50:	e2833001 	add	r3, r3, #1
   16d54:	e3530007 	cmp	r3, #7
   16d58:	e58d3084 	str	r3, [sp, #132]	; 0x84
   16d5c:	d2844008 	addle	r4, r4, #8
   16d60:	da000006 	ble	16d80 <_svfprintf_r+0xc0c>
   16d64:	e59d0014 	ldr	r0, [sp, #20]
   16d68:	e1a0100b 	mov	r1, fp
   16d6c:	e28d2080 	add	r2, sp, #128	; 0x80
   16d70:	eb000cb8 	bl	1a058 <__ssprint_r>
   16d74:	e3500000 	cmp	r0, #0
   16d78:	1a0002cd 	bne	178b4 <_svfprintf_r+0x1740>
   16d7c:	e28d40b4 	add	r4, sp, #180	; 0xb4
   16d80:	e5dd305f 	ldrb	r3, [sp, #95]	; 0x5f
   16d84:	e3530000 	cmp	r3, #0
   16d88:	0a000013 	beq	16ddc <_svfprintf_r+0xc68>
   16d8c:	e28d305f 	add	r3, sp, #95	; 0x5f
   16d90:	e5843000 	str	r3, [r4]
   16d94:	e3a03001 	mov	r3, #1
   16d98:	e5843004 	str	r3, [r4, #4]
   16d9c:	e59d3088 	ldr	r3, [sp, #136]	; 0x88
   16da0:	e2833001 	add	r3, r3, #1
   16da4:	e58d3088 	str	r3, [sp, #136]	; 0x88
   16da8:	e59d3084 	ldr	r3, [sp, #132]	; 0x84
   16dac:	e2833001 	add	r3, r3, #1
   16db0:	e3530007 	cmp	r3, #7
   16db4:	e58d3084 	str	r3, [sp, #132]	; 0x84
   16db8:	d2844008 	addle	r4, r4, #8
   16dbc:	da000006 	ble	16ddc <_svfprintf_r+0xc68>
   16dc0:	e59d0014 	ldr	r0, [sp, #20]
   16dc4:	e1a0100b 	mov	r1, fp
   16dc8:	e28d2080 	add	r2, sp, #128	; 0x80
   16dcc:	eb000ca1 	bl	1a058 <__ssprint_r>
   16dd0:	e3500000 	cmp	r0, #0
   16dd4:	1a0002b6 	bne	178b4 <_svfprintf_r+0x1740>
   16dd8:	e28d40b4 	add	r4, sp, #180	; 0xb4
   16ddc:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
   16de0:	e3530000 	cmp	r3, #0
   16de4:	0a000013 	beq	16e38 <_svfprintf_r+0xcc4>
   16de8:	e28d3060 	add	r3, sp, #96	; 0x60
   16dec:	e5843000 	str	r3, [r4]
   16df0:	e3a03002 	mov	r3, #2
   16df4:	e5843004 	str	r3, [r4, #4]
   16df8:	e59d3088 	ldr	r3, [sp, #136]	; 0x88
   16dfc:	e2833002 	add	r3, r3, #2
   16e00:	e58d3088 	str	r3, [sp, #136]	; 0x88
   16e04:	e59d3084 	ldr	r3, [sp, #132]	; 0x84
   16e08:	e2833001 	add	r3, r3, #1
   16e0c:	e3530007 	cmp	r3, #7
   16e10:	e58d3084 	str	r3, [sp, #132]	; 0x84
   16e14:	d2844008 	addle	r4, r4, #8
   16e18:	da000006 	ble	16e38 <_svfprintf_r+0xcc4>
   16e1c:	e59d0014 	ldr	r0, [sp, #20]
   16e20:	e1a0100b 	mov	r1, fp
   16e24:	e28d2080 	add	r2, sp, #128	; 0x80
   16e28:	eb000c8a 	bl	1a058 <__ssprint_r>
   16e2c:	e3500000 	cmp	r0, #0
   16e30:	1a00029f 	bne	178b4 <_svfprintf_r+0x1740>
   16e34:	e28d40b4 	add	r4, sp, #180	; 0xb4
   16e38:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
   16e3c:	e3530080 	cmp	r3, #128	; 0x80
   16e40:	1a00002f 	bne	16f04 <_svfprintf_r+0xd90>
   16e44:	e59d1034 	ldr	r1, [sp, #52]	; 0x34
   16e48:	e59d2020 	ldr	r2, [sp, #32]
   16e4c:	e062c001 	rsb	ip, r2, r1
   16e50:	e35c0000 	cmp	ip, #0
   16e54:	ca000015 	bgt	16eb0 <_svfprintf_r+0xd3c>
   16e58:	ea000029 	b	16f04 <_svfprintf_r+0xd90>
   16e5c:	e59d3088 	ldr	r3, [sp, #136]	; 0x88
   16e60:	e3a01010 	mov	r1, #16
   16e64:	e0833001 	add	r3, r3, r1
   16e68:	e5841004 	str	r1, [r4, #4]
   16e6c:	e58d3088 	str	r3, [sp, #136]	; 0x88
   16e70:	e59d3084 	ldr	r3, [sp, #132]	; 0x84
   16e74:	e2833001 	add	r3, r3, #1
   16e78:	e3530007 	cmp	r3, #7
   16e7c:	e58d3084 	str	r3, [sp, #132]	; 0x84
   16e80:	d2844008 	addle	r4, r4, #8
   16e84:	da000008 	ble	16eac <_svfprintf_r+0xd38>
   16e88:	e59d0014 	ldr	r0, [sp, #20]
   16e8c:	e1a0100b 	mov	r1, fp
   16e90:	e28d2080 	add	r2, sp, #128	; 0x80
   16e94:	e58dc010 	str	ip, [sp, #16]
   16e98:	eb000c6e 	bl	1a058 <__ssprint_r>
   16e9c:	e3500000 	cmp	r0, #0
   16ea0:	e59dc010 	ldr	ip, [sp, #16]
   16ea4:	1a000282 	bne	178b4 <_svfprintf_r+0x1740>
   16ea8:	e28d40b4 	add	r4, sp, #180	; 0xb4
   16eac:	e24cc010 	sub	ip, ip, #16
   16eb0:	e59f3700 	ldr	r3, [pc, #1792]	; 175b8 <_svfprintf_r+0x1444>
   16eb4:	e35c0010 	cmp	ip, #16
   16eb8:	e5843000 	str	r3, [r4]
   16ebc:	caffffe6 	bgt	16e5c <_svfprintf_r+0xce8>
   16ec0:	e59d3088 	ldr	r3, [sp, #136]	; 0x88
   16ec4:	e083300c 	add	r3, r3, ip
   16ec8:	e584c004 	str	ip, [r4, #4]
   16ecc:	e58d3088 	str	r3, [sp, #136]	; 0x88
   16ed0:	e59d3084 	ldr	r3, [sp, #132]	; 0x84
   16ed4:	e2833001 	add	r3, r3, #1
   16ed8:	e3530007 	cmp	r3, #7
   16edc:	e58d3084 	str	r3, [sp, #132]	; 0x84
   16ee0:	d2844008 	addle	r4, r4, #8
   16ee4:	da000006 	ble	16f04 <_svfprintf_r+0xd90>
   16ee8:	e59d0014 	ldr	r0, [sp, #20]
   16eec:	e1a0100b 	mov	r1, fp
   16ef0:	e28d2080 	add	r2, sp, #128	; 0x80
   16ef4:	eb000c57 	bl	1a058 <__ssprint_r>
   16ef8:	e3500000 	cmp	r0, #0
   16efc:	1a00026c 	bne	178b4 <_svfprintf_r+0x1740>
   16f00:	e28d40b4 	add	r4, sp, #180	; 0xb4
   16f04:	e0676006 	rsb	r6, r7, r6
   16f08:	e3560000 	cmp	r6, #0
   16f0c:	c59fc6a4 	ldrgt	ip, [pc, #1700]	; 175b8 <_svfprintf_r+0x1444>
   16f10:	ca000017 	bgt	16f74 <_svfprintf_r+0xe00>
   16f14:	ea00002a 	b	16fc4 <_svfprintf_r+0xe50>
   16f18:	e59d3088 	ldr	r3, [sp, #136]	; 0x88
   16f1c:	e3a02010 	mov	r2, #16
   16f20:	e0833002 	add	r3, r3, r2
   16f24:	e584c000 	str	ip, [r4]
   16f28:	e5842004 	str	r2, [r4, #4]
   16f2c:	e58d3088 	str	r3, [sp, #136]	; 0x88
   16f30:	e59d3084 	ldr	r3, [sp, #132]	; 0x84
   16f34:	e2833001 	add	r3, r3, #1
   16f38:	e3530007 	cmp	r3, #7
   16f3c:	e58d3084 	str	r3, [sp, #132]	; 0x84
   16f40:	d2844008 	addle	r4, r4, #8
   16f44:	da000008 	ble	16f6c <_svfprintf_r+0xdf8>
   16f48:	e59d0014 	ldr	r0, [sp, #20]
   16f4c:	e1a0100b 	mov	r1, fp
   16f50:	e28d2080 	add	r2, sp, #128	; 0x80
   16f54:	e58dc010 	str	ip, [sp, #16]
   16f58:	eb000c3e 	bl	1a058 <__ssprint_r>
   16f5c:	e3500000 	cmp	r0, #0
   16f60:	e59dc010 	ldr	ip, [sp, #16]
   16f64:	1a000252 	bne	178b4 <_svfprintf_r+0x1740>
   16f68:	e28d40b4 	add	r4, sp, #180	; 0xb4
   16f6c:	e2466010 	sub	r6, r6, #16
   16f70:	eaffffff 	b	16f74 <_svfprintf_r+0xe00>
   16f74:	e3560010 	cmp	r6, #16
   16f78:	caffffe6 	bgt	16f18 <_svfprintf_r+0xda4>
   16f7c:	e59f3634 	ldr	r3, [pc, #1588]	; 175b8 <_svfprintf_r+0x1444>
   16f80:	e8840048 	stm	r4, {r3, r6}
   16f84:	e59d3088 	ldr	r3, [sp, #136]	; 0x88
   16f88:	e0836006 	add	r6, r3, r6
   16f8c:	e59d3084 	ldr	r3, [sp, #132]	; 0x84
   16f90:	e2833001 	add	r3, r3, #1
   16f94:	e3530007 	cmp	r3, #7
   16f98:	e58d6088 	str	r6, [sp, #136]	; 0x88
   16f9c:	e58d3084 	str	r3, [sp, #132]	; 0x84
   16fa0:	d2844008 	addle	r4, r4, #8
   16fa4:	da000006 	ble	16fc4 <_svfprintf_r+0xe50>
   16fa8:	e59d0014 	ldr	r0, [sp, #20]
   16fac:	e1a0100b 	mov	r1, fp
   16fb0:	e28d2080 	add	r2, sp, #128	; 0x80
   16fb4:	eb000c27 	bl	1a058 <__ssprint_r>
   16fb8:	e3500000 	cmp	r0, #0
   16fbc:	1a00023c 	bne	178b4 <_svfprintf_r+0x1740>
   16fc0:	e28d40b4 	add	r4, sp, #180	; 0xb4
   16fc4:	e31a0c01 	tst	sl, #256	; 0x100
   16fc8:	1a00000c 	bne	17000 <_svfprintf_r+0xe8c>
   16fcc:	e59d3088 	ldr	r3, [sp, #136]	; 0x88
   16fd0:	e88400a0 	stm	r4, {r5, r7}
   16fd4:	e0837007 	add	r7, r3, r7
   16fd8:	e58d7088 	str	r7, [sp, #136]	; 0x88
   16fdc:	ea000168 	b	17584 <_svfprintf_r+0x1410>
   16fe0:	e59d0014 	ldr	r0, [sp, #20]
   16fe4:	e1a0100b 	mov	r1, fp
   16fe8:	e28d2080 	add	r2, sp, #128	; 0x80
   16fec:	eb000c19 	bl	1a058 <__ssprint_r>
   16ff0:	e3500000 	cmp	r0, #0
   16ff4:	1a00022e 	bne	178b4 <_svfprintf_r+0x1740>
   16ff8:	e28d40b4 	add	r4, sp, #180	; 0xb4
   16ffc:	ea0001e0 	b	17784 <_svfprintf_r+0x1610>
   17000:	e59d7018 	ldr	r7, [sp, #24]
   17004:	e3570065 	cmp	r7, #101	; 0x65
   17008:	da00016c 	ble	175c0 <_svfprintf_r+0x144c>
   1700c:	e28d1028 	add	r1, sp, #40	; 0x28
   17010:	e8910003 	ldm	r1, {r0, r1}
   17014:	e3a02000 	mov	r2, #0
   17018:	e3a03000 	mov	r3, #0
   1701c:	eb001476 	bl	1c1fc <__cmpdf2>
   17020:	e3500000 	cmp	r0, #0
   17024:	1a00004f 	bne	17168 <_svfprintf_r+0xff4>
   17028:	e59f3584 	ldr	r3, [pc, #1412]	; 175b4 <_svfprintf_r+0x1440>
   1702c:	e5843000 	str	r3, [r4]
   17030:	e3a03001 	mov	r3, #1
   17034:	e5843004 	str	r3, [r4, #4]
   17038:	e59d3088 	ldr	r3, [sp, #136]	; 0x88
   1703c:	e2833001 	add	r3, r3, #1
   17040:	e58d3088 	str	r3, [sp, #136]	; 0x88
   17044:	e59d3084 	ldr	r3, [sp, #132]	; 0x84
   17048:	e2833001 	add	r3, r3, #1
   1704c:	e3530007 	cmp	r3, #7
   17050:	e58d3084 	str	r3, [sp, #132]	; 0x84
   17054:	d2844008 	addle	r4, r4, #8
   17058:	da000006 	ble	17078 <_svfprintf_r+0xf04>
   1705c:	e59d0014 	ldr	r0, [sp, #20]
   17060:	e1a0100b 	mov	r1, fp
   17064:	e28d2080 	add	r2, sp, #128	; 0x80
   17068:	eb000bfa 	bl	1a058 <__ssprint_r>
   1706c:	e3500000 	cmp	r0, #0
   17070:	1a00020f 	bne	178b4 <_svfprintf_r+0x1740>
   17074:	e28d40b4 	add	r4, sp, #180	; 0xb4
   17078:	e59d3064 	ldr	r3, [sp, #100]	; 0x64
   1707c:	e59d501c 	ldr	r5, [sp, #28]
   17080:	e1530005 	cmp	r3, r5
   17084:	ba000001 	blt	17090 <_svfprintf_r+0xf1c>
   17088:	e31a0001 	tst	sl, #1
   1708c:	0a0001bc 	beq	17784 <_svfprintf_r+0x1610>
   17090:	e59d5038 	ldr	r5, [sp, #56]	; 0x38
   17094:	e59d3088 	ldr	r3, [sp, #136]	; 0x88
   17098:	e59d7044 	ldr	r7, [sp, #68]	; 0x44
   1709c:	e0833005 	add	r3, r3, r5
   170a0:	e5847000 	str	r7, [r4]
   170a4:	e5845004 	str	r5, [r4, #4]
   170a8:	e58d3088 	str	r3, [sp, #136]	; 0x88
   170ac:	e59d3084 	ldr	r3, [sp, #132]	; 0x84
   170b0:	e2833001 	add	r3, r3, #1
   170b4:	e3530007 	cmp	r3, #7
   170b8:	e58d3084 	str	r3, [sp, #132]	; 0x84
   170bc:	d2844008 	addle	r4, r4, #8
   170c0:	da000006 	ble	170e0 <_svfprintf_r+0xf6c>
   170c4:	e59d0014 	ldr	r0, [sp, #20]
   170c8:	e1a0100b 	mov	r1, fp
   170cc:	e28d2080 	add	r2, sp, #128	; 0x80
   170d0:	eb000be0 	bl	1a058 <__ssprint_r>
   170d4:	e3500000 	cmp	r0, #0
   170d8:	1a0001f5 	bne	178b4 <_svfprintf_r+0x1740>
   170dc:	e28d40b4 	add	r4, sp, #180	; 0xb4
   170e0:	e59d701c 	ldr	r7, [sp, #28]
   170e4:	e2475001 	sub	r5, r7, #1
   170e8:	e3550000 	cmp	r5, #0
   170ec:	c59f64c4 	ldrgt	r6, [pc, #1220]	; 175b8 <_svfprintf_r+0x1444>
   170f0:	c3a07010 	movgt	r7, #16
   170f4:	ca000013 	bgt	17148 <_svfprintf_r+0xfd4>
   170f8:	ea0001a1 	b	17784 <_svfprintf_r+0x1610>
   170fc:	e59d3088 	ldr	r3, [sp, #136]	; 0x88
   17100:	e2833010 	add	r3, r3, #16
   17104:	e88400c0 	stm	r4, {r6, r7}
   17108:	e58d3088 	str	r3, [sp, #136]	; 0x88
   1710c:	e59d3084 	ldr	r3, [sp, #132]	; 0x84
   17110:	e2833001 	add	r3, r3, #1
   17114:	e3530007 	cmp	r3, #7
   17118:	e58d3084 	str	r3, [sp, #132]	; 0x84
   1711c:	d2844008 	addle	r4, r4, #8
   17120:	da000006 	ble	17140 <_svfprintf_r+0xfcc>
   17124:	e59d0014 	ldr	r0, [sp, #20]
   17128:	e1a0100b 	mov	r1, fp
   1712c:	e28d2080 	add	r2, sp, #128	; 0x80
   17130:	eb000bc8 	bl	1a058 <__ssprint_r>
   17134:	e3500000 	cmp	r0, #0
   17138:	1a0001dd 	bne	178b4 <_svfprintf_r+0x1740>
   1713c:	e28d40b4 	add	r4, sp, #180	; 0xb4
   17140:	e2455010 	sub	r5, r5, #16
   17144:	eaffffff 	b	17148 <_svfprintf_r+0xfd4>
   17148:	e3550010 	cmp	r5, #16
   1714c:	caffffea 	bgt	170fc <_svfprintf_r+0xf88>
   17150:	e59f3460 	ldr	r3, [pc, #1120]	; 175b8 <_svfprintf_r+0x1444>
   17154:	e8840028 	stm	r4, {r3, r5}
   17158:	e59d3088 	ldr	r3, [sp, #136]	; 0x88
   1715c:	e0835005 	add	r5, r3, r5
   17160:	e58d5088 	str	r5, [sp, #136]	; 0x88
   17164:	ea000106 	b	17584 <_svfprintf_r+0x1410>
   17168:	e59d3064 	ldr	r3, [sp, #100]	; 0x64
   1716c:	e3530000 	cmp	r3, #0
   17170:	ca000060 	bgt	172f8 <_svfprintf_r+0x1184>
   17174:	e59f3438 	ldr	r3, [pc, #1080]	; 175b4 <_svfprintf_r+0x1440>
   17178:	e5843000 	str	r3, [r4]
   1717c:	e3a03001 	mov	r3, #1
   17180:	e5843004 	str	r3, [r4, #4]
   17184:	e59d3088 	ldr	r3, [sp, #136]	; 0x88
   17188:	e2833001 	add	r3, r3, #1
   1718c:	e58d3088 	str	r3, [sp, #136]	; 0x88
   17190:	e59d3084 	ldr	r3, [sp, #132]	; 0x84
   17194:	e2833001 	add	r3, r3, #1
   17198:	e3530007 	cmp	r3, #7
   1719c:	e58d3084 	str	r3, [sp, #132]	; 0x84
   171a0:	d2844008 	addle	r4, r4, #8
   171a4:	da000006 	ble	171c4 <_svfprintf_r+0x1050>
   171a8:	e59d0014 	ldr	r0, [sp, #20]
   171ac:	e1a0100b 	mov	r1, fp
   171b0:	e28d2080 	add	r2, sp, #128	; 0x80
   171b4:	eb000ba7 	bl	1a058 <__ssprint_r>
   171b8:	e3500000 	cmp	r0, #0
   171bc:	1a0001bc 	bne	178b4 <_svfprintf_r+0x1740>
   171c0:	e28d40b4 	add	r4, sp, #180	; 0xb4
   171c4:	e59d3064 	ldr	r3, [sp, #100]	; 0x64
   171c8:	e3530000 	cmp	r3, #0
   171cc:	1a000004 	bne	171e4 <_svfprintf_r+0x1070>
   171d0:	e59d701c 	ldr	r7, [sp, #28]
   171d4:	e3570000 	cmp	r7, #0
   171d8:	1a000001 	bne	171e4 <_svfprintf_r+0x1070>
   171dc:	e31a0001 	tst	sl, #1
   171e0:	0a000167 	beq	17784 <_svfprintf_r+0x1610>
   171e4:	e59d7044 	ldr	r7, [sp, #68]	; 0x44
   171e8:	e59d3088 	ldr	r3, [sp, #136]	; 0x88
   171ec:	e5847000 	str	r7, [r4]
   171f0:	e59d7038 	ldr	r7, [sp, #56]	; 0x38
   171f4:	e0833007 	add	r3, r3, r7
   171f8:	e5847004 	str	r7, [r4, #4]
   171fc:	e58d3088 	str	r3, [sp, #136]	; 0x88
   17200:	e59d3084 	ldr	r3, [sp, #132]	; 0x84
   17204:	e2833001 	add	r3, r3, #1
   17208:	e3530007 	cmp	r3, #7
   1720c:	e58d3084 	str	r3, [sp, #132]	; 0x84
   17210:	d2844008 	addle	r4, r4, #8
   17214:	da000006 	ble	17234 <_svfprintf_r+0x10c0>
   17218:	e59d0014 	ldr	r0, [sp, #20]
   1721c:	e1a0100b 	mov	r1, fp
   17220:	e28d2080 	add	r2, sp, #128	; 0x80
   17224:	eb000b8b 	bl	1a058 <__ssprint_r>
   17228:	e3500000 	cmp	r0, #0
   1722c:	1a0001a0 	bne	178b4 <_svfprintf_r+0x1740>
   17230:	e28d40b4 	add	r4, sp, #180	; 0xb4
   17234:	e59d6064 	ldr	r6, [sp, #100]	; 0x64
   17238:	e2666000 	rsb	r6, r6, #0
   1723c:	e3560000 	cmp	r6, #0
   17240:	c59f7370 	ldrgt	r7, [pc, #880]	; 175b8 <_svfprintf_r+0x1444>
   17244:	c3a08010 	movgt	r8, #16
   17248:	ca000013 	bgt	1729c <_svfprintf_r+0x1128>
   1724c:	ea000026 	b	172ec <_svfprintf_r+0x1178>
   17250:	e59d3088 	ldr	r3, [sp, #136]	; 0x88
   17254:	e2833010 	add	r3, r3, #16
   17258:	e8840180 	stm	r4, {r7, r8}
   1725c:	e58d3088 	str	r3, [sp, #136]	; 0x88
   17260:	e59d3084 	ldr	r3, [sp, #132]	; 0x84
   17264:	e2833001 	add	r3, r3, #1
   17268:	e3530007 	cmp	r3, #7
   1726c:	e58d3084 	str	r3, [sp, #132]	; 0x84
   17270:	d2844008 	addle	r4, r4, #8
   17274:	da000006 	ble	17294 <_svfprintf_r+0x1120>
   17278:	e59d0014 	ldr	r0, [sp, #20]
   1727c:	e1a0100b 	mov	r1, fp
   17280:	e28d2080 	add	r2, sp, #128	; 0x80
   17284:	eb000b73 	bl	1a058 <__ssprint_r>
   17288:	e3500000 	cmp	r0, #0
   1728c:	1a000188 	bne	178b4 <_svfprintf_r+0x1740>
   17290:	e28d40b4 	add	r4, sp, #180	; 0xb4
   17294:	e2466010 	sub	r6, r6, #16
   17298:	eaffffff 	b	1729c <_svfprintf_r+0x1128>
   1729c:	e3560010 	cmp	r6, #16
   172a0:	caffffea 	bgt	17250 <_svfprintf_r+0x10dc>
   172a4:	e59f330c 	ldr	r3, [pc, #780]	; 175b8 <_svfprintf_r+0x1444>
   172a8:	e8840048 	stm	r4, {r3, r6}
   172ac:	e59d3088 	ldr	r3, [sp, #136]	; 0x88
   172b0:	e0836006 	add	r6, r3, r6
   172b4:	e59d3084 	ldr	r3, [sp, #132]	; 0x84
   172b8:	e2833001 	add	r3, r3, #1
   172bc:	e3530007 	cmp	r3, #7
   172c0:	e58d6088 	str	r6, [sp, #136]	; 0x88
   172c4:	e58d3084 	str	r3, [sp, #132]	; 0x84
   172c8:	d2844008 	addle	r4, r4, #8
   172cc:	da000006 	ble	172ec <_svfprintf_r+0x1178>
   172d0:	e59d0014 	ldr	r0, [sp, #20]
   172d4:	e1a0100b 	mov	r1, fp
   172d8:	e28d2080 	add	r2, sp, #128	; 0x80
   172dc:	eb000b5d 	bl	1a058 <__ssprint_r>
   172e0:	e3500000 	cmp	r0, #0
   172e4:	1a000172 	bne	178b4 <_svfprintf_r+0x1740>
   172e8:	e28d40b4 	add	r4, sp, #180	; 0xb4
   172ec:	e5845000 	str	r5, [r4]
   172f0:	e59d501c 	ldr	r5, [sp, #28]
   172f4:	ea00011d 	b	17770 <_svfprintf_r+0x15fc>
   172f8:	e59d601c 	ldr	r6, [sp, #28]
   172fc:	e59d701c 	ldr	r7, [sp, #28]
   17300:	e1560008 	cmp	r6, r8
   17304:	a1a06008 	movge	r6, r8
   17308:	e0857007 	add	r7, r5, r7
   1730c:	e3560000 	cmp	r6, #0
   17310:	e58d7018 	str	r7, [sp, #24]
   17314:	da000010 	ble	1735c <_svfprintf_r+0x11e8>
   17318:	e59d3088 	ldr	r3, [sp, #136]	; 0x88
   1731c:	e0833006 	add	r3, r3, r6
   17320:	e8840060 	stm	r4, {r5, r6}
   17324:	e58d3088 	str	r3, [sp, #136]	; 0x88
   17328:	e59d3084 	ldr	r3, [sp, #132]	; 0x84
   1732c:	e2833001 	add	r3, r3, #1
   17330:	e3530007 	cmp	r3, #7
   17334:	e58d3084 	str	r3, [sp, #132]	; 0x84
   17338:	d2844008 	addle	r4, r4, #8
   1733c:	da000006 	ble	1735c <_svfprintf_r+0x11e8>
   17340:	e59d0014 	ldr	r0, [sp, #20]
   17344:	e1a0100b 	mov	r1, fp
   17348:	e28d2080 	add	r2, sp, #128	; 0x80
   1734c:	eb000b41 	bl	1a058 <__ssprint_r>
   17350:	e3500000 	cmp	r0, #0
   17354:	1a000156 	bne	178b4 <_svfprintf_r+0x1740>
   17358:	e28d40b4 	add	r4, sp, #180	; 0xb4
   1735c:	e1c66fc6 	bic	r6, r6, r6, asr #31
   17360:	e0666008 	rsb	r6, r6, r8
   17364:	e3560000 	cmp	r6, #0
   17368:	c59f7248 	ldrgt	r7, [pc, #584]	; 175b8 <_svfprintf_r+0x1444>
   1736c:	c3a0c010 	movgt	ip, #16
   17370:	ca000015 	bgt	173cc <_svfprintf_r+0x1258>
   17374:	ea000028 	b	1741c <_svfprintf_r+0x12a8>
   17378:	e59d3088 	ldr	r3, [sp, #136]	; 0x88
   1737c:	e2833010 	add	r3, r3, #16
   17380:	e8841080 	stm	r4, {r7, ip}
   17384:	e58d3088 	str	r3, [sp, #136]	; 0x88
   17388:	e59d3084 	ldr	r3, [sp, #132]	; 0x84
   1738c:	e2833001 	add	r3, r3, #1
   17390:	e3530007 	cmp	r3, #7
   17394:	e58d3084 	str	r3, [sp, #132]	; 0x84
   17398:	d2844008 	addle	r4, r4, #8
   1739c:	da000008 	ble	173c4 <_svfprintf_r+0x1250>
   173a0:	e59d0014 	ldr	r0, [sp, #20]
   173a4:	e1a0100b 	mov	r1, fp
   173a8:	e28d2080 	add	r2, sp, #128	; 0x80
   173ac:	e58dc010 	str	ip, [sp, #16]
   173b0:	eb000b28 	bl	1a058 <__ssprint_r>
   173b4:	e3500000 	cmp	r0, #0
   173b8:	e59dc010 	ldr	ip, [sp, #16]
   173bc:	1a00013c 	bne	178b4 <_svfprintf_r+0x1740>
   173c0:	e28d40b4 	add	r4, sp, #180	; 0xb4
   173c4:	e2466010 	sub	r6, r6, #16
   173c8:	eaffffff 	b	173cc <_svfprintf_r+0x1258>
   173cc:	e3560010 	cmp	r6, #16
   173d0:	caffffe8 	bgt	17378 <_svfprintf_r+0x1204>
   173d4:	e59f31dc 	ldr	r3, [pc, #476]	; 175b8 <_svfprintf_r+0x1444>
   173d8:	e8840048 	stm	r4, {r3, r6}
   173dc:	e59d3088 	ldr	r3, [sp, #136]	; 0x88
   173e0:	e0836006 	add	r6, r3, r6
   173e4:	e59d3084 	ldr	r3, [sp, #132]	; 0x84
   173e8:	e2833001 	add	r3, r3, #1
   173ec:	e3530007 	cmp	r3, #7
   173f0:	e58d6088 	str	r6, [sp, #136]	; 0x88
   173f4:	e58d3084 	str	r3, [sp, #132]	; 0x84
   173f8:	d2844008 	addle	r4, r4, #8
   173fc:	da000006 	ble	1741c <_svfprintf_r+0x12a8>
   17400:	e59d0014 	ldr	r0, [sp, #20]
   17404:	e1a0100b 	mov	r1, fp
   17408:	e28d2080 	add	r2, sp, #128	; 0x80
   1740c:	eb000b11 	bl	1a058 <__ssprint_r>
   17410:	e3500000 	cmp	r0, #0
   17414:	1a000126 	bne	178b4 <_svfprintf_r+0x1740>
   17418:	e28d40b4 	add	r4, sp, #180	; 0xb4
   1741c:	e59d3064 	ldr	r3, [sp, #100]	; 0x64
   17420:	e59d701c 	ldr	r7, [sp, #28]
   17424:	e1530007 	cmp	r3, r7
   17428:	e0855008 	add	r5, r5, r8
   1742c:	ba000001 	blt	17438 <_svfprintf_r+0x12c4>
   17430:	e31a0001 	tst	sl, #1
   17434:	0a000013 	beq	17488 <_svfprintf_r+0x1314>
   17438:	e59d7044 	ldr	r7, [sp, #68]	; 0x44
   1743c:	e59d3088 	ldr	r3, [sp, #136]	; 0x88
   17440:	e5847000 	str	r7, [r4]
   17444:	e59d7038 	ldr	r7, [sp, #56]	; 0x38
   17448:	e0833007 	add	r3, r3, r7
   1744c:	e5847004 	str	r7, [r4, #4]
   17450:	e58d3088 	str	r3, [sp, #136]	; 0x88
   17454:	e59d3084 	ldr	r3, [sp, #132]	; 0x84
   17458:	e2833001 	add	r3, r3, #1
   1745c:	e3530007 	cmp	r3, #7
   17460:	e58d3084 	str	r3, [sp, #132]	; 0x84
   17464:	d2844008 	addle	r4, r4, #8
   17468:	da000006 	ble	17488 <_svfprintf_r+0x1314>
   1746c:	e59d0014 	ldr	r0, [sp, #20]
   17470:	e1a0100b 	mov	r1, fp
   17474:	e28d2080 	add	r2, sp, #128	; 0x80
   17478:	eb000af6 	bl	1a058 <__ssprint_r>
   1747c:	e3500000 	cmp	r0, #0
   17480:	1a00010b 	bne	178b4 <_svfprintf_r+0x1740>
   17484:	e28d40b4 	add	r4, sp, #180	; 0xb4
   17488:	e59d3018 	ldr	r3, [sp, #24]
   1748c:	e59d701c 	ldr	r7, [sp, #28]
   17490:	e0652003 	rsb	r2, r5, r3
   17494:	e59d3064 	ldr	r3, [sp, #100]	; 0x64
   17498:	e0633007 	rsb	r3, r3, r7
   1749c:	e1520003 	cmp	r2, r3
   174a0:	b1a06002 	movlt	r6, r2
   174a4:	a1a06003 	movge	r6, r3
   174a8:	e3560000 	cmp	r6, #0
   174ac:	da000010 	ble	174f4 <_svfprintf_r+0x1380>
   174b0:	e59d3088 	ldr	r3, [sp, #136]	; 0x88
   174b4:	e0833006 	add	r3, r3, r6
   174b8:	e8840060 	stm	r4, {r5, r6}
   174bc:	e58d3088 	str	r3, [sp, #136]	; 0x88
   174c0:	e59d3084 	ldr	r3, [sp, #132]	; 0x84
   174c4:	e2833001 	add	r3, r3, #1
   174c8:	e3530007 	cmp	r3, #7
   174cc:	e58d3084 	str	r3, [sp, #132]	; 0x84
   174d0:	d2844008 	addle	r4, r4, #8
   174d4:	da000006 	ble	174f4 <_svfprintf_r+0x1380>
   174d8:	e59d0014 	ldr	r0, [sp, #20]
   174dc:	e1a0100b 	mov	r1, fp
   174e0:	e28d2080 	add	r2, sp, #128	; 0x80
   174e4:	eb000adb 	bl	1a058 <__ssprint_r>
   174e8:	e3500000 	cmp	r0, #0
   174ec:	1a0000f0 	bne	178b4 <_svfprintf_r+0x1740>
   174f0:	e28d40b4 	add	r4, sp, #180	; 0xb4
   174f4:	e59d501c 	ldr	r5, [sp, #28]
   174f8:	e59d3064 	ldr	r3, [sp, #100]	; 0x64
   174fc:	e1c62fc6 	bic	r2, r6, r6, asr #31
   17500:	e0633005 	rsb	r3, r3, r5
   17504:	e0627003 	rsb	r7, r2, r3
   17508:	e3570000 	cmp	r7, #0
   1750c:	c59f50a4 	ldrgt	r5, [pc, #164]	; 175b8 <_svfprintf_r+0x1444>
   17510:	c3a06010 	movgt	r6, #16
   17514:	ca000013 	bgt	17568 <_svfprintf_r+0x13f4>
   17518:	ea000099 	b	17784 <_svfprintf_r+0x1610>
   1751c:	e59d3088 	ldr	r3, [sp, #136]	; 0x88
   17520:	e2833010 	add	r3, r3, #16
   17524:	e8840060 	stm	r4, {r5, r6}
   17528:	e58d3088 	str	r3, [sp, #136]	; 0x88
   1752c:	e59d3084 	ldr	r3, [sp, #132]	; 0x84
   17530:	e2833001 	add	r3, r3, #1
   17534:	e3530007 	cmp	r3, #7
   17538:	e58d3084 	str	r3, [sp, #132]	; 0x84
   1753c:	d2844008 	addle	r4, r4, #8
   17540:	da000006 	ble	17560 <_svfprintf_r+0x13ec>
   17544:	e59d0014 	ldr	r0, [sp, #20]
   17548:	e1a0100b 	mov	r1, fp
   1754c:	e28d2080 	add	r2, sp, #128	; 0x80
   17550:	eb000ac0 	bl	1a058 <__ssprint_r>
   17554:	e3500000 	cmp	r0, #0
   17558:	1a0000d5 	bne	178b4 <_svfprintf_r+0x1740>
   1755c:	e28d40b4 	add	r4, sp, #180	; 0xb4
   17560:	e2477010 	sub	r7, r7, #16
   17564:	eaffffff 	b	17568 <_svfprintf_r+0x13f4>
   17568:	e3570010 	cmp	r7, #16
   1756c:	caffffea 	bgt	1751c <_svfprintf_r+0x13a8>
   17570:	e59f3040 	ldr	r3, [pc, #64]	; 175b8 <_svfprintf_r+0x1444>
   17574:	e8840088 	stm	r4, {r3, r7}
   17578:	e59d3088 	ldr	r3, [sp, #136]	; 0x88
   1757c:	e0833007 	add	r3, r3, r7
   17580:	e58d3088 	str	r3, [sp, #136]	; 0x88
   17584:	e59d3084 	ldr	r3, [sp, #132]	; 0x84
   17588:	e2833001 	add	r3, r3, #1
   1758c:	e3530007 	cmp	r3, #7
   17590:	e58d3084 	str	r3, [sp, #132]	; 0x84
   17594:	cafffe91 	bgt	16fe0 <_svfprintf_r+0xe6c>
   17598:	ea000078 	b	17780 <_svfprintf_r+0x160c>
   1759c:	0001c8e4 	.word	0x0001c8e4
   175a0:	0001c8e0 	.word	0x0001c8e0
   175a4:	0001c8e8 	.word	0x0001c8e8
   175a8:	0001c8ec 	.word	0x0001c8ec
   175ac:	0001c8f0 	.word	0x0001c8f0
   175b0:	0001c8cf 	.word	0x0001c8cf
   175b4:	0001c901 	.word	0x0001c901
   175b8:	0001c391 	.word	0x0001c391
   175bc:	0001c381 	.word	0x0001c381
   175c0:	e3a03001 	mov	r3, #1
   175c4:	e5843004 	str	r3, [r4, #4]
   175c8:	e59d3088 	ldr	r3, [sp, #136]	; 0x88
   175cc:	e2833001 	add	r3, r3, #1
   175d0:	e5845000 	str	r5, [r4]
   175d4:	e59d701c 	ldr	r7, [sp, #28]
   175d8:	e58d3088 	str	r3, [sp, #136]	; 0x88
   175dc:	e59d3084 	ldr	r3, [sp, #132]	; 0x84
   175e0:	e3570001 	cmp	r7, #1
   175e4:	e2833001 	add	r3, r3, #1
   175e8:	e58d3084 	str	r3, [sp, #132]	; 0x84
   175ec:	ca000001 	bgt	175f8 <_svfprintf_r+0x1484>
   175f0:	e31a0001 	tst	sl, #1
   175f4:	0a000057 	beq	17758 <_svfprintf_r+0x15e4>
   175f8:	e3530007 	cmp	r3, #7
   175fc:	d2844008 	addle	r4, r4, #8
   17600:	da000006 	ble	17620 <_svfprintf_r+0x14ac>
   17604:	e59d0014 	ldr	r0, [sp, #20]
   17608:	e1a0100b 	mov	r1, fp
   1760c:	e28d2080 	add	r2, sp, #128	; 0x80
   17610:	eb000a90 	bl	1a058 <__ssprint_r>
   17614:	e3500000 	cmp	r0, #0
   17618:	1a0000a5 	bne	178b4 <_svfprintf_r+0x1740>
   1761c:	e28d40b4 	add	r4, sp, #180	; 0xb4
   17620:	e59d7044 	ldr	r7, [sp, #68]	; 0x44
   17624:	e59d3088 	ldr	r3, [sp, #136]	; 0x88
   17628:	e5847000 	str	r7, [r4]
   1762c:	e59d7038 	ldr	r7, [sp, #56]	; 0x38
   17630:	e0833007 	add	r3, r3, r7
   17634:	e5847004 	str	r7, [r4, #4]
   17638:	e58d3088 	str	r3, [sp, #136]	; 0x88
   1763c:	e59d3084 	ldr	r3, [sp, #132]	; 0x84
   17640:	e2833001 	add	r3, r3, #1
   17644:	e3530007 	cmp	r3, #7
   17648:	e58d3084 	str	r3, [sp, #132]	; 0x84
   1764c:	d2844008 	addle	r4, r4, #8
   17650:	da000006 	ble	17670 <_svfprintf_r+0x14fc>
   17654:	e59d0014 	ldr	r0, [sp, #20]
   17658:	e1a0100b 	mov	r1, fp
   1765c:	e28d2080 	add	r2, sp, #128	; 0x80
   17660:	eb000a7c 	bl	1a058 <__ssprint_r>
   17664:	e3500000 	cmp	r0, #0
   17668:	1a000091 	bne	178b4 <_svfprintf_r+0x1740>
   1766c:	e28d40b4 	add	r4, sp, #180	; 0xb4
   17670:	e3a03000 	mov	r3, #0
   17674:	e28d1028 	add	r1, sp, #40	; 0x28
   17678:	e8910003 	ldm	r1, {r0, r1}
   1767c:	e3a02000 	mov	r2, #0
   17680:	eb0012dd 	bl	1c1fc <__cmpdf2>
   17684:	e59d701c 	ldr	r7, [sp, #28]
   17688:	e3500000 	cmp	r0, #0
   1768c:	e2473001 	sub	r3, r7, #1
   17690:	0a00000e 	beq	176d0 <_svfprintf_r+0x155c>
   17694:	e2855001 	add	r5, r5, #1
   17698:	e5845000 	str	r5, [r4]
   1769c:	e59d5088 	ldr	r5, [sp, #136]	; 0x88
   176a0:	e5843004 	str	r3, [r4, #4]
   176a4:	e0853003 	add	r3, r5, r3
   176a8:	e58d3088 	str	r3, [sp, #136]	; 0x88
   176ac:	ea000026 	b	1774c <_svfprintf_r+0x15d8>
   176b0:	e59d0014 	ldr	r0, [sp, #20]
   176b4:	e1a0100b 	mov	r1, fp
   176b8:	e28d2080 	add	r2, sp, #128	; 0x80
   176bc:	eb000a65 	bl	1a058 <__ssprint_r>
   176c0:	e3500000 	cmp	r0, #0
   176c4:	1a00007a 	bne	178b4 <_svfprintf_r+0x1740>
   176c8:	e28d40b4 	add	r4, sp, #180	; 0xb4
   176cc:	ea000024 	b	17764 <_svfprintf_r+0x15f0>
   176d0:	e2535000 	subs	r5, r3, #0
   176d4:	c51f6124 	ldrgt	r6, [pc, #-292]	; 175b8 <_svfprintf_r+0x1444>
   176d8:	c3a07010 	movgt	r7, #16
   176dc:	ca000013 	bgt	17730 <_svfprintf_r+0x15bc>
   176e0:	ea00001f 	b	17764 <_svfprintf_r+0x15f0>
   176e4:	e59d3088 	ldr	r3, [sp, #136]	; 0x88
   176e8:	e2833010 	add	r3, r3, #16
   176ec:	e88400c0 	stm	r4, {r6, r7}
   176f0:	e58d3088 	str	r3, [sp, #136]	; 0x88
   176f4:	e59d3084 	ldr	r3, [sp, #132]	; 0x84
   176f8:	e2833001 	add	r3, r3, #1
   176fc:	e3530007 	cmp	r3, #7
   17700:	e58d3084 	str	r3, [sp, #132]	; 0x84
   17704:	d2844008 	addle	r4, r4, #8
   17708:	da000006 	ble	17728 <_svfprintf_r+0x15b4>
   1770c:	e59d0014 	ldr	r0, [sp, #20]
   17710:	e1a0100b 	mov	r1, fp
   17714:	e28d2080 	add	r2, sp, #128	; 0x80
   17718:	eb000a4e 	bl	1a058 <__ssprint_r>
   1771c:	e3500000 	cmp	r0, #0
   17720:	1a000063 	bne	178b4 <_svfprintf_r+0x1740>
   17724:	e28d40b4 	add	r4, sp, #180	; 0xb4
   17728:	e2455010 	sub	r5, r5, #16
   1772c:	eaffffff 	b	17730 <_svfprintf_r+0x15bc>
   17730:	e3550010 	cmp	r5, #16
   17734:	caffffea 	bgt	176e4 <_svfprintf_r+0x1570>
   17738:	e51f3188 	ldr	r3, [pc, #-392]	; 175b8 <_svfprintf_r+0x1444>
   1773c:	e8840028 	stm	r4, {r3, r5}
   17740:	e59d3088 	ldr	r3, [sp, #136]	; 0x88
   17744:	e0835005 	add	r5, r3, r5
   17748:	e58d5088 	str	r5, [sp, #136]	; 0x88
   1774c:	e59d3084 	ldr	r3, [sp, #132]	; 0x84
   17750:	e2833001 	add	r3, r3, #1
   17754:	e58d3084 	str	r3, [sp, #132]	; 0x84
   17758:	e3530007 	cmp	r3, #7
   1775c:	caffffd3 	bgt	176b0 <_svfprintf_r+0x153c>
   17760:	e2844008 	add	r4, r4, #8
   17764:	e28d3070 	add	r3, sp, #112	; 0x70
   17768:	e5843000 	str	r3, [r4]
   1776c:	e59d5048 	ldr	r5, [sp, #72]	; 0x48
   17770:	e59d3088 	ldr	r3, [sp, #136]	; 0x88
   17774:	e5845004 	str	r5, [r4, #4]
   17778:	e0833005 	add	r3, r3, r5
   1777c:	eaffff7f 	b	17580 <_svfprintf_r+0x140c>
   17780:	e2844008 	add	r4, r4, #8
   17784:	e31a0004 	tst	sl, #4
   17788:	1a00000a 	bne	177b8 <_svfprintf_r+0x1644>
   1778c:	e59d7030 	ldr	r7, [sp, #48]	; 0x30
   17790:	e59d4020 	ldr	r4, [sp, #32]
   17794:	e59d5034 	ldr	r5, [sp, #52]	; 0x34
   17798:	e59d3088 	ldr	r3, [sp, #136]	; 0x88
   1779c:	e1540005 	cmp	r4, r5
   177a0:	a0877004 	addge	r7, r7, r4
   177a4:	b0877005 	addlt	r7, r7, r5
   177a8:	e3530000 	cmp	r3, #0
   177ac:	e58d7030 	str	r7, [sp, #48]	; 0x30
   177b0:	0a00002e 	beq	17870 <_svfprintf_r+0x16fc>
   177b4:	ea000031 	b	17880 <_svfprintf_r+0x170c>
   177b8:	e59d7034 	ldr	r7, [sp, #52]	; 0x34
   177bc:	e59d1020 	ldr	r1, [sp, #32]
   177c0:	e0615007 	rsb	r5, r1, r7
   177c4:	e3550000 	cmp	r5, #0
   177c8:	c51f6214 	ldrgt	r6, [pc, #-532]	; 175bc <_svfprintf_r+0x1448>
   177cc:	c3a07010 	movgt	r7, #16
   177d0:	ca000013 	bgt	17824 <_svfprintf_r+0x16b0>
   177d4:	eaffffec 	b	1778c <_svfprintf_r+0x1618>
   177d8:	e59d3088 	ldr	r3, [sp, #136]	; 0x88
   177dc:	e2833010 	add	r3, r3, #16
   177e0:	e88400c0 	stm	r4, {r6, r7}
   177e4:	e58d3088 	str	r3, [sp, #136]	; 0x88
   177e8:	e59d3084 	ldr	r3, [sp, #132]	; 0x84
   177ec:	e2833001 	add	r3, r3, #1
   177f0:	e3530007 	cmp	r3, #7
   177f4:	e58d3084 	str	r3, [sp, #132]	; 0x84
   177f8:	d2844008 	addle	r4, r4, #8
   177fc:	da000006 	ble	1781c <_svfprintf_r+0x16a8>
   17800:	e59d0014 	ldr	r0, [sp, #20]
   17804:	e1a0100b 	mov	r1, fp
   17808:	e28d2080 	add	r2, sp, #128	; 0x80
   1780c:	eb000a11 	bl	1a058 <__ssprint_r>
   17810:	e3500000 	cmp	r0, #0
   17814:	1a000026 	bne	178b4 <_svfprintf_r+0x1740>
   17818:	e28d40b4 	add	r4, sp, #180	; 0xb4
   1781c:	e2455010 	sub	r5, r5, #16
   17820:	eaffffff 	b	17824 <_svfprintf_r+0x16b0>
   17824:	e3550010 	cmp	r5, #16
   17828:	caffffea 	bgt	177d8 <_svfprintf_r+0x1664>
   1782c:	e51f3278 	ldr	r3, [pc, #-632]	; 175bc <_svfprintf_r+0x1448>
   17830:	e8840028 	stm	r4, {r3, r5}
   17834:	e59d3088 	ldr	r3, [sp, #136]	; 0x88
   17838:	e0835005 	add	r5, r3, r5
   1783c:	e59d3084 	ldr	r3, [sp, #132]	; 0x84
   17840:	e2833001 	add	r3, r3, #1
   17844:	e3530007 	cmp	r3, #7
   17848:	e58d5088 	str	r5, [sp, #136]	; 0x88
   1784c:	e58d3084 	str	r3, [sp, #132]	; 0x84
   17850:	daffffcd 	ble	1778c <_svfprintf_r+0x1618>
   17854:	e59d0014 	ldr	r0, [sp, #20]
   17858:	e1a0100b 	mov	r1, fp
   1785c:	e28d2080 	add	r2, sp, #128	; 0x80
   17860:	eb0009fc 	bl	1a058 <__ssprint_r>
   17864:	e3500000 	cmp	r0, #0
   17868:	0affffc7 	beq	1778c <_svfprintf_r+0x1618>
   1786c:	ea000010 	b	178b4 <_svfprintf_r+0x1740>
   17870:	e3a03000 	mov	r3, #0
   17874:	e58d3084 	str	r3, [sp, #132]	; 0x84
   17878:	e28d40b4 	add	r4, sp, #180	; 0xb4
   1787c:	eafffa6c 	b	16234 <_svfprintf_r+0xc0>
   17880:	e59d0014 	ldr	r0, [sp, #20]
   17884:	e1a0100b 	mov	r1, fp
   17888:	e28d2080 	add	r2, sp, #128	; 0x80
   1788c:	eb0009f1 	bl	1a058 <__ssprint_r>
   17890:	e3500000 	cmp	r0, #0
   17894:	0afffff5 	beq	17870 <_svfprintf_r+0x16fc>
   17898:	ea000005 	b	178b4 <_svfprintf_r+0x1740>
   1789c:	e59d3088 	ldr	r3, [sp, #136]	; 0x88
   178a0:	e3530000 	cmp	r3, #0
   178a4:	159d0014 	ldrne	r0, [sp, #20]
   178a8:	11a0100b 	movne	r1, fp
   178ac:	128d2080 	addne	r2, sp, #128	; 0x80
   178b0:	1b0009e8 	blne	1a058 <__ssprint_r>
   178b4:	e1db30bc 	ldrh	r3, [fp, #12]
   178b8:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
   178bc:	e3130040 	tst	r3, #64	; 0x40
   178c0:	13e04000 	mvnne	r4, #0
   178c4:	e58d4030 	str	r4, [sp, #48]	; 0x30
   178c8:	e59d0030 	ldr	r0, [sp, #48]	; 0x30
   178cc:	e28dd0f4 	add	sp, sp, #244	; 0xf4
   178d0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000178d4 <quorem>:
   178d4:	e5913010 	ldr	r3, [r1, #16]
   178d8:	e5902010 	ldr	r2, [r0, #16]
   178dc:	e1520003 	cmp	r2, r3
   178e0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   178e4:	e1a04000 	mov	r4, r0
   178e8:	e1a07001 	mov	r7, r1
   178ec:	ba000062 	blt	17a7c <quorem+0x1a8>
   178f0:	e2435001 	sub	r5, r3, #1
   178f4:	e2833004 	add	r3, r3, #4
   178f8:	e0819103 	add	r9, r1, r3, lsl #2
   178fc:	e281a014 	add	sl, r1, #20
   17900:	e7911103 	ldr	r1, [r1, r3, lsl #2]
   17904:	e2808014 	add	r8, r0, #20
   17908:	e2811001 	add	r1, r1, #1
   1790c:	e7900103 	ldr	r0, [r0, r3, lsl #2]
   17910:	eb000f14 	bl	1b568 <__aeabi_uidiv>
   17914:	e2506000 	subs	r6, r0, #0
   17918:	0a00002c 	beq	179d0 <quorem+0xfc>
   1791c:	e3a01000 	mov	r1, #0
   17920:	e1a03008 	mov	r3, r8
   17924:	e1a0200a 	mov	r2, sl
   17928:	e1a0e001 	mov	lr, r1
   1792c:	e492b004 	ldr	fp, [r2], #4
   17930:	e1a0080b 	lsl	r0, fp, #16
   17934:	e1a00820 	lsr	r0, r0, #16
   17938:	e1a0b82b 	lsr	fp, fp, #16
   1793c:	e0201096 	mla	r0, r6, r0, r1
   17940:	e00b0b96 	mul	fp, r6, fp
   17944:	e1d3c0b0 	ldrh	ip, [r3]
   17948:	e08bb820 	add	fp, fp, r0, lsr #16
   1794c:	e08cc00e 	add	ip, ip, lr
   17950:	e1a00800 	lsl	r0, r0, #16
   17954:	e04cc820 	sub	ip, ip, r0, lsr #16
   17958:	e1d300b2 	ldrh	r0, [r3, #2]
   1795c:	e1a0182b 	lsr	r1, fp, #16
   17960:	e1a0b80b 	lsl	fp, fp, #16
   17964:	e040082b 	sub	r0, r0, fp, lsr #16
   17968:	e080084c 	add	r0, r0, ip, asr #16
   1796c:	e1a0c80c 	lsl	ip, ip, #16
   17970:	e1a0c82c 	lsr	ip, ip, #16
   17974:	e1a0e840 	asr	lr, r0, #16
   17978:	e1520009 	cmp	r2, r9
   1797c:	e18c0800 	orr	r0, ip, r0, lsl #16
   17980:	e4830004 	str	r0, [r3], #4
   17984:	9affffe8 	bls	1792c <quorem+0x58>
   17988:	e2853005 	add	r3, r5, #5
   1798c:	e7942103 	ldr	r2, [r4, r3, lsl #2]
   17990:	e3520000 	cmp	r2, #0
   17994:	1a00000d 	bne	179d0 <quorem+0xfc>
   17998:	e0843103 	add	r3, r4, r3, lsl #2
   1799c:	e2433004 	sub	r3, r3, #4
   179a0:	ea000000 	b	179a8 <quorem+0xd4>
   179a4:	e2455001 	sub	r5, r5, #1
   179a8:	e1530008 	cmp	r3, r8
   179ac:	e1a02003 	mov	r2, r3
   179b0:	8a000001 	bhi	179bc <quorem+0xe8>
   179b4:	e5845010 	str	r5, [r4, #16]
   179b8:	ea000004 	b	179d0 <quorem+0xfc>
   179bc:	e5922000 	ldr	r2, [r2]
   179c0:	e3520000 	cmp	r2, #0
   179c4:	e2433004 	sub	r3, r3, #4
   179c8:	0afffff5 	beq	179a4 <quorem+0xd0>
   179cc:	eafffff8 	b	179b4 <quorem+0xe0>
   179d0:	e1a00004 	mov	r0, r4
   179d4:	e1a01007 	mov	r1, r7
   179d8:	eb00083d 	bl	19ad4 <__mcmp>
   179dc:	e3500000 	cmp	r0, #0
   179e0:	ba000023 	blt	17a74 <quorem+0x1a0>
   179e4:	e2866001 	add	r6, r6, #1
   179e8:	e1a03008 	mov	r3, r8
   179ec:	e3a00000 	mov	r0, #0
   179f0:	e49a2004 	ldr	r2, [sl], #4
   179f4:	e1d3c0b0 	ldrh	ip, [r3]
   179f8:	e1a01802 	lsl	r1, r2, #16
   179fc:	e04c1821 	sub	r1, ip, r1, lsr #16
   17a00:	e0811000 	add	r1, r1, r0
   17a04:	e1d300b2 	ldrh	r0, [r3, #2]
   17a08:	e0402822 	sub	r2, r0, r2, lsr #16
   17a0c:	e0822841 	add	r2, r2, r1, asr #16
   17a10:	e1a01801 	lsl	r1, r1, #16
   17a14:	e1a01821 	lsr	r1, r1, #16
   17a18:	e1a00842 	asr	r0, r2, #16
   17a1c:	e15a0009 	cmp	sl, r9
   17a20:	e1812802 	orr	r2, r1, r2, lsl #16
   17a24:	e4832004 	str	r2, [r3], #4
   17a28:	9afffff0 	bls	179f0 <quorem+0x11c>
   17a2c:	e2853005 	add	r3, r5, #5
   17a30:	e7942103 	ldr	r2, [r4, r3, lsl #2]
   17a34:	e3520000 	cmp	r2, #0
   17a38:	1a00000d 	bne	17a74 <quorem+0x1a0>
   17a3c:	e0843103 	add	r3, r4, r3, lsl #2
   17a40:	e2433004 	sub	r3, r3, #4
   17a44:	ea000000 	b	17a4c <quorem+0x178>
   17a48:	e2455001 	sub	r5, r5, #1
   17a4c:	e1530008 	cmp	r3, r8
   17a50:	e1a02003 	mov	r2, r3
   17a54:	8a000001 	bhi	17a60 <quorem+0x18c>
   17a58:	e5845010 	str	r5, [r4, #16]
   17a5c:	ea000004 	b	17a74 <quorem+0x1a0>
   17a60:	e5922000 	ldr	r2, [r2]
   17a64:	e3520000 	cmp	r2, #0
   17a68:	e2433004 	sub	r3, r3, #4
   17a6c:	0afffff5 	beq	17a48 <quorem+0x174>
   17a70:	eafffff8 	b	17a58 <quorem+0x184>
   17a74:	e1a00006 	mov	r0, r6
   17a78:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a7c:	e3a00000 	mov	r0, #0
   17a80:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017a84 <_dtoa_r>:
   17a84:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17a88:	e24dd058 	sub	sp, sp, #88	; 0x58
   17a8c:	e58d100c 	str	r1, [sp, #12]
   17a90:	e58d2010 	str	r2, [sp, #16]
   17a94:	e5901040 	ldr	r1, [r0, #64]	; 0x40
   17a98:	e3510000 	cmp	r1, #0
   17a9c:	e1a0a000 	mov	sl, r0
   17aa0:	e58d3030 	str	r3, [sp, #48]	; 0x30
   17aa4:	e59d4084 	ldr	r4, [sp, #132]	; 0x84
   17aa8:	0a000007 	beq	17acc <_dtoa_r+0x48>
   17aac:	e5903044 	ldr	r3, [r0, #68]	; 0x44
   17ab0:	e3a02001 	mov	r2, #1
   17ab4:	e5813004 	str	r3, [r1, #4]
   17ab8:	e1a03312 	lsl	r3, r2, r3
   17abc:	e5813008 	str	r3, [r1, #8]
   17ac0:	eb000679 	bl	194ac <_Bfree>
   17ac4:	e3a03000 	mov	r3, #0
   17ac8:	e58a3040 	str	r3, [sl, #64]	; 0x40
   17acc:	e59d300c 	ldr	r3, [sp, #12]
   17ad0:	e3530000 	cmp	r3, #0
   17ad4:	b3c33102 	biclt	r3, r3, #-2147483648	; 0x80000000
   17ad8:	b58d300c 	strlt	r3, [sp, #12]
   17adc:	a3a03000 	movge	r3, #0
   17ae0:	b3a02001 	movlt	r2, #1
   17ae4:	a5843000 	strge	r3, [r4]
   17ae8:	e59d700c 	ldr	r7, [sp, #12]
   17aec:	e59f3fac 	ldr	r3, [pc, #4012]	; 18aa0 <_dtoa_r+0x101c>
   17af0:	b5842000 	strlt	r2, [r4]
   17af4:	e59f2fa4 	ldr	r2, [pc, #4004]	; 18aa0 <_dtoa_r+0x101c>
   17af8:	e0073003 	and	r3, r7, r3
   17afc:	e1530002 	cmp	r3, r2
   17b00:	1a00001b 	bne	17b74 <_dtoa_r+0xf0>
   17b04:	e59d0010 	ldr	r0, [sp, #16]
   17b08:	e59f3f94 	ldr	r3, [pc, #3988]	; 18aa4 <_dtoa_r+0x1020>
   17b0c:	e59d4080 	ldr	r4, [sp, #128]	; 0x80
   17b10:	e3500000 	cmp	r0, #0
   17b14:	e5843000 	str	r3, [r4]
   17b18:	1a000007 	bne	17b3c <_dtoa_r+0xb8>
   17b1c:	e3c774ff 	bic	r7, r7, #-16777216	; 0xff000000
   17b20:	e3c7760f 	bic	r7, r7, #15728640	; 0xf00000
   17b24:	e59f3f7c 	ldr	r3, [pc, #3964]	; 18aa8 <_dtoa_r+0x1024>
   17b28:	e59f2f7c 	ldr	r2, [pc, #3964]	; 18aac <_dtoa_r+0x1028>
   17b2c:	e3570000 	cmp	r7, #0
   17b30:	11a02003 	movne	r2, r3
   17b34:	e58d2018 	str	r2, [sp, #24]
   17b38:	ea000001 	b	17b44 <_dtoa_r+0xc0>
   17b3c:	e59f4f64 	ldr	r4, [pc, #3940]	; 18aa8 <_dtoa_r+0x1024>
   17b40:	e58d4018 	str	r4, [sp, #24]
   17b44:	e59d4088 	ldr	r4, [sp, #136]	; 0x88
   17b48:	e3540000 	cmp	r4, #0
   17b4c:	0a00046a 	beq	18cfc <_dtoa_r+0x1278>
   17b50:	e59d4018 	ldr	r4, [sp, #24]
   17b54:	e5d43003 	ldrb	r3, [r4, #3]
   17b58:	e3530000 	cmp	r3, #0
   17b5c:	059d4018 	ldreq	r4, [sp, #24]
   17b60:	12843008 	addne	r3, r4, #8
   17b64:	02843003 	addeq	r3, r4, #3
   17b68:	e59d4088 	ldr	r4, [sp, #136]	; 0x88
   17b6c:	e5843000 	str	r3, [r4]
   17b70:	ea000461 	b	18cfc <_dtoa_r+0x1278>
   17b74:	e28d500c 	add	r5, sp, #12
   17b78:	e8950030 	ldm	r5, {r4, r5}
   17b7c:	e3a02000 	mov	r2, #0
   17b80:	e1a00004 	mov	r0, r4
   17b84:	e1a01005 	mov	r1, r5
   17b88:	e3a03000 	mov	r3, #0
   17b8c:	eb00119a 	bl	1c1fc <__cmpdf2>
   17b90:	e3500000 	cmp	r0, #0
   17b94:	1a000009 	bne	17bc0 <_dtoa_r+0x13c>
   17b98:	e59d4080 	ldr	r4, [sp, #128]	; 0x80
   17b9c:	e3a03001 	mov	r3, #1
   17ba0:	e5843000 	str	r3, [r4]
   17ba4:	e59d4088 	ldr	r4, [sp, #136]	; 0x88
   17ba8:	e3540000 	cmp	r4, #0
   17bac:	0a000450 	beq	18cf4 <_dtoa_r+0x1270>
   17bb0:	e59f3ef8 	ldr	r3, [pc, #3832]	; 18ab0 <_dtoa_r+0x102c>
   17bb4:	e5843000 	str	r3, [r4]
   17bb8:	e2434001 	sub	r4, r3, #1
   17bbc:	ea00044d 	b	18cf8 <_dtoa_r+0x1274>
   17bc0:	e28d3050 	add	r3, sp, #80	; 0x50
   17bc4:	e58d3000 	str	r3, [sp]
   17bc8:	e1a0000a 	mov	r0, sl
   17bcc:	e1a01004 	mov	r1, r4
   17bd0:	e1a02005 	mov	r2, r5
   17bd4:	e28d3054 	add	r3, sp, #84	; 0x54
   17bd8:	eb000864 	bl	19d70 <__d2b>
   17bdc:	e1a06087 	lsl	r6, r7, #1
   17be0:	e1b06aa6 	lsrs	r6, r6, #21
   17be4:	e58d0014 	str	r0, [sp, #20]
   17be8:	0a000008 	beq	17c10 <_dtoa_r+0x18c>
   17bec:	e3c434ff 	bic	r3, r4, #-16777216	; 0xff000000
   17bf0:	e3c3360f 	bic	r3, r3, #15728640	; 0xf00000
   17bf4:	e38335ff 	orr	r3, r3, #1069547520	; 0x3fc00000
   17bf8:	e2466fff 	sub	r6, r6, #1020	; 0x3fc
   17bfc:	e1a01005 	mov	r1, r5
   17c00:	e3830603 	orr	r0, r3, #3145728	; 0x300000
   17c04:	e2466003 	sub	r6, r6, #3
   17c08:	e3a04000 	mov	r4, #0
   17c0c:	ea000015 	b	17c68 <_dtoa_r+0x1e4>
   17c10:	e59d3054 	ldr	r3, [sp, #84]	; 0x54
   17c14:	e59d6050 	ldr	r6, [sp, #80]	; 0x50
   17c18:	e0866003 	add	r6, r6, r3
   17c1c:	e3e03e41 	mvn	r3, #1040	; 0x410
   17c20:	e1560003 	cmp	r6, r3
   17c24:	ba000007 	blt	17c48 <_dtoa_r+0x1c4>
   17c28:	e283301f 	add	r3, r3, #31
   17c2c:	e0663003 	rsb	r3, r6, r3
   17c30:	e1a07317 	lsl	r7, r7, r3
   17c34:	e2860e41 	add	r0, r6, #1040	; 0x410
   17c38:	e59d1010 	ldr	r1, [sp, #16]
   17c3c:	e2800002 	add	r0, r0, #2
   17c40:	e1870031 	orr	r0, r7, r1, lsr r0
   17c44:	ea000003 	b	17c58 <_dtoa_r+0x1d4>
   17c48:	e59f0e64 	ldr	r0, [pc, #3684]	; 18ab4 <_dtoa_r+0x1030>
   17c4c:	e59d2010 	ldr	r2, [sp, #16]
   17c50:	e0660000 	rsb	r0, r6, r0
   17c54:	e1a00012 	lsl	r0, r2, r0
   17c58:	eb001002 	bl	1bc68 <__aeabi_ui2d>
   17c5c:	e2466001 	sub	r6, r6, #1
   17c60:	e240061f 	sub	r0, r0, #32505856	; 0x1f00000
   17c64:	e3a04001 	mov	r4, #1
   17c68:	e59f2e48 	ldr	r2, [pc, #3656]	; 18ab8 <_dtoa_r+0x1034>
   17c6c:	e3a03000 	mov	r3, #0
   17c70:	e58d404c 	str	r4, [sp, #76]	; 0x4c
   17c74:	eb000f42 	bl	1b984 <__aeabi_dsub>
   17c78:	e59f2e3c 	ldr	r2, [pc, #3644]	; 18abc <_dtoa_r+0x1038>
   17c7c:	e59f3e3c 	ldr	r3, [pc, #3644]	; 18ac0 <_dtoa_r+0x103c>
   17c80:	eb00103d 	bl	1bd7c <__aeabi_dmul>
   17c84:	e59f2e38 	ldr	r2, [pc, #3640]	; 18ac4 <_dtoa_r+0x1040>
   17c88:	e59f3e38 	ldr	r3, [pc, #3640]	; 18ac8 <_dtoa_r+0x1044>
   17c8c:	eb000f3d 	bl	1b988 <__adddf3>
   17c90:	e1a04000 	mov	r4, r0
   17c94:	e1a00006 	mov	r0, r6
   17c98:	e1a05001 	mov	r5, r1
   17c9c:	eb000ffb 	bl	1bc90 <__aeabi_i2d>
   17ca0:	e59f2e24 	ldr	r2, [pc, #3620]	; 18acc <_dtoa_r+0x1048>
   17ca4:	e59f3e24 	ldr	r3, [pc, #3620]	; 18ad0 <_dtoa_r+0x104c>
   17ca8:	eb001033 	bl	1bd7c <__aeabi_dmul>
   17cac:	e1a02000 	mov	r2, r0
   17cb0:	e1a03001 	mov	r3, r1
   17cb4:	e1a00004 	mov	r0, r4
   17cb8:	e1a01005 	mov	r1, r5
   17cbc:	eb000f31 	bl	1b988 <__adddf3>
   17cc0:	e1a04000 	mov	r4, r0
   17cc4:	e1a05001 	mov	r5, r1
   17cc8:	eb001192 	bl	1c318 <__aeabi_d2iz>
   17ccc:	e1a01005 	mov	r1, r5
   17cd0:	e1a09000 	mov	r9, r0
   17cd4:	e3a02000 	mov	r2, #0
   17cd8:	e1a00004 	mov	r0, r4
   17cdc:	e3a03000 	mov	r3, #0
   17ce0:	eb001143 	bl	1c1f4 <__ledf2>
   17ce4:	e3500000 	cmp	r0, #0
   17ce8:	aa000008 	bge	17d10 <_dtoa_r+0x28c>
   17cec:	e1a00009 	mov	r0, r9
   17cf0:	eb000fe6 	bl	1bc90 <__aeabi_i2d>
   17cf4:	e1a02000 	mov	r2, r0
   17cf8:	e1a03001 	mov	r3, r1
   17cfc:	e1a00004 	mov	r0, r4
   17d00:	e1a01005 	mov	r1, r5
   17d04:	eb00113c 	bl	1c1fc <__cmpdf2>
   17d08:	e3500000 	cmp	r0, #0
   17d0c:	12499001 	subne	r9, r9, #1
   17d10:	e3590016 	cmp	r9, #22
   17d14:	83a04001 	movhi	r4, #1
   17d18:	8a000008 	bhi	17d40 <_dtoa_r+0x2bc>
   17d1c:	e59f3db0 	ldr	r3, [pc, #3504]	; 18ad4 <_dtoa_r+0x1050>
   17d20:	e0833189 	add	r3, r3, r9, lsl #3
   17d24:	e8930003 	ldm	r3, {r0, r1}
   17d28:	e28d300c 	add	r3, sp, #12
   17d2c:	e893000c 	ldm	r3, {r2, r3}
   17d30:	eb00112d 	bl	1c1ec <__gedf2>
   17d34:	e3500000 	cmp	r0, #0
   17d38:	c2499001 	subgt	r9, r9, #1
   17d3c:	e3a04000 	mov	r4, #0
   17d40:	e59d3050 	ldr	r3, [sp, #80]	; 0x50
   17d44:	e0666003 	rsb	r6, r6, r3
   17d48:	e2566001 	subs	r6, r6, #1
   17d4c:	e58d4040 	str	r4, [sp, #64]	; 0x40
   17d50:	42666000 	rsbmi	r6, r6, #0
   17d54:	43a04000 	movmi	r4, #0
   17d58:	53a04000 	movpl	r4, #0
   17d5c:	458d601c 	strmi	r6, [sp, #28]
   17d60:	458d4020 	strmi	r4, [sp, #32]
   17d64:	558d6020 	strpl	r6, [sp, #32]
   17d68:	558d401c 	strpl	r4, [sp, #28]
   17d6c:	e3590000 	cmp	r9, #0
   17d70:	ba000006 	blt	17d90 <_dtoa_r+0x30c>
   17d74:	e59d4020 	ldr	r4, [sp, #32]
   17d78:	e0844009 	add	r4, r4, r9
   17d7c:	e58d4020 	str	r4, [sp, #32]
   17d80:	e3a04000 	mov	r4, #0
   17d84:	e58d903c 	str	r9, [sp, #60]	; 0x3c
   17d88:	e58d4028 	str	r4, [sp, #40]	; 0x28
   17d8c:	ea000006 	b	17dac <_dtoa_r+0x328>
   17d90:	e59d401c 	ldr	r4, [sp, #28]
   17d94:	e0694004 	rsb	r4, r9, r4
   17d98:	e58d401c 	str	r4, [sp, #28]
   17d9c:	e2694000 	rsb	r4, r9, #0
   17da0:	e58d4028 	str	r4, [sp, #40]	; 0x28
   17da4:	e3a04000 	mov	r4, #0
   17da8:	e58d403c 	str	r4, [sp, #60]	; 0x3c
   17dac:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
   17db0:	e3540009 	cmp	r4, #9
   17db4:	8a000025 	bhi	17e50 <_dtoa_r+0x3cc>
   17db8:	e3540005 	cmp	r4, #5
   17dbc:	c2444004 	subgt	r4, r4, #4
   17dc0:	c58d4030 	strgt	r4, [sp, #48]	; 0x30
   17dc4:	e59d0030 	ldr	r0, [sp, #48]	; 0x30
   17dc8:	e2403002 	sub	r3, r0, #2
   17dcc:	c3a04000 	movgt	r4, #0
   17dd0:	d3a04001 	movle	r4, #1
   17dd4:	e3530003 	cmp	r3, #3
   17dd8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   17ddc:	ea000025 	b	17e78 <_dtoa_r+0x3f4>
   17de0:	00017e08 	.word	0x00017e08
   17de4:	00017e2c 	.word	0x00017e2c
   17de8:	00017df0 	.word	0x00017df0
   17dec:	00017dfc 	.word	0x00017dfc
   17df0:	e3a01001 	mov	r1, #1
   17df4:	e58d102c 	str	r1, [sp, #44]	; 0x2c
   17df8:	ea000004 	b	17e10 <_dtoa_r+0x38c>
   17dfc:	e3a02001 	mov	r2, #1
   17e00:	e58d202c 	str	r2, [sp, #44]	; 0x2c
   17e04:	ea00000a 	b	17e34 <_dtoa_r+0x3b0>
   17e08:	e3a03000 	mov	r3, #0
   17e0c:	e58d302c 	str	r3, [sp, #44]	; 0x2c
   17e10:	e59d007c 	ldr	r0, [sp, #124]	; 0x7c
   17e14:	e3500000 	cmp	r0, #0
   17e18:	da00001f 	ble	17e9c <_dtoa_r+0x418>
   17e1c:	e58d0024 	str	r0, [sp, #36]	; 0x24
   17e20:	e1a0b000 	mov	fp, r0
   17e24:	e1a03000 	mov	r3, r0
   17e28:	ea000021 	b	17eb4 <_dtoa_r+0x430>
   17e2c:	e3a01000 	mov	r1, #0
   17e30:	e58d102c 	str	r1, [sp, #44]	; 0x2c
   17e34:	e59d207c 	ldr	r2, [sp, #124]	; 0x7c
   17e38:	e0822009 	add	r2, r2, r9
   17e3c:	e2823001 	add	r3, r2, #1
   17e40:	e253b000 	subs	fp, r3, #0
   17e44:	e58d2024 	str	r2, [sp, #36]	; 0x24
   17e48:	d3a03001 	movle	r3, #1
   17e4c:	ea000018 	b	17eb4 <_dtoa_r+0x430>
   17e50:	e3a03000 	mov	r3, #0
   17e54:	e3e00000 	mvn	r0, #0
   17e58:	e3a04001 	mov	r4, #1
   17e5c:	e58d3030 	str	r3, [sp, #48]	; 0x30
   17e60:	e58d402c 	str	r4, [sp, #44]	; 0x2c
   17e64:	e58d0024 	str	r0, [sp, #36]	; 0x24
   17e68:	e1a0b000 	mov	fp, r0
   17e6c:	e3a03012 	mov	r3, #18
   17e70:	e3a01000 	mov	r1, #0
   17e74:	ea00000c 	b	17eac <_dtoa_r+0x428>
   17e78:	e3e03000 	mvn	r3, #0
   17e7c:	e3a02001 	mov	r2, #1
   17e80:	e3a00000 	mov	r0, #0
   17e84:	e58d3024 	str	r3, [sp, #36]	; 0x24
   17e88:	e1a0b003 	mov	fp, r3
   17e8c:	e58d202c 	str	r2, [sp, #44]	; 0x2c
   17e90:	e3a03012 	mov	r3, #18
   17e94:	e58d007c 	str	r0, [sp, #124]	; 0x7c
   17e98:	ea000005 	b	17eb4 <_dtoa_r+0x430>
   17e9c:	e3a01001 	mov	r1, #1
   17ea0:	e58d1024 	str	r1, [sp, #36]	; 0x24
   17ea4:	e1a0b001 	mov	fp, r1
   17ea8:	e1a03001 	mov	r3, r1
   17eac:	e58d107c 	str	r1, [sp, #124]	; 0x7c
   17eb0:	eaffffff 	b	17eb4 <_dtoa_r+0x430>
   17eb4:	e3a02000 	mov	r2, #0
   17eb8:	e58a2044 	str	r2, [sl, #68]	; 0x44
   17ebc:	e3a02004 	mov	r2, #4
   17ec0:	ea000003 	b	17ed4 <_dtoa_r+0x450>
   17ec4:	e59a1044 	ldr	r1, [sl, #68]	; 0x44
   17ec8:	e2811001 	add	r1, r1, #1
   17ecc:	e58a1044 	str	r1, [sl, #68]	; 0x44
   17ed0:	e1a02082 	lsl	r2, r2, #1
   17ed4:	e2821014 	add	r1, r2, #20
   17ed8:	e1510003 	cmp	r1, r3
   17edc:	9afffff8 	bls	17ec4 <_dtoa_r+0x440>
   17ee0:	e1a0000a 	mov	r0, sl
   17ee4:	e59a1044 	ldr	r1, [sl, #68]	; 0x44
   17ee8:	eb00054d 	bl	19424 <_Balloc>
   17eec:	e35b000e 	cmp	fp, #14
   17ef0:	83a04000 	movhi	r4, #0
   17ef4:	92044001 	andls	r4, r4, #1
   17ef8:	e3540000 	cmp	r4, #0
   17efc:	e58d0018 	str	r0, [sp, #24]
   17f00:	e58a0040 	str	r0, [sl, #64]	; 0x40
   17f04:	0a000119 	beq	18370 <_dtoa_r+0x8ec>
   17f08:	e28d300c 	add	r3, sp, #12
   17f0c:	e893000c 	ldm	r3, {r2, r3}
   17f10:	e3590000 	cmp	r9, #0
   17f14:	e58d2044 	str	r2, [sp, #68]	; 0x44
   17f18:	e58d3048 	str	r3, [sp, #72]	; 0x48
   17f1c:	da00002b 	ble	17fd0 <_dtoa_r+0x54c>
   17f20:	e59f3bac 	ldr	r3, [pc, #2988]	; 18ad4 <_dtoa_r+0x1050>
   17f24:	e209200f 	and	r2, r9, #15
   17f28:	e0833182 	add	r3, r3, r2, lsl #3
   17f2c:	e8930003 	ldm	r3, {r0, r1}
   17f30:	e1a04249 	asr	r4, r9, #4
   17f34:	e3140010 	tst	r4, #16
   17f38:	e58d0034 	str	r0, [sp, #52]	; 0x34
   17f3c:	e58d1038 	str	r1, [sp, #56]	; 0x38
   17f40:	03a07002 	moveq	r7, #2
   17f44:	0a00000a 	beq	17f74 <_dtoa_r+0x4f0>
   17f48:	e59f3b88 	ldr	r3, [pc, #2952]	; 18ad8 <_dtoa_r+0x1054>
   17f4c:	e28d1044 	add	r1, sp, #68	; 0x44
   17f50:	e8910003 	ldm	r1, {r0, r1}
   17f54:	e2833020 	add	r3, r3, #32
   17f58:	e893000c 	ldm	r3, {r2, r3}
   17f5c:	eb001021 	bl	1bfe8 <__aeabi_ddiv>
   17f60:	e204400f 	and	r4, r4, #15
   17f64:	e58d000c 	str	r0, [sp, #12]
   17f68:	e58d1010 	str	r1, [sp, #16]
   17f6c:	e3a07003 	mov	r7, #3
   17f70:	eaffffff 	b	17f74 <_dtoa_r+0x4f0>
   17f74:	e59f5b5c 	ldr	r5, [pc, #2908]	; 18ad8 <_dtoa_r+0x1054>
   17f78:	ea00000a 	b	17fa8 <_dtoa_r+0x524>
   17f7c:	e3140001 	tst	r4, #1
   17f80:	0a000006 	beq	17fa0 <_dtoa_r+0x51c>
   17f84:	e28d1034 	add	r1, sp, #52	; 0x34
   17f88:	e8910003 	ldm	r1, {r0, r1}
   17f8c:	e895000c 	ldm	r5, {r2, r3}
   17f90:	eb000f79 	bl	1bd7c <__aeabi_dmul>
   17f94:	e58d0034 	str	r0, [sp, #52]	; 0x34
   17f98:	e58d1038 	str	r1, [sp, #56]	; 0x38
   17f9c:	e2877001 	add	r7, r7, #1
   17fa0:	e1a040c4 	asr	r4, r4, #1
   17fa4:	e2855008 	add	r5, r5, #8
   17fa8:	e3540000 	cmp	r4, #0
   17fac:	1afffff2 	bne	17f7c <_dtoa_r+0x4f8>
   17fb0:	e28d100c 	add	r1, sp, #12
   17fb4:	e8910003 	ldm	r1, {r0, r1}
   17fb8:	e28d3034 	add	r3, sp, #52	; 0x34
   17fbc:	e893000c 	ldm	r3, {r2, r3}
   17fc0:	eb001008 	bl	1bfe8 <__aeabi_ddiv>
   17fc4:	e58d000c 	str	r0, [sp, #12]
   17fc8:	e58d1010 	str	r1, [sp, #16]
   17fcc:	ea00001b 	b	18040 <_dtoa_r+0x5bc>
   17fd0:	e2694000 	rsb	r4, r9, #0
   17fd4:	e3540000 	cmp	r4, #0
   17fd8:	03a07002 	moveq	r7, #2
   17fdc:	0a000017 	beq	18040 <_dtoa_r+0x5bc>
   17fe0:	e59f3aec 	ldr	r3, [pc, #2796]	; 18ad4 <_dtoa_r+0x1050>
   17fe4:	e204200f 	and	r2, r4, #15
   17fe8:	e0833182 	add	r3, r3, r2, lsl #3
   17fec:	e28d1044 	add	r1, sp, #68	; 0x44
   17ff0:	e8910003 	ldm	r1, {r0, r1}
   17ff4:	e893000c 	ldm	r3, {r2, r3}
   17ff8:	eb000f5f 	bl	1bd7c <__aeabi_dmul>
   17ffc:	e1a04244 	asr	r4, r4, #4
   18000:	e59f5ad0 	ldr	r5, [pc, #2768]	; 18ad8 <_dtoa_r+0x1054>
   18004:	e3a07002 	mov	r7, #2
   18008:	ea000005 	b	18024 <_dtoa_r+0x5a0>
   1800c:	e3140001 	tst	r4, #1
   18010:	1895000c 	ldmne	r5, {r2, r3}
   18014:	12877001 	addne	r7, r7, #1
   18018:	1b000f57 	blne	1bd7c <__aeabi_dmul>
   1801c:	e1a040c4 	asr	r4, r4, #1
   18020:	e2855008 	add	r5, r5, #8
   18024:	e3540000 	cmp	r4, #0
   18028:	1afffff7 	bne	1800c <_dtoa_r+0x588>
   1802c:	e1a02000 	mov	r2, r0
   18030:	e1a03001 	mov	r3, r1
   18034:	e58d200c 	str	r2, [sp, #12]
   18038:	e58d3010 	str	r3, [sp, #16]
   1803c:	eaffffff 	b	18040 <_dtoa_r+0x5bc>
   18040:	e59d4040 	ldr	r4, [sp, #64]	; 0x40
   18044:	e3540000 	cmp	r4, #0
   18048:	0a000019 	beq	180b4 <_dtoa_r+0x630>
   1804c:	e28d500c 	add	r5, sp, #12
   18050:	e8950030 	ldm	r5, {r4, r5}
   18054:	e59f2a80 	ldr	r2, [pc, #2688]	; 18adc <_dtoa_r+0x1058>
   18058:	e1a00004 	mov	r0, r4
   1805c:	e1a01005 	mov	r1, r5
   18060:	e3a03000 	mov	r3, #0
   18064:	eb001062 	bl	1c1f4 <__ledf2>
   18068:	e3500000 	cmp	r0, #0
   1806c:	aa000010 	bge	180b4 <_dtoa_r+0x630>
   18070:	e35b0000 	cmp	fp, #0
   18074:	0a00000e 	beq	180b4 <_dtoa_r+0x630>
   18078:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
   1807c:	e3500000 	cmp	r0, #0
   18080:	da0000b6 	ble	18360 <_dtoa_r+0x8dc>
   18084:	e2491001 	sub	r1, r9, #1
   18088:	e58d1034 	str	r1, [sp, #52]	; 0x34
   1808c:	e1a00004 	mov	r0, r4
   18090:	e1a01005 	mov	r1, r5
   18094:	e59f2a44 	ldr	r2, [pc, #2628]	; 18ae0 <_dtoa_r+0x105c>
   18098:	e3a03000 	mov	r3, #0
   1809c:	eb000f36 	bl	1bd7c <__aeabi_dmul>
   180a0:	e2877001 	add	r7, r7, #1
   180a4:	e58d000c 	str	r0, [sp, #12]
   180a8:	e58d1010 	str	r1, [sp, #16]
   180ac:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
   180b0:	ea000001 	b	180bc <_dtoa_r+0x638>
   180b4:	e58d9034 	str	r9, [sp, #52]	; 0x34
   180b8:	e1a0400b 	mov	r4, fp
   180bc:	e28d600c 	add	r6, sp, #12
   180c0:	e8960060 	ldm	r6, {r5, r6}
   180c4:	e1a00007 	mov	r0, r7
   180c8:	eb000ef0 	bl	1bc90 <__aeabi_i2d>
   180cc:	e1a02005 	mov	r2, r5
   180d0:	e1a03006 	mov	r3, r6
   180d4:	eb000f28 	bl	1bd7c <__aeabi_dmul>
   180d8:	e59f2a04 	ldr	r2, [pc, #2564]	; 18ae4 <_dtoa_r+0x1060>
   180dc:	e3a03000 	mov	r3, #0
   180e0:	eb000e28 	bl	1b988 <__adddf3>
   180e4:	e3540000 	cmp	r4, #0
   180e8:	e240c50d 	sub	ip, r0, #54525952	; 0x3400000
   180ec:	e1a08001 	mov	r8, r1
   180f0:	e1a0700c 	mov	r7, ip
   180f4:	1a000016 	bne	18154 <_dtoa_r+0x6d0>
   180f8:	e1a00005 	mov	r0, r5
   180fc:	e1a01006 	mov	r1, r6
   18100:	e59f29e0 	ldr	r2, [pc, #2528]	; 18ae8 <_dtoa_r+0x1064>
   18104:	e3a03000 	mov	r3, #0
   18108:	e58dc008 	str	ip, [sp, #8]
   1810c:	eb000e1c 	bl	1b984 <__aeabi_dsub>
   18110:	e59dc008 	ldr	ip, [sp, #8]
   18114:	e1a03008 	mov	r3, r8
   18118:	e1a0200c 	mov	r2, ip
   1811c:	e1a05000 	mov	r5, r0
   18120:	e1a06001 	mov	r6, r1
   18124:	eb001030 	bl	1c1ec <__gedf2>
   18128:	e3500000 	cmp	r0, #0
   1812c:	e59dc008 	ldr	ip, [sp, #8]
   18130:	ca0001e0 	bgt	188b8 <_dtoa_r+0xe34>
   18134:	e1a00005 	mov	r0, r5
   18138:	e1a01006 	mov	r1, r6
   1813c:	e28c2102 	add	r2, ip, #-2147483648	; 0x80000000
   18140:	e1a03008 	mov	r3, r8
   18144:	eb00102a 	bl	1c1f4 <__ledf2>
   18148:	e3500000 	cmp	r0, #0
   1814c:	ba0001d4 	blt	188a4 <_dtoa_r+0xe20>
   18150:	ea000082 	b	18360 <_dtoa_r+0x8dc>
   18154:	e59d202c 	ldr	r2, [sp, #44]	; 0x2c
   18158:	e59f3974 	ldr	r3, [pc, #2420]	; 18ad4 <_dtoa_r+0x1050>
   1815c:	e3520000 	cmp	r2, #0
   18160:	e2442001 	sub	r2, r4, #1
   18164:	e0833182 	add	r3, r3, r2, lsl #3
   18168:	0a00003c 	beq	18260 <_dtoa_r+0x7dc>
   1816c:	e893000c 	ldm	r3, {r2, r3}
   18170:	e59f0974 	ldr	r0, [pc, #2420]	; 18aec <_dtoa_r+0x1068>
   18174:	e3a01000 	mov	r1, #0
   18178:	eb000f9a 	bl	1bfe8 <__aeabi_ddiv>
   1817c:	e1a02007 	mov	r2, r7
   18180:	e1a03008 	mov	r3, r8
   18184:	eb000dfe 	bl	1b984 <__aeabi_dsub>
   18188:	e58d000c 	str	r0, [sp, #12]
   1818c:	e58d1010 	str	r1, [sp, #16]
   18190:	e1a07006 	mov	r7, r6
   18194:	e1a06005 	mov	r6, r5
   18198:	e59d5018 	ldr	r5, [sp, #24]
   1819c:	e1a01007 	mov	r1, r7
   181a0:	e1a00006 	mov	r0, r6
   181a4:	eb00105b 	bl	1c318 <__aeabi_d2iz>
   181a8:	e1a08000 	mov	r8, r0
   181ac:	eb000eb7 	bl	1bc90 <__aeabi_i2d>
   181b0:	e1a02000 	mov	r2, r0
   181b4:	e1a03001 	mov	r3, r1
   181b8:	e1a00006 	mov	r0, r6
   181bc:	e1a01007 	mov	r1, r7
   181c0:	eb000def 	bl	1b984 <__aeabi_dsub>
   181c4:	e2888030 	add	r8, r8, #48	; 0x30
   181c8:	e4c58001 	strb	r8, [r5], #1
   181cc:	e28d300c 	add	r3, sp, #12
   181d0:	e893000c 	ldm	r3, {r2, r3}
   181d4:	e1a06000 	mov	r6, r0
   181d8:	e1a07001 	mov	r7, r1
   181dc:	eb001004 	bl	1c1f4 <__ledf2>
   181e0:	e3500000 	cmp	r0, #0
   181e4:	e1a08005 	mov	r8, r5
   181e8:	ba0002b4 	blt	18cc0 <_dtoa_r+0x123c>
   181ec:	e1a02006 	mov	r2, r6
   181f0:	e1a03007 	mov	r3, r7
   181f4:	e59f08e0 	ldr	r0, [pc, #2272]	; 18adc <_dtoa_r+0x1058>
   181f8:	e3a01000 	mov	r1, #0
   181fc:	eb000de0 	bl	1b984 <__aeabi_dsub>
   18200:	e28d300c 	add	r3, sp, #12
   18204:	e893000c 	ldm	r3, {r2, r3}
   18208:	eb000ff9 	bl	1c1f4 <__ledf2>
   1820c:	e3500000 	cmp	r0, #0
   18210:	ba0000a7 	blt	184b4 <_dtoa_r+0xa30>
   18214:	e59d0018 	ldr	r0, [sp, #24]
   18218:	e0603005 	rsb	r3, r0, r5
   1821c:	e1530004 	cmp	r3, r4
   18220:	aa00004e 	bge	18360 <_dtoa_r+0x8dc>
   18224:	e28d100c 	add	r1, sp, #12
   18228:	e8910003 	ldm	r1, {r0, r1}
   1822c:	e59f28ac 	ldr	r2, [pc, #2220]	; 18ae0 <_dtoa_r+0x105c>
   18230:	e3a03000 	mov	r3, #0
   18234:	eb000ed0 	bl	1bd7c <__aeabi_dmul>
   18238:	e59f28a0 	ldr	r2, [pc, #2208]	; 18ae0 <_dtoa_r+0x105c>
   1823c:	e58d000c 	str	r0, [sp, #12]
   18240:	e58d1010 	str	r1, [sp, #16]
   18244:	e3a03000 	mov	r3, #0
   18248:	e1a00006 	mov	r0, r6
   1824c:	e1a01007 	mov	r1, r7
   18250:	eb000ec9 	bl	1bd7c <__aeabi_dmul>
   18254:	e1a06000 	mov	r6, r0
   18258:	e1a07001 	mov	r7, r1
   1825c:	eaffffce 	b	1819c <_dtoa_r+0x718>
   18260:	e8930003 	ldm	r3, {r0, r1}
   18264:	e1a0200c 	mov	r2, ip
   18268:	e1a03008 	mov	r3, r8
   1826c:	eb000ec2 	bl	1bd7c <__aeabi_dmul>
   18270:	e58d000c 	str	r0, [sp, #12]
   18274:	e58d1010 	str	r1, [sp, #16]
   18278:	e59d1018 	ldr	r1, [sp, #24]
   1827c:	e1a07006 	mov	r7, r6
   18280:	e0814004 	add	r4, r1, r4
   18284:	e1a06005 	mov	r6, r5
   18288:	e1a08001 	mov	r8, r1
   1828c:	e1a01007 	mov	r1, r7
   18290:	e1a00006 	mov	r0, r6
   18294:	eb00101f 	bl	1c318 <__aeabi_d2iz>
   18298:	e1a05000 	mov	r5, r0
   1829c:	eb000e7b 	bl	1bc90 <__aeabi_i2d>
   182a0:	e1a02000 	mov	r2, r0
   182a4:	e1a03001 	mov	r3, r1
   182a8:	e1a00006 	mov	r0, r6
   182ac:	e1a01007 	mov	r1, r7
   182b0:	eb000db3 	bl	1b984 <__aeabi_dsub>
   182b4:	e2855030 	add	r5, r5, #48	; 0x30
   182b8:	e4c85001 	strb	r5, [r8], #1
   182bc:	e1580004 	cmp	r8, r4
   182c0:	e1a06000 	mov	r6, r0
   182c4:	e1a07001 	mov	r7, r1
   182c8:	1a00001e 	bne	18348 <_dtoa_r+0x8c4>
   182cc:	e59f2818 	ldr	r2, [pc, #2072]	; 18aec <_dtoa_r+0x1068>
   182d0:	e3a03000 	mov	r3, #0
   182d4:	e28d100c 	add	r1, sp, #12
   182d8:	e8910003 	ldm	r1, {r0, r1}
   182dc:	eb000da9 	bl	1b988 <__adddf3>
   182e0:	e1a02000 	mov	r2, r0
   182e4:	e1a03001 	mov	r3, r1
   182e8:	e1a00006 	mov	r0, r6
   182ec:	e1a01007 	mov	r1, r7
   182f0:	eb000fbd 	bl	1c1ec <__gedf2>
   182f4:	e3500000 	cmp	r0, #0
   182f8:	ca00006d 	bgt	184b4 <_dtoa_r+0xa30>
   182fc:	e28d300c 	add	r3, sp, #12
   18300:	e893000c 	ldm	r3, {r2, r3}
   18304:	e59f07e0 	ldr	r0, [pc, #2016]	; 18aec <_dtoa_r+0x1068>
   18308:	e3a01000 	mov	r1, #0
   1830c:	eb000d9c 	bl	1b984 <__aeabi_dsub>
   18310:	e1a02000 	mov	r2, r0
   18314:	e1a03001 	mov	r3, r1
   18318:	e1a00006 	mov	r0, r6
   1831c:	e1a01007 	mov	r1, r7
   18320:	eb000fb3 	bl	1c1f4 <__ledf2>
   18324:	e3500000 	cmp	r0, #0
   18328:	aa00000c 	bge	18360 <_dtoa_r+0x8dc>
   1832c:	e1a03008 	mov	r3, r8
   18330:	e1a08003 	mov	r8, r3
   18334:	e5582001 	ldrb	r2, [r8, #-1]
   18338:	e3520030 	cmp	r2, #48	; 0x30
   1833c:	e2433001 	sub	r3, r3, #1
   18340:	0afffffa 	beq	18330 <_dtoa_r+0x8ac>
   18344:	ea00025d 	b	18cc0 <_dtoa_r+0x123c>
   18348:	e59f2790 	ldr	r2, [pc, #1936]	; 18ae0 <_dtoa_r+0x105c>
   1834c:	e3a03000 	mov	r3, #0
   18350:	eb000e89 	bl	1bd7c <__aeabi_dmul>
   18354:	e1a06000 	mov	r6, r0
   18358:	e1a07001 	mov	r7, r1
   1835c:	eaffffca 	b	1828c <_dtoa_r+0x808>
   18360:	e28d3044 	add	r3, sp, #68	; 0x44
   18364:	e893000c 	ldm	r3, {r2, r3}
   18368:	e58d200c 	str	r2, [sp, #12]
   1836c:	e58d3010 	str	r3, [sp, #16]
   18370:	e59d3054 	ldr	r3, [sp, #84]	; 0x54
   18374:	e3530000 	cmp	r3, #0
   18378:	ba000064 	blt	18510 <_dtoa_r+0xa8c>
   1837c:	e359000e 	cmp	r9, #14
   18380:	ca000062 	bgt	18510 <_dtoa_r+0xa8c>
   18384:	e59f3748 	ldr	r3, [pc, #1864]	; 18ad4 <_dtoa_r+0x1050>
   18388:	e59d007c 	ldr	r0, [sp, #124]	; 0x7c
   1838c:	e0833189 	add	r3, r3, r9, lsl #3
   18390:	e8930030 	ldm	r3, {r4, r5}
   18394:	e1a03fa0 	lsr	r3, r0, #31
   18398:	e35b0000 	cmp	fp, #0
   1839c:	c3a03000 	movgt	r3, #0
   183a0:	d2033001 	andle	r3, r3, #1
   183a4:	e3530000 	cmp	r3, #0
   183a8:	059d2018 	ldreq	r2, [sp, #24]
   183ac:	02826001 	addeq	r6, r2, #1
   183b0:	0082b00b 	addeq	fp, r2, fp
   183b4:	0a00000e 	beq	183f4 <_dtoa_r+0x970>
   183b8:	e35b0000 	cmp	fp, #0
   183bc:	1a000137 	bne	188a0 <_dtoa_r+0xe1c>
   183c0:	e1a00004 	mov	r0, r4
   183c4:	e1a01005 	mov	r1, r5
   183c8:	e59f2718 	ldr	r2, [pc, #1816]	; 18ae8 <_dtoa_r+0x1064>
   183cc:	e3a03000 	mov	r3, #0
   183d0:	eb000e69 	bl	1bd7c <__aeabi_dmul>
   183d4:	e28d300c 	add	r3, sp, #12
   183d8:	e893000c 	ldm	r3, {r2, r3}
   183dc:	eb000f82 	bl	1c1ec <__gedf2>
   183e0:	e3500000 	cmp	r0, #0
   183e4:	e1a0400b 	mov	r4, fp
   183e8:	e1a0500b 	mov	r5, fp
   183ec:	aa00012d 	bge	188a8 <_dtoa_r+0xe24>
   183f0:	ea000132 	b	188c0 <_dtoa_r+0xe3c>
   183f4:	e1a02004 	mov	r2, r4
   183f8:	e1a03005 	mov	r3, r5
   183fc:	e28d100c 	add	r1, sp, #12
   18400:	e8910003 	ldm	r1, {r0, r1}
   18404:	eb000ef7 	bl	1bfe8 <__aeabi_ddiv>
   18408:	eb000fc2 	bl	1c318 <__aeabi_d2iz>
   1840c:	e1a07000 	mov	r7, r0
   18410:	eb000e1e 	bl	1bc90 <__aeabi_i2d>
   18414:	e1a02004 	mov	r2, r4
   18418:	e1a03005 	mov	r3, r5
   1841c:	eb000e56 	bl	1bd7c <__aeabi_dmul>
   18420:	e1a02000 	mov	r2, r0
   18424:	e1a03001 	mov	r3, r1
   18428:	e28d100c 	add	r1, sp, #12
   1842c:	e8910003 	ldm	r1, {r0, r1}
   18430:	eb000d53 	bl	1b984 <__aeabi_dsub>
   18434:	e287c030 	add	ip, r7, #48	; 0x30
   18438:	e156000b 	cmp	r6, fp
   1843c:	e1a02000 	mov	r2, r0
   18440:	e1a03001 	mov	r3, r1
   18444:	e1a08006 	mov	r8, r6
   18448:	e546c001 	strb	ip, [r6, #-1]
   1844c:	1a000023 	bne	184e0 <_dtoa_r+0xa5c>
   18450:	eb000d4c 	bl	1b988 <__adddf3>
   18454:	e1a02004 	mov	r2, r4
   18458:	e1a03005 	mov	r3, r5
   1845c:	e58d000c 	str	r0, [sp, #12]
   18460:	e58d1010 	str	r1, [sp, #16]
   18464:	eb000f60 	bl	1c1ec <__gedf2>
   18468:	e3500000 	cmp	r0, #0
   1846c:	ca000011 	bgt	184b8 <_dtoa_r+0xa34>
   18470:	e28d100c 	add	r1, sp, #12
   18474:	e8910003 	ldm	r1, {r0, r1}
   18478:	e1a02004 	mov	r2, r4
   1847c:	e1a03005 	mov	r3, r5
   18480:	eb000f5d 	bl	1c1fc <__cmpdf2>
   18484:	e3500000 	cmp	r0, #0
   18488:	1a00020d 	bne	18cc4 <_dtoa_r+0x1240>
   1848c:	e3170001 	tst	r7, #1
   18490:	1a000008 	bne	184b8 <_dtoa_r+0xa34>
   18494:	ea00020a 	b	18cc4 <_dtoa_r+0x1240>
   18498:	e59d4018 	ldr	r4, [sp, #24]
   1849c:	e1540003 	cmp	r4, r3
   184a0:	1a000005 	bne	184bc <_dtoa_r+0xa38>
   184a4:	e3a02030 	mov	r2, #48	; 0x30
   184a8:	e2899001 	add	r9, r9, #1
   184ac:	e5c42000 	strb	r2, [r4]
   184b0:	ea000006 	b	184d0 <_dtoa_r+0xa4c>
   184b4:	e59d9034 	ldr	r9, [sp, #52]	; 0x34
   184b8:	e1a03008 	mov	r3, r8
   184bc:	e1a08003 	mov	r8, r3
   184c0:	e5582001 	ldrb	r2, [r8, #-1]
   184c4:	e3520039 	cmp	r2, #57	; 0x39
   184c8:	e2433001 	sub	r3, r3, #1
   184cc:	0afffff1 	beq	18498 <_dtoa_r+0xa14>
   184d0:	e5d32000 	ldrb	r2, [r3]
   184d4:	e2822001 	add	r2, r2, #1
   184d8:	e5c32000 	strb	r2, [r3]
   184dc:	ea0001f8 	b	18cc4 <_dtoa_r+0x1240>
   184e0:	e59f25f8 	ldr	r2, [pc, #1528]	; 18ae0 <_dtoa_r+0x105c>
   184e4:	e3a03000 	mov	r3, #0
   184e8:	eb000e23 	bl	1bd7c <__aeabi_dmul>
   184ec:	e3a02000 	mov	r2, #0
   184f0:	e3a03000 	mov	r3, #0
   184f4:	e58d000c 	str	r0, [sp, #12]
   184f8:	e58d1010 	str	r1, [sp, #16]
   184fc:	eb000f3e 	bl	1c1fc <__cmpdf2>
   18500:	e3500000 	cmp	r0, #0
   18504:	e2866001 	add	r6, r6, #1
   18508:	1affffb9 	bne	183f4 <_dtoa_r+0x970>
   1850c:	ea0001ec 	b	18cc4 <_dtoa_r+0x1240>
   18510:	e59d402c 	ldr	r4, [sp, #44]	; 0x2c
   18514:	e3540000 	cmp	r4, #0
   18518:	0a000027 	beq	185bc <_dtoa_r+0xb38>
   1851c:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
   18520:	e3540001 	cmp	r4, #1
   18524:	ca000008 	bgt	1854c <_dtoa_r+0xac8>
   18528:	e59d404c 	ldr	r4, [sp, #76]	; 0x4c
   1852c:	e3540000 	cmp	r4, #0
   18530:	059d3050 	ldreq	r3, [sp, #80]	; 0x50
   18534:	12833e43 	addne	r3, r3, #1072	; 0x430
   18538:	12833003 	addne	r3, r3, #3
   1853c:	02633036 	rsbeq	r3, r3, #54	; 0x36
   18540:	e59d4028 	ldr	r4, [sp, #40]	; 0x28
   18544:	e59d601c 	ldr	r6, [sp, #28]
   18548:	ea000010 	b	18590 <_dtoa_r+0xb0c>
   1854c:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
   18550:	e24b4001 	sub	r4, fp, #1
   18554:	e1500004 	cmp	r0, r4
   18558:	b59d1028 	ldrlt	r1, [sp, #40]	; 0x28
   1855c:	b59d203c 	ldrlt	r2, [sp, #60]	; 0x3c
   18560:	b0613004 	rsblt	r3, r1, r4
   18564:	b0822003 	addlt	r2, r2, r3
   18568:	b58d4028 	strlt	r4, [sp, #40]	; 0x28
   1856c:	a0644000 	rsbge	r4, r4, r0
   18570:	b58d203c 	strlt	r2, [sp, #60]	; 0x3c
   18574:	b3a04000 	movlt	r4, #0
   18578:	e35b0000 	cmp	fp, #0
   1857c:	b59d301c 	ldrlt	r3, [sp, #28]
   18580:	a59d601c 	ldrge	r6, [sp, #28]
   18584:	b06b6003 	rsblt	r6, fp, r3
   18588:	a1a0300b 	movge	r3, fp
   1858c:	b3a03000 	movlt	r3, #0
   18590:	e59d001c 	ldr	r0, [sp, #28]
   18594:	e59d1020 	ldr	r1, [sp, #32]
   18598:	e0800003 	add	r0, r0, r3
   1859c:	e0811003 	add	r1, r1, r3
   185a0:	e58d001c 	str	r0, [sp, #28]
   185a4:	e58d1020 	str	r1, [sp, #32]
   185a8:	e1a0000a 	mov	r0, sl
   185ac:	e3a01001 	mov	r1, #1
   185b0:	eb000462 	bl	19740 <__i2b>
   185b4:	e1a05000 	mov	r5, r0
   185b8:	ea000002 	b	185c8 <_dtoa_r+0xb44>
   185bc:	e59d4028 	ldr	r4, [sp, #40]	; 0x28
   185c0:	e59d601c 	ldr	r6, [sp, #28]
   185c4:	e59d502c 	ldr	r5, [sp, #44]	; 0x2c
   185c8:	e59d2020 	ldr	r2, [sp, #32]
   185cc:	e3520000 	cmp	r2, #0
   185d0:	c3560000 	cmpgt	r6, #0
   185d4:	da000008 	ble	185fc <_dtoa_r+0xb78>
   185d8:	e1a03002 	mov	r3, r2
   185dc:	e59d001c 	ldr	r0, [sp, #28]
   185e0:	e1530006 	cmp	r3, r6
   185e4:	a1a03006 	movge	r3, r6
   185e8:	e0630000 	rsb	r0, r3, r0
   185ec:	e0632002 	rsb	r2, r3, r2
   185f0:	e58d001c 	str	r0, [sp, #28]
   185f4:	e58d2020 	str	r2, [sp, #32]
   185f8:	e0636006 	rsb	r6, r3, r6
   185fc:	e59d1028 	ldr	r1, [sp, #40]	; 0x28
   18600:	e3510000 	cmp	r1, #0
   18604:	da00001d 	ble	18680 <_dtoa_r+0xbfc>
   18608:	e59d202c 	ldr	r2, [sp, #44]	; 0x2c
   1860c:	e3520000 	cmp	r2, #0
   18610:	0a000015 	beq	1866c <_dtoa_r+0xbe8>
   18614:	e3540000 	cmp	r4, #0
   18618:	da00000d 	ble	18654 <_dtoa_r+0xbd0>
   1861c:	e1a01005 	mov	r1, r5
   18620:	e1a02004 	mov	r2, r4
   18624:	e1a0000a 	mov	r0, sl
   18628:	eb0004b8 	bl	19910 <__pow5mult>
   1862c:	e1a05000 	mov	r5, r0
   18630:	e1a01005 	mov	r1, r5
   18634:	e59d2014 	ldr	r2, [sp, #20]
   18638:	e1a0000a 	mov	r0, sl
   1863c:	eb000447 	bl	19760 <__multiply>
   18640:	e59d1014 	ldr	r1, [sp, #20]
   18644:	e1a07000 	mov	r7, r0
   18648:	e1a0000a 	mov	r0, sl
   1864c:	eb000396 	bl	194ac <_Bfree>
   18650:	e58d7014 	str	r7, [sp, #20]
   18654:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
   18658:	e0532004 	subs	r2, r3, r4
   1865c:	11a0000a 	movne	r0, sl
   18660:	159d1014 	ldrne	r1, [sp, #20]
   18664:	1a000003 	bne	18678 <_dtoa_r+0xbf4>
   18668:	ea000004 	b	18680 <_dtoa_r+0xbfc>
   1866c:	e59d1014 	ldr	r1, [sp, #20]
   18670:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
   18674:	e1a0000a 	mov	r0, sl
   18678:	eb0004a4 	bl	19910 <__pow5mult>
   1867c:	e58d0014 	str	r0, [sp, #20]
   18680:	e1a0000a 	mov	r0, sl
   18684:	e3a01001 	mov	r1, #1
   18688:	eb00042c 	bl	19740 <__i2b>
   1868c:	e1a04000 	mov	r4, r0
   18690:	e59d003c 	ldr	r0, [sp, #60]	; 0x3c
   18694:	e3500000 	cmp	r0, #0
   18698:	da000004 	ble	186b0 <_dtoa_r+0xc2c>
   1869c:	e1a01004 	mov	r1, r4
   186a0:	e1a0000a 	mov	r0, sl
   186a4:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
   186a8:	eb000498 	bl	19910 <__pow5mult>
   186ac:	e1a04000 	mov	r4, r0
   186b0:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
   186b4:	e3510001 	cmp	r1, #1
   186b8:	ca000014 	bgt	18710 <_dtoa_r+0xc8c>
   186bc:	e59d2010 	ldr	r2, [sp, #16]
   186c0:	e3520000 	cmp	r2, #0
   186c4:	1a000011 	bne	18710 <_dtoa_r+0xc8c>
   186c8:	e59d300c 	ldr	r3, [sp, #12]
   186cc:	e3c324ff 	bic	r2, r3, #-16777216	; 0xff000000
   186d0:	e3c2260f 	bic	r2, r2, #15728640	; 0xf00000
   186d4:	e3520000 	cmp	r2, #0
   186d8:	159d7010 	ldrne	r7, [sp, #16]
   186dc:	1a00000d 	bne	18718 <_dtoa_r+0xc94>
   186e0:	e59f73b8 	ldr	r7, [pc, #952]	; 18aa0 <_dtoa_r+0x101c>
   186e4:	e0037007 	and	r7, r3, r7
   186e8:	e3570000 	cmp	r7, #0
   186ec:	0a000009 	beq	18718 <_dtoa_r+0xc94>
   186f0:	e59d301c 	ldr	r3, [sp, #28]
   186f4:	e59d0020 	ldr	r0, [sp, #32]
   186f8:	e2833001 	add	r3, r3, #1
   186fc:	e2800001 	add	r0, r0, #1
   18700:	e58d301c 	str	r3, [sp, #28]
   18704:	e58d0020 	str	r0, [sp, #32]
   18708:	e3a07001 	mov	r7, #1
   1870c:	ea000001 	b	18718 <_dtoa_r+0xc94>
   18710:	e3a07000 	mov	r7, #0
   18714:	eaffffff 	b	18718 <_dtoa_r+0xc94>
   18718:	e59d103c 	ldr	r1, [sp, #60]	; 0x3c
   1871c:	e3510000 	cmp	r1, #0
   18720:	03a00001 	moveq	r0, #1
   18724:	0a000005 	beq	18740 <_dtoa_r+0xcbc>
   18728:	e5943010 	ldr	r3, [r4, #16]
   1872c:	e2833004 	add	r3, r3, #4
   18730:	e7940103 	ldr	r0, [r4, r3, lsl #2]
   18734:	eb0003c6 	bl	19654 <__hi0bits>
   18738:	e2600020 	rsb	r0, r0, #32
   1873c:	eaffffff 	b	18740 <_dtoa_r+0xcbc>
   18740:	e59d2020 	ldr	r2, [sp, #32]
   18744:	e0803002 	add	r3, r0, r2
   18748:	e213301f 	ands	r3, r3, #31
   1874c:	0a00000d 	beq	18788 <_dtoa_r+0xd04>
   18750:	e2632020 	rsb	r2, r3, #32
   18754:	e3520004 	cmp	r2, #4
   18758:	da000008 	ble	18780 <_dtoa_r+0xcfc>
   1875c:	e59d001c 	ldr	r0, [sp, #28]
   18760:	e59d1020 	ldr	r1, [sp, #32]
   18764:	e263301c 	rsb	r3, r3, #28
   18768:	e0800003 	add	r0, r0, r3
   1876c:	e0811003 	add	r1, r1, r3
   18770:	e58d001c 	str	r0, [sp, #28]
   18774:	e0866003 	add	r6, r6, r3
   18778:	e58d1020 	str	r1, [sp, #32]
   1877c:	ea000009 	b	187a8 <_dtoa_r+0xd24>
   18780:	0a000008 	beq	187a8 <_dtoa_r+0xd24>
   18784:	e1a03002 	mov	r3, r2
   18788:	e59d201c 	ldr	r2, [sp, #28]
   1878c:	e59d0020 	ldr	r0, [sp, #32]
   18790:	e283301c 	add	r3, r3, #28
   18794:	e0822003 	add	r2, r2, r3
   18798:	e0800003 	add	r0, r0, r3
   1879c:	e58d201c 	str	r2, [sp, #28]
   187a0:	e58d0020 	str	r0, [sp, #32]
   187a4:	e0866003 	add	r6, r6, r3
   187a8:	e59d101c 	ldr	r1, [sp, #28]
   187ac:	e3510000 	cmp	r1, #0
   187b0:	da000004 	ble	187c8 <_dtoa_r+0xd44>
   187b4:	e1a0000a 	mov	r0, sl
   187b8:	e59d1014 	ldr	r1, [sp, #20]
   187bc:	e59d201c 	ldr	r2, [sp, #28]
   187c0:	eb000488 	bl	199e8 <__lshift>
   187c4:	e58d0014 	str	r0, [sp, #20]
   187c8:	e59d2020 	ldr	r2, [sp, #32]
   187cc:	e3520000 	cmp	r2, #0
   187d0:	da000003 	ble	187e4 <_dtoa_r+0xd60>
   187d4:	e1a01004 	mov	r1, r4
   187d8:	e1a0000a 	mov	r0, sl
   187dc:	eb000481 	bl	199e8 <__lshift>
   187e0:	e1a04000 	mov	r4, r0
   187e4:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
   187e8:	e3530000 	cmp	r3, #0
   187ec:	0a000015 	beq	18848 <_dtoa_r+0xdc4>
   187f0:	e59d0014 	ldr	r0, [sp, #20]
   187f4:	e1a01004 	mov	r1, r4
   187f8:	eb0004b5 	bl	19ad4 <__mcmp>
   187fc:	e3500000 	cmp	r0, #0
   18800:	aa000010 	bge	18848 <_dtoa_r+0xdc4>
   18804:	e1a0000a 	mov	r0, sl
   18808:	e59d1014 	ldr	r1, [sp, #20]
   1880c:	e3a0200a 	mov	r2, #10
   18810:	e3a03000 	mov	r3, #0
   18814:	eb00032b 	bl	194c8 <__multadd>
   18818:	e58d0014 	str	r0, [sp, #20]
   1881c:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
   18820:	e3500000 	cmp	r0, #0
   18824:	e2499001 	sub	r9, r9, #1
   18828:	0a000005 	beq	18844 <_dtoa_r+0xdc0>
   1882c:	e1a01005 	mov	r1, r5
   18830:	e1a0000a 	mov	r0, sl
   18834:	e3a0200a 	mov	r2, #10
   18838:	e3a03000 	mov	r3, #0
   1883c:	eb000321 	bl	194c8 <__multadd>
   18840:	e1a05000 	mov	r5, r0
   18844:	e59db024 	ldr	fp, [sp, #36]	; 0x24
   18848:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
   1884c:	e35b0000 	cmp	fp, #0
   18850:	c3a03000 	movgt	r3, #0
   18854:	d3a03001 	movle	r3, #1
   18858:	e3510002 	cmp	r1, #2
   1885c:	d3a03000 	movle	r3, #0
   18860:	e3530000 	cmp	r3, #0
   18864:	0a00001b 	beq	188d8 <_dtoa_r+0xe54>
   18868:	e35b0000 	cmp	fp, #0
   1886c:	1a00000d 	bne	188a8 <_dtoa_r+0xe24>
   18870:	e1a01004 	mov	r1, r4
   18874:	e3a02005 	mov	r2, #5
   18878:	e1a0300b 	mov	r3, fp
   1887c:	e1a0000a 	mov	r0, sl
   18880:	eb000310 	bl	194c8 <__multadd>
   18884:	e1a04000 	mov	r4, r0
   18888:	e1a01004 	mov	r1, r4
   1888c:	e59d0014 	ldr	r0, [sp, #20]
   18890:	eb00048f 	bl	19ad4 <__mcmp>
   18894:	e3500000 	cmp	r0, #0
   18898:	ca000008 	bgt	188c0 <_dtoa_r+0xe3c>
   1889c:	ea000001 	b	188a8 <_dtoa_r+0xe24>
   188a0:	e3a04000 	mov	r4, #0
   188a4:	e1a05004 	mov	r5, r4
   188a8:	e59d207c 	ldr	r2, [sp, #124]	; 0x7c
   188ac:	e59d8018 	ldr	r8, [sp, #24]
   188b0:	e1e09002 	mvn	r9, r2
   188b4:	ea000005 	b	188d0 <_dtoa_r+0xe4c>
   188b8:	e59d9034 	ldr	r9, [sp, #52]	; 0x34
   188bc:	e1a05004 	mov	r5, r4
   188c0:	e59d8018 	ldr	r8, [sp, #24]
   188c4:	e3a03031 	mov	r3, #49	; 0x31
   188c8:	e4c83001 	strb	r3, [r8], #1
   188cc:	e2899001 	add	r9, r9, #1
   188d0:	e3a06000 	mov	r6, #0
   188d4:	ea0000eb 	b	18c88 <_dtoa_r+0x1204>
   188d8:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
   188dc:	e3530000 	cmp	r3, #0
   188e0:	0a0000ac 	beq	18b98 <_dtoa_r+0x1114>
   188e4:	e3560000 	cmp	r6, #0
   188e8:	da000004 	ble	18900 <_dtoa_r+0xe7c>
   188ec:	e1a01005 	mov	r1, r5
   188f0:	e1a0000a 	mov	r0, sl
   188f4:	e1a02006 	mov	r2, r6
   188f8:	eb00043a 	bl	199e8 <__lshift>
   188fc:	e1a05000 	mov	r5, r0
   18900:	e3570000 	cmp	r7, #0
   18904:	01a00005 	moveq	r0, r5
   18908:	0a00000e 	beq	18948 <_dtoa_r+0xec4>
   1890c:	e5951004 	ldr	r1, [r5, #4]
   18910:	e1a0000a 	mov	r0, sl
   18914:	eb0002c2 	bl	19424 <_Balloc>
   18918:	e5952010 	ldr	r2, [r5, #16]
   1891c:	e2822002 	add	r2, r2, #2
   18920:	e1a06000 	mov	r6, r0
   18924:	e285100c 	add	r1, r5, #12
   18928:	e1a02102 	lsl	r2, r2, #2
   1892c:	e280000c 	add	r0, r0, #12
   18930:	ebfff56c 	bl	15ee8 <memcpy>
   18934:	e1a0000a 	mov	r0, sl
   18938:	e1a01006 	mov	r1, r6
   1893c:	e3a02001 	mov	r2, #1
   18940:	eb000428 	bl	199e8 <__lshift>
   18944:	eaffffff 	b	18948 <_dtoa_r+0xec4>
   18948:	e59d1018 	ldr	r1, [sp, #24]
   1894c:	e59d2010 	ldr	r2, [sp, #16]
   18950:	e081b00b 	add	fp, r1, fp
   18954:	e2022001 	and	r2, r2, #1
   18958:	e58db020 	str	fp, [sp, #32]
   1895c:	e58d201c 	str	r2, [sp, #28]
   18960:	e1a06005 	mov	r6, r5
   18964:	e2817001 	add	r7, r1, #1
   18968:	e1a05000 	mov	r5, r0
   1896c:	e1a01004 	mov	r1, r4
   18970:	e59d0014 	ldr	r0, [sp, #20]
   18974:	ebfffbd6 	bl	178d4 <quorem>
   18978:	e1a01006 	mov	r1, r6
   1897c:	e2803030 	add	r3, r0, #48	; 0x30
   18980:	e1a0b000 	mov	fp, r0
   18984:	e59d0014 	ldr	r0, [sp, #20]
   18988:	e58d3004 	str	r3, [sp, #4]
   1898c:	eb000450 	bl	19ad4 <__mcmp>
   18990:	e1a02005 	mov	r2, r5
   18994:	e58d000c 	str	r0, [sp, #12]
   18998:	e1a01004 	mov	r1, r4
   1899c:	e1a0000a 	mov	r0, sl
   189a0:	eb000462 	bl	19b30 <__mdiff>
   189a4:	e590200c 	ldr	r2, [r0, #12]
   189a8:	e3520000 	cmp	r2, #0
   189ac:	e2478001 	sub	r8, r7, #1
   189b0:	e1a0c000 	mov	ip, r0
   189b4:	e59d3004 	ldr	r3, [sp, #4]
   189b8:	13a02001 	movne	r2, #1
   189bc:	1a000006 	bne	189dc <_dtoa_r+0xf58>
   189c0:	e1a0100c 	mov	r1, ip
   189c4:	e59d0014 	ldr	r0, [sp, #20]
   189c8:	e58dc008 	str	ip, [sp, #8]
   189cc:	eb000440 	bl	19ad4 <__mcmp>
   189d0:	e99d1008 	ldmib	sp, {r3, ip}
   189d4:	e1a02000 	mov	r2, r0
   189d8:	eaffffff 	b	189dc <_dtoa_r+0xf58>
   189dc:	e1a0000a 	mov	r0, sl
   189e0:	e1a0100c 	mov	r1, ip
   189e4:	e58d2008 	str	r2, [sp, #8]
   189e8:	e58d3004 	str	r3, [sp, #4]
   189ec:	eb0002ae 	bl	194ac <_Bfree>
   189f0:	e59d2008 	ldr	r2, [sp, #8]
   189f4:	e59d0030 	ldr	r0, [sp, #48]	; 0x30
   189f8:	e1920000 	orrs	r0, r2, r0
   189fc:	e59d3004 	ldr	r3, [sp, #4]
   18a00:	1a000008 	bne	18a28 <_dtoa_r+0xfa4>
   18a04:	e59d101c 	ldr	r1, [sp, #28]
   18a08:	e3510000 	cmp	r1, #0
   18a0c:	1a000005 	bne	18a28 <_dtoa_r+0xfa4>
   18a10:	e3530039 	cmp	r3, #57	; 0x39
   18a14:	0a00003b 	beq	18b08 <_dtoa_r+0x1084>
   18a18:	e59d200c 	ldr	r2, [sp, #12]
   18a1c:	e3520000 	cmp	r2, #0
   18a20:	c28b3031 	addgt	r3, fp, #49	; 0x31
   18a24:	ea00003a 	b	18b14 <_dtoa_r+0x1090>
   18a28:	e59d000c 	ldr	r0, [sp, #12]
   18a2c:	e3500000 	cmp	r0, #0
   18a30:	ba000005 	blt	18a4c <_dtoa_r+0xfc8>
   18a34:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
   18a38:	e1900001 	orrs	r0, r0, r1
   18a3c:	1a00002c 	bne	18af4 <_dtoa_r+0x1070>
   18a40:	e59d001c 	ldr	r0, [sp, #28]
   18a44:	e3500000 	cmp	r0, #0
   18a48:	1a000029 	bne	18af4 <_dtoa_r+0x1070>
   18a4c:	e3520000 	cmp	r2, #0
   18a50:	e1a07003 	mov	r7, r3
   18a54:	da00002e 	ble	18b14 <_dtoa_r+0x1090>
   18a58:	e59d1014 	ldr	r1, [sp, #20]
   18a5c:	e3a02001 	mov	r2, #1
   18a60:	e1a0000a 	mov	r0, sl
   18a64:	e58d3004 	str	r3, [sp, #4]
   18a68:	eb0003de 	bl	199e8 <__lshift>
   18a6c:	e1a01004 	mov	r1, r4
   18a70:	e58d0014 	str	r0, [sp, #20]
   18a74:	eb000416 	bl	19ad4 <__mcmp>
   18a78:	e3500000 	cmp	r0, #0
   18a7c:	e59d3004 	ldr	r3, [sp, #4]
   18a80:	ca000002 	bgt	18a90 <_dtoa_r+0x100c>
   18a84:	1a000022 	bne	18b14 <_dtoa_r+0x1090>
   18a88:	e3130001 	tst	r3, #1
   18a8c:	0a000020 	beq	18b14 <_dtoa_r+0x1090>
   18a90:	e3570039 	cmp	r7, #57	; 0x39
   18a94:	e28b3031 	add	r3, fp, #49	; 0x31
   18a98:	0a00001a 	beq	18b08 <_dtoa_r+0x1084>
   18a9c:	ea00001c 	b	18b14 <_dtoa_r+0x1090>
   18aa0:	7ff00000 	.word	0x7ff00000
   18aa4:	0000270f 	.word	0x0000270f
   18aa8:	0001c90c 	.word	0x0001c90c
   18aac:	0001c903 	.word	0x0001c903
   18ab0:	0001c902 	.word	0x0001c902
   18ab4:	fffffbee 	.word	0xfffffbee
   18ab8:	3ff80000 	.word	0x3ff80000
   18abc:	3fd287a7 	.word	0x3fd287a7
   18ac0:	636f4361 	.word	0x636f4361
   18ac4:	3fc68a28 	.word	0x3fc68a28
   18ac8:	8b60c8b3 	.word	0x8b60c8b3
   18acc:	3fd34413 	.word	0x3fd34413
   18ad0:	509f79fb 	.word	0x509f79fb
   18ad4:	0001c3b4 	.word	0x0001c3b4
   18ad8:	0001c4a4 	.word	0x0001c4a4
   18adc:	3ff00000 	.word	0x3ff00000
   18ae0:	40240000 	.word	0x40240000
   18ae4:	401c0000 	.word	0x401c0000
   18ae8:	40140000 	.word	0x40140000
   18aec:	3fe00000 	.word	0x3fe00000
   18af0:	0001c901 	.word	0x0001c901
   18af4:	e3520000 	cmp	r2, #0
   18af8:	da000007 	ble	18b1c <_dtoa_r+0x1098>
   18afc:	e3530039 	cmp	r3, #57	; 0x39
   18b00:	12833001 	addne	r3, r3, #1
   18b04:	1a000002 	bne	18b14 <_dtoa_r+0x1090>
   18b08:	e3a03039 	mov	r3, #57	; 0x39
   18b0c:	e4c83001 	strb	r3, [r8], #1
   18b10:	ea00004d 	b	18c4c <_dtoa_r+0x11c8>
   18b14:	e4c83001 	strb	r3, [r8], #1
   18b18:	ea00005a 	b	18c88 <_dtoa_r+0x1204>
   18b1c:	e59d1020 	ldr	r1, [sp, #32]
   18b20:	e1570001 	cmp	r7, r1
   18b24:	e1a08007 	mov	r8, r7
   18b28:	e5473001 	strb	r3, [r7, #-1]
   18b2c:	0a00002f 	beq	18bf0 <_dtoa_r+0x116c>
   18b30:	e59d1014 	ldr	r1, [sp, #20]
   18b34:	e3a0200a 	mov	r2, #10
   18b38:	e3a03000 	mov	r3, #0
   18b3c:	e1a0000a 	mov	r0, sl
   18b40:	eb000260 	bl	194c8 <__multadd>
   18b44:	e1560005 	cmp	r6, r5
   18b48:	e58d0014 	str	r0, [sp, #20]
   18b4c:	e1a01006 	mov	r1, r6
   18b50:	e1a0000a 	mov	r0, sl
   18b54:	e3a0200a 	mov	r2, #10
   18b58:	e3a03000 	mov	r3, #0
   18b5c:	1a000003 	bne	18b70 <_dtoa_r+0x10ec>
   18b60:	eb000258 	bl	194c8 <__multadd>
   18b64:	e1a06000 	mov	r6, r0
   18b68:	e1a05000 	mov	r5, r0
   18b6c:	ea000007 	b	18b90 <_dtoa_r+0x110c>
   18b70:	eb000254 	bl	194c8 <__multadd>
   18b74:	e1a01005 	mov	r1, r5
   18b78:	e1a06000 	mov	r6, r0
   18b7c:	e3a0200a 	mov	r2, #10
   18b80:	e1a0000a 	mov	r0, sl
   18b84:	e3a03000 	mov	r3, #0
   18b88:	eb00024e 	bl	194c8 <__multadd>
   18b8c:	e1a05000 	mov	r5, r0
   18b90:	e2877001 	add	r7, r7, #1
   18b94:	eaffff74 	b	1896c <_dtoa_r+0xee8>
   18b98:	e59d602c 	ldr	r6, [sp, #44]	; 0x2c
   18b9c:	e59d0014 	ldr	r0, [sp, #20]
   18ba0:	e1a01004 	mov	r1, r4
   18ba4:	ebfffb4a 	bl	178d4 <quorem>
   18ba8:	e59d2018 	ldr	r2, [sp, #24]
   18bac:	e2803030 	add	r3, r0, #48	; 0x30
   18bb0:	e7c23006 	strb	r3, [r2, r6]
   18bb4:	e2866001 	add	r6, r6, #1
   18bb8:	e156000b 	cmp	r6, fp
   18bbc:	aa000006 	bge	18bdc <_dtoa_r+0x1158>
   18bc0:	e1a0000a 	mov	r0, sl
   18bc4:	e59d1014 	ldr	r1, [sp, #20]
   18bc8:	e3a0200a 	mov	r2, #10
   18bcc:	e3a03000 	mov	r3, #0
   18bd0:	eb00023c 	bl	194c8 <__multadd>
   18bd4:	e58d0014 	str	r0, [sp, #20]
   18bd8:	eaffffef 	b	18b9c <_dtoa_r+0x1118>
   18bdc:	e59d8018 	ldr	r8, [sp, #24]
   18be0:	e3a06000 	mov	r6, #0
   18be4:	e35b0001 	cmp	fp, #1
   18be8:	a088800b 	addge	r8, r8, fp
   18bec:	b2888001 	addlt	r8, r8, #1
   18bf0:	e59d1014 	ldr	r1, [sp, #20]
   18bf4:	e3a02001 	mov	r2, #1
   18bf8:	e1a0000a 	mov	r0, sl
   18bfc:	e58d3004 	str	r3, [sp, #4]
   18c00:	eb000378 	bl	199e8 <__lshift>
   18c04:	e1a01004 	mov	r1, r4
   18c08:	e58d0014 	str	r0, [sp, #20]
   18c0c:	eb0003b0 	bl	19ad4 <__mcmp>
   18c10:	e3500000 	cmp	r0, #0
   18c14:	e59d3004 	ldr	r3, [sp, #4]
   18c18:	ca00000b 	bgt	18c4c <_dtoa_r+0x11c8>
   18c1c:	1a000013 	bne	18c70 <_dtoa_r+0x11ec>
   18c20:	e3130001 	tst	r3, #1
   18c24:	1a000008 	bne	18c4c <_dtoa_r+0x11c8>
   18c28:	ea000010 	b	18c70 <_dtoa_r+0x11ec>
   18c2c:	e59d3018 	ldr	r3, [sp, #24]
   18c30:	e153000b 	cmp	r3, fp
   18c34:	1a000005 	bne	18c50 <_dtoa_r+0x11cc>
   18c38:	e59d0018 	ldr	r0, [sp, #24]
   18c3c:	e3a03031 	mov	r3, #49	; 0x31
   18c40:	e2899001 	add	r9, r9, #1
   18c44:	e5c03000 	strb	r3, [r0]
   18c48:	ea00000e 	b	18c88 <_dtoa_r+0x1204>
   18c4c:	e1a0b008 	mov	fp, r8
   18c50:	e55b3001 	ldrb	r3, [fp, #-1]
   18c54:	e3530039 	cmp	r3, #57	; 0x39
   18c58:	e1a0800b 	mov	r8, fp
   18c5c:	e24bb001 	sub	fp, fp, #1
   18c60:	0afffff1 	beq	18c2c <_dtoa_r+0x11a8>
   18c64:	e2833001 	add	r3, r3, #1
   18c68:	e5cb3000 	strb	r3, [fp]
   18c6c:	ea000005 	b	18c88 <_dtoa_r+0x1204>
   18c70:	e1a0b008 	mov	fp, r8
   18c74:	e1a0800b 	mov	r8, fp
   18c78:	e5583001 	ldrb	r3, [r8, #-1]
   18c7c:	e3530030 	cmp	r3, #48	; 0x30
   18c80:	e24bb001 	sub	fp, fp, #1
   18c84:	0afffffa 	beq	18c74 <_dtoa_r+0x11f0>
   18c88:	e1a0000a 	mov	r0, sl
   18c8c:	e1a01004 	mov	r1, r4
   18c90:	eb000205 	bl	194ac <_Bfree>
   18c94:	e3550000 	cmp	r5, #0
   18c98:	0a000009 	beq	18cc4 <_dtoa_r+0x1240>
   18c9c:	e1560005 	cmp	r6, r5
   18ca0:	13560000 	cmpne	r6, #0
   18ca4:	11a0000a 	movne	r0, sl
   18ca8:	11a01006 	movne	r1, r6
   18cac:	1b0001fe 	blne	194ac <_Bfree>
   18cb0:	e1a0000a 	mov	r0, sl
   18cb4:	e1a01005 	mov	r1, r5
   18cb8:	eb0001fb 	bl	194ac <_Bfree>
   18cbc:	ea000000 	b	18cc4 <_dtoa_r+0x1240>
   18cc0:	e59d9034 	ldr	r9, [sp, #52]	; 0x34
   18cc4:	e1a0000a 	mov	r0, sl
   18cc8:	e59d1014 	ldr	r1, [sp, #20]
   18ccc:	eb0001f6 	bl	194ac <_Bfree>
   18cd0:	e3a03000 	mov	r3, #0
   18cd4:	e59d4080 	ldr	r4, [sp, #128]	; 0x80
   18cd8:	e5c83000 	strb	r3, [r8]
   18cdc:	e2893001 	add	r3, r9, #1
   18ce0:	e5843000 	str	r3, [r4]
   18ce4:	e59d4088 	ldr	r4, [sp, #136]	; 0x88
   18ce8:	e3540000 	cmp	r4, #0
   18cec:	15848000 	strne	r8, [r4]
   18cf0:	ea000001 	b	18cfc <_dtoa_r+0x1278>
   18cf4:	e51f420c 	ldr	r4, [pc, #-524]	; 18af0 <_dtoa_r+0x106c>
   18cf8:	e58d4018 	str	r4, [sp, #24]
   18cfc:	e59d0018 	ldr	r0, [sp, #24]
   18d00:	e28dd058 	add	sp, sp, #88	; 0x58
   18d04:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018d08 <_setlocale_r>:
   18d08:	e92d4010 	push	{r4, lr}
   18d0c:	e2524000 	subs	r4, r2, #0
   18d10:	1a000001 	bne	18d1c <_setlocale_r+0x14>
   18d14:	e59f0048 	ldr	r0, [pc, #72]	; 18d64 <_setlocale_r+0x5c>
   18d18:	e8bd8010 	pop	{r4, pc}
   18d1c:	e1a00004 	mov	r0, r4
   18d20:	e59f1040 	ldr	r1, [pc, #64]	; 18d68 <_setlocale_r+0x60>
   18d24:	ebfff4bd 	bl	16020 <strcmp>
   18d28:	e3500000 	cmp	r0, #0
   18d2c:	0afffff8 	beq	18d14 <_setlocale_r+0xc>
   18d30:	e1a00004 	mov	r0, r4
   18d34:	e59f1028 	ldr	r1, [pc, #40]	; 18d64 <_setlocale_r+0x5c>
   18d38:	ebfff4b8 	bl	16020 <strcmp>
   18d3c:	e3500000 	cmp	r0, #0
   18d40:	0afffff3 	beq	18d14 <_setlocale_r+0xc>
   18d44:	e1a00004 	mov	r0, r4
   18d48:	e59f101c 	ldr	r1, [pc, #28]	; 18d6c <_setlocale_r+0x64>
   18d4c:	ebfff4b3 	bl	16020 <strcmp>
   18d50:	e59f300c 	ldr	r3, [pc, #12]	; 18d64 <_setlocale_r+0x5c>
   18d54:	e3500000 	cmp	r0, #0
   18d58:	01a00003 	moveq	r0, r3
   18d5c:	13a00000 	movne	r0, #0
   18d60:	e8bd8010 	pop	{r4, pc}
   18d64:	0001c910 	.word	0x0001c910
   18d68:	0001c912 	.word	0x0001c912
   18d6c:	0001c590 	.word	0x0001c590

00018d70 <__locale_charset>:
   18d70:	e59f0000 	ldr	r0, [pc]	; 18d78 <__locale_charset+0x8>
   18d74:	e12fff1e 	bx	lr
   18d78:	40000440 	.word	0x40000440

00018d7c <__locale_mb_cur_max>:
   18d7c:	e59f3004 	ldr	r3, [pc, #4]	; 18d88 <__locale_mb_cur_max+0xc>
   18d80:	e5930020 	ldr	r0, [r3, #32]
   18d84:	e12fff1e 	bx	lr
   18d88:	40000440 	.word	0x40000440

00018d8c <__locale_msgcharset>:
   18d8c:	e59f0000 	ldr	r0, [pc]	; 18d94 <__locale_msgcharset+0x8>
   18d90:	e12fff1e 	bx	lr
   18d94:	40000464 	.word	0x40000464

00018d98 <__locale_cjk_lang>:
   18d98:	e3a00000 	mov	r0, #0
   18d9c:	e12fff1e 	bx	lr

00018da0 <_localeconv_r>:
   18da0:	e59f0000 	ldr	r0, [pc]	; 18da8 <_localeconv_r+0x8>
   18da4:	e12fff1e 	bx	lr
   18da8:	40000484 	.word	0x40000484

00018dac <setlocale>:
   18dac:	e1a02001 	mov	r2, r1
   18db0:	e59f100c 	ldr	r1, [pc, #12]	; 18dc4 <setlocale+0x18>
   18db4:	e1a03000 	mov	r3, r0
   18db8:	e5910000 	ldr	r0, [r1]
   18dbc:	e1a01003 	mov	r1, r3
   18dc0:	eaffffd0 	b	18d08 <_setlocale_r>
   18dc4:	40000018 	.word	0x40000018

00018dc8 <localeconv>:
   18dc8:	e59f0000 	ldr	r0, [pc]	; 18dd0 <localeconv+0x8>
   18dcc:	e12fff1e 	bx	lr
   18dd0:	40000484 	.word	0x40000484

00018dd4 <_malloc_r>:
   18dd4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18dd8:	e281400b 	add	r4, r1, #11
   18ddc:	e3540016 	cmp	r4, #22
   18de0:	83c44007 	bichi	r4, r4, #7
   18de4:	93a04010 	movls	r4, #16
   18de8:	e1540001 	cmp	r4, r1
   18dec:	23a01000 	movcs	r1, #0
   18df0:	33a01001 	movcc	r1, #1
   18df4:	e1911fa4 	orrs	r1, r1, r4, lsr #31
   18df8:	13a0300c 	movne	r3, #12
   18dfc:	e1a06000 	mov	r6, r0
   18e00:	15803000 	strne	r3, [r0]
   18e04:	1a000165 	bne	193a0 <_malloc_r+0x5cc>
   18e08:	eb000183 	bl	1941c <__malloc_lock>
   18e0c:	e3540f7e 	cmp	r4, #504	; 0x1f8
   18e10:	2a000011 	bcs	18e5c <_malloc_r+0x88>
   18e14:	e59f35c0 	ldr	r3, [pc, #1472]	; 193dc <_malloc_r+0x608>
   18e18:	e1a021a4 	lsr	r2, r4, #3
   18e1c:	e0833182 	add	r3, r3, r2, lsl #3
   18e20:	e593500c 	ldr	r5, [r3, #12]
   18e24:	e1550003 	cmp	r5, r3
   18e28:	1a000004 	bne	18e40 <_malloc_r+0x6c>
   18e2c:	e2853008 	add	r3, r5, #8
   18e30:	e5955014 	ldr	r5, [r5, #20]
   18e34:	e1550003 	cmp	r5, r3
   18e38:	02822002 	addeq	r2, r2, #2
   18e3c:	0a000036 	beq	18f1c <_malloc_r+0x148>
   18e40:	e2851008 	add	r1, r5, #8
   18e44:	e8910006 	ldm	r1, {r1, r2}
   18e48:	e5953004 	ldr	r3, [r5, #4]
   18e4c:	e581200c 	str	r2, [r1, #12]
   18e50:	e3c33003 	bic	r3, r3, #3
   18e54:	e5821008 	str	r1, [r2, #8]
   18e58:	ea000048 	b	18f80 <_malloc_r+0x1ac>
   18e5c:	e1b024a4 	lsrs	r2, r4, #9
   18e60:	01a021a4 	lsreq	r2, r4, #3
   18e64:	0a000013 	beq	18eb8 <_malloc_r+0xe4>
   18e68:	e3520004 	cmp	r2, #4
   18e6c:	91a02324 	lsrls	r2, r4, #6
   18e70:	92822038 	addls	r2, r2, #56	; 0x38
   18e74:	9a00000f 	bls	18eb8 <_malloc_r+0xe4>
   18e78:	e3520014 	cmp	r2, #20
   18e7c:	9282205b 	addls	r2, r2, #91	; 0x5b
   18e80:	9a00000c 	bls	18eb8 <_malloc_r+0xe4>
   18e84:	e3520054 	cmp	r2, #84	; 0x54
   18e88:	91a02624 	lsrls	r2, r4, #12
   18e8c:	9282206e 	addls	r2, r2, #110	; 0x6e
   18e90:	9a000008 	bls	18eb8 <_malloc_r+0xe4>
   18e94:	e3520f55 	cmp	r2, #340	; 0x154
   18e98:	91a027a4 	lsrls	r2, r4, #15
   18e9c:	92822077 	addls	r2, r2, #119	; 0x77
   18ea0:	9a000004 	bls	18eb8 <_malloc_r+0xe4>
   18ea4:	e59f3534 	ldr	r3, [pc, #1332]	; 193e0 <_malloc_r+0x60c>
   18ea8:	e1520003 	cmp	r2, r3
   18eac:	91a02924 	lsrls	r2, r4, #18
   18eb0:	9282207c 	addls	r2, r2, #124	; 0x7c
   18eb4:	83a0207e 	movhi	r2, #126	; 0x7e
   18eb8:	e59f351c 	ldr	r3, [pc, #1308]	; 193dc <_malloc_r+0x608>
   18ebc:	e0833182 	add	r3, r3, r2, lsl #3
   18ec0:	e593500c 	ldr	r5, [r3, #12]
   18ec4:	ea000011 	b	18f10 <_malloc_r+0x13c>
   18ec8:	e5951004 	ldr	r1, [r5, #4]
   18ecc:	e3c11003 	bic	r1, r1, #3
   18ed0:	e0640001 	rsb	r0, r4, r1
   18ed4:	e350000f 	cmp	r0, #15
   18ed8:	c2422001 	subgt	r2, r2, #1
   18edc:	ca00000d 	bgt	18f18 <_malloc_r+0x144>
   18ee0:	e3500000 	cmp	r0, #0
   18ee4:	ba000008 	blt	18f0c <_malloc_r+0x138>
   18ee8:	e2852008 	add	r2, r5, #8
   18eec:	e892000c 	ldm	r2, {r2, r3}
   18ef0:	e582300c 	str	r3, [r2, #12]
   18ef4:	e5832008 	str	r2, [r3, #8]
   18ef8:	e0853001 	add	r3, r5, r1
   18efc:	e5932004 	ldr	r2, [r3, #4]
   18f00:	e3822001 	orr	r2, r2, #1
   18f04:	e5832004 	str	r2, [r3, #4]
   18f08:	ea00012e 	b	193c8 <_malloc_r+0x5f4>
   18f0c:	e595500c 	ldr	r5, [r5, #12]
   18f10:	e1550003 	cmp	r5, r3
   18f14:	1affffeb 	bne	18ec8 <_malloc_r+0xf4>
   18f18:	e2822001 	add	r2, r2, #1
   18f1c:	e59f14b8 	ldr	r1, [pc, #1208]	; 193dc <_malloc_r+0x608>
   18f20:	e5915010 	ldr	r5, [r1, #16]
   18f24:	e281c008 	add	ip, r1, #8
   18f28:	e155000c 	cmp	r5, ip
   18f2c:	0a000051 	beq	19078 <_malloc_r+0x2a4>
   18f30:	e5953004 	ldr	r3, [r5, #4]
   18f34:	e3c33003 	bic	r3, r3, #3
   18f38:	e0640003 	rsb	r0, r4, r3
   18f3c:	e350000f 	cmp	r0, #15
   18f40:	da00000a 	ble	18f70 <_malloc_r+0x19c>
   18f44:	e0853004 	add	r3, r5, r4
   18f48:	e3802001 	orr	r2, r0, #1
   18f4c:	e3844001 	orr	r4, r4, #1
   18f50:	e5854004 	str	r4, [r5, #4]
   18f54:	e5813014 	str	r3, [r1, #20]
   18f58:	e5813010 	str	r3, [r1, #16]
   18f5c:	e583c00c 	str	ip, [r3, #12]
   18f60:	e583c008 	str	ip, [r3, #8]
   18f64:	e5832004 	str	r2, [r3, #4]
   18f68:	e7830000 	str	r0, [r3, r0]
   18f6c:	ea000115 	b	193c8 <_malloc_r+0x5f4>
   18f70:	e3500000 	cmp	r0, #0
   18f74:	e581c014 	str	ip, [r1, #20]
   18f78:	e581c010 	str	ip, [r1, #16]
   18f7c:	ba000001 	blt	18f88 <_malloc_r+0x1b4>
   18f80:	e0853003 	add	r3, r5, r3
   18f84:	eaffffdc 	b	18efc <_malloc_r+0x128>
   18f88:	e3530c02 	cmp	r3, #512	; 0x200
   18f8c:	2a00000c 	bcs	18fc4 <_malloc_r+0x1f0>
   18f90:	e1a031a3 	lsr	r3, r3, #3
   18f94:	e591c004 	ldr	ip, [r1, #4]
   18f98:	e1a00143 	asr	r0, r3, #2
   18f9c:	e3a0e001 	mov	lr, #1
   18fa0:	e18c001e 	orr	r0, ip, lr, lsl r0
   18fa4:	e5810004 	str	r0, [r1, #4]
   18fa8:	e0811183 	add	r1, r1, r3, lsl #3
   18fac:	e5913008 	ldr	r3, [r1, #8]
   18fb0:	e585100c 	str	r1, [r5, #12]
   18fb4:	e5853008 	str	r3, [r5, #8]
   18fb8:	e583500c 	str	r5, [r3, #12]
   18fbc:	e5815008 	str	r5, [r1, #8]
   18fc0:	ea00002c 	b	19078 <_malloc_r+0x2a4>
   18fc4:	e1a004a3 	lsr	r0, r3, #9
   18fc8:	e3500004 	cmp	r0, #4
   18fcc:	91a00323 	lsrls	r0, r3, #6
   18fd0:	92800038 	addls	r0, r0, #56	; 0x38
   18fd4:	9a00000f 	bls	19018 <_malloc_r+0x244>
   18fd8:	e3500014 	cmp	r0, #20
   18fdc:	9280005b 	addls	r0, r0, #91	; 0x5b
   18fe0:	9a00000c 	bls	19018 <_malloc_r+0x244>
   18fe4:	e3500054 	cmp	r0, #84	; 0x54
   18fe8:	91a00623 	lsrls	r0, r3, #12
   18fec:	9280006e 	addls	r0, r0, #110	; 0x6e
   18ff0:	9a000008 	bls	19018 <_malloc_r+0x244>
   18ff4:	e3500f55 	cmp	r0, #340	; 0x154
   18ff8:	91a007a3 	lsrls	r0, r3, #15
   18ffc:	92800077 	addls	r0, r0, #119	; 0x77
   19000:	9a000004 	bls	19018 <_malloc_r+0x244>
   19004:	e59f13d4 	ldr	r1, [pc, #980]	; 193e0 <_malloc_r+0x60c>
   19008:	e1500001 	cmp	r0, r1
   1900c:	91a00923 	lsrls	r0, r3, #18
   19010:	9280007c 	addls	r0, r0, #124	; 0x7c
   19014:	83a0007e 	movhi	r0, #126	; 0x7e
   19018:	e59fe3bc 	ldr	lr, [pc, #956]	; 193dc <_malloc_r+0x608>
   1901c:	e08ec180 	add	ip, lr, r0, lsl #3
   19020:	e59c1008 	ldr	r1, [ip, #8]
   19024:	e151000c 	cmp	r1, ip
   19028:	1a000009 	bne	19054 <_malloc_r+0x280>
   1902c:	e59e3004 	ldr	r3, [lr, #4]
   19030:	e1a00140 	asr	r0, r0, #2
   19034:	e3a0c001 	mov	ip, #1
   19038:	e183001c 	orr	r0, r3, ip, lsl r0
   1903c:	e1a03001 	mov	r3, r1
   19040:	e58e0004 	str	r0, [lr, #4]
   19044:	ea000007 	b	19068 <_malloc_r+0x294>
   19048:	e5911008 	ldr	r1, [r1, #8]
   1904c:	e151000c 	cmp	r1, ip
   19050:	0a000003 	beq	19064 <_malloc_r+0x290>
   19054:	e5910004 	ldr	r0, [r1, #4]
   19058:	e3c00003 	bic	r0, r0, #3
   1905c:	e1530000 	cmp	r3, r0
   19060:	3afffff8 	bcc	19048 <_malloc_r+0x274>
   19064:	e591300c 	ldr	r3, [r1, #12]
   19068:	e585300c 	str	r3, [r5, #12]
   1906c:	e5851008 	str	r1, [r5, #8]
   19070:	e581500c 	str	r5, [r1, #12]
   19074:	e5835008 	str	r5, [r3, #8]
   19078:	e3a01001 	mov	r1, #1
   1907c:	e1a03142 	asr	r3, r2, #2
   19080:	e1a03311 	lsl	r3, r1, r3
   19084:	e59f1350 	ldr	r1, [pc, #848]	; 193dc <_malloc_r+0x608>
   19088:	e5911004 	ldr	r1, [r1, #4]
   1908c:	e1530001 	cmp	r3, r1
   19090:	8a00004e 	bhi	191d0 <_malloc_r+0x3fc>
   19094:	e1130001 	tst	r3, r1
   19098:	1a000004 	bne	190b0 <_malloc_r+0x2dc>
   1909c:	e3c22003 	bic	r2, r2, #3
   190a0:	e1a03083 	lsl	r3, r3, #1
   190a4:	e1130001 	tst	r3, r1
   190a8:	e2822004 	add	r2, r2, #4
   190ac:	0afffffb 	beq	190a0 <_malloc_r+0x2cc>
   190b0:	e59f0324 	ldr	r0, [pc, #804]	; 193dc <_malloc_r+0x608>
   190b4:	e0807182 	add	r7, r0, r2, lsl #3
   190b8:	e1a0e007 	mov	lr, r7
   190bc:	e1a0c002 	mov	ip, r2
   190c0:	e59e500c 	ldr	r5, [lr, #12]
   190c4:	ea000023 	b	19158 <_malloc_r+0x384>
   190c8:	e5958004 	ldr	r8, [r5, #4]
   190cc:	e3c88003 	bic	r8, r8, #3
   190d0:	e0641008 	rsb	r1, r4, r8
   190d4:	e351000f 	cmp	r1, #15
   190d8:	da000010 	ble	19120 <_malloc_r+0x34c>
   190dc:	e0853004 	add	r3, r5, r4
   190e0:	e3844001 	orr	r4, r4, #1
   190e4:	e595200c 	ldr	r2, [r5, #12]
   190e8:	e5854004 	str	r4, [r5, #4]
   190ec:	e5b50008 	ldr	r0, [r5, #8]!
   190f0:	e580200c 	str	r2, [r0, #12]
   190f4:	e5820008 	str	r0, [r2, #8]
   190f8:	e59f22dc 	ldr	r2, [pc, #732]	; 193dc <_malloc_r+0x608>
   190fc:	e5823014 	str	r3, [r2, #20]
   19100:	e5823010 	str	r3, [r2, #16]
   19104:	e2822008 	add	r2, r2, #8
   19108:	e583200c 	str	r2, [r3, #12]
   1910c:	e5832008 	str	r2, [r3, #8]
   19110:	e3812001 	orr	r2, r1, #1
   19114:	e5832004 	str	r2, [r3, #4]
   19118:	e7831001 	str	r1, [r3, r1]
   1911c:	ea000009 	b	19148 <_malloc_r+0x374>
   19120:	e3510000 	cmp	r1, #0
   19124:	ba00000a 	blt	19154 <_malloc_r+0x380>
   19128:	e0853008 	add	r3, r5, r8
   1912c:	e5932004 	ldr	r2, [r3, #4]
   19130:	e3822001 	orr	r2, r2, #1
   19134:	e5832004 	str	r2, [r3, #4]
   19138:	e595300c 	ldr	r3, [r5, #12]
   1913c:	e5b52008 	ldr	r2, [r5, #8]!
   19140:	e582300c 	str	r3, [r2, #12]
   19144:	e5832008 	str	r2, [r3, #8]
   19148:	e1a00006 	mov	r0, r6
   1914c:	eb0000b3 	bl	19420 <__malloc_unlock>
   19150:	ea00009f 	b	193d4 <_malloc_r+0x600>
   19154:	e595500c 	ldr	r5, [r5, #12]
   19158:	e155000e 	cmp	r5, lr
   1915c:	1affffd9 	bne	190c8 <_malloc_r+0x2f4>
   19160:	e28cc001 	add	ip, ip, #1
   19164:	e31c0003 	tst	ip, #3
   19168:	e285e008 	add	lr, r5, #8
   1916c:	1affffd3 	bne	190c0 <_malloc_r+0x2ec>
   19170:	e1a01007 	mov	r1, r7
   19174:	e3120003 	tst	r2, #3
   19178:	05902004 	ldreq	r2, [r0, #4]
   1917c:	01c22003 	biceq	r2, r2, r3
   19180:	05802004 	streq	r2, [r0, #4]
   19184:	0a000004 	beq	1919c <_malloc_r+0x3c8>
   19188:	e241e008 	sub	lr, r1, #8
   1918c:	e5911000 	ldr	r1, [r1]
   19190:	e151000e 	cmp	r1, lr
   19194:	e2422001 	sub	r2, r2, #1
   19198:	0afffff5 	beq	19174 <_malloc_r+0x3a0>
   1919c:	e5901004 	ldr	r1, [r0, #4]
   191a0:	e1a03083 	lsl	r3, r3, #1
   191a4:	e1530001 	cmp	r3, r1
   191a8:	8a000008 	bhi	191d0 <_malloc_r+0x3fc>
   191ac:	e3530000 	cmp	r3, #0
   191b0:	0a000006 	beq	191d0 <_malloc_r+0x3fc>
   191b4:	e1a0200c 	mov	r2, ip
   191b8:	ea000001 	b	191c4 <_malloc_r+0x3f0>
   191bc:	e2822004 	add	r2, r2, #4
   191c0:	e1a03083 	lsl	r3, r3, #1
   191c4:	e1130001 	tst	r3, r1
   191c8:	1affffb9 	bne	190b4 <_malloc_r+0x2e0>
   191cc:	eafffffa 	b	191bc <_malloc_r+0x3e8>
   191d0:	e59f3204 	ldr	r3, [pc, #516]	; 193dc <_malloc_r+0x608>
   191d4:	e5937008 	ldr	r7, [r3, #8]
   191d8:	e597a004 	ldr	sl, [r7, #4]
   191dc:	e3caa003 	bic	sl, sl, #3
   191e0:	e15a0004 	cmp	sl, r4
   191e4:	e1a02003 	mov	r2, r3
   191e8:	3a000002 	bcc	191f8 <_malloc_r+0x424>
   191ec:	e064300a 	rsb	r3, r4, sl
   191f0:	e353000f 	cmp	r3, #15
   191f4:	ca00006b 	bgt	193a8 <_malloc_r+0x5d4>
   191f8:	e59f31e4 	ldr	r3, [pc, #484]	; 193e4 <_malloc_r+0x610>
   191fc:	e5938000 	ldr	r8, [r3]
   19200:	e5923408 	ldr	r3, [r2, #1032]	; 0x408
   19204:	e0848008 	add	r8, r4, r8
   19208:	e3730001 	cmn	r3, #1
   1920c:	12888a01 	addne	r8, r8, #4096	; 0x1000
   19210:	1288800f 	addne	r8, r8, #15
   19214:	13c88eff 	bicne	r8, r8, #4080	; 0xff0
   19218:	02888010 	addeq	r8, r8, #16
   1921c:	13c8800f 	bicne	r8, r8, #15
   19220:	e1a00006 	mov	r0, r6
   19224:	e1a01008 	mov	r1, r8
   19228:	ebffe535 	bl	12704 <_sbrk_r>
   1922c:	e3700001 	cmn	r0, #1
   19230:	e087900a 	add	r9, r7, sl
   19234:	e1a05000 	mov	r5, r0
   19238:	0a00004d 	beq	19374 <_malloc_r+0x5a0>
   1923c:	e1500009 	cmp	r0, r9
   19240:	2a000002 	bcs	19250 <_malloc_r+0x47c>
   19244:	e59f3190 	ldr	r3, [pc, #400]	; 193dc <_malloc_r+0x608>
   19248:	e1570003 	cmp	r7, r3
   1924c:	1a000048 	bne	19374 <_malloc_r+0x5a0>
   19250:	e59f218c 	ldr	r2, [pc, #396]	; 193e4 <_malloc_r+0x610>
   19254:	e5923004 	ldr	r3, [r2, #4]
   19258:	e1550009 	cmp	r5, r9
   1925c:	e0883003 	add	r3, r8, r3
   19260:	e5823004 	str	r3, [r2, #4]
   19264:	e59f2170 	ldr	r2, [pc, #368]	; 193dc <_malloc_r+0x608>
   19268:	1a000005 	bne	19284 <_malloc_r+0x4b0>
   1926c:	e1b01a05 	lsls	r1, r5, #20
   19270:	05923008 	ldreq	r3, [r2, #8]
   19274:	0088800a 	addeq	r8, r8, sl
   19278:	03888001 	orreq	r8, r8, #1
   1927c:	05838004 	streq	r8, [r3, #4]
   19280:	0a000032 	beq	19350 <_malloc_r+0x57c>
   19284:	e5922408 	ldr	r2, [r2, #1032]	; 0x408
   19288:	e3720001 	cmn	r2, #1
   1928c:	159f2150 	ldrne	r2, [pc, #336]	; 193e4 <_malloc_r+0x610>
   19290:	10699005 	rsbne	r9, r9, r5
   19294:	059f3140 	ldreq	r3, [pc, #320]	; 193dc <_malloc_r+0x608>
   19298:	10833009 	addne	r3, r3, r9
   1929c:	05835408 	streq	r5, [r3, #1032]	; 0x408
   192a0:	15823004 	strne	r3, [r2, #4]
   192a4:	e2153007 	ands	r3, r5, #7
   192a8:	12633008 	rsbne	r3, r3, #8
   192ac:	10855003 	addne	r5, r5, r3
   192b0:	e0858008 	add	r8, r5, r8
   192b4:	e2833a01 	add	r3, r3, #4096	; 0x1000
   192b8:	e1a08a08 	lsl	r8, r8, #20
   192bc:	e0438a28 	sub	r8, r3, r8, lsr #20
   192c0:	e1a01008 	mov	r1, r8
   192c4:	e1a00006 	mov	r0, r6
   192c8:	ebffe50d 	bl	12704 <_sbrk_r>
   192cc:	e59f3110 	ldr	r3, [pc, #272]	; 193e4 <_malloc_r+0x610>
   192d0:	e3700001 	cmn	r0, #1
   192d4:	e5932004 	ldr	r2, [r3, #4]
   192d8:	03a08000 	moveq	r8, #0
   192dc:	01a00005 	moveq	r0, r5
   192e0:	e0882002 	add	r2, r8, r2
   192e4:	e5832004 	str	r2, [r3, #4]
   192e8:	e0650000 	rsb	r0, r5, r0
   192ec:	e59f30e8 	ldr	r3, [pc, #232]	; 193dc <_malloc_r+0x608>
   192f0:	e0808008 	add	r8, r0, r8
   192f4:	e3888001 	orr	r8, r8, #1
   192f8:	e1570003 	cmp	r7, r3
   192fc:	e5835008 	str	r5, [r3, #8]
   19300:	e5858004 	str	r8, [r5, #4]
   19304:	0a000011 	beq	19350 <_malloc_r+0x57c>
   19308:	e35a000f 	cmp	sl, #15
   1930c:	93a03001 	movls	r3, #1
   19310:	95853004 	strls	r3, [r5, #4]
   19314:	9a000016 	bls	19374 <_malloc_r+0x5a0>
   19318:	e5973004 	ldr	r3, [r7, #4]
   1931c:	e24aa00c 	sub	sl, sl, #12
   19320:	e3caa007 	bic	sl, sl, #7
   19324:	e2033001 	and	r3, r3, #1
   19328:	e18a3003 	orr	r3, sl, r3
   1932c:	e5873004 	str	r3, [r7, #4]
   19330:	e3a02005 	mov	r2, #5
   19334:	e087300a 	add	r3, r7, sl
   19338:	e35a000f 	cmp	sl, #15
   1933c:	e5832004 	str	r2, [r3, #4]
   19340:	e5832008 	str	r2, [r3, #8]
   19344:	81a00006 	movhi	r0, r6
   19348:	82871008 	addhi	r1, r7, #8
   1934c:	8b0006cc 	blhi	1ae84 <_free_r>
   19350:	e59f208c 	ldr	r2, [pc, #140]	; 193e4 <_malloc_r+0x610>
   19354:	e5923004 	ldr	r3, [r2, #4]
   19358:	e592102c 	ldr	r1, [r2, #44]	; 0x2c
   1935c:	e1530001 	cmp	r3, r1
   19360:	8582302c 	strhi	r3, [r2, #44]	; 0x2c
   19364:	e5922030 	ldr	r2, [r2, #48]	; 0x30
   19368:	e1530002 	cmp	r3, r2
   1936c:	859f2070 	ldrhi	r2, [pc, #112]	; 193e4 <_malloc_r+0x610>
   19370:	85823030 	strhi	r3, [r2, #48]	; 0x30
   19374:	e59f3060 	ldr	r3, [pc, #96]	; 193dc <_malloc_r+0x608>
   19378:	e5933008 	ldr	r3, [r3, #8]
   1937c:	e5932004 	ldr	r2, [r3, #4]
   19380:	e3c22003 	bic	r2, r2, #3
   19384:	e1520004 	cmp	r2, r4
   19388:	e0643002 	rsb	r3, r4, r2
   1938c:	3a000001 	bcc	19398 <_malloc_r+0x5c4>
   19390:	e353000f 	cmp	r3, #15
   19394:	ca000003 	bgt	193a8 <_malloc_r+0x5d4>
   19398:	e1a00006 	mov	r0, r6
   1939c:	eb00001f 	bl	19420 <__malloc_unlock>
   193a0:	e3a05000 	mov	r5, #0
   193a4:	ea00000a 	b	193d4 <_malloc_r+0x600>
   193a8:	e59f202c 	ldr	r2, [pc, #44]	; 193dc <_malloc_r+0x608>
   193ac:	e5925008 	ldr	r5, [r2, #8]
   193b0:	e3841001 	orr	r1, r4, #1
   193b4:	e3833001 	orr	r3, r3, #1
   193b8:	e0854004 	add	r4, r5, r4
   193bc:	e5851004 	str	r1, [r5, #4]
   193c0:	e5824008 	str	r4, [r2, #8]
   193c4:	e5843004 	str	r3, [r4, #4]
   193c8:	e1a00006 	mov	r0, r6
   193cc:	eb000013 	bl	19420 <__malloc_unlock>
   193d0:	e2855008 	add	r5, r5, #8
   193d4:	e1a00005 	mov	r0, r5
   193d8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   193dc:	400004bc 	.word	0x400004bc
   193e0:	00000554 	.word	0x00000554
   193e4:	40000c24 	.word	0x40000c24

000193e8 <memchr>:
   193e8:	e20110ff 	and	r1, r1, #255	; 0xff
   193ec:	e1a03000 	mov	r3, r0
   193f0:	e0802002 	add	r2, r0, r2
   193f4:	ea000003 	b	19408 <memchr+0x20>
   193f8:	e5d0c000 	ldrb	ip, [r0]
   193fc:	e15c0001 	cmp	ip, r1
   19400:	e2833001 	add	r3, r3, #1
   19404:	012fff1e 	bxeq	lr
   19408:	e1530002 	cmp	r3, r2
   1940c:	e1a00003 	mov	r0, r3
   19410:	1afffff8 	bne	193f8 <memchr+0x10>
   19414:	e3a00000 	mov	r0, #0
   19418:	e12fff1e 	bx	lr

0001941c <__malloc_lock>:
   1941c:	e12fff1e 	bx	lr

00019420 <__malloc_unlock>:
   19420:	e12fff1e 	bx	lr

00019424 <_Balloc>:
   19424:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
   19428:	e3530000 	cmp	r3, #0
   1942c:	e92d4070 	push	{r4, r5, r6, lr}
   19430:	e1a05000 	mov	r5, r0
   19434:	e1a04001 	mov	r4, r1
   19438:	0a000006 	beq	19458 <_Balloc+0x34>
   1943c:	e595204c 	ldr	r2, [r5, #76]	; 0x4c
   19440:	e7920104 	ldr	r0, [r2, r4, lsl #2]
   19444:	e3500000 	cmp	r0, #0
   19448:	15901000 	ldrne	r1, [r0]
   1944c:	17821104 	strne	r1, [r2, r4, lsl #2]
   19450:	1a000011 	bne	1949c <_Balloc+0x78>
   19454:	ea000007 	b	19478 <_Balloc+0x54>
   19458:	e3a01004 	mov	r1, #4
   1945c:	e3a02021 	mov	r2, #33	; 0x21
   19460:	eb000626 	bl	1ad00 <_calloc_r>
   19464:	e3500000 	cmp	r0, #0
   19468:	e585004c 	str	r0, [r5, #76]	; 0x4c
   1946c:	1afffff2 	bne	1943c <_Balloc+0x18>
   19470:	e3a00000 	mov	r0, #0
   19474:	e8bd8070 	pop	{r4, r5, r6, pc}
   19478:	e3a01001 	mov	r1, #1
   1947c:	e1a06411 	lsl	r6, r1, r4
   19480:	e2862005 	add	r2, r6, #5
   19484:	e1a00005 	mov	r0, r5
   19488:	e1a02102 	lsl	r2, r2, #2
   1948c:	eb00061b 	bl	1ad00 <_calloc_r>
   19490:	e3500000 	cmp	r0, #0
   19494:	0afffff5 	beq	19470 <_Balloc+0x4c>
   19498:	e9800050 	stmib	r0, {r4, r6}
   1949c:	e3a02000 	mov	r2, #0
   194a0:	e5802010 	str	r2, [r0, #16]
   194a4:	e580200c 	str	r2, [r0, #12]
   194a8:	e8bd8070 	pop	{r4, r5, r6, pc}

000194ac <_Bfree>:
   194ac:	e3510000 	cmp	r1, #0
   194b0:	1590304c 	ldrne	r3, [r0, #76]	; 0x4c
   194b4:	15912004 	ldrne	r2, [r1, #4]
   194b8:	17930102 	ldrne	r0, [r3, r2, lsl #2]
   194bc:	15810000 	strne	r0, [r1]
   194c0:	17831102 	strne	r1, [r3, r2, lsl #2]
   194c4:	e12fff1e 	bx	lr

000194c8 <__multadd>:
   194c8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   194cc:	e1a04001 	mov	r4, r1
   194d0:	e1a06003 	mov	r6, r3
   194d4:	e5915010 	ldr	r5, [r1, #16]
   194d8:	e2813014 	add	r3, r1, #20
   194dc:	e1a07000 	mov	r7, r0
   194e0:	e3a01000 	mov	r1, #0
   194e4:	e1d3c0b0 	ldrh	ip, [r3]
   194e8:	e1d300b2 	ldrh	r0, [r3, #2]
   194ec:	e02c6c92 	mla	ip, r2, ip, r6
   194f0:	e0000092 	mul	r0, r2, r0
   194f4:	e080082c 	add	r0, r0, ip, lsr #16
   194f8:	e1a0c80c 	lsl	ip, ip, #16
   194fc:	e1a0c82c 	lsr	ip, ip, #16
   19500:	e2811001 	add	r1, r1, #1
   19504:	e1a06820 	lsr	r6, r0, #16
   19508:	e1510005 	cmp	r1, r5
   1950c:	e08c0800 	add	r0, ip, r0, lsl #16
   19510:	e4830004 	str	r0, [r3], #4
   19514:	bafffff2 	blt	194e4 <__multadd+0x1c>
   19518:	e3560000 	cmp	r6, #0
   1951c:	0a000015 	beq	19578 <__multadd+0xb0>
   19520:	e5943008 	ldr	r3, [r4, #8]
   19524:	e1550003 	cmp	r5, r3
   19528:	ba00000e 	blt	19568 <__multadd+0xa0>
   1952c:	e5941004 	ldr	r1, [r4, #4]
   19530:	e1a00007 	mov	r0, r7
   19534:	e2811001 	add	r1, r1, #1
   19538:	ebffffb9 	bl	19424 <_Balloc>
   1953c:	e5942010 	ldr	r2, [r4, #16]
   19540:	e2822002 	add	r2, r2, #2
   19544:	e284100c 	add	r1, r4, #12
   19548:	e1a08000 	mov	r8, r0
   1954c:	e1a02102 	lsl	r2, r2, #2
   19550:	e280000c 	add	r0, r0, #12
   19554:	ebfff263 	bl	15ee8 <memcpy>
   19558:	e1a01004 	mov	r1, r4
   1955c:	e1a00007 	mov	r0, r7
   19560:	ebffffd1 	bl	194ac <_Bfree>
   19564:	e1a04008 	mov	r4, r8
   19568:	e2853005 	add	r3, r5, #5
   1956c:	e2855001 	add	r5, r5, #1
   19570:	e7846103 	str	r6, [r4, r3, lsl #2]
   19574:	e5845010 	str	r5, [r4, #16]
   19578:	e1a00004 	mov	r0, r4
   1957c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00019580 <__s2b>:
   19580:	e92d45f0 	push	{r4, r5, r6, r7, r8, sl, lr}
   19584:	e1a05000 	mov	r5, r0
   19588:	e1a06001 	mov	r6, r1
   1958c:	e2830008 	add	r0, r3, #8
   19590:	e3a01009 	mov	r1, #9
   19594:	e1a08003 	mov	r8, r3
   19598:	e1a04002 	mov	r4, r2
   1959c:	eb000837 	bl	1b680 <__aeabi_idiv>
   195a0:	e3a03001 	mov	r3, #1
   195a4:	e3a01000 	mov	r1, #0
   195a8:	ea000001 	b	195b4 <__s2b+0x34>
   195ac:	e1a03083 	lsl	r3, r3, #1
   195b0:	e2811001 	add	r1, r1, #1
   195b4:	e1500003 	cmp	r0, r3
   195b8:	cafffffb 	bgt	195ac <__s2b+0x2c>
   195bc:	e1a00005 	mov	r0, r5
   195c0:	ebffff97 	bl	19424 <_Balloc>
   195c4:	e59d301c 	ldr	r3, [sp, #28]
   195c8:	e3540009 	cmp	r4, #9
   195cc:	e5803014 	str	r3, [r0, #20]
   195d0:	e3a03001 	mov	r3, #1
   195d4:	e1a01000 	mov	r1, r0
   195d8:	e5803010 	str	r3, [r0, #16]
   195dc:	d286600a 	addle	r6, r6, #10
   195e0:	d3a04009 	movle	r4, #9
   195e4:	da00000d 	ble	19620 <__s2b+0xa0>
   195e8:	e286a009 	add	sl, r6, #9
   195ec:	e1a0700a 	mov	r7, sl
   195f0:	e0866004 	add	r6, r6, r4
   195f4:	e4d73001 	ldrb	r3, [r7], #1
   195f8:	e1a00005 	mov	r0, r5
   195fc:	e3a0200a 	mov	r2, #10
   19600:	e2433030 	sub	r3, r3, #48	; 0x30
   19604:	ebffffaf 	bl	194c8 <__multadd>
   19608:	e1570006 	cmp	r7, r6
   1960c:	e1a01000 	mov	r1, r0
   19610:	1afffff7 	bne	195f4 <__s2b+0x74>
   19614:	e08a6004 	add	r6, sl, r4
   19618:	e2466008 	sub	r6, r6, #8
   1961c:	eaffffff 	b	19620 <__s2b+0xa0>
   19620:	e0646006 	rsb	r6, r4, r6
   19624:	ea000006 	b	19644 <__s2b+0xc4>
   19628:	e7d63004 	ldrb	r3, [r6, r4]
   1962c:	e1a00005 	mov	r0, r5
   19630:	e3a0200a 	mov	r2, #10
   19634:	e2433030 	sub	r3, r3, #48	; 0x30
   19638:	ebffffa2 	bl	194c8 <__multadd>
   1963c:	e2844001 	add	r4, r4, #1
   19640:	e1a01000 	mov	r1, r0
   19644:	e1540008 	cmp	r4, r8
   19648:	bafffff6 	blt	19628 <__s2b+0xa8>
   1964c:	e1a00001 	mov	r0, r1
   19650:	e8bd85f0 	pop	{r4, r5, r6, r7, r8, sl, pc}

00019654 <__hi0bits>:
   19654:	e1a02820 	lsr	r2, r0, #16
   19658:	e1a02802 	lsl	r2, r2, #16
   1965c:	e3520000 	cmp	r2, #0
   19660:	e1a03000 	mov	r3, r0
   19664:	01a03800 	lsleq	r3, r0, #16
   19668:	13a00000 	movne	r0, #0
   1966c:	03a00010 	moveq	r0, #16
   19670:	e31304ff 	tst	r3, #-16777216	; 0xff000000
   19674:	01a03403 	lsleq	r3, r3, #8
   19678:	02800008 	addeq	r0, r0, #8
   1967c:	e313020f 	tst	r3, #-268435456	; 0xf0000000
   19680:	01a03203 	lsleq	r3, r3, #4
   19684:	02800004 	addeq	r0, r0, #4
   19688:	e3130103 	tst	r3, #-1073741824	; 0xc0000000
   1968c:	01a03103 	lsleq	r3, r3, #2
   19690:	02800002 	addeq	r0, r0, #2
   19694:	e3530000 	cmp	r3, #0
   19698:	b12fff1e 	bxlt	lr
   1969c:	e3130101 	tst	r3, #1073741824	; 0x40000000
   196a0:	12800001 	addne	r0, r0, #1
   196a4:	03a00020 	moveq	r0, #32
   196a8:	e12fff1e 	bx	lr

000196ac <__lo0bits>:
   196ac:	e5903000 	ldr	r3, [r0]
   196b0:	e1a02000 	mov	r2, r0
   196b4:	e2130007 	ands	r0, r3, #7
   196b8:	0a000009 	beq	196e4 <__lo0bits+0x38>
   196bc:	e3130001 	tst	r3, #1
   196c0:	1a00001a 	bne	19730 <__lo0bits+0x84>
   196c4:	e3130002 	tst	r3, #2
   196c8:	11a030a3 	lsrne	r3, r3, #1
   196cc:	01a03123 	lsreq	r3, r3, #2
   196d0:	13a00001 	movne	r0, #1
   196d4:	15823000 	strne	r3, [r2]
   196d8:	05823000 	streq	r3, [r2]
   196dc:	03a00002 	moveq	r0, #2
   196e0:	e12fff1e 	bx	lr
   196e4:	e1b01803 	lsls	r1, r3, #16
   196e8:	01a03823 	lsreq	r3, r3, #16
   196ec:	03a00010 	moveq	r0, #16
   196f0:	e31300ff 	tst	r3, #255	; 0xff
   196f4:	01a03423 	lsreq	r3, r3, #8
   196f8:	02800008 	addeq	r0, r0, #8
   196fc:	e313000f 	tst	r3, #15
   19700:	01a03223 	lsreq	r3, r3, #4
   19704:	02800004 	addeq	r0, r0, #4
   19708:	e3130003 	tst	r3, #3
   1970c:	01a03123 	lsreq	r3, r3, #2
   19710:	02800002 	addeq	r0, r0, #2
   19714:	e3130001 	tst	r3, #1
   19718:	1a000002 	bne	19728 <__lo0bits+0x7c>
   1971c:	e1b030a3 	lsrs	r3, r3, #1
   19720:	0a000004 	beq	19738 <__lo0bits+0x8c>
   19724:	e2800001 	add	r0, r0, #1
   19728:	e5823000 	str	r3, [r2]
   1972c:	e12fff1e 	bx	lr
   19730:	e3a00000 	mov	r0, #0
   19734:	e12fff1e 	bx	lr
   19738:	e3a00020 	mov	r0, #32
   1973c:	e12fff1e 	bx	lr

00019740 <__i2b>:
   19740:	e92d4010 	push	{r4, lr}
   19744:	e1a04001 	mov	r4, r1
   19748:	e3a01001 	mov	r1, #1
   1974c:	ebffff34 	bl	19424 <_Balloc>
   19750:	e3a02001 	mov	r2, #1
   19754:	e5804014 	str	r4, [r0, #20]
   19758:	e5802010 	str	r2, [r0, #16]
   1975c:	e8bd8010 	pop	{r4, pc}

00019760 <__multiply>:
   19760:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19764:	e1a06002 	mov	r6, r2
   19768:	e5963010 	ldr	r3, [r6, #16]
   1976c:	e5912010 	ldr	r2, [r1, #16]
   19770:	e1520003 	cmp	r2, r3
   19774:	b1a03001 	movlt	r3, r1
   19778:	e1a05001 	mov	r5, r1
   1977c:	b1a05006 	movlt	r5, r6
   19780:	b1a06003 	movlt	r6, r3
   19784:	e5958010 	ldr	r8, [r5, #16]
   19788:	e5967010 	ldr	r7, [r6, #16]
   1978c:	e5953008 	ldr	r3, [r5, #8]
   19790:	e5951004 	ldr	r1, [r5, #4]
   19794:	e0884007 	add	r4, r8, r7
   19798:	e1540003 	cmp	r4, r3
   1979c:	e24dd014 	sub	sp, sp, #20
   197a0:	c2811001 	addgt	r1, r1, #1
   197a4:	ebffff1e 	bl	19424 <_Balloc>
   197a8:	e2842005 	add	r2, r4, #5
   197ac:	e080b102 	add	fp, r0, r2, lsl #2
   197b0:	e2803014 	add	r3, r0, #20
   197b4:	e3a02000 	mov	r2, #0
   197b8:	ea000000 	b	197c0 <__multiply+0x60>
   197bc:	e4832004 	str	r2, [r3], #4
   197c0:	e153000b 	cmp	r3, fp
   197c4:	3afffffc 	bcc	197bc <__multiply+0x5c>
   197c8:	e2851014 	add	r1, r5, #20
   197cc:	e58d1008 	str	r1, [sp, #8]
   197d0:	e2877005 	add	r7, r7, #5
   197d4:	e2881005 	add	r1, r8, #5
   197d8:	e0851101 	add	r1, r5, r1, lsl #2
   197dc:	e0867107 	add	r7, r6, r7, lsl #2
   197e0:	e58d1000 	str	r1, [sp]
   197e4:	e58d700c 	str	r7, [sp, #12]
   197e8:	e2803018 	add	r3, r0, #24
   197ec:	e2862014 	add	r2, r6, #20
   197f0:	ea000035 	b	198cc <__multiply+0x16c>
   197f4:	e1dc70b0 	ldrh	r7, [ip]
   197f8:	e3570000 	cmp	r7, #0
   197fc:	e2822004 	add	r2, r2, #4
   19800:	0a000015 	beq	1985c <__multiply+0xfc>
   19804:	e59d6008 	ldr	r6, [sp, #8]
   19808:	e243c004 	sub	ip, r3, #4
   1980c:	e3a05000 	mov	r5, #0
   19810:	e4968004 	ldr	r8, [r6], #4
   19814:	e1dca0b0 	ldrh	sl, [ip]
   19818:	e1a09808 	lsl	r9, r8, #16
   1981c:	e1a09829 	lsr	r9, r9, #16
   19820:	e02aa997 	mla	sl, r7, r9, sl
   19824:	e08aa005 	add	sl, sl, r5
   19828:	e1dc50b2 	ldrh	r5, [ip, #2]
   1982c:	e1a08828 	lsr	r8, r8, #16
   19830:	e0285897 	mla	r8, r7, r8, r5
   19834:	e59d9000 	ldr	r9, [sp]
   19838:	e088882a 	add	r8, r8, sl, lsr #16
   1983c:	e1a0a80a 	lsl	sl, sl, #16
   19840:	e1a0a82a 	lsr	sl, sl, #16
   19844:	e1a05828 	lsr	r5, r8, #16
   19848:	e1590006 	cmp	r9, r6
   1984c:	e18a8808 	orr	r8, sl, r8, lsl #16
   19850:	e48c8004 	str	r8, [ip], #4
   19854:	8affffed 	bhi	19810 <__multiply+0xb0>
   19858:	e58c5000 	str	r5, [ip]
   1985c:	e15270b2 	ldrh	r7, [r2, #-2]
   19860:	e3570000 	cmp	r7, #0
   19864:	0a000017 	beq	198c8 <__multiply+0x168>
   19868:	e5135004 	ldr	r5, [r3, #-4]
   1986c:	e59d6008 	ldr	r6, [sp, #8]
   19870:	e1a0c003 	mov	ip, r3
   19874:	e3a0a000 	mov	sl, #0
   19878:	e15c90b2 	ldrh	r9, [ip, #-2]
   1987c:	e1d610b0 	ldrh	r1, [r6]
   19880:	e0219197 	mla	r1, r7, r1, r9
   19884:	e1a05805 	lsl	r5, r5, #16
   19888:	e081a00a 	add	sl, r1, sl
   1988c:	e1a05825 	lsr	r5, r5, #16
   19890:	e185580a 	orr	r5, r5, sl, lsl #16
   19894:	e50c5004 	str	r5, [ip, #-4]
   19898:	e1a0800c 	mov	r8, ip
   1989c:	e4965004 	ldr	r5, [r6], #4
   198a0:	e1d890b0 	ldrh	r9, [r8]
   198a4:	e1a05825 	lsr	r5, r5, #16
   198a8:	e0259597 	mla	r5, r7, r5, r9
   198ac:	e59d1000 	ldr	r1, [sp]
   198b0:	e085582a 	add	r5, r5, sl, lsr #16
   198b4:	e1560001 	cmp	r6, r1
   198b8:	e28cc004 	add	ip, ip, #4
   198bc:	e1a0a825 	lsr	sl, r5, #16
   198c0:	3affffec 	bcc	19878 <__multiply+0x118>
   198c4:	e5885000 	str	r5, [r8]
   198c8:	e2833004 	add	r3, r3, #4
   198cc:	e59d500c 	ldr	r5, [sp, #12]
   198d0:	e1520005 	cmp	r2, r5
   198d4:	e1a0c002 	mov	ip, r2
   198d8:	3affffc5 	bcc	197f4 <__multiply+0x94>
   198dc:	e1a0300b 	mov	r3, fp
   198e0:	ea000000 	b	198e8 <__multiply+0x188>
   198e4:	e2444001 	sub	r4, r4, #1
   198e8:	e3540000 	cmp	r4, #0
   198ec:	ca000001 	bgt	198f8 <__multiply+0x198>
   198f0:	e5804010 	str	r4, [r0, #16]
   198f4:	ea000003 	b	19908 <__multiply+0x1a8>
   198f8:	e5332004 	ldr	r2, [r3, #-4]!
   198fc:	e3520000 	cmp	r2, #0
   19900:	0afffff7 	beq	198e4 <__multiply+0x184>
   19904:	eafffff9 	b	198f0 <__multiply+0x190>
   19908:	e28dd014 	add	sp, sp, #20
   1990c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00019910 <__pow5mult>:
   19910:	e2123003 	ands	r3, r2, #3
   19914:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   19918:	e1a05000 	mov	r5, r0
   1991c:	e1a06001 	mov	r6, r1
   19920:	e1a07002 	mov	r7, r2
   19924:	0a000005 	beq	19940 <__pow5mult+0x30>
   19928:	e59f20b0 	ldr	r2, [pc, #176]	; 199e0 <__pow5mult+0xd0>
   1992c:	e2433001 	sub	r3, r3, #1
   19930:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   19934:	e3a03000 	mov	r3, #0
   19938:	ebfffee2 	bl	194c8 <__multadd>
   1993c:	e1a06000 	mov	r6, r0
   19940:	e1b07147 	asrs	r7, r7, #2
   19944:	0a000023 	beq	199d8 <__pow5mult+0xc8>
   19948:	e5954048 	ldr	r4, [r5, #72]	; 0x48
   1994c:	e3540000 	cmp	r4, #0
   19950:	1a000008 	bne	19978 <__pow5mult+0x68>
   19954:	e1a00005 	mov	r0, r5
   19958:	e59f1084 	ldr	r1, [pc, #132]	; 199e4 <__pow5mult+0xd4>
   1995c:	ebffff77 	bl	19740 <__i2b>
   19960:	e3a03000 	mov	r3, #0
   19964:	e5850048 	str	r0, [r5, #72]	; 0x48
   19968:	e1a04000 	mov	r4, r0
   1996c:	e5803000 	str	r3, [r0]
   19970:	ea000000 	b	19978 <__pow5mult+0x68>
   19974:	e1a04000 	mov	r4, r0
   19978:	e3170001 	tst	r7, #1
   1997c:	0a000008 	beq	199a4 <__pow5mult+0x94>
   19980:	e1a01006 	mov	r1, r6
   19984:	e1a02004 	mov	r2, r4
   19988:	e1a00005 	mov	r0, r5
   1998c:	ebffff73 	bl	19760 <__multiply>
   19990:	e1a01006 	mov	r1, r6
   19994:	e1a08000 	mov	r8, r0
   19998:	e1a00005 	mov	r0, r5
   1999c:	ebfffec2 	bl	194ac <_Bfree>
   199a0:	e1a06008 	mov	r6, r8
   199a4:	e1b070c7 	asrs	r7, r7, #1
   199a8:	0a00000a 	beq	199d8 <__pow5mult+0xc8>
   199ac:	e5948000 	ldr	r8, [r4]
   199b0:	e3580000 	cmp	r8, #0
   199b4:	11a00008 	movne	r0, r8
   199b8:	1affffed 	bne	19974 <__pow5mult+0x64>
   199bc:	e1a00005 	mov	r0, r5
   199c0:	e1a01004 	mov	r1, r4
   199c4:	e1a02004 	mov	r2, r4
   199c8:	ebffff64 	bl	19760 <__multiply>
   199cc:	e5840000 	str	r0, [r4]
   199d0:	e5808000 	str	r8, [r0]
   199d4:	eaffffe6 	b	19974 <__pow5mult+0x64>
   199d8:	e1a00006 	mov	r0, r6
   199dc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   199e0:	0001c3a8 	.word	0x0001c3a8
   199e4:	00000271 	.word	0x00000271

000199e8 <__lshift>:
   199e8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   199ec:	e1a04001 	mov	r4, r1
   199f0:	e5949010 	ldr	r9, [r4, #16]
   199f4:	e1a082c2 	asr	r8, r2, #5
   199f8:	e0889009 	add	r9, r8, r9
   199fc:	e1a0a000 	mov	sl, r0
   19a00:	e1a07002 	mov	r7, r2
   19a04:	e5911004 	ldr	r1, [r1, #4]
   19a08:	e2896001 	add	r6, r9, #1
   19a0c:	e5943008 	ldr	r3, [r4, #8]
   19a10:	ea000001 	b	19a1c <__lshift+0x34>
   19a14:	e2811001 	add	r1, r1, #1
   19a18:	e1a03083 	lsl	r3, r3, #1
   19a1c:	e1560003 	cmp	r6, r3
   19a20:	cafffffb 	bgt	19a14 <__lshift+0x2c>
   19a24:	e1a0000a 	mov	r0, sl
   19a28:	ebfffe7d 	bl	19424 <_Balloc>
   19a2c:	e3a03000 	mov	r3, #0
   19a30:	e1a05000 	mov	r5, r0
   19a34:	e2802014 	add	r2, r0, #20
   19a38:	e1a01003 	mov	r1, r3
   19a3c:	ea000001 	b	19a48 <__lshift+0x60>
   19a40:	e7821103 	str	r1, [r2, r3, lsl #2]
   19a44:	e2833001 	add	r3, r3, #1
   19a48:	e1530008 	cmp	r3, r8
   19a4c:	bafffffb 	blt	19a40 <__lshift+0x58>
   19a50:	e5942010 	ldr	r2, [r4, #16]
   19a54:	e1c88fc8 	bic	r8, r8, r8, asr #31
   19a58:	e2888005 	add	r8, r8, #5
   19a5c:	e2822005 	add	r2, r2, #5
   19a60:	e217701f 	ands	r7, r7, #31
   19a64:	e0858108 	add	r8, r5, r8, lsl #2
   19a68:	e2841014 	add	r1, r4, #20
   19a6c:	e0842102 	add	r2, r4, r2, lsl #2
   19a70:	0a00000c 	beq	19aa8 <__lshift+0xc0>
   19a74:	e2670020 	rsb	r0, r7, #32
   19a78:	e3a03000 	mov	r3, #0
   19a7c:	e591c000 	ldr	ip, [r1]
   19a80:	e183371c 	orr	r3, r3, ip, lsl r7
   19a84:	e4883004 	str	r3, [r8], #4
   19a88:	e4913004 	ldr	r3, [r1], #4
   19a8c:	e1510002 	cmp	r1, r2
   19a90:	e1a03033 	lsr	r3, r3, r0
   19a94:	3afffff8 	bcc	19a7c <__lshift+0x94>
   19a98:	e3530000 	cmp	r3, #0
   19a9c:	e5883000 	str	r3, [r8]
   19aa0:	12896002 	addne	r6, r9, #2
   19aa4:	ea000003 	b	19ab8 <__lshift+0xd0>
   19aa8:	e4913004 	ldr	r3, [r1], #4
   19aac:	e1520001 	cmp	r2, r1
   19ab0:	e4883004 	str	r3, [r8], #4
   19ab4:	8afffffb 	bhi	19aa8 <__lshift+0xc0>
   19ab8:	e2466001 	sub	r6, r6, #1
   19abc:	e1a0000a 	mov	r0, sl
   19ac0:	e5856010 	str	r6, [r5, #16]
   19ac4:	e1a01004 	mov	r1, r4
   19ac8:	ebfffe77 	bl	194ac <_Bfree>
   19acc:	e1a00005 	mov	r0, r5
   19ad0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00019ad4 <__mcmp>:
   19ad4:	e1a03000 	mov	r3, r0
   19ad8:	e5912010 	ldr	r2, [r1, #16]
   19adc:	e5900010 	ldr	r0, [r0, #16]
   19ae0:	e0500002 	subs	r0, r0, r2
   19ae4:	e92d4010 	push	{r4, lr}
   19ae8:	18bd8010 	popne	{r4, pc}
   19aec:	e2822005 	add	r2, r2, #5
   19af0:	e1a02102 	lsl	r2, r2, #2
   19af4:	e283c014 	add	ip, r3, #20
   19af8:	e0811002 	add	r1, r1, r2
   19afc:	e0833002 	add	r3, r3, r2
   19b00:	e5334004 	ldr	r4, [r3, #-4]!
   19b04:	e5312004 	ldr	r2, [r1, #-4]!
   19b08:	e1540002 	cmp	r4, r2
   19b0c:	0a000002 	beq	19b1c <__mcmp+0x48>
   19b10:	2a000004 	bcs	19b28 <__mcmp+0x54>
   19b14:	e3e00000 	mvn	r0, #0
   19b18:	e8bd8010 	pop	{r4, pc}
   19b1c:	e15c0003 	cmp	ip, r3
   19b20:	3afffff6 	bcc	19b00 <__mcmp+0x2c>
   19b24:	e8bd8010 	pop	{r4, pc}
   19b28:	e3a00001 	mov	r0, #1
   19b2c:	e8bd8010 	pop	{r4, pc}

00019b30 <__mdiff>:
   19b30:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19b34:	e1a06000 	mov	r6, r0
   19b38:	e1a04001 	mov	r4, r1
   19b3c:	e1a00001 	mov	r0, r1
   19b40:	e1a01002 	mov	r1, r2
   19b44:	e1a05002 	mov	r5, r2
   19b48:	ebffffe1 	bl	19ad4 <__mcmp>
   19b4c:	e2507000 	subs	r7, r0, #0
   19b50:	1a000006 	bne	19b70 <__mdiff+0x40>
   19b54:	e1a00006 	mov	r0, r6
   19b58:	e1a01007 	mov	r1, r7
   19b5c:	ebfffe30 	bl	19424 <_Balloc>
   19b60:	e3a03001 	mov	r3, #1
   19b64:	e5803010 	str	r3, [r0, #16]
   19b68:	e5807014 	str	r7, [r0, #20]
   19b6c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19b70:	b1a03004 	movlt	r3, r4
   19b74:	b1a04005 	movlt	r4, r5
   19b78:	e1a00006 	mov	r0, r6
   19b7c:	e5941004 	ldr	r1, [r4, #4]
   19b80:	b1a05003 	movlt	r5, r3
   19b84:	a3a07000 	movge	r7, #0
   19b88:	b3a07001 	movlt	r7, #1
   19b8c:	ebfffe24 	bl	19424 <_Balloc>
   19b90:	e5943010 	ldr	r3, [r4, #16]
   19b94:	e5958010 	ldr	r8, [r5, #16]
   19b98:	e580700c 	str	r7, [r0, #12]
   19b9c:	e2888005 	add	r8, r8, #5
   19ba0:	e2837005 	add	r7, r3, #5
   19ba4:	e0847107 	add	r7, r4, r7, lsl #2
   19ba8:	e0858108 	add	r8, r5, r8, lsl #2
   19bac:	e2844014 	add	r4, r4, #20
   19bb0:	e2855014 	add	r5, r5, #20
   19bb4:	e2806014 	add	r6, r0, #20
   19bb8:	e3a02000 	mov	r2, #0
   19bbc:	e494c004 	ldr	ip, [r4], #4
   19bc0:	e4951004 	ldr	r1, [r5], #4
   19bc4:	e1a0a80c 	lsl	sl, ip, #16
   19bc8:	e082282a 	add	r2, r2, sl, lsr #16
   19bcc:	e1a09801 	lsl	r9, r1, #16
   19bd0:	e1a01821 	lsr	r1, r1, #16
   19bd4:	e042a829 	sub	sl, r2, r9, lsr #16
   19bd8:	e061182c 	rsb	r1, r1, ip, lsr #16
   19bdc:	e081184a 	add	r1, r1, sl, asr #16
   19be0:	e1a0a80a 	lsl	sl, sl, #16
   19be4:	e1a0a82a 	lsr	sl, sl, #16
   19be8:	e1a02841 	asr	r2, r1, #16
   19bec:	e18a1801 	orr	r1, sl, r1, lsl #16
   19bf0:	e4861004 	str	r1, [r6], #4
   19bf4:	e1580005 	cmp	r8, r5
   19bf8:	e1a0c004 	mov	ip, r4
   19bfc:	e1a01006 	mov	r1, r6
   19c00:	8affffed 	bhi	19bbc <__mdiff+0x8c>
   19c04:	ea000009 	b	19c30 <__mdiff+0x100>
   19c08:	e49c4004 	ldr	r4, [ip], #4
   19c0c:	e1a05804 	lsl	r5, r4, #16
   19c10:	e0825825 	add	r5, r2, r5, lsr #16
   19c14:	e1a04824 	lsr	r4, r4, #16
   19c18:	e0844845 	add	r4, r4, r5, asr #16
   19c1c:	e1a05805 	lsl	r5, r5, #16
   19c20:	e1a05825 	lsr	r5, r5, #16
   19c24:	e1a02844 	asr	r2, r4, #16
   19c28:	e1854804 	orr	r4, r5, r4, lsl #16
   19c2c:	e4814004 	str	r4, [r1], #4
   19c30:	e15c0007 	cmp	ip, r7
   19c34:	3afffff3 	bcc	19c08 <__mdiff+0xd8>
   19c38:	ea000000 	b	19c40 <__mdiff+0x110>
   19c3c:	e2433001 	sub	r3, r3, #1
   19c40:	e5312004 	ldr	r2, [r1, #-4]!
   19c44:	e3520000 	cmp	r2, #0
   19c48:	0afffffb 	beq	19c3c <__mdiff+0x10c>
   19c4c:	e5803010 	str	r3, [r0, #16]
   19c50:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00019c54 <__ulp>:
   19c54:	e59f3050 	ldr	r3, [pc, #80]	; 19cac <__ulp+0x58>
   19c58:	e0003003 	and	r3, r0, r3
   19c5c:	e243350d 	sub	r3, r3, #54525952	; 0x3400000
   19c60:	e3530000 	cmp	r3, #0
   19c64:	c1a00003 	movgt	r0, r3
   19c68:	ca000006 	bgt	19c88 <__ulp+0x34>
   19c6c:	e2633000 	rsb	r3, r3, #0
   19c70:	e1a03a43 	asr	r3, r3, #20
   19c74:	e3530013 	cmp	r3, #19
   19c78:	e3a00000 	mov	r0, #0
   19c7c:	ca000003 	bgt	19c90 <__ulp+0x3c>
   19c80:	e3a02702 	mov	r2, #524288	; 0x80000
   19c84:	e1a00352 	asr	r0, r2, r3
   19c88:	e3a01000 	mov	r1, #0
   19c8c:	e12fff1e 	bx	lr
   19c90:	e3530032 	cmp	r3, #50	; 0x32
   19c94:	e3a02001 	mov	r2, #1
   19c98:	d2633033 	rsble	r3, r3, #51	; 0x33
   19c9c:	d1a03312 	lslle	r3, r2, r3
   19ca0:	c1a03002 	movgt	r3, r2
   19ca4:	e1a01003 	mov	r1, r3
   19ca8:	e12fff1e 	bx	lr
   19cac:	7ff00000 	.word	0x7ff00000

00019cb0 <__b2d>:
   19cb0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   19cb4:	e5906010 	ldr	r6, [r0, #16]
   19cb8:	e2866005 	add	r6, r6, #5
   19cbc:	e0806106 	add	r6, r0, r6, lsl #2
   19cc0:	e5164004 	ldr	r4, [r6, #-4]
   19cc4:	e2807014 	add	r7, r0, #20
   19cc8:	e1a00004 	mov	r0, r4
   19ccc:	e1a08001 	mov	r8, r1
   19cd0:	ebfffe5f 	bl	19654 <__hi0bits>
   19cd4:	e2603020 	rsb	r3, r0, #32
   19cd8:	e350000a 	cmp	r0, #10
   19cdc:	e2465004 	sub	r5, r6, #4
   19ce0:	e5883000 	str	r3, [r8]
   19ce4:	ca00000a 	bgt	19d14 <__b2d+0x64>
   19ce8:	e260100b 	rsb	r1, r0, #11
   19cec:	e1a0c134 	lsr	ip, r4, r1
   19cf0:	e2800015 	add	r0, r0, #21
   19cf4:	e1a04014 	lsl	r4, r4, r0
   19cf8:	e38cc5ff 	orr	ip, ip, #1069547520	; 0x3fc00000
   19cfc:	e1550007 	cmp	r5, r7
   19d00:	e38c2603 	orr	r2, ip, #3145728	; 0x300000
   19d04:	8516c008 	ldrhi	ip, [r6, #-8]
   19d08:	93a0c000 	movls	ip, #0
   19d0c:	e184313c 	orr	r3, r4, ip, lsr r1
   19d10:	ea000013 	b	19d64 <__b2d+0xb4>
   19d14:	e1550007 	cmp	r5, r7
   19d18:	82465008 	subhi	r5, r6, #8
   19d1c:	85161008 	ldrhi	r1, [r6, #-8]
   19d20:	93a01000 	movls	r1, #0
   19d24:	e250600b 	subs	r6, r0, #11
   19d28:	0a00000a 	beq	19d58 <__b2d+0xa8>
   19d2c:	e1a04614 	lsl	r4, r4, r6
   19d30:	e38445ff 	orr	r4, r4, #1069547520	; 0x3fc00000
   19d34:	e260002b 	rsb	r0, r0, #43	; 0x2b
   19d38:	e3844603 	orr	r4, r4, #3145728	; 0x300000
   19d3c:	e1842031 	orr	r2, r4, r1, lsr r0
   19d40:	e1a01611 	lsl	r1, r1, r6
   19d44:	e1550007 	cmp	r5, r7
   19d48:	8515c004 	ldrhi	ip, [r5, #-4]
   19d4c:	93a0c000 	movls	ip, #0
   19d50:	e181303c 	orr	r3, r1, ip, lsr r0
   19d54:	ea000002 	b	19d64 <__b2d+0xb4>
   19d58:	e38445ff 	orr	r4, r4, #1069547520	; 0x3fc00000
   19d5c:	e3842603 	orr	r2, r4, #3145728	; 0x300000
   19d60:	e1a03001 	mov	r3, r1
   19d64:	e1a00002 	mov	r0, r2
   19d68:	e1a01003 	mov	r1, r3
   19d6c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00019d70 <__d2b>:
   19d70:	e92d45f3 	push	{r0, r1, r4, r5, r6, r7, r8, sl, lr}
   19d74:	e1a04001 	mov	r4, r1
   19d78:	e3a01001 	mov	r1, #1
   19d7c:	e1a08003 	mov	r8, r3
   19d80:	e1a05002 	mov	r5, r2
   19d84:	e59d7024 	ldr	r7, [sp, #36]	; 0x24
   19d88:	ebfffda5 	bl	19424 <_Balloc>
   19d8c:	e3c4a102 	bic	sl, r4, #-2147483648	; 0x80000000
   19d90:	e3c434ff 	bic	r3, r4, #-16777216	; 0xff000000
   19d94:	e3c3360f 	bic	r3, r3, #15728640	; 0xf00000
   19d98:	e1b0aa2a 	lsrs	sl, sl, #20
   19d9c:	13833601 	orrne	r3, r3, #1048576	; 0x100000
   19da0:	e3550000 	cmp	r5, #0
   19da4:	e1a06000 	mov	r6, r0
   19da8:	e58d3004 	str	r3, [sp, #4]
   19dac:	0a000013 	beq	19e00 <__d2b+0x90>
   19db0:	e28d0008 	add	r0, sp, #8
   19db4:	e5205008 	str	r5, [r0, #-8]!
   19db8:	e1a0000d 	mov	r0, sp
   19dbc:	ebfffe3a 	bl	196ac <__lo0bits>
   19dc0:	e3500000 	cmp	r0, #0
   19dc4:	159d2004 	ldrne	r2, [sp, #4]
   19dc8:	e59d3000 	ldr	r3, [sp]
   19dcc:	12601020 	rsbne	r1, r0, #32
   19dd0:	11833112 	orrne	r3, r3, r2, lsl r1
   19dd4:	11a02032 	lsrne	r2, r2, r0
   19dd8:	158d2004 	strne	r2, [sp, #4]
   19ddc:	e59d4004 	ldr	r4, [sp, #4]
   19de0:	15863014 	strne	r3, [r6, #20]
   19de4:	05863014 	streq	r3, [r6, #20]
   19de8:	e3540000 	cmp	r4, #0
   19dec:	e5864018 	str	r4, [r6, #24]
   19df0:	03a04001 	moveq	r4, #1
   19df4:	13a04002 	movne	r4, #2
   19df8:	e5864010 	str	r4, [r6, #16]
   19dfc:	ea000006 	b	19e1c <__d2b+0xac>
   19e00:	e28d0004 	add	r0, sp, #4
   19e04:	ebfffe28 	bl	196ac <__lo0bits>
   19e08:	e59d3004 	ldr	r3, [sp, #4]
   19e0c:	e3a04001 	mov	r4, #1
   19e10:	e5863014 	str	r3, [r6, #20]
   19e14:	e5864010 	str	r4, [r6, #16]
   19e18:	e2800020 	add	r0, r0, #32
   19e1c:	e35a0000 	cmp	sl, #0
   19e20:	0a000005 	beq	19e3c <__d2b+0xcc>
   19e24:	e24a2e43 	sub	r2, sl, #1072	; 0x430
   19e28:	e2422003 	sub	r2, r2, #3
   19e2c:	e0822000 	add	r2, r2, r0
   19e30:	e5882000 	str	r2, [r8]
   19e34:	e2600035 	rsb	r0, r0, #53	; 0x35
   19e38:	ea000007 	b	19e5c <__d2b+0xec>
   19e3c:	e2400e43 	sub	r0, r0, #1072	; 0x430
   19e40:	e2843004 	add	r3, r4, #4
   19e44:	e2400002 	sub	r0, r0, #2
   19e48:	e5880000 	str	r0, [r8]
   19e4c:	e7960103 	ldr	r0, [r6, r3, lsl #2]
   19e50:	ebfffdff 	bl	19654 <__hi0bits>
   19e54:	e1a04284 	lsl	r4, r4, #5
   19e58:	e0600004 	rsb	r0, r0, r4
   19e5c:	e5870000 	str	r0, [r7]
   19e60:	e1a00006 	mov	r0, r6
   19e64:	e8bd85fc 	pop	{r2, r3, r4, r5, r6, r7, r8, sl, pc}

00019e68 <__ratio>:
   19e68:	e92d40f3 	push	{r0, r1, r4, r5, r6, r7, lr}
   19e6c:	e1a06001 	mov	r6, r1
   19e70:	e1a0100d 	mov	r1, sp
   19e74:	e1a07000 	mov	r7, r0
   19e78:	ebffff8c 	bl	19cb0 <__b2d>
   19e7c:	e1a04000 	mov	r4, r0
   19e80:	e1a05001 	mov	r5, r1
   19e84:	e1a00006 	mov	r0, r6
   19e88:	e28d1004 	add	r1, sp, #4
   19e8c:	ebffff87 	bl	19cb0 <__b2d>
   19e90:	e1a02000 	mov	r2, r0
   19e94:	e1a03001 	mov	r3, r1
   19e98:	e89d0003 	ldm	sp, {r0, r1}
   19e9c:	e597c010 	ldr	ip, [r7, #16]
   19ea0:	e0610000 	rsb	r0, r1, r0
   19ea4:	e5961010 	ldr	r1, [r6, #16]
   19ea8:	e061100c 	rsb	r1, r1, ip
   19eac:	e0801281 	add	r1, r0, r1, lsl #5
   19eb0:	e3510000 	cmp	r1, #0
   19eb4:	c0844a01 	addgt	r4, r4, r1, lsl #20
   19eb8:	d0421a01 	suble	r1, r2, r1, lsl #20
   19ebc:	d1a02001 	movle	r2, r1
   19ec0:	e1a00004 	mov	r0, r4
   19ec4:	e1a01005 	mov	r1, r5
   19ec8:	eb000846 	bl	1bfe8 <__aeabi_ddiv>
   19ecc:	e8bd80fc 	pop	{r2, r3, r4, r5, r6, r7, pc}

00019ed0 <_mprec_log10>:
   19ed0:	e3500017 	cmp	r0, #23
   19ed4:	e92d4010 	push	{r4, lr}
   19ed8:	e1a04000 	mov	r4, r0
   19edc:	ca000004 	bgt	19ef4 <_mprec_log10+0x24>
   19ee0:	e59f302c 	ldr	r3, [pc, #44]	; 19f14 <_mprec_log10+0x44>
   19ee4:	e0834180 	add	r4, r3, r0, lsl #3
   19ee8:	e284100c 	add	r1, r4, #12
   19eec:	e8910003 	ldm	r1, {r0, r1}
   19ef0:	e8bd8010 	pop	{r4, pc}
   19ef4:	e59f001c 	ldr	r0, [pc, #28]	; 19f18 <_mprec_log10+0x48>
   19ef8:	e3a01000 	mov	r1, #0
   19efc:	e59f2018 	ldr	r2, [pc, #24]	; 19f1c <_mprec_log10+0x4c>
   19f00:	e3a03000 	mov	r3, #0
   19f04:	eb00079c 	bl	1bd7c <__aeabi_dmul>
   19f08:	e2544001 	subs	r4, r4, #1
   19f0c:	1afffffa 	bne	19efc <_mprec_log10+0x2c>
   19f10:	e8bd8010 	pop	{r4, pc}
   19f14:	0001c3a8 	.word	0x0001c3a8
   19f18:	3ff00000 	.word	0x3ff00000
   19f1c:	40240000 	.word	0x40240000

00019f20 <__copybits>:
   19f20:	e2411001 	sub	r1, r1, #1
   19f24:	e1a032c1 	asr	r3, r1, #5
   19f28:	e5921010 	ldr	r1, [r2, #16]
   19f2c:	e2833001 	add	r3, r3, #1
   19f30:	e2811005 	add	r1, r1, #5
   19f34:	e0821101 	add	r1, r2, r1, lsl #2
   19f38:	e0803103 	add	r3, r0, r3, lsl #2
   19f3c:	e2822014 	add	r2, r2, #20
   19f40:	ea000001 	b	19f4c <__copybits+0x2c>
   19f44:	e492c004 	ldr	ip, [r2], #4
   19f48:	e480c004 	str	ip, [r0], #4
   19f4c:	e1520001 	cmp	r2, r1
   19f50:	3afffffb 	bcc	19f44 <__copybits+0x24>
   19f54:	ea000001 	b	19f60 <__copybits+0x40>
   19f58:	e4802004 	str	r2, [r0], #4
   19f5c:	ea000000 	b	19f64 <__copybits+0x44>
   19f60:	e3a02000 	mov	r2, #0
   19f64:	e1500003 	cmp	r0, r3
   19f68:	3afffffa 	bcc	19f58 <__copybits+0x38>
   19f6c:	e12fff1e 	bx	lr

00019f70 <__any_on>:
   19f70:	e5902010 	ldr	r2, [r0, #16]
   19f74:	e1a032c1 	asr	r3, r1, #5
   19f78:	e1530002 	cmp	r3, r2
   19f7c:	e92d4010 	push	{r4, lr}
   19f80:	e280c014 	add	ip, r0, #20
   19f84:	ca000008 	bgt	19fac <__any_on+0x3c>
   19f88:	aa000008 	bge	19fb0 <__any_on+0x40>
   19f8c:	e211101f 	ands	r1, r1, #31
   19f90:	0a000006 	beq	19fb0 <__any_on+0x40>
   19f94:	e2832005 	add	r2, r3, #5
   19f98:	e7902102 	ldr	r2, [r0, r2, lsl #2]
   19f9c:	e1a04132 	lsr	r4, r2, r1
   19fa0:	e1520114 	cmp	r2, r4, lsl r1
   19fa4:	1a00000d 	bne	19fe0 <__any_on+0x70>
   19fa8:	ea000000 	b	19fb0 <__any_on+0x40>
   19fac:	e1a03002 	mov	r3, r2
   19fb0:	e2833005 	add	r3, r3, #5
   19fb4:	e0800103 	add	r0, r0, r3, lsl #2
   19fb8:	ea000003 	b	19fcc <__any_on+0x5c>
   19fbc:	e5133004 	ldr	r3, [r3, #-4]
   19fc0:	e3530000 	cmp	r3, #0
   19fc4:	e2400004 	sub	r0, r0, #4
   19fc8:	1a000004 	bne	19fe0 <__any_on+0x70>
   19fcc:	e150000c 	cmp	r0, ip
   19fd0:	e1a03000 	mov	r3, r0
   19fd4:	8afffff8 	bhi	19fbc <__any_on+0x4c>
   19fd8:	e3a00000 	mov	r0, #0
   19fdc:	e8bd8010 	pop	{r4, pc}
   19fe0:	e3a00001 	mov	r0, #1
   19fe4:	e8bd8010 	pop	{r4, pc}

00019fe8 <__fpclassifyd>:
   19fe8:	e1a02001 	mov	r2, r1
   19fec:	e1921000 	orrs	r1, r2, r0
   19ff0:	0a000010 	beq	1a038 <__fpclassifyd+0x50>
   19ff4:	e2721001 	rsbs	r1, r2, #1
   19ff8:	33a01000 	movcc	r1, #0
   19ffc:	e3500102 	cmp	r0, #-2147483648	; 0x80000000
   1a000:	03520000 	cmpeq	r2, #0
   1a004:	0a00000b 	beq	1a038 <__fpclassifyd+0x50>
   1a008:	e3c03102 	bic	r3, r0, #-2147483648	; 0x80000000
   1a00c:	e59f203c 	ldr	r2, [pc, #60]	; 1a050 <__fpclassifyd+0x68>
   1a010:	e2430601 	sub	r0, r3, #1048576	; 0x100000
   1a014:	e1500002 	cmp	r0, r2
   1a018:	9a000008 	bls	1a040 <__fpclassifyd+0x58>
   1a01c:	e3530601 	cmp	r3, #1048576	; 0x100000
   1a020:	3a000008 	bcc	1a048 <__fpclassifyd+0x60>
   1a024:	e59f0028 	ldr	r0, [pc, #40]	; 1a054 <__fpclassifyd+0x6c>
   1a028:	e1530000 	cmp	r3, r0
   1a02c:	13a00000 	movne	r0, #0
   1a030:	02010001 	andeq	r0, r1, #1
   1a034:	e12fff1e 	bx	lr
   1a038:	e3a00002 	mov	r0, #2
   1a03c:	e12fff1e 	bx	lr
   1a040:	e3a00004 	mov	r0, #4
   1a044:	e12fff1e 	bx	lr
   1a048:	e3a00003 	mov	r0, #3
   1a04c:	e12fff1e 	bx	lr
   1a050:	7fdfffff 	.word	0x7fdfffff
   1a054:	7ff00000 	.word	0x7ff00000

0001a058 <__ssprint_r>:
   1a058:	e92d4ff1 	push	{r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a05c:	e1a08000 	mov	r8, r0
   1a060:	e5920008 	ldr	r0, [r2, #8]
   1a064:	e3500000 	cmp	r0, #0
   1a068:	e1a04001 	mov	r4, r1
   1a06c:	e1a05002 	mov	r5, r2
   1a070:	e592a000 	ldr	sl, [r2]
   1a074:	05820004 	streq	r0, [r2, #4]
   1a078:	0a000057 	beq	1a1dc <__ssprint_r+0x184>
   1a07c:	ea000004 	b	1a094 <__ssprint_r+0x3c>
   1a080:	e59a3000 	ldr	r3, [sl]
   1a084:	e59a6004 	ldr	r6, [sl, #4]
   1a088:	e58d3000 	str	r3, [sp]
   1a08c:	e28aa008 	add	sl, sl, #8
   1a090:	ea000002 	b	1a0a0 <__ssprint_r+0x48>
   1a094:	e3a03000 	mov	r3, #0
   1a098:	e58d3000 	str	r3, [sp]
   1a09c:	e1a06003 	mov	r6, r3
   1a0a0:	e3560000 	cmp	r6, #0
   1a0a4:	0afffff5 	beq	1a080 <__ssprint_r+0x28>
   1a0a8:	e5947008 	ldr	r7, [r4, #8]
   1a0ac:	e1560007 	cmp	r6, r7
   1a0b0:	3a00002f 	bcc	1a174 <__ssprint_r+0x11c>
   1a0b4:	e1d420bc 	ldrh	r2, [r4, #12]
   1a0b8:	e3120d12 	tst	r2, #1152	; 0x480
   1a0bc:	0a00002a 	beq	1a16c <__ssprint_r+0x114>
   1a0c0:	e5941010 	ldr	r1, [r4, #16]
   1a0c4:	e5949000 	ldr	r9, [r4]
   1a0c8:	e5943014 	ldr	r3, [r4, #20]
   1a0cc:	e0619009 	rsb	r9, r1, r9
   1a0d0:	e0833083 	add	r3, r3, r3, lsl #1
   1a0d4:	e0833fa3 	add	r3, r3, r3, lsr #31
   1a0d8:	e2890001 	add	r0, r9, #1
   1a0dc:	e0800006 	add	r0, r0, r6
   1a0e0:	e1a0b0c3 	asr	fp, r3, #1
   1a0e4:	e15b0000 	cmp	fp, r0
   1a0e8:	31a0b000 	movcc	fp, r0
   1a0ec:	e3120b01 	tst	r2, #1024	; 0x400
   1a0f0:	e1a00008 	mov	r0, r8
   1a0f4:	0a00000b 	beq	1a128 <__ssprint_r+0xd0>
   1a0f8:	e1a0100b 	mov	r1, fp
   1a0fc:	ebfffb34 	bl	18dd4 <_malloc_r>
   1a100:	e2507000 	subs	r7, r0, #0
   1a104:	0a00000e 	beq	1a144 <__ssprint_r+0xec>
   1a108:	e1a02009 	mov	r2, r9
   1a10c:	e5941010 	ldr	r1, [r4, #16]
   1a110:	ebffef74 	bl	15ee8 <memcpy>
   1a114:	e1d420bc 	ldrh	r2, [r4, #12]
   1a118:	e3c22d12 	bic	r2, r2, #1152	; 0x480
   1a11c:	e3822080 	orr	r2, r2, #128	; 0x80
   1a120:	e1c420bc 	strh	r2, [r4, #12]
   1a124:	ea000009 	b	1a150 <__ssprint_r+0xf8>
   1a128:	e1a0200b 	mov	r2, fp
   1a12c:	eb0003fa 	bl	1b11c <_realloc_r>
   1a130:	e2507000 	subs	r7, r0, #0
   1a134:	1a000005 	bne	1a150 <__ssprint_r+0xf8>
   1a138:	e1a00008 	mov	r0, r8
   1a13c:	e5941010 	ldr	r1, [r4, #16]
   1a140:	eb00034f 	bl	1ae84 <_free_r>
   1a144:	e3a0300c 	mov	r3, #12
   1a148:	e5883000 	str	r3, [r8]
   1a14c:	ea00001b 	b	1a1c0 <__ssprint_r+0x168>
   1a150:	e5847010 	str	r7, [r4, #16]
   1a154:	e0877009 	add	r7, r7, r9
   1a158:	e069900b 	rsb	r9, r9, fp
   1a15c:	e584b014 	str	fp, [r4, #20]
   1a160:	e5849008 	str	r9, [r4, #8]
   1a164:	e5847000 	str	r7, [r4]
   1a168:	e1a07006 	mov	r7, r6
   1a16c:	e1560007 	cmp	r6, r7
   1a170:	2a000000 	bcs	1a178 <__ssprint_r+0x120>
   1a174:	e1a07006 	mov	r7, r6
   1a178:	e1a02007 	mov	r2, r7
   1a17c:	e5940000 	ldr	r0, [r4]
   1a180:	e59d1000 	ldr	r1, [sp]
   1a184:	eb0003cd 	bl	1b0c0 <memmove>
   1a188:	e5943008 	ldr	r3, [r4, #8]
   1a18c:	e0673003 	rsb	r3, r7, r3
   1a190:	e5843008 	str	r3, [r4, #8]
   1a194:	e5943000 	ldr	r3, [r4]
   1a198:	e0837007 	add	r7, r3, r7
   1a19c:	e5953008 	ldr	r3, [r5, #8]
   1a1a0:	e0666003 	rsb	r6, r6, r3
   1a1a4:	e3560000 	cmp	r6, #0
   1a1a8:	e5847000 	str	r7, [r4]
   1a1ac:	e5856008 	str	r6, [r5, #8]
   1a1b0:	1affffb2 	bne	1a080 <__ssprint_r+0x28>
   1a1b4:	e5856004 	str	r6, [r5, #4]
   1a1b8:	e1a00006 	mov	r0, r6
   1a1bc:	ea000006 	b	1a1dc <__ssprint_r+0x184>
   1a1c0:	e1d430bc 	ldrh	r3, [r4, #12]
   1a1c4:	e3833040 	orr	r3, r3, #64	; 0x40
   1a1c8:	e1c430bc 	strh	r3, [r4, #12]
   1a1cc:	e3a03000 	mov	r3, #0
   1a1d0:	e5853008 	str	r3, [r5, #8]
   1a1d4:	e5853004 	str	r3, [r5, #4]
   1a1d8:	e3e00000 	mvn	r0, #0
   1a1dc:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001a1e0 <_svfiprintf_r>:
   1a1e0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a1e4:	e1a04003 	mov	r4, r3
   1a1e8:	e1d130bc 	ldrh	r3, [r1, #12]
   1a1ec:	e24dd0a4 	sub	sp, sp, #164	; 0xa4
   1a1f0:	e3130080 	tst	r3, #128	; 0x80
   1a1f4:	e58d0008 	str	r0, [sp, #8]
   1a1f8:	e1a07001 	mov	r7, r1
   1a1fc:	e1a06002 	mov	r6, r2
   1a200:	0a00000e 	beq	1a240 <_svfiprintf_r+0x60>
   1a204:	e5913010 	ldr	r3, [r1, #16]
   1a208:	e3530000 	cmp	r3, #0
   1a20c:	1a00000b 	bne	1a240 <_svfiprintf_r+0x60>
   1a210:	e3a01040 	mov	r1, #64	; 0x40
   1a214:	ebfffaee 	bl	18dd4 <_malloc_r>
   1a218:	e3500000 	cmp	r0, #0
   1a21c:	059d1008 	ldreq	r1, [sp, #8]
   1a220:	03a0300c 	moveq	r3, #12
   1a224:	e5870000 	str	r0, [r7]
   1a228:	e5870010 	str	r0, [r7, #16]
   1a22c:	05813000 	streq	r3, [r1]
   1a230:	03e03000 	mvneq	r3, #0
   1a234:	0a0002a9 	beq	1ace0 <_svfiprintf_r+0xb00>
   1a238:	e3a03040 	mov	r3, #64	; 0x40
   1a23c:	e5873014 	str	r3, [r7, #20]
   1a240:	e3a03000 	mov	r3, #0
   1a244:	e28d5064 	add	r5, sp, #100	; 0x64
   1a248:	e58d5030 	str	r5, [sp, #48]	; 0x30
   1a24c:	e58d3038 	str	r3, [sp, #56]	; 0x38
   1a250:	e58d3034 	str	r3, [sp, #52]	; 0x34
   1a254:	e58d600c 	str	r6, [sp, #12]
   1a258:	e58d301c 	str	r3, [sp, #28]
   1a25c:	e58d3010 	str	r3, [sp, #16]
   1a260:	e59d200c 	ldr	r2, [sp, #12]
   1a264:	e5d23000 	ldrb	r3, [r2]
   1a268:	e3530025 	cmp	r3, #37	; 0x25
   1a26c:	13530000 	cmpne	r3, #0
   1a270:	e1a06002 	mov	r6, r2
   1a274:	e2822001 	add	r2, r2, #1
   1a278:	1afffff9 	bne	1a264 <_svfiprintf_r+0x84>
   1a27c:	e59d300c 	ldr	r3, [sp, #12]
   1a280:	e0568003 	subs	r8, r6, r3
   1a284:	0a000013 	beq	1a2d8 <_svfiprintf_r+0xf8>
   1a288:	e8850108 	stm	r5, {r3, r8}
   1a28c:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
   1a290:	e0833008 	add	r3, r3, r8
   1a294:	e58d3038 	str	r3, [sp, #56]	; 0x38
   1a298:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
   1a29c:	e2833001 	add	r3, r3, #1
   1a2a0:	e3530007 	cmp	r3, #7
   1a2a4:	e58d3034 	str	r3, [sp, #52]	; 0x34
   1a2a8:	d2855008 	addle	r5, r5, #8
   1a2ac:	da000006 	ble	1a2cc <_svfiprintf_r+0xec>
   1a2b0:	e59d0008 	ldr	r0, [sp, #8]
   1a2b4:	e1a01007 	mov	r1, r7
   1a2b8:	e28d2030 	add	r2, sp, #48	; 0x30
   1a2bc:	ebffff65 	bl	1a058 <__ssprint_r>
   1a2c0:	e3500000 	cmp	r0, #0
   1a2c4:	1a000281 	bne	1acd0 <_svfiprintf_r+0xaf0>
   1a2c8:	e28d5064 	add	r5, sp, #100	; 0x64
   1a2cc:	e59d3010 	ldr	r3, [sp, #16]
   1a2d0:	e0833008 	add	r3, r3, r8
   1a2d4:	e58d3010 	str	r3, [sp, #16]
   1a2d8:	e5d63000 	ldrb	r3, [r6]
   1a2dc:	e3530000 	cmp	r3, #0
   1a2e0:	0a000274 	beq	1acb8 <_svfiprintf_r+0xad8>
   1a2e4:	e2866001 	add	r6, r6, #1
   1a2e8:	e3a02000 	mov	r2, #0
   1a2ec:	e3a01000 	mov	r1, #0
   1a2f0:	e58d600c 	str	r6, [sp, #12]
   1a2f4:	e5cd102b 	strb	r1, [sp, #43]	; 0x2b
   1a2f8:	e3e09000 	mvn	r9, #0
   1a2fc:	e58d2014 	str	r2, [sp, #20]
   1a300:	e1a06002 	mov	r6, r2
   1a304:	e3a0800a 	mov	r8, #10
   1a308:	ea000003 	b	1a31c <_svfiprintf_r+0x13c>
   1a30c:	e1a02003 	mov	r2, r3
   1a310:	ea000001 	b	1a31c <_svfiprintf_r+0x13c>
   1a314:	e1a04003 	mov	r4, r3
   1a318:	e3e09000 	mvn	r9, #0
   1a31c:	e59d100c 	ldr	r1, [sp, #12]
   1a320:	e4d13001 	ldrb	r3, [r1], #1
   1a324:	e58d100c 	str	r1, [sp, #12]
   1a328:	e3530063 	cmp	r3, #99	; 0x63
   1a32c:	0a000078 	beq	1a514 <_svfiprintf_r+0x334>
   1a330:	ca00001f 	bgt	1a3b4 <_svfiprintf_r+0x1d4>
   1a334:	e3530039 	cmp	r3, #57	; 0x39
   1a338:	ca000012 	bgt	1a388 <_svfiprintf_r+0x1a8>
   1a33c:	e3530031 	cmp	r3, #49	; 0x31
   1a340:	aa000064 	bge	1a4d8 <_svfiprintf_r+0x2f8>
   1a344:	e353002b 	cmp	r3, #43	; 0x2b
   1a348:	0affffef 	beq	1a30c <_svfiprintf_r+0x12c>
   1a34c:	ca000006 	bgt	1a36c <_svfiprintf_r+0x18c>
   1a350:	e3530023 	cmp	r3, #35	; 0x23
   1a354:	0a00003b 	beq	1a448 <_svfiprintf_r+0x268>
   1a358:	e353002a 	cmp	r3, #42	; 0x2a
   1a35c:	0a00003b 	beq	1a450 <_svfiprintf_r+0x270>
   1a360:	e3530020 	cmp	r3, #32
   1a364:	1a00011a 	bne	1a7d4 <_svfiprintf_r+0x5f4>
   1a368:	ea000033 	b	1a43c <_svfiprintf_r+0x25c>
   1a36c:	e353002e 	cmp	r3, #46	; 0x2e
   1a370:	0a000040 	beq	1a478 <_svfiprintf_r+0x298>
   1a374:	e3530030 	cmp	r3, #48	; 0x30
   1a378:	0a000054 	beq	1a4d0 <_svfiprintf_r+0x2f0>
   1a37c:	e353002d 	cmp	r3, #45	; 0x2d
   1a380:	1a000113 	bne	1a7d4 <_svfiprintf_r+0x5f4>
   1a384:	ea000039 	b	1a470 <_svfiprintf_r+0x290>
   1a388:	e353004f 	cmp	r3, #79	; 0x4f
   1a38c:	0a000084 	beq	1a5a4 <_svfiprintf_r+0x3c4>
   1a390:	ca000002 	bgt	1a3a0 <_svfiprintf_r+0x1c0>
   1a394:	e3530044 	cmp	r3, #68	; 0x44
   1a398:	1a00010d 	bne	1a7d4 <_svfiprintf_r+0x5f4>
   1a39c:	ea000062 	b	1a52c <_svfiprintf_r+0x34c>
   1a3a0:	e3530055 	cmp	r3, #85	; 0x55
   1a3a4:	0a0000aa 	beq	1a654 <_svfiprintf_r+0x474>
   1a3a8:	e3530058 	cmp	r3, #88	; 0x58
   1a3ac:	1a000108 	bne	1a7d4 <_svfiprintf_r+0x5f4>
   1a3b0:	ea00001e 	b	1a430 <_svfiprintf_r+0x250>
   1a3b4:	e353006f 	cmp	r3, #111	; 0x6f
   1a3b8:	0a00007a 	beq	1a5a8 <_svfiprintf_r+0x3c8>
   1a3bc:	ca00000c 	bgt	1a3f4 <_svfiprintf_r+0x214>
   1a3c0:	e3530069 	cmp	r3, #105	; 0x69
   1a3c4:	0a000017 	beq	1a428 <_svfiprintf_r+0x248>
   1a3c8:	ca000004 	bgt	1a3e0 <_svfiprintf_r+0x200>
   1a3cc:	e3530064 	cmp	r3, #100	; 0x64
   1a3d0:	0a000014 	beq	1a428 <_svfiprintf_r+0x248>
   1a3d4:	e3530068 	cmp	r3, #104	; 0x68
   1a3d8:	1a0000fd 	bne	1a7d4 <_svfiprintf_r+0x5f4>
   1a3dc:	ea000048 	b	1a504 <_svfiprintf_r+0x324>
   1a3e0:	e353006c 	cmp	r3, #108	; 0x6c
   1a3e4:	0a000048 	beq	1a50c <_svfiprintf_r+0x32c>
   1a3e8:	e353006e 	cmp	r3, #110	; 0x6e
   1a3ec:	1a0000f8 	bne	1a7d4 <_svfiprintf_r+0x5f4>
   1a3f0:	ea00005d 	b	1a56c <_svfiprintf_r+0x38c>
   1a3f4:	e3530073 	cmp	r3, #115	; 0x73
   1a3f8:	0a000081 	beq	1a604 <_svfiprintf_r+0x424>
   1a3fc:	ca000004 	bgt	1a414 <_svfiprintf_r+0x234>
   1a400:	e3530070 	cmp	r3, #112	; 0x70
   1a404:	0a000074 	beq	1a5dc <_svfiprintf_r+0x3fc>
   1a408:	e3530071 	cmp	r3, #113	; 0x71
   1a40c:	1a0000f0 	bne	1a7d4 <_svfiprintf_r+0x5f4>
   1a410:	ea00003d 	b	1a50c <_svfiprintf_r+0x32c>
   1a414:	e3530075 	cmp	r3, #117	; 0x75
   1a418:	0a00008e 	beq	1a658 <_svfiprintf_r+0x478>
   1a41c:	e3530078 	cmp	r3, #120	; 0x78
   1a420:	1a0000eb 	bne	1a7d4 <_svfiprintf_r+0x5f4>
   1a424:	ea000095 	b	1a680 <_svfiprintf_r+0x4a0>
   1a428:	e5cd202b 	strb	r2, [sp, #43]	; 0x2b
   1a42c:	ea000040 	b	1a534 <_svfiprintf_r+0x354>
   1a430:	e5cd202b 	strb	r2, [sp, #43]	; 0x2b
   1a434:	e59f28b4 	ldr	r2, [pc, #2228]	; 1acf0 <_svfiprintf_r+0xb10>
   1a438:	ea000092 	b	1a688 <_svfiprintf_r+0x4a8>
   1a43c:	e3520000 	cmp	r2, #0
   1a440:	03a02020 	moveq	r2, #32
   1a444:	eaffffb4 	b	1a31c <_svfiprintf_r+0x13c>
   1a448:	e3866001 	orr	r6, r6, #1
   1a44c:	eaffffb2 	b	1a31c <_svfiprintf_r+0x13c>
   1a450:	e2843004 	add	r3, r4, #4
   1a454:	e5944000 	ldr	r4, [r4]
   1a458:	e3540000 	cmp	r4, #0
   1a45c:	e58d4014 	str	r4, [sp, #20]
   1a460:	aa00000d 	bge	1a49c <_svfiprintf_r+0x2bc>
   1a464:	e2641000 	rsb	r1, r4, #0
   1a468:	e58d1014 	str	r1, [sp, #20]
   1a46c:	e1a04003 	mov	r4, r3
   1a470:	e3866004 	orr	r6, r6, #4
   1a474:	eaffffa8 	b	1a31c <_svfiprintf_r+0x13c>
   1a478:	e59d100c 	ldr	r1, [sp, #12]
   1a47c:	e4d13001 	ldrb	r3, [r1], #1
   1a480:	e353002a 	cmp	r3, #42	; 0x2a
   1a484:	e58d100c 	str	r1, [sp, #12]
   1a488:	1a00000a 	bne	1a4b8 <_svfiprintf_r+0x2d8>
   1a48c:	e5949000 	ldr	r9, [r4]
   1a490:	e3590000 	cmp	r9, #0
   1a494:	e2843004 	add	r3, r4, #4
   1a498:	baffff9d 	blt	1a314 <_svfiprintf_r+0x134>
   1a49c:	e1a04003 	mov	r4, r3
   1a4a0:	eaffff9d 	b	1a31c <_svfiprintf_r+0x13c>
   1a4a4:	e0291998 	mla	r9, r8, r9, r1
   1a4a8:	e59d100c 	ldr	r1, [sp, #12]
   1a4ac:	e4d13001 	ldrb	r3, [r1], #1
   1a4b0:	e58d100c 	str	r1, [sp, #12]
   1a4b4:	ea000000 	b	1a4bc <_svfiprintf_r+0x2dc>
   1a4b8:	e3a09000 	mov	r9, #0
   1a4bc:	e2431030 	sub	r1, r3, #48	; 0x30
   1a4c0:	e3510009 	cmp	r1, #9
   1a4c4:	9afffff6 	bls	1a4a4 <_svfiprintf_r+0x2c4>
   1a4c8:	e1899fc9 	orr	r9, r9, r9, asr #31
   1a4cc:	eaffff95 	b	1a328 <_svfiprintf_r+0x148>
   1a4d0:	e3866080 	orr	r6, r6, #128	; 0x80
   1a4d4:	eaffff90 	b	1a31c <_svfiprintf_r+0x13c>
   1a4d8:	e59d000c 	ldr	r0, [sp, #12]
   1a4dc:	e3a01000 	mov	r1, #0
   1a4e0:	e2433030 	sub	r3, r3, #48	; 0x30
   1a4e4:	e0213198 	mla	r1, r8, r1, r3
   1a4e8:	e4d03001 	ldrb	r3, [r0], #1
   1a4ec:	e243c030 	sub	ip, r3, #48	; 0x30
   1a4f0:	e35c0009 	cmp	ip, #9
   1a4f4:	e58d000c 	str	r0, [sp, #12]
   1a4f8:	9afffff8 	bls	1a4e0 <_svfiprintf_r+0x300>
   1a4fc:	e58d1014 	str	r1, [sp, #20]
   1a500:	eaffff88 	b	1a328 <_svfiprintf_r+0x148>
   1a504:	e3866040 	orr	r6, r6, #64	; 0x40
   1a508:	eaffff83 	b	1a31c <_svfiprintf_r+0x13c>
   1a50c:	e3866010 	orr	r6, r6, #16
   1a510:	eaffff81 	b	1a31c <_svfiprintf_r+0x13c>
   1a514:	e5943000 	ldr	r3, [r4]
   1a518:	e3a02000 	mov	r2, #0
   1a51c:	e5cd303c 	strb	r3, [sp, #60]	; 0x3c
   1a520:	e5cd202b 	strb	r2, [sp, #43]	; 0x2b
   1a524:	e2844004 	add	r4, r4, #4
   1a528:	ea0000af 	b	1a7ec <_svfiprintf_r+0x60c>
   1a52c:	e5cd202b 	strb	r2, [sp, #43]	; 0x2b
   1a530:	e3866010 	orr	r6, r6, #16
   1a534:	e3160010 	tst	r6, #16
   1a538:	e2843004 	add	r3, r4, #4
   1a53c:	1594a000 	ldrne	sl, [r4]
   1a540:	1a000003 	bne	1a554 <_svfiprintf_r+0x374>
   1a544:	e594a000 	ldr	sl, [r4]
   1a548:	e3160040 	tst	r6, #64	; 0x40
   1a54c:	11a0a80a 	lslne	sl, sl, #16
   1a550:	11a0a84a 	asrne	sl, sl, #16
   1a554:	e35a0000 	cmp	sl, #0
   1a558:	e1a04003 	mov	r4, r3
   1a55c:	b3a0302d 	movlt	r3, #45	; 0x2d
   1a560:	b26aa000 	rsblt	sl, sl, #0
   1a564:	b5cd302b 	strblt	r3, [sp, #43]	; 0x2b
   1a568:	ea00005a 	b	1a6d8 <_svfiprintf_r+0x4f8>
   1a56c:	e3160010 	tst	r6, #16
   1a570:	e5cd202b 	strb	r2, [sp, #43]	; 0x2b
   1a574:	e2843004 	add	r3, r4, #4
   1a578:	1a000004 	bne	1a590 <_svfiprintf_r+0x3b0>
   1a57c:	e3160040 	tst	r6, #64	; 0x40
   1a580:	15942000 	ldrne	r2, [r4]
   1a584:	159d1010 	ldrne	r1, [sp, #16]
   1a588:	11c210b0 	strhne	r1, [r2]
   1a58c:	1a000002 	bne	1a59c <_svfiprintf_r+0x3bc>
   1a590:	e5942000 	ldr	r2, [r4]
   1a594:	e59d1010 	ldr	r1, [sp, #16]
   1a598:	e5821000 	str	r1, [r2]
   1a59c:	e1a04003 	mov	r4, r3
   1a5a0:	eaffff2e 	b	1a260 <_svfiprintf_r+0x80>
   1a5a4:	e3866010 	orr	r6, r6, #16
   1a5a8:	e2161010 	ands	r1, r6, #16
   1a5ac:	e2843004 	add	r3, r4, #4
   1a5b0:	0a000003 	beq	1a5c4 <_svfiprintf_r+0x3e4>
   1a5b4:	e594a000 	ldr	sl, [r4]
   1a5b8:	e1a04003 	mov	r4, r3
   1a5bc:	e3a02000 	mov	r2, #0
   1a5c0:	ea000041 	b	1a6cc <_svfiprintf_r+0x4ec>
   1a5c4:	e2162040 	ands	r2, r6, #64	; 0x40
   1a5c8:	0594a000 	ldreq	sl, [r4]
   1a5cc:	11d4a0b0 	ldrhne	sl, [r4]
   1a5d0:	01a04003 	moveq	r4, r3
   1a5d4:	0a00003c 	beq	1a6cc <_svfiprintf_r+0x4ec>
   1a5d8:	eafffff6 	b	1a5b8 <_svfiprintf_r+0x3d8>
   1a5dc:	e3a03030 	mov	r3, #48	; 0x30
   1a5e0:	e5cd302c 	strb	r3, [sp, #44]	; 0x2c
   1a5e4:	e3a03078 	mov	r3, #120	; 0x78
   1a5e8:	e5cd302d 	strb	r3, [sp, #45]	; 0x2d
   1a5ec:	e59f3700 	ldr	r3, [pc, #1792]	; 1acf4 <_svfiprintf_r+0xb14>
   1a5f0:	e594a000 	ldr	sl, [r4]
   1a5f4:	e3866002 	orr	r6, r6, #2
   1a5f8:	e2844004 	add	r4, r4, #4
   1a5fc:	e58d301c 	str	r3, [sp, #28]
   1a600:	ea000030 	b	1a6c8 <_svfiprintf_r+0x4e8>
   1a604:	e1a03004 	mov	r3, r4
   1a608:	e5938000 	ldr	r8, [r3]
   1a60c:	e3a01000 	mov	r1, #0
   1a610:	e3590000 	cmp	r9, #0
   1a614:	e5cd102b 	strb	r1, [sp, #43]	; 0x2b
   1a618:	e2844004 	add	r4, r4, #4
   1a61c:	e1a00008 	mov	r0, r8
   1a620:	ba000008 	blt	1a648 <_svfiprintf_r+0x468>
   1a624:	e3a01000 	mov	r1, #0
   1a628:	e1a02009 	mov	r2, r9
   1a62c:	ebfffb6d 	bl	193e8 <memchr>
   1a630:	e3500000 	cmp	r0, #0
   1a634:	0a000070 	beq	1a7fc <_svfiprintf_r+0x61c>
   1a638:	e068a000 	rsb	sl, r8, r0
   1a63c:	e15a0009 	cmp	sl, r9
   1a640:	c1a0a009 	movgt	sl, r9
   1a644:	ea00006f 	b	1a808 <_svfiprintf_r+0x628>
   1a648:	ebffee81 	bl	16054 <strlen>
   1a64c:	e1a0a000 	mov	sl, r0
   1a650:	ea00006c 	b	1a808 <_svfiprintf_r+0x628>
   1a654:	e3866010 	orr	r6, r6, #16
   1a658:	e3160010 	tst	r6, #16
   1a65c:	e2843004 	add	r3, r4, #4
   1a660:	1a000002 	bne	1a670 <_svfiprintf_r+0x490>
   1a664:	e3160040 	tst	r6, #64	; 0x40
   1a668:	11d4a0b0 	ldrhne	sl, [r4]
   1a66c:	1a000000 	bne	1a674 <_svfiprintf_r+0x494>
   1a670:	e594a000 	ldr	sl, [r4]
   1a674:	e1a04003 	mov	r4, r3
   1a678:	e3a02001 	mov	r2, #1
   1a67c:	ea000012 	b	1a6cc <_svfiprintf_r+0x4ec>
   1a680:	e5cd202b 	strb	r2, [sp, #43]	; 0x2b
   1a684:	e59f2668 	ldr	r2, [pc, #1640]	; 1acf4 <_svfiprintf_r+0xb14>
   1a688:	e3160010 	tst	r6, #16
   1a68c:	e58d201c 	str	r2, [sp, #28]
   1a690:	e2842004 	add	r2, r4, #4
   1a694:	1a000002 	bne	1a6a4 <_svfiprintf_r+0x4c4>
   1a698:	e3160040 	tst	r6, #64	; 0x40
   1a69c:	11d4a0b0 	ldrhne	sl, [r4]
   1a6a0:	1a000000 	bne	1a6a8 <_svfiprintf_r+0x4c8>
   1a6a4:	e594a000 	ldr	sl, [r4]
   1a6a8:	e3160001 	tst	r6, #1
   1a6ac:	e1a04002 	mov	r4, r2
   1a6b0:	0a000004 	beq	1a6c8 <_svfiprintf_r+0x4e8>
   1a6b4:	e35a0000 	cmp	sl, #0
   1a6b8:	13a02030 	movne	r2, #48	; 0x30
   1a6bc:	15cd202c 	strbne	r2, [sp, #44]	; 0x2c
   1a6c0:	15cd302d 	strbne	r3, [sp, #45]	; 0x2d
   1a6c4:	13866002 	orrne	r6, r6, #2
   1a6c8:	e3a02002 	mov	r2, #2
   1a6cc:	e3a03000 	mov	r3, #0
   1a6d0:	e5cd302b 	strb	r3, [sp, #43]	; 0x2b
   1a6d4:	ea000000 	b	1a6dc <_svfiprintf_r+0x4fc>
   1a6d8:	e3a02001 	mov	r2, #1
   1a6dc:	e3590000 	cmp	r9, #0
   1a6e0:	a3c66080 	bicge	r6, r6, #128	; 0x80
   1a6e4:	e35a0000 	cmp	sl, #0
   1a6e8:	03590000 	cmpeq	r9, #0
   1a6ec:	0a00002c 	beq	1a7a4 <_svfiprintf_r+0x5c4>
   1a6f0:	e3520001 	cmp	r2, #1
   1a6f4:	0a000011 	beq	1a740 <_svfiprintf_r+0x560>
   1a6f8:	e3520002 	cmp	r2, #2
   1a6fc:	e28d3063 	add	r3, sp, #99	; 0x63
   1a700:	0a00001f 	beq	1a784 <_svfiprintf_r+0x5a4>
   1a704:	e20a2007 	and	r2, sl, #7
   1a708:	e2822030 	add	r2, r2, #48	; 0x30
   1a70c:	e1b0a1aa 	lsrs	sl, sl, #3
   1a710:	e1a08003 	mov	r8, r3
   1a714:	e5c32000 	strb	r2, [r3]
   1a718:	e2433001 	sub	r3, r3, #1
   1a71c:	1afffff8 	bne	1a704 <_svfiprintf_r+0x524>
   1a720:	e3160001 	tst	r6, #1
   1a724:	e1a01008 	mov	r1, r8
   1a728:	0a000026 	beq	1a7c8 <_svfiprintf_r+0x5e8>
   1a72c:	e3520030 	cmp	r2, #48	; 0x30
   1a730:	11a08003 	movne	r8, r3
   1a734:	13a03030 	movne	r3, #48	; 0x30
   1a738:	15413001 	strbne	r3, [r1, #-1]
   1a73c:	ea000021 	b	1a7c8 <_svfiprintf_r+0x5e8>
   1a740:	e35a0009 	cmp	sl, #9
   1a744:	928aa030 	addls	sl, sl, #48	; 0x30
   1a748:	95cda063 	strbls	sl, [sp, #99]	; 0x63
   1a74c:	9a00001a 	bls	1a7bc <_svfiprintf_r+0x5dc>
   1a750:	e28db063 	add	fp, sp, #99	; 0x63
   1a754:	e1a0000a 	mov	r0, sl
   1a758:	e3a0100a 	mov	r1, #10
   1a75c:	eb000419 	bl	1b7c8 <__umodsi3>
   1a760:	e2800030 	add	r0, r0, #48	; 0x30
   1a764:	e1a0800b 	mov	r8, fp
   1a768:	e3a0100a 	mov	r1, #10
   1a76c:	e44b0001 	strb	r0, [fp], #-1
   1a770:	e1a0000a 	mov	r0, sl
   1a774:	eb00037b 	bl	1b568 <__aeabi_uidiv>
   1a778:	e250a000 	subs	sl, r0, #0
   1a77c:	1afffff4 	bne	1a754 <_svfiprintf_r+0x574>
   1a780:	ea000010 	b	1a7c8 <_svfiprintf_r+0x5e8>
   1a784:	e59d101c 	ldr	r1, [sp, #28]
   1a788:	e20a200f 	and	r2, sl, #15
   1a78c:	e7d12002 	ldrb	r2, [r1, r2]
   1a790:	e1b0a22a 	lsrs	sl, sl, #4
   1a794:	e1a08003 	mov	r8, r3
   1a798:	e4432001 	strb	r2, [r3], #-1
   1a79c:	1afffff8 	bne	1a784 <_svfiprintf_r+0x5a4>
   1a7a0:	ea000008 	b	1a7c8 <_svfiprintf_r+0x5e8>
   1a7a4:	e3520000 	cmp	r2, #0
   1a7a8:	1a000005 	bne	1a7c4 <_svfiprintf_r+0x5e4>
   1a7ac:	e3160001 	tst	r6, #1
   1a7b0:	0a000003 	beq	1a7c4 <_svfiprintf_r+0x5e4>
   1a7b4:	e3a03030 	mov	r3, #48	; 0x30
   1a7b8:	e5cd3063 	strb	r3, [sp, #99]	; 0x63
   1a7bc:	e28d8063 	add	r8, sp, #99	; 0x63
   1a7c0:	ea000000 	b	1a7c8 <_svfiprintf_r+0x5e8>
   1a7c4:	e28d8064 	add	r8, sp, #100	; 0x64
   1a7c8:	e28da064 	add	sl, sp, #100	; 0x64
   1a7cc:	e068a00a 	rsb	sl, r8, sl
   1a7d0:	ea00000d 	b	1a80c <_svfiprintf_r+0x62c>
   1a7d4:	e3530000 	cmp	r3, #0
   1a7d8:	e5cd202b 	strb	r2, [sp, #43]	; 0x2b
   1a7dc:	0a000135 	beq	1acb8 <_svfiprintf_r+0xad8>
   1a7e0:	e3a02000 	mov	r2, #0
   1a7e4:	e5cd303c 	strb	r3, [sp, #60]	; 0x3c
   1a7e8:	e5cd202b 	strb	r2, [sp, #43]	; 0x2b
   1a7ec:	e3a0a001 	mov	sl, #1
   1a7f0:	e3a09000 	mov	r9, #0
   1a7f4:	e28d803c 	add	r8, sp, #60	; 0x3c
   1a7f8:	ea000003 	b	1a80c <_svfiprintf_r+0x62c>
   1a7fc:	e1a0a009 	mov	sl, r9
   1a800:	e1a09000 	mov	r9, r0
   1a804:	ea000000 	b	1a80c <_svfiprintf_r+0x62c>
   1a808:	e3a09000 	mov	r9, #0
   1a80c:	e15a0009 	cmp	sl, r9
   1a810:	a1a0300a 	movge	r3, sl
   1a814:	b1a03009 	movlt	r3, r9
   1a818:	e58d3018 	str	r3, [sp, #24]
   1a81c:	e5dd302b 	ldrb	r3, [sp, #43]	; 0x2b
   1a820:	e3530000 	cmp	r3, #0
   1a824:	159d3018 	ldrne	r3, [sp, #24]
   1a828:	12833001 	addne	r3, r3, #1
   1a82c:	158d3018 	strne	r3, [sp, #24]
   1a830:	e2163002 	ands	r3, r6, #2
   1a834:	e58d3020 	str	r3, [sp, #32]
   1a838:	159d3018 	ldrne	r3, [sp, #24]
   1a83c:	12833002 	addne	r3, r3, #2
   1a840:	158d3018 	strne	r3, [sp, #24]
   1a844:	e2163084 	ands	r3, r6, #132	; 0x84
   1a848:	e58d3024 	str	r3, [sp, #36]	; 0x24
   1a84c:	1a000030 	bne	1a914 <_svfiprintf_r+0x734>
   1a850:	e59d3014 	ldr	r3, [sp, #20]
   1a854:	e59d1018 	ldr	r1, [sp, #24]
   1a858:	e061b003 	rsb	fp, r1, r3
   1a85c:	e35b0000 	cmp	fp, #0
   1a860:	c59f3490 	ldrgt	r3, [pc, #1168]	; 1acf8 <_svfiprintf_r+0xb18>
   1a864:	c3a0c010 	movgt	ip, #16
   1a868:	ca000015 	bgt	1a8c4 <_svfiprintf_r+0x6e4>
   1a86c:	ea000028 	b	1a914 <_svfiprintf_r+0x734>
   1a870:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
   1a874:	e2822010 	add	r2, r2, #16
   1a878:	e58d2038 	str	r2, [sp, #56]	; 0x38
   1a87c:	e59d2034 	ldr	r2, [sp, #52]	; 0x34
   1a880:	e2822001 	add	r2, r2, #1
   1a884:	e3520007 	cmp	r2, #7
   1a888:	e8851008 	stm	r5, {r3, ip}
   1a88c:	e58d2034 	str	r2, [sp, #52]	; 0x34
   1a890:	d2855008 	addle	r5, r5, #8
   1a894:	da000008 	ble	1a8bc <_svfiprintf_r+0x6dc>
   1a898:	e59d0008 	ldr	r0, [sp, #8]
   1a89c:	e1a01007 	mov	r1, r7
   1a8a0:	e28d2030 	add	r2, sp, #48	; 0x30
   1a8a4:	e88d1008 	stm	sp, {r3, ip}
   1a8a8:	ebfffdea 	bl	1a058 <__ssprint_r>
   1a8ac:	e3500000 	cmp	r0, #0
   1a8b0:	e89d1008 	ldm	sp, {r3, ip}
   1a8b4:	1a000105 	bne	1acd0 <_svfiprintf_r+0xaf0>
   1a8b8:	e28d5064 	add	r5, sp, #100	; 0x64
   1a8bc:	e24bb010 	sub	fp, fp, #16
   1a8c0:	eaffffff 	b	1a8c4 <_svfiprintf_r+0x6e4>
   1a8c4:	e35b0010 	cmp	fp, #16
   1a8c8:	caffffe8 	bgt	1a870 <_svfiprintf_r+0x690>
   1a8cc:	e59f3424 	ldr	r3, [pc, #1060]	; 1acf8 <_svfiprintf_r+0xb18>
   1a8d0:	e8850808 	stm	r5, {r3, fp}
   1a8d4:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
   1a8d8:	e083b00b 	add	fp, r3, fp
   1a8dc:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
   1a8e0:	e2833001 	add	r3, r3, #1
   1a8e4:	e3530007 	cmp	r3, #7
   1a8e8:	e58db038 	str	fp, [sp, #56]	; 0x38
   1a8ec:	e58d3034 	str	r3, [sp, #52]	; 0x34
   1a8f0:	d2855008 	addle	r5, r5, #8
   1a8f4:	da000006 	ble	1a914 <_svfiprintf_r+0x734>
   1a8f8:	e59d0008 	ldr	r0, [sp, #8]
   1a8fc:	e1a01007 	mov	r1, r7
   1a900:	e28d2030 	add	r2, sp, #48	; 0x30
   1a904:	ebfffdd3 	bl	1a058 <__ssprint_r>
   1a908:	e3500000 	cmp	r0, #0
   1a90c:	1a0000ef 	bne	1acd0 <_svfiprintf_r+0xaf0>
   1a910:	e28d5064 	add	r5, sp, #100	; 0x64
   1a914:	e5dd302b 	ldrb	r3, [sp, #43]	; 0x2b
   1a918:	e3530000 	cmp	r3, #0
   1a91c:	0a000013 	beq	1a970 <_svfiprintf_r+0x790>
   1a920:	e28d302b 	add	r3, sp, #43	; 0x2b
   1a924:	e5853000 	str	r3, [r5]
   1a928:	e3a03001 	mov	r3, #1
   1a92c:	e5853004 	str	r3, [r5, #4]
   1a930:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
   1a934:	e2833001 	add	r3, r3, #1
   1a938:	e58d3038 	str	r3, [sp, #56]	; 0x38
   1a93c:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
   1a940:	e2833001 	add	r3, r3, #1
   1a944:	e3530007 	cmp	r3, #7
   1a948:	e58d3034 	str	r3, [sp, #52]	; 0x34
   1a94c:	d2855008 	addle	r5, r5, #8
   1a950:	da000006 	ble	1a970 <_svfiprintf_r+0x790>
   1a954:	e59d0008 	ldr	r0, [sp, #8]
   1a958:	e1a01007 	mov	r1, r7
   1a95c:	e28d2030 	add	r2, sp, #48	; 0x30
   1a960:	ebfffdbc 	bl	1a058 <__ssprint_r>
   1a964:	e3500000 	cmp	r0, #0
   1a968:	1a0000d8 	bne	1acd0 <_svfiprintf_r+0xaf0>
   1a96c:	e28d5064 	add	r5, sp, #100	; 0x64
   1a970:	e59d3020 	ldr	r3, [sp, #32]
   1a974:	e3530000 	cmp	r3, #0
   1a978:	0a000013 	beq	1a9cc <_svfiprintf_r+0x7ec>
   1a97c:	e28d302c 	add	r3, sp, #44	; 0x2c
   1a980:	e5853000 	str	r3, [r5]
   1a984:	e3a03002 	mov	r3, #2
   1a988:	e5853004 	str	r3, [r5, #4]
   1a98c:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
   1a990:	e2833002 	add	r3, r3, #2
   1a994:	e58d3038 	str	r3, [sp, #56]	; 0x38
   1a998:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
   1a99c:	e2833001 	add	r3, r3, #1
   1a9a0:	e3530007 	cmp	r3, #7
   1a9a4:	e58d3034 	str	r3, [sp, #52]	; 0x34
   1a9a8:	d2855008 	addle	r5, r5, #8
   1a9ac:	da000006 	ble	1a9cc <_svfiprintf_r+0x7ec>
   1a9b0:	e59d0008 	ldr	r0, [sp, #8]
   1a9b4:	e1a01007 	mov	r1, r7
   1a9b8:	e28d2030 	add	r2, sp, #48	; 0x30
   1a9bc:	ebfffda5 	bl	1a058 <__ssprint_r>
   1a9c0:	e3500000 	cmp	r0, #0
   1a9c4:	1a0000c1 	bne	1acd0 <_svfiprintf_r+0xaf0>
   1a9c8:	e28d5064 	add	r5, sp, #100	; 0x64
   1a9cc:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   1a9d0:	e3530080 	cmp	r3, #128	; 0x80
   1a9d4:	1a000030 	bne	1aa9c <_svfiprintf_r+0x8bc>
   1a9d8:	e59d3014 	ldr	r3, [sp, #20]
   1a9dc:	e59d1018 	ldr	r1, [sp, #24]
   1a9e0:	e061b003 	rsb	fp, r1, r3
   1a9e4:	e35b0000 	cmp	fp, #0
   1a9e8:	c59f330c 	ldrgt	r3, [pc, #780]	; 1acfc <_svfiprintf_r+0xb1c>
   1a9ec:	c3a0c010 	movgt	ip, #16
   1a9f0:	ca000015 	bgt	1aa4c <_svfiprintf_r+0x86c>
   1a9f4:	ea000028 	b	1aa9c <_svfiprintf_r+0x8bc>
   1a9f8:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
   1a9fc:	e2822010 	add	r2, r2, #16
   1aa00:	e58d2038 	str	r2, [sp, #56]	; 0x38
   1aa04:	e59d2034 	ldr	r2, [sp, #52]	; 0x34
   1aa08:	e2822001 	add	r2, r2, #1
   1aa0c:	e3520007 	cmp	r2, #7
   1aa10:	e8851008 	stm	r5, {r3, ip}
   1aa14:	e58d2034 	str	r2, [sp, #52]	; 0x34
   1aa18:	d2855008 	addle	r5, r5, #8
   1aa1c:	da000008 	ble	1aa44 <_svfiprintf_r+0x864>
   1aa20:	e59d0008 	ldr	r0, [sp, #8]
   1aa24:	e1a01007 	mov	r1, r7
   1aa28:	e28d2030 	add	r2, sp, #48	; 0x30
   1aa2c:	e88d1008 	stm	sp, {r3, ip}
   1aa30:	ebfffd88 	bl	1a058 <__ssprint_r>
   1aa34:	e3500000 	cmp	r0, #0
   1aa38:	e89d1008 	ldm	sp, {r3, ip}
   1aa3c:	1a0000a3 	bne	1acd0 <_svfiprintf_r+0xaf0>
   1aa40:	e28d5064 	add	r5, sp, #100	; 0x64
   1aa44:	e24bb010 	sub	fp, fp, #16
   1aa48:	eaffffff 	b	1aa4c <_svfiprintf_r+0x86c>
   1aa4c:	e35b0010 	cmp	fp, #16
   1aa50:	caffffe8 	bgt	1a9f8 <_svfiprintf_r+0x818>
   1aa54:	e59f32a0 	ldr	r3, [pc, #672]	; 1acfc <_svfiprintf_r+0xb1c>
   1aa58:	e8850808 	stm	r5, {r3, fp}
   1aa5c:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
   1aa60:	e083b00b 	add	fp, r3, fp
   1aa64:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
   1aa68:	e2833001 	add	r3, r3, #1
   1aa6c:	e3530007 	cmp	r3, #7
   1aa70:	e58db038 	str	fp, [sp, #56]	; 0x38
   1aa74:	e58d3034 	str	r3, [sp, #52]	; 0x34
   1aa78:	d2855008 	addle	r5, r5, #8
   1aa7c:	da000006 	ble	1aa9c <_svfiprintf_r+0x8bc>
   1aa80:	e59d0008 	ldr	r0, [sp, #8]
   1aa84:	e1a01007 	mov	r1, r7
   1aa88:	e28d2030 	add	r2, sp, #48	; 0x30
   1aa8c:	ebfffd71 	bl	1a058 <__ssprint_r>
   1aa90:	e3500000 	cmp	r0, #0
   1aa94:	1a00008d 	bne	1acd0 <_svfiprintf_r+0xaf0>
   1aa98:	e28d5064 	add	r5, sp, #100	; 0x64
   1aa9c:	e06a9009 	rsb	r9, sl, r9
   1aaa0:	e3590000 	cmp	r9, #0
   1aaa4:	c59fb250 	ldrgt	fp, [pc, #592]	; 1acfc <_svfiprintf_r+0xb1c>
   1aaa8:	c3a03010 	movgt	r3, #16
   1aaac:	ca000016 	bgt	1ab0c <_svfiprintf_r+0x92c>
   1aab0:	ea000029 	b	1ab5c <_svfiprintf_r+0x97c>
   1aab4:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
   1aab8:	e2822010 	add	r2, r2, #16
   1aabc:	e58d2038 	str	r2, [sp, #56]	; 0x38
   1aac0:	e59d2034 	ldr	r2, [sp, #52]	; 0x34
   1aac4:	e2822001 	add	r2, r2, #1
   1aac8:	e3520007 	cmp	r2, #7
   1aacc:	e585b000 	str	fp, [r5]
   1aad0:	e5853004 	str	r3, [r5, #4]
   1aad4:	e58d2034 	str	r2, [sp, #52]	; 0x34
   1aad8:	d2855008 	addle	r5, r5, #8
   1aadc:	da000008 	ble	1ab04 <_svfiprintf_r+0x924>
   1aae0:	e59d0008 	ldr	r0, [sp, #8]
   1aae4:	e1a01007 	mov	r1, r7
   1aae8:	e28d2030 	add	r2, sp, #48	; 0x30
   1aaec:	e58d3000 	str	r3, [sp]
   1aaf0:	ebfffd58 	bl	1a058 <__ssprint_r>
   1aaf4:	e3500000 	cmp	r0, #0
   1aaf8:	e59d3000 	ldr	r3, [sp]
   1aafc:	1a000073 	bne	1acd0 <_svfiprintf_r+0xaf0>
   1ab00:	e28d5064 	add	r5, sp, #100	; 0x64
   1ab04:	e2499010 	sub	r9, r9, #16
   1ab08:	eaffffff 	b	1ab0c <_svfiprintf_r+0x92c>
   1ab0c:	e3590010 	cmp	r9, #16
   1ab10:	caffffe7 	bgt	1aab4 <_svfiprintf_r+0x8d4>
   1ab14:	e59f31e0 	ldr	r3, [pc, #480]	; 1acfc <_svfiprintf_r+0xb1c>
   1ab18:	e8850208 	stm	r5, {r3, r9}
   1ab1c:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
   1ab20:	e0839009 	add	r9, r3, r9
   1ab24:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
   1ab28:	e2833001 	add	r3, r3, #1
   1ab2c:	e3530007 	cmp	r3, #7
   1ab30:	e58d9038 	str	r9, [sp, #56]	; 0x38
   1ab34:	e58d3034 	str	r3, [sp, #52]	; 0x34
   1ab38:	d2855008 	addle	r5, r5, #8
   1ab3c:	da000006 	ble	1ab5c <_svfiprintf_r+0x97c>
   1ab40:	e59d0008 	ldr	r0, [sp, #8]
   1ab44:	e1a01007 	mov	r1, r7
   1ab48:	e28d2030 	add	r2, sp, #48	; 0x30
   1ab4c:	ebfffd41 	bl	1a058 <__ssprint_r>
   1ab50:	e3500000 	cmp	r0, #0
   1ab54:	1a00005d 	bne	1acd0 <_svfiprintf_r+0xaf0>
   1ab58:	e28d5064 	add	r5, sp, #100	; 0x64
   1ab5c:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
   1ab60:	e8850500 	stm	r5, {r8, sl}
   1ab64:	e083a00a 	add	sl, r3, sl
   1ab68:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
   1ab6c:	e2833001 	add	r3, r3, #1
   1ab70:	e3530007 	cmp	r3, #7
   1ab74:	e58da038 	str	sl, [sp, #56]	; 0x38
   1ab78:	e58d3034 	str	r3, [sp, #52]	; 0x34
   1ab7c:	d2855008 	addle	r5, r5, #8
   1ab80:	da000006 	ble	1aba0 <_svfiprintf_r+0x9c0>
   1ab84:	e59d0008 	ldr	r0, [sp, #8]
   1ab88:	e1a01007 	mov	r1, r7
   1ab8c:	e28d2030 	add	r2, sp, #48	; 0x30
   1ab90:	ebfffd30 	bl	1a058 <__ssprint_r>
   1ab94:	e3500000 	cmp	r0, #0
   1ab98:	1a00004c 	bne	1acd0 <_svfiprintf_r+0xaf0>
   1ab9c:	e28d5064 	add	r5, sp, #100	; 0x64
   1aba0:	e3160004 	tst	r6, #4
   1aba4:	1a00000a 	bne	1abd4 <_svfiprintf_r+0x9f4>
   1aba8:	e59d3010 	ldr	r3, [sp, #16]
   1abac:	e59d1018 	ldr	r1, [sp, #24]
   1abb0:	e59d2014 	ldr	r2, [sp, #20]
   1abb4:	e1510002 	cmp	r1, r2
   1abb8:	a0833001 	addge	r3, r3, r1
   1abbc:	b0833002 	addlt	r3, r3, r2
   1abc0:	e58d3010 	str	r3, [sp, #16]
   1abc4:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
   1abc8:	e3530000 	cmp	r3, #0
   1abcc:	0a00002e 	beq	1ac8c <_svfiprintf_r+0xaac>
   1abd0:	ea000031 	b	1ac9c <_svfiprintf_r+0xabc>
   1abd4:	e59d3014 	ldr	r3, [sp, #20]
   1abd8:	e59d1018 	ldr	r1, [sp, #24]
   1abdc:	e0616003 	rsb	r6, r1, r3
   1abe0:	e3560000 	cmp	r6, #0
   1abe4:	c59f810c 	ldrgt	r8, [pc, #268]	; 1acf8 <_svfiprintf_r+0xb18>
   1abe8:	c3a0a010 	movgt	sl, #16
   1abec:	ca000013 	bgt	1ac40 <_svfiprintf_r+0xa60>
   1abf0:	eaffffec 	b	1aba8 <_svfiprintf_r+0x9c8>
   1abf4:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
   1abf8:	e2833010 	add	r3, r3, #16
   1abfc:	e58d3038 	str	r3, [sp, #56]	; 0x38
   1ac00:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
   1ac04:	e2833001 	add	r3, r3, #1
   1ac08:	e3530007 	cmp	r3, #7
   1ac0c:	e8850500 	stm	r5, {r8, sl}
   1ac10:	e58d3034 	str	r3, [sp, #52]	; 0x34
   1ac14:	d2855008 	addle	r5, r5, #8
   1ac18:	da000006 	ble	1ac38 <_svfiprintf_r+0xa58>
   1ac1c:	e59d0008 	ldr	r0, [sp, #8]
   1ac20:	e1a01007 	mov	r1, r7
   1ac24:	e28d2030 	add	r2, sp, #48	; 0x30
   1ac28:	ebfffd0a 	bl	1a058 <__ssprint_r>
   1ac2c:	e3500000 	cmp	r0, #0
   1ac30:	1a000026 	bne	1acd0 <_svfiprintf_r+0xaf0>
   1ac34:	e28d5064 	add	r5, sp, #100	; 0x64
   1ac38:	e2466010 	sub	r6, r6, #16
   1ac3c:	eaffffff 	b	1ac40 <_svfiprintf_r+0xa60>
   1ac40:	e3560010 	cmp	r6, #16
   1ac44:	caffffea 	bgt	1abf4 <_svfiprintf_r+0xa14>
   1ac48:	e59f30a8 	ldr	r3, [pc, #168]	; 1acf8 <_svfiprintf_r+0xb18>
   1ac4c:	e8850048 	stm	r5, {r3, r6}
   1ac50:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
   1ac54:	e0836006 	add	r6, r3, r6
   1ac58:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
   1ac5c:	e2833001 	add	r3, r3, #1
   1ac60:	e3530007 	cmp	r3, #7
   1ac64:	e58d6038 	str	r6, [sp, #56]	; 0x38
   1ac68:	e58d3034 	str	r3, [sp, #52]	; 0x34
   1ac6c:	daffffcd 	ble	1aba8 <_svfiprintf_r+0x9c8>
   1ac70:	e59d0008 	ldr	r0, [sp, #8]
   1ac74:	e1a01007 	mov	r1, r7
   1ac78:	e28d2030 	add	r2, sp, #48	; 0x30
   1ac7c:	ebfffcf5 	bl	1a058 <__ssprint_r>
   1ac80:	e3500000 	cmp	r0, #0
   1ac84:	0affffc7 	beq	1aba8 <_svfiprintf_r+0x9c8>
   1ac88:	ea000010 	b	1acd0 <_svfiprintf_r+0xaf0>
   1ac8c:	e3a02000 	mov	r2, #0
   1ac90:	e58d2034 	str	r2, [sp, #52]	; 0x34
   1ac94:	e28d5064 	add	r5, sp, #100	; 0x64
   1ac98:	eafffd70 	b	1a260 <_svfiprintf_r+0x80>
   1ac9c:	e59d0008 	ldr	r0, [sp, #8]
   1aca0:	e1a01007 	mov	r1, r7
   1aca4:	e28d2030 	add	r2, sp, #48	; 0x30
   1aca8:	ebfffcea 	bl	1a058 <__ssprint_r>
   1acac:	e3500000 	cmp	r0, #0
   1acb0:	0afffff5 	beq	1ac8c <_svfiprintf_r+0xaac>
   1acb4:	ea000005 	b	1acd0 <_svfiprintf_r+0xaf0>
   1acb8:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
   1acbc:	e3530000 	cmp	r3, #0
   1acc0:	159d0008 	ldrne	r0, [sp, #8]
   1acc4:	11a01007 	movne	r1, r7
   1acc8:	128d2030 	addne	r2, sp, #48	; 0x30
   1accc:	1bfffce1 	blne	1a058 <__ssprint_r>
   1acd0:	e1d730bc 	ldrh	r3, [r7, #12]
   1acd4:	e3130040 	tst	r3, #64	; 0x40
   1acd8:	e59d3010 	ldr	r3, [sp, #16]
   1acdc:	13e03000 	mvnne	r3, #0
   1ace0:	e58d3010 	str	r3, [sp, #16]
   1ace4:	e59d0010 	ldr	r0, [sp, #16]
   1ace8:	e28dd0a4 	add	sp, sp, #164	; 0xa4
   1acec:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1acf0:	0001c8cf 	.word	0x0001c8cf
   1acf4:	0001c8f0 	.word	0x0001c8f0
   1acf8:	0001c4cc 	.word	0x0001c4cc
   1acfc:	0001c4dc 	.word	0x0001c4dc

0001ad00 <_calloc_r>:
   1ad00:	e92d4010 	push	{r4, lr}
   1ad04:	e0010192 	mul	r1, r2, r1
   1ad08:	ebfff831 	bl	18dd4 <_malloc_r>
   1ad0c:	e2504000 	subs	r4, r0, #0
   1ad10:	0a00001b 	beq	1ad84 <_calloc_r+0x84>
   1ad14:	e5142004 	ldr	r2, [r4, #-4]
   1ad18:	e3c22003 	bic	r2, r2, #3
   1ad1c:	e2422004 	sub	r2, r2, #4
   1ad20:	e3520024 	cmp	r2, #36	; 0x24
   1ad24:	8a000014 	bhi	1ad7c <_calloc_r+0x7c>
   1ad28:	e3520013 	cmp	r2, #19
   1ad2c:	91a03004 	movls	r3, r4
   1ad30:	9a00000c 	bls	1ad68 <_calloc_r+0x68>
   1ad34:	e3a03000 	mov	r3, #0
   1ad38:	e352001b 	cmp	r2, #27
   1ad3c:	e5843000 	str	r3, [r4]
   1ad40:	e5843004 	str	r3, [r4, #4]
   1ad44:	92843008 	addls	r3, r4, #8
   1ad48:	9a000006 	bls	1ad68 <_calloc_r+0x68>
   1ad4c:	e3520024 	cmp	r2, #36	; 0x24
   1ad50:	e5843008 	str	r3, [r4, #8]
   1ad54:	e584300c 	str	r3, [r4, #12]
   1ad58:	05843010 	streq	r3, [r4, #16]
   1ad5c:	05843014 	streq	r3, [r4, #20]
   1ad60:	12843010 	addne	r3, r4, #16
   1ad64:	02843018 	addeq	r3, r4, #24
   1ad68:	e3a02000 	mov	r2, #0
   1ad6c:	e5832000 	str	r2, [r3]
   1ad70:	e5832004 	str	r2, [r3, #4]
   1ad74:	e5832008 	str	r2, [r3, #8]
   1ad78:	ea000001 	b	1ad84 <_calloc_r+0x84>
   1ad7c:	e3a01000 	mov	r1, #0
   1ad80:	ebffec60 	bl	15f08 <memset>
   1ad84:	e1a00004 	mov	r0, r4
   1ad88:	e8bd8010 	pop	{r4, pc}

0001ad8c <_malloc_trim_r>:
   1ad8c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1ad90:	e59f60e0 	ldr	r6, [pc, #224]	; 1ae78 <_malloc_trim_r+0xec>
   1ad94:	e1a08001 	mov	r8, r1
   1ad98:	e1a04000 	mov	r4, r0
   1ad9c:	ebfff99e 	bl	1941c <__malloc_lock>
   1ada0:	e5963008 	ldr	r3, [r6, #8]
   1ada4:	e5937004 	ldr	r7, [r3, #4]
   1ada8:	e3c77003 	bic	r7, r7, #3
   1adac:	e2875efe 	add	r5, r7, #4064	; 0xfe0
   1adb0:	e285500f 	add	r5, r5, #15
   1adb4:	e0685005 	rsb	r5, r8, r5
   1adb8:	e3c55eff 	bic	r5, r5, #4080	; 0xff0
   1adbc:	e3c5500f 	bic	r5, r5, #15
   1adc0:	e2455a01 	sub	r5, r5, #4096	; 0x1000
   1adc4:	e3550a01 	cmp	r5, #4096	; 0x1000
   1adc8:	aa000003 	bge	1addc <_malloc_trim_r+0x50>
   1adcc:	e1a00004 	mov	r0, r4
   1add0:	ebfff992 	bl	19420 <__malloc_unlock>
   1add4:	e3a00000 	mov	r0, #0
   1add8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1addc:	e1a00004 	mov	r0, r4
   1ade0:	e3a01000 	mov	r1, #0
   1ade4:	ebffde46 	bl	12704 <_sbrk_r>
   1ade8:	e5963008 	ldr	r3, [r6, #8]
   1adec:	e0833007 	add	r3, r3, r7
   1adf0:	e1500003 	cmp	r0, r3
   1adf4:	1afffff4 	bne	1adcc <_malloc_trim_r+0x40>
   1adf8:	e1a00004 	mov	r0, r4
   1adfc:	e2651000 	rsb	r1, r5, #0
   1ae00:	ebffde3f 	bl	12704 <_sbrk_r>
   1ae04:	e3700001 	cmn	r0, #1
   1ae08:	1a00000e 	bne	1ae48 <_malloc_trim_r+0xbc>
   1ae0c:	e1a00004 	mov	r0, r4
   1ae10:	e3a01000 	mov	r1, #0
   1ae14:	ebffde3a 	bl	12704 <_sbrk_r>
   1ae18:	e5963008 	ldr	r3, [r6, #8]
   1ae1c:	e0632000 	rsb	r2, r3, r0
   1ae20:	e352000f 	cmp	r2, #15
   1ae24:	daffffe8 	ble	1adcc <_malloc_trim_r+0x40>
   1ae28:	e59f104c 	ldr	r1, [pc, #76]	; 1ae7c <_malloc_trim_r+0xf0>
   1ae2c:	e5911000 	ldr	r1, [r1]
   1ae30:	e0610000 	rsb	r0, r1, r0
   1ae34:	e59f1044 	ldr	r1, [pc, #68]	; 1ae80 <_malloc_trim_r+0xf4>
   1ae38:	e3822001 	orr	r2, r2, #1
   1ae3c:	e5810000 	str	r0, [r1]
   1ae40:	e5832004 	str	r2, [r3, #4]
   1ae44:	eaffffe0 	b	1adcc <_malloc_trim_r+0x40>
   1ae48:	e5963008 	ldr	r3, [r6, #8]
   1ae4c:	e0657007 	rsb	r7, r5, r7
   1ae50:	e3877001 	orr	r7, r7, #1
   1ae54:	e5837004 	str	r7, [r3, #4]
   1ae58:	e59f3020 	ldr	r3, [pc, #32]	; 1ae80 <_malloc_trim_r+0xf4>
   1ae5c:	e5932000 	ldr	r2, [r3]
   1ae60:	e1a00004 	mov	r0, r4
   1ae64:	e0655002 	rsb	r5, r5, r2
   1ae68:	e5835000 	str	r5, [r3]
   1ae6c:	ebfff96b 	bl	19420 <__malloc_unlock>
   1ae70:	e3a00001 	mov	r0, #1
   1ae74:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1ae78:	400004bc 	.word	0x400004bc
   1ae7c:	400008c4 	.word	0x400008c4
   1ae80:	40000c28 	.word	0x40000c28

0001ae84 <_free_r>:
   1ae84:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1ae88:	e2515000 	subs	r5, r1, #0
   1ae8c:	e1a04000 	mov	r4, r0
   1ae90:	08bd80f0 	popeq	{r4, r5, r6, r7, pc}
   1ae94:	ebfff960 	bl	1941c <__malloc_lock>
   1ae98:	e5151004 	ldr	r1, [r5, #-4]
   1ae9c:	e59f6208 	ldr	r6, [pc, #520]	; 1b0ac <_free_r+0x228>
   1aea0:	e3c12001 	bic	r2, r1, #1
   1aea4:	e2453008 	sub	r3, r5, #8
   1aea8:	e083c002 	add	ip, r3, r2
   1aeac:	e5967008 	ldr	r7, [r6, #8]
   1aeb0:	e59c0004 	ldr	r0, [ip, #4]
   1aeb4:	e15c0007 	cmp	ip, r7
   1aeb8:	e3c00003 	bic	r0, r0, #3
   1aebc:	e2011001 	and	r1, r1, #1
   1aec0:	1a000017 	bne	1af24 <_free_r+0xa0>
   1aec4:	e3510000 	cmp	r1, #0
   1aec8:	e0802002 	add	r2, r0, r2
   1aecc:	1a000006 	bne	1aeec <_free_r+0x68>
   1aed0:	e5151008 	ldr	r1, [r5, #-8]
   1aed4:	e0613003 	rsb	r3, r1, r3
   1aed8:	e2830008 	add	r0, r3, #8
   1aedc:	e0822001 	add	r2, r2, r1
   1aee0:	e8900003 	ldm	r0, {r0, r1}
   1aee4:	e580100c 	str	r1, [r0, #12]
   1aee8:	e5810008 	str	r0, [r1, #8]
   1aeec:	e3821001 	orr	r1, r2, #1
   1aef0:	e5831004 	str	r1, [r3, #4]
   1aef4:	e59f11b0 	ldr	r1, [pc, #432]	; 1b0ac <_free_r+0x228>
   1aef8:	e5813008 	str	r3, [r1, #8]
   1aefc:	e59f31ac 	ldr	r3, [pc, #428]	; 1b0b0 <_free_r+0x22c>
   1af00:	e5933000 	ldr	r3, [r3]
   1af04:	e1520003 	cmp	r2, r3
   1af08:	259f31a4 	ldrcs	r3, [pc, #420]	; 1b0b4 <_free_r+0x230>
   1af0c:	21a00004 	movcs	r0, r4
   1af10:	25931000 	ldrcs	r1, [r3]
   1af14:	2bffff9c 	blcs	1ad8c <_malloc_trim_r>
   1af18:	e1a00004 	mov	r0, r4
   1af1c:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   1af20:	eafff93e 	b	19420 <__malloc_unlock>
   1af24:	e3510000 	cmp	r1, #0
   1af28:	e58c0004 	str	r0, [ip, #4]
   1af2c:	13a01000 	movne	r1, #0
   1af30:	1a000009 	bne	1af5c <_free_r+0xd8>
   1af34:	e5155008 	ldr	r5, [r5, #-8]
   1af38:	e0653003 	rsb	r3, r5, r3
   1af3c:	e0822005 	add	r2, r2, r5
   1af40:	e5935008 	ldr	r5, [r3, #8]
   1af44:	e2866008 	add	r6, r6, #8
   1af48:	e1550006 	cmp	r5, r6
   1af4c:	1593600c 	ldrne	r6, [r3, #12]
   1af50:	1585600c 	strne	r6, [r5, #12]
   1af54:	15865008 	strne	r5, [r6, #8]
   1af58:	03a01001 	moveq	r1, #1
   1af5c:	e08c5000 	add	r5, ip, r0
   1af60:	e5955004 	ldr	r5, [r5, #4]
   1af64:	e3150001 	tst	r5, #1
   1af68:	1a000010 	bne	1afb0 <_free_r+0x12c>
   1af6c:	e3510000 	cmp	r1, #0
   1af70:	e0822000 	add	r2, r2, r0
   1af74:	1a000009 	bne	1afa0 <_free_r+0x11c>
   1af78:	e59c0008 	ldr	r0, [ip, #8]
   1af7c:	e59f5134 	ldr	r5, [pc, #308]	; 1b0b8 <_free_r+0x234>
   1af80:	e1500005 	cmp	r0, r5
   1af84:	1a000005 	bne	1afa0 <_free_r+0x11c>
   1af88:	e585300c 	str	r3, [r5, #12]
   1af8c:	e5853008 	str	r3, [r5, #8]
   1af90:	e583000c 	str	r0, [r3, #12]
   1af94:	e5830008 	str	r0, [r3, #8]
   1af98:	e3a01001 	mov	r1, #1
   1af9c:	ea000003 	b	1afb0 <_free_r+0x12c>
   1afa0:	e59c000c 	ldr	r0, [ip, #12]
   1afa4:	e59cc008 	ldr	ip, [ip, #8]
   1afa8:	e58c000c 	str	r0, [ip, #12]
   1afac:	e580c008 	str	ip, [r0, #8]
   1afb0:	e3820001 	orr	r0, r2, #1
   1afb4:	e3510000 	cmp	r1, #0
   1afb8:	e5830004 	str	r0, [r3, #4]
   1afbc:	e7832002 	str	r2, [r3, r2]
   1afc0:	1affffd4 	bne	1af18 <_free_r+0x94>
   1afc4:	e3520c02 	cmp	r2, #512	; 0x200
   1afc8:	2a000009 	bcs	1aff4 <_free_r+0x170>
   1afcc:	e59f10d8 	ldr	r1, [pc, #216]	; 1b0ac <_free_r+0x228>
   1afd0:	e1a021a2 	lsr	r2, r2, #3
   1afd4:	e591c004 	ldr	ip, [r1, #4]
   1afd8:	e1a00142 	asr	r0, r2, #2
   1afdc:	e3a05001 	mov	r5, #1
   1afe0:	e18c0015 	orr	r0, ip, r5, lsl r0
   1afe4:	e0812182 	add	r2, r1, r2, lsl #3
   1afe8:	e5810004 	str	r0, [r1, #4]
   1afec:	e5921008 	ldr	r1, [r2, #8]
   1aff0:	ea000028 	b	1b098 <_free_r+0x214>
   1aff4:	e1a0c4a2 	lsr	ip, r2, #9
   1aff8:	e35c0004 	cmp	ip, #4
   1affc:	91a0c322 	lsrls	ip, r2, #6
   1b000:	928cc038 	addls	ip, ip, #56	; 0x38
   1b004:	9a00000f 	bls	1b048 <_free_r+0x1c4>
   1b008:	e35c0014 	cmp	ip, #20
   1b00c:	928cc05b 	addls	ip, ip, #91	; 0x5b
   1b010:	9a00000c 	bls	1b048 <_free_r+0x1c4>
   1b014:	e35c0054 	cmp	ip, #84	; 0x54
   1b018:	91a0c622 	lsrls	ip, r2, #12
   1b01c:	928cc06e 	addls	ip, ip, #110	; 0x6e
   1b020:	9a000008 	bls	1b048 <_free_r+0x1c4>
   1b024:	e35c0f55 	cmp	ip, #340	; 0x154
   1b028:	91a0c7a2 	lsrls	ip, r2, #15
   1b02c:	928cc077 	addls	ip, ip, #119	; 0x77
   1b030:	9a000004 	bls	1b048 <_free_r+0x1c4>
   1b034:	e59f1080 	ldr	r1, [pc, #128]	; 1b0bc <_free_r+0x238>
   1b038:	e15c0001 	cmp	ip, r1
   1b03c:	91a0c922 	lsrls	ip, r2, #18
   1b040:	928cc07c 	addls	ip, ip, #124	; 0x7c
   1b044:	83a0c07e 	movhi	ip, #126	; 0x7e
   1b048:	e59f505c 	ldr	r5, [pc, #92]	; 1b0ac <_free_r+0x228>
   1b04c:	e085018c 	add	r0, r5, ip, lsl #3
   1b050:	e5901008 	ldr	r1, [r0, #8]
   1b054:	e1510000 	cmp	r1, r0
   1b058:	1a000009 	bne	1b084 <_free_r+0x200>
   1b05c:	e5952004 	ldr	r2, [r5, #4]
   1b060:	e1a0c14c 	asr	ip, ip, #2
   1b064:	e3a00001 	mov	r0, #1
   1b068:	e182cc10 	orr	ip, r2, r0, lsl ip
   1b06c:	e1a02001 	mov	r2, r1
   1b070:	e585c004 	str	ip, [r5, #4]
   1b074:	ea000007 	b	1b098 <_free_r+0x214>
   1b078:	e5911008 	ldr	r1, [r1, #8]
   1b07c:	e1510000 	cmp	r1, r0
   1b080:	0a000003 	beq	1b094 <_free_r+0x210>
   1b084:	e591c004 	ldr	ip, [r1, #4]
   1b088:	e3ccc003 	bic	ip, ip, #3
   1b08c:	e152000c 	cmp	r2, ip
   1b090:	3afffff8 	bcc	1b078 <_free_r+0x1f4>
   1b094:	e591200c 	ldr	r2, [r1, #12]
   1b098:	e583200c 	str	r2, [r3, #12]
   1b09c:	e5831008 	str	r1, [r3, #8]
   1b0a0:	e5823008 	str	r3, [r2, #8]
   1b0a4:	e581300c 	str	r3, [r1, #12]
   1b0a8:	eaffff9a 	b	1af18 <_free_r+0x94>
   1b0ac:	400004bc 	.word	0x400004bc
   1b0b0:	400008c8 	.word	0x400008c8
   1b0b4:	40000c24 	.word	0x40000c24
   1b0b8:	400004c4 	.word	0x400004c4
   1b0bc:	00000554 	.word	0x00000554

0001b0c0 <memmove>:
   1b0c0:	e1510000 	cmp	r1, r0
   1b0c4:	2a000010 	bcs	1b10c <memmove+0x4c>
   1b0c8:	e081c002 	add	ip, r1, r2
   1b0cc:	e150000c 	cmp	r0, ip
   1b0d0:	2a00000d 	bcs	1b10c <memmove+0x4c>
   1b0d4:	e2623000 	rsb	r3, r2, #0
   1b0d8:	e0801002 	add	r1, r0, r2
   1b0dc:	e08cc003 	add	ip, ip, r3
   1b0e0:	e0813003 	add	r3, r1, r3
   1b0e4:	ea000001 	b	1b0f0 <memmove+0x30>
   1b0e8:	e7dc1002 	ldrb	r1, [ip, r2]
   1b0ec:	e7c31002 	strb	r1, [r3, r2]
   1b0f0:	e2522001 	subs	r2, r2, #1
   1b0f4:	2afffffb 	bcs	1b0e8 <memmove+0x28>
   1b0f8:	e12fff1e 	bx	lr
   1b0fc:	e7d1c003 	ldrb	ip, [r1, r3]
   1b100:	e7c0c003 	strb	ip, [r0, r3]
   1b104:	e2833001 	add	r3, r3, #1
   1b108:	ea000000 	b	1b110 <memmove+0x50>
   1b10c:	e3a03000 	mov	r3, #0
   1b110:	e1530002 	cmp	r3, r2
   1b114:	1afffff8 	bne	1b0fc <memmove+0x3c>
   1b118:	e12fff1e 	bx	lr

0001b11c <_realloc_r>:
   1b11c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b120:	e2514000 	subs	r4, r1, #0
   1b124:	e1a0a000 	mov	sl, r0
   1b128:	e1a06002 	mov	r6, r2
   1b12c:	1a000002 	bne	1b13c <_realloc_r+0x20>
   1b130:	e1a01002 	mov	r1, r2
   1b134:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b138:	eafff725 	b	18dd4 <_malloc_r>
   1b13c:	ebfff8b6 	bl	1941c <__malloc_lock>
   1b140:	e286700b 	add	r7, r6, #11
   1b144:	e3570016 	cmp	r7, #22
   1b148:	83c77007 	bichi	r7, r7, #7
   1b14c:	93a07010 	movls	r7, #16
   1b150:	e1570006 	cmp	r7, r6
   1b154:	23a00000 	movcs	r0, #0
   1b158:	33a00001 	movcc	r0, #1
   1b15c:	e1900fa7 	orrs	r0, r0, r7, lsr #31
   1b160:	e5141004 	ldr	r1, [r4, #-4]
   1b164:	13a0300c 	movne	r3, #12
   1b168:	e244b008 	sub	fp, r4, #8
   1b16c:	e3c18003 	bic	r8, r1, #3
   1b170:	158a3000 	strne	r3, [sl]
   1b174:	13a06000 	movne	r6, #0
   1b178:	1a0000f7 	bne	1b55c <_realloc_r+0x440>
   1b17c:	e1580007 	cmp	r8, r7
   1b180:	aa0000d7 	bge	1b4e4 <_realloc_r+0x3c8>
   1b184:	e59f23d8 	ldr	r2, [pc, #984]	; 1b564 <_realloc_r+0x448>
   1b188:	e5922008 	ldr	r2, [r2, #8]
   1b18c:	e08b3008 	add	r3, fp, r8
   1b190:	e1530002 	cmp	r3, r2
   1b194:	0a000005 	beq	1b1b0 <_realloc_r+0x94>
   1b198:	e593c004 	ldr	ip, [r3, #4]
   1b19c:	e3ccc001 	bic	ip, ip, #1
   1b1a0:	e083c00c 	add	ip, r3, ip
   1b1a4:	e59cc004 	ldr	ip, [ip, #4]
   1b1a8:	e31c0001 	tst	ip, #1
   1b1ac:	1a00001c 	bne	1b224 <_realloc_r+0x108>
   1b1b0:	e5930004 	ldr	r0, [r3, #4]
   1b1b4:	e1530002 	cmp	r3, r2
   1b1b8:	e3c00003 	bic	r0, r0, #3
   1b1bc:	e0809008 	add	r9, r0, r8
   1b1c0:	1a000010 	bne	1b208 <_realloc_r+0xec>
   1b1c4:	e287c010 	add	ip, r7, #16
   1b1c8:	e159000c 	cmp	r9, ip
   1b1cc:	ba000015 	blt	1b228 <_realloc_r+0x10c>
   1b1d0:	e0679009 	rsb	r9, r7, r9
   1b1d4:	e08bb007 	add	fp, fp, r7
   1b1d8:	e3899001 	orr	r9, r9, #1
   1b1dc:	e58b9004 	str	r9, [fp, #4]
   1b1e0:	e59f337c 	ldr	r3, [pc, #892]	; 1b564 <_realloc_r+0x448>
   1b1e4:	e583b008 	str	fp, [r3, #8]
   1b1e8:	e5143004 	ldr	r3, [r4, #-4]
   1b1ec:	e2033001 	and	r3, r3, #1
   1b1f0:	e1877003 	orr	r7, r7, r3
   1b1f4:	e5047004 	str	r7, [r4, #-4]
   1b1f8:	e1a0000a 	mov	r0, sl
   1b1fc:	ebfff887 	bl	19420 <__malloc_unlock>
   1b200:	e1a06004 	mov	r6, r4
   1b204:	ea0000d4 	b	1b55c <_realloc_r+0x440>
   1b208:	e1590007 	cmp	r9, r7
   1b20c:	ba000005 	blt	1b228 <_realloc_r+0x10c>
   1b210:	e593200c 	ldr	r2, [r3, #12]
   1b214:	e5933008 	ldr	r3, [r3, #8]
   1b218:	e583200c 	str	r2, [r3, #12]
   1b21c:	e5823008 	str	r3, [r2, #8]
   1b220:	ea0000b0 	b	1b4e8 <_realloc_r+0x3cc>
   1b224:	e1a03000 	mov	r3, r0
   1b228:	e3110001 	tst	r1, #1
   1b22c:	1a000073 	bne	1b400 <_realloc_r+0x2e4>
   1b230:	e5145008 	ldr	r5, [r4, #-8]
   1b234:	e065500b 	rsb	r5, r5, fp
   1b238:	e5951004 	ldr	r1, [r5, #4]
   1b23c:	e3530000 	cmp	r3, #0
   1b240:	e3c11003 	bic	r1, r1, #3
   1b244:	0a000041 	beq	1b350 <_realloc_r+0x234>
   1b248:	e0819008 	add	r9, r1, r8
   1b24c:	e1530002 	cmp	r3, r2
   1b250:	e0899000 	add	r9, r9, r0
   1b254:	1a000037 	bne	1b338 <_realloc_r+0x21c>
   1b258:	e2873010 	add	r3, r7, #16
   1b25c:	e1590003 	cmp	r9, r3
   1b260:	ba00003a 	blt	1b350 <_realloc_r+0x234>
   1b264:	e1a06005 	mov	r6, r5
   1b268:	e5b62008 	ldr	r2, [r6, #8]!
   1b26c:	e595300c 	ldr	r3, [r5, #12]
   1b270:	e582300c 	str	r3, [r2, #12]
   1b274:	e5832008 	str	r2, [r3, #8]
   1b278:	e2482004 	sub	r2, r8, #4
   1b27c:	e3520024 	cmp	r2, #36	; 0x24
   1b280:	8a00001e 	bhi	1b300 <_realloc_r+0x1e4>
   1b284:	e3520013 	cmp	r2, #19
   1b288:	91a03006 	movls	r3, r6
   1b28c:	9a000014 	bls	1b2e4 <_realloc_r+0x1c8>
   1b290:	e5943000 	ldr	r3, [r4]
   1b294:	e5853008 	str	r3, [r5, #8]
   1b298:	e5943004 	ldr	r3, [r4, #4]
   1b29c:	e352001b 	cmp	r2, #27
   1b2a0:	e585300c 	str	r3, [r5, #12]
   1b2a4:	92844008 	addls	r4, r4, #8
   1b2a8:	92853010 	addls	r3, r5, #16
   1b2ac:	9a00000c 	bls	1b2e4 <_realloc_r+0x1c8>
   1b2b0:	e5943008 	ldr	r3, [r4, #8]
   1b2b4:	e5853010 	str	r3, [r5, #16]
   1b2b8:	e594300c 	ldr	r3, [r4, #12]
   1b2bc:	e5853014 	str	r3, [r5, #20]
   1b2c0:	e3520024 	cmp	r2, #36	; 0x24
   1b2c4:	05943010 	ldreq	r3, [r4, #16]
   1b2c8:	05853018 	streq	r3, [r5, #24]
   1b2cc:	05943014 	ldreq	r3, [r4, #20]
   1b2d0:	12853018 	addne	r3, r5, #24
   1b2d4:	0585301c 	streq	r3, [r5, #28]
   1b2d8:	12844010 	addne	r4, r4, #16
   1b2dc:	02853020 	addeq	r3, r5, #32
   1b2e0:	02844018 	addeq	r4, r4, #24
   1b2e4:	e5942000 	ldr	r2, [r4]
   1b2e8:	e5832000 	str	r2, [r3]
   1b2ec:	e5942004 	ldr	r2, [r4, #4]
   1b2f0:	e5832004 	str	r2, [r3, #4]
   1b2f4:	e5942008 	ldr	r2, [r4, #8]
   1b2f8:	e5832008 	str	r2, [r3, #8]
   1b2fc:	ea000002 	b	1b30c <_realloc_r+0x1f0>
   1b300:	e1a00006 	mov	r0, r6
   1b304:	e1a01004 	mov	r1, r4
   1b308:	ebffff6c 	bl	1b0c0 <memmove>
   1b30c:	e0679009 	rsb	r9, r7, r9
   1b310:	e0853007 	add	r3, r5, r7
   1b314:	e3899001 	orr	r9, r9, #1
   1b318:	e5839004 	str	r9, [r3, #4]
   1b31c:	e59f2240 	ldr	r2, [pc, #576]	; 1b564 <_realloc_r+0x448>
   1b320:	e5823008 	str	r3, [r2, #8]
   1b324:	e5953004 	ldr	r3, [r5, #4]
   1b328:	e2033001 	and	r3, r3, #1
   1b32c:	e1877003 	orr	r7, r7, r3
   1b330:	e5857004 	str	r7, [r5, #4]
   1b334:	ea000067 	b	1b4d8 <_realloc_r+0x3bc>
   1b338:	e1590007 	cmp	r9, r7
   1b33c:	a593200c 	ldrge	r2, [r3, #12]
   1b340:	a5933008 	ldrge	r3, [r3, #8]
   1b344:	a583200c 	strge	r2, [r3, #12]
   1b348:	a5823008 	strge	r3, [r2, #8]
   1b34c:	aa000002 	bge	1b35c <_realloc_r+0x240>
   1b350:	e0819008 	add	r9, r1, r8
   1b354:	e1590007 	cmp	r9, r7
   1b358:	ba000028 	blt	1b400 <_realloc_r+0x2e4>
   1b35c:	e1a00005 	mov	r0, r5
   1b360:	e5b02008 	ldr	r2, [r0, #8]!
   1b364:	e595300c 	ldr	r3, [r5, #12]
   1b368:	e582300c 	str	r3, [r2, #12]
   1b36c:	e5832008 	str	r2, [r3, #8]
   1b370:	e2482004 	sub	r2, r8, #4
   1b374:	e3520024 	cmp	r2, #36	; 0x24
   1b378:	8a00001d 	bhi	1b3f4 <_realloc_r+0x2d8>
   1b37c:	e3520013 	cmp	r2, #19
   1b380:	9a000014 	bls	1b3d8 <_realloc_r+0x2bc>
   1b384:	e5943000 	ldr	r3, [r4]
   1b388:	e5853008 	str	r3, [r5, #8]
   1b38c:	e5943004 	ldr	r3, [r4, #4]
   1b390:	e352001b 	cmp	r2, #27
   1b394:	e585300c 	str	r3, [r5, #12]
   1b398:	92850010 	addls	r0, r5, #16
   1b39c:	92844008 	addls	r4, r4, #8
   1b3a0:	9a00000c 	bls	1b3d8 <_realloc_r+0x2bc>
   1b3a4:	e5943008 	ldr	r3, [r4, #8]
   1b3a8:	e5853010 	str	r3, [r5, #16]
   1b3ac:	e594300c 	ldr	r3, [r4, #12]
   1b3b0:	e5853014 	str	r3, [r5, #20]
   1b3b4:	e3520024 	cmp	r2, #36	; 0x24
   1b3b8:	05943010 	ldreq	r3, [r4, #16]
   1b3bc:	05853018 	streq	r3, [r5, #24]
   1b3c0:	05943014 	ldreq	r3, [r4, #20]
   1b3c4:	0585301c 	streq	r3, [r5, #28]
   1b3c8:	12850018 	addne	r0, r5, #24
   1b3cc:	12844010 	addne	r4, r4, #16
   1b3d0:	02850020 	addeq	r0, r5, #32
   1b3d4:	02844018 	addeq	r4, r4, #24
   1b3d8:	e5943000 	ldr	r3, [r4]
   1b3dc:	e5803000 	str	r3, [r0]
   1b3e0:	e5943004 	ldr	r3, [r4, #4]
   1b3e4:	e5803004 	str	r3, [r0, #4]
   1b3e8:	e5943008 	ldr	r3, [r4, #8]
   1b3ec:	e5803008 	str	r3, [r0, #8]
   1b3f0:	ea00003d 	b	1b4ec <_realloc_r+0x3d0>
   1b3f4:	e1a01004 	mov	r1, r4
   1b3f8:	ebffff30 	bl	1b0c0 <memmove>
   1b3fc:	ea00003a 	b	1b4ec <_realloc_r+0x3d0>
   1b400:	e1a01006 	mov	r1, r6
   1b404:	e1a0000a 	mov	r0, sl
   1b408:	ebfff671 	bl	18dd4 <_malloc_r>
   1b40c:	e2506000 	subs	r6, r0, #0
   1b410:	0a000030 	beq	1b4d8 <_realloc_r+0x3bc>
   1b414:	e5143004 	ldr	r3, [r4, #-4]
   1b418:	e3c33001 	bic	r3, r3, #1
   1b41c:	e2462008 	sub	r2, r6, #8
   1b420:	e08b3003 	add	r3, fp, r3
   1b424:	e1520003 	cmp	r2, r3
   1b428:	05169004 	ldreq	r9, [r6, #-4]
   1b42c:	03c99003 	biceq	r9, r9, #3
   1b430:	00899008 	addeq	r9, r9, r8
   1b434:	0a00002b 	beq	1b4e8 <_realloc_r+0x3cc>
   1b438:	e2482004 	sub	r2, r8, #4
   1b43c:	e3520024 	cmp	r2, #36	; 0x24
   1b440:	8a00001f 	bhi	1b4c4 <_realloc_r+0x3a8>
   1b444:	e3520013 	cmp	r2, #19
   1b448:	91a03006 	movls	r3, r6
   1b44c:	91a02004 	movls	r2, r4
   1b450:	9a000014 	bls	1b4a8 <_realloc_r+0x38c>
   1b454:	e5943000 	ldr	r3, [r4]
   1b458:	e5863000 	str	r3, [r6]
   1b45c:	e5943004 	ldr	r3, [r4, #4]
   1b460:	e352001b 	cmp	r2, #27
   1b464:	e5863004 	str	r3, [r6, #4]
   1b468:	92842008 	addls	r2, r4, #8
   1b46c:	92863008 	addls	r3, r6, #8
   1b470:	9a00000c 	bls	1b4a8 <_realloc_r+0x38c>
   1b474:	e5943008 	ldr	r3, [r4, #8]
   1b478:	e5863008 	str	r3, [r6, #8]
   1b47c:	e594300c 	ldr	r3, [r4, #12]
   1b480:	e586300c 	str	r3, [r6, #12]
   1b484:	e3520024 	cmp	r2, #36	; 0x24
   1b488:	05943010 	ldreq	r3, [r4, #16]
   1b48c:	05863010 	streq	r3, [r6, #16]
   1b490:	05943014 	ldreq	r3, [r4, #20]
   1b494:	12863010 	addne	r3, r6, #16
   1b498:	05863014 	streq	r3, [r6, #20]
   1b49c:	12842010 	addne	r2, r4, #16
   1b4a0:	02863018 	addeq	r3, r6, #24
   1b4a4:	02842018 	addeq	r2, r4, #24
   1b4a8:	e5921000 	ldr	r1, [r2]
   1b4ac:	e5831000 	str	r1, [r3]
   1b4b0:	e5921004 	ldr	r1, [r2, #4]
   1b4b4:	e5831004 	str	r1, [r3, #4]
   1b4b8:	e5922008 	ldr	r2, [r2, #8]
   1b4bc:	e5832008 	str	r2, [r3, #8]
   1b4c0:	ea000001 	b	1b4cc <_realloc_r+0x3b0>
   1b4c4:	e1a01004 	mov	r1, r4
   1b4c8:	ebfffefc 	bl	1b0c0 <memmove>
   1b4cc:	e1a0000a 	mov	r0, sl
   1b4d0:	e1a01004 	mov	r1, r4
   1b4d4:	ebfffe6a 	bl	1ae84 <_free_r>
   1b4d8:	e1a0000a 	mov	r0, sl
   1b4dc:	ebfff7cf 	bl	19420 <__malloc_unlock>
   1b4e0:	ea00001d 	b	1b55c <_realloc_r+0x440>
   1b4e4:	e1a09008 	mov	r9, r8
   1b4e8:	e1a0500b 	mov	r5, fp
   1b4ec:	e0673009 	rsb	r3, r7, r9
   1b4f0:	e353000f 	cmp	r3, #15
   1b4f4:	e5952004 	ldr	r2, [r5, #4]
   1b4f8:	9a00000d 	bls	1b534 <_realloc_r+0x418>
   1b4fc:	e2022001 	and	r2, r2, #1
   1b500:	e0851007 	add	r1, r5, r7
   1b504:	e1877002 	orr	r7, r7, r2
   1b508:	e3832001 	orr	r2, r3, #1
   1b50c:	e5857004 	str	r7, [r5, #4]
   1b510:	e5812004 	str	r2, [r1, #4]
   1b514:	e0813003 	add	r3, r1, r3
   1b518:	e5932004 	ldr	r2, [r3, #4]
   1b51c:	e3822001 	orr	r2, r2, #1
   1b520:	e5832004 	str	r2, [r3, #4]
   1b524:	e1a0000a 	mov	r0, sl
   1b528:	e2811008 	add	r1, r1, #8
   1b52c:	ebfffe54 	bl	1ae84 <_free_r>
   1b530:	ea000006 	b	1b550 <_realloc_r+0x434>
   1b534:	e2022001 	and	r2, r2, #1
   1b538:	e1892002 	orr	r2, r9, r2
   1b53c:	e5852004 	str	r2, [r5, #4]
   1b540:	e0859009 	add	r9, r5, r9
   1b544:	e5993004 	ldr	r3, [r9, #4]
   1b548:	e3833001 	orr	r3, r3, #1
   1b54c:	e5893004 	str	r3, [r9, #4]
   1b550:	e1a0000a 	mov	r0, sl
   1b554:	ebfff7b1 	bl	19420 <__malloc_unlock>
   1b558:	e2856008 	add	r6, r5, #8
   1b55c:	e1a00006 	mov	r0, r6
   1b560:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b564:	400004bc 	.word	0x400004bc

0001b568 <__aeabi_uidiv>:
   1b568:	e2512001 	subs	r2, r1, #1
   1b56c:	012fff1e 	bxeq	lr
   1b570:	3a000036 	bcc	1b650 <__aeabi_uidiv+0xe8>
   1b574:	e1500001 	cmp	r0, r1
   1b578:	9a000022 	bls	1b608 <__aeabi_uidiv+0xa0>
   1b57c:	e1110002 	tst	r1, r2
   1b580:	0a000023 	beq	1b614 <__aeabi_uidiv+0xac>
   1b584:	e311020e 	tst	r1, #-536870912	; 0xe0000000
   1b588:	01a01181 	lsleq	r1, r1, #3
   1b58c:	03a03008 	moveq	r3, #8
   1b590:	13a03001 	movne	r3, #1
   1b594:	e3510201 	cmp	r1, #268435456	; 0x10000000
   1b598:	31510000 	cmpcc	r1, r0
   1b59c:	31a01201 	lslcc	r1, r1, #4
   1b5a0:	31a03203 	lslcc	r3, r3, #4
   1b5a4:	3afffffa 	bcc	1b594 <__aeabi_uidiv+0x2c>
   1b5a8:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
   1b5ac:	31510000 	cmpcc	r1, r0
   1b5b0:	31a01081 	lslcc	r1, r1, #1
   1b5b4:	31a03083 	lslcc	r3, r3, #1
   1b5b8:	3afffffa 	bcc	1b5a8 <__aeabi_uidiv+0x40>
   1b5bc:	e3a02000 	mov	r2, #0
   1b5c0:	e1500001 	cmp	r0, r1
   1b5c4:	20400001 	subcs	r0, r0, r1
   1b5c8:	21822003 	orrcs	r2, r2, r3
   1b5cc:	e15000a1 	cmp	r0, r1, lsr #1
   1b5d0:	204000a1 	subcs	r0, r0, r1, lsr #1
   1b5d4:	218220a3 	orrcs	r2, r2, r3, lsr #1
   1b5d8:	e1500121 	cmp	r0, r1, lsr #2
   1b5dc:	20400121 	subcs	r0, r0, r1, lsr #2
   1b5e0:	21822123 	orrcs	r2, r2, r3, lsr #2
   1b5e4:	e15001a1 	cmp	r0, r1, lsr #3
   1b5e8:	204001a1 	subcs	r0, r0, r1, lsr #3
   1b5ec:	218221a3 	orrcs	r2, r2, r3, lsr #3
   1b5f0:	e3500000 	cmp	r0, #0
   1b5f4:	11b03223 	lsrsne	r3, r3, #4
   1b5f8:	11a01221 	lsrne	r1, r1, #4
   1b5fc:	1affffef 	bne	1b5c0 <__aeabi_uidiv+0x58>
   1b600:	e1a00002 	mov	r0, r2
   1b604:	e12fff1e 	bx	lr
   1b608:	03a00001 	moveq	r0, #1
   1b60c:	13a00000 	movne	r0, #0
   1b610:	e12fff1e 	bx	lr
   1b614:	e3510801 	cmp	r1, #65536	; 0x10000
   1b618:	21a01821 	lsrcs	r1, r1, #16
   1b61c:	23a02010 	movcs	r2, #16
   1b620:	33a02000 	movcc	r2, #0
   1b624:	e3510c01 	cmp	r1, #256	; 0x100
   1b628:	21a01421 	lsrcs	r1, r1, #8
   1b62c:	22822008 	addcs	r2, r2, #8
   1b630:	e3510010 	cmp	r1, #16
   1b634:	21a01221 	lsrcs	r1, r1, #4
   1b638:	22822004 	addcs	r2, r2, #4
   1b63c:	e3510004 	cmp	r1, #4
   1b640:	82822003 	addhi	r2, r2, #3
   1b644:	908220a1 	addls	r2, r2, r1, lsr #1
   1b648:	e1a00230 	lsr	r0, r0, r2
   1b64c:	e12fff1e 	bx	lr
   1b650:	e52de008 	str	lr, [sp, #-8]!
   1b654:	eb0000c7 	bl	1b978 <__div0>
   1b658:	e3a00000 	mov	r0, #0
   1b65c:	e49df008 	ldr	pc, [sp], #8

0001b660 <__aeabi_uidivmod>:
   1b660:	e3510000 	cmp	r1, #0
   1b664:	0afffff9 	beq	1b650 <__aeabi_uidiv+0xe8>
   1b668:	e92d4003 	push	{r0, r1, lr}
   1b66c:	ebffffbd 	bl	1b568 <__aeabi_uidiv>
   1b670:	e8bd4006 	pop	{r1, r2, lr}
   1b674:	e0030092 	mul	r3, r2, r0
   1b678:	e0411003 	sub	r1, r1, r3
   1b67c:	e12fff1e 	bx	lr

0001b680 <__aeabi_idiv>:
   1b680:	e3510000 	cmp	r1, #0
   1b684:	0a000043 	beq	1b798 <.divsi3_skip_div0_test+0x110>

0001b688 <.divsi3_skip_div0_test>:
   1b688:	e020c001 	eor	ip, r0, r1
   1b68c:	42611000 	rsbmi	r1, r1, #0
   1b690:	e2512001 	subs	r2, r1, #1
   1b694:	0a000027 	beq	1b738 <.divsi3_skip_div0_test+0xb0>
   1b698:	e1b03000 	movs	r3, r0
   1b69c:	42603000 	rsbmi	r3, r0, #0
   1b6a0:	e1530001 	cmp	r3, r1
   1b6a4:	9a000026 	bls	1b744 <.divsi3_skip_div0_test+0xbc>
   1b6a8:	e1110002 	tst	r1, r2
   1b6ac:	0a000028 	beq	1b754 <.divsi3_skip_div0_test+0xcc>
   1b6b0:	e311020e 	tst	r1, #-536870912	; 0xe0000000
   1b6b4:	01a01181 	lsleq	r1, r1, #3
   1b6b8:	03a02008 	moveq	r2, #8
   1b6bc:	13a02001 	movne	r2, #1
   1b6c0:	e3510201 	cmp	r1, #268435456	; 0x10000000
   1b6c4:	31510003 	cmpcc	r1, r3
   1b6c8:	31a01201 	lslcc	r1, r1, #4
   1b6cc:	31a02202 	lslcc	r2, r2, #4
   1b6d0:	3afffffa 	bcc	1b6c0 <.divsi3_skip_div0_test+0x38>
   1b6d4:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
   1b6d8:	31510003 	cmpcc	r1, r3
   1b6dc:	31a01081 	lslcc	r1, r1, #1
   1b6e0:	31a02082 	lslcc	r2, r2, #1
   1b6e4:	3afffffa 	bcc	1b6d4 <.divsi3_skip_div0_test+0x4c>
   1b6e8:	e3a00000 	mov	r0, #0
   1b6ec:	e1530001 	cmp	r3, r1
   1b6f0:	20433001 	subcs	r3, r3, r1
   1b6f4:	21800002 	orrcs	r0, r0, r2
   1b6f8:	e15300a1 	cmp	r3, r1, lsr #1
   1b6fc:	204330a1 	subcs	r3, r3, r1, lsr #1
   1b700:	218000a2 	orrcs	r0, r0, r2, lsr #1
   1b704:	e1530121 	cmp	r3, r1, lsr #2
   1b708:	20433121 	subcs	r3, r3, r1, lsr #2
   1b70c:	21800122 	orrcs	r0, r0, r2, lsr #2
   1b710:	e15301a1 	cmp	r3, r1, lsr #3
   1b714:	204331a1 	subcs	r3, r3, r1, lsr #3
   1b718:	218001a2 	orrcs	r0, r0, r2, lsr #3
   1b71c:	e3530000 	cmp	r3, #0
   1b720:	11b02222 	lsrsne	r2, r2, #4
   1b724:	11a01221 	lsrne	r1, r1, #4
   1b728:	1affffef 	bne	1b6ec <.divsi3_skip_div0_test+0x64>
   1b72c:	e35c0000 	cmp	ip, #0
   1b730:	42600000 	rsbmi	r0, r0, #0
   1b734:	e12fff1e 	bx	lr
   1b738:	e13c0000 	teq	ip, r0
   1b73c:	42600000 	rsbmi	r0, r0, #0
   1b740:	e12fff1e 	bx	lr
   1b744:	33a00000 	movcc	r0, #0
   1b748:	01a00fcc 	asreq	r0, ip, #31
   1b74c:	03800001 	orreq	r0, r0, #1
   1b750:	e12fff1e 	bx	lr
   1b754:	e3510801 	cmp	r1, #65536	; 0x10000
   1b758:	21a01821 	lsrcs	r1, r1, #16
   1b75c:	23a02010 	movcs	r2, #16
   1b760:	33a02000 	movcc	r2, #0
   1b764:	e3510c01 	cmp	r1, #256	; 0x100
   1b768:	21a01421 	lsrcs	r1, r1, #8
   1b76c:	22822008 	addcs	r2, r2, #8
   1b770:	e3510010 	cmp	r1, #16
   1b774:	21a01221 	lsrcs	r1, r1, #4
   1b778:	22822004 	addcs	r2, r2, #4
   1b77c:	e3510004 	cmp	r1, #4
   1b780:	82822003 	addhi	r2, r2, #3
   1b784:	908220a1 	addls	r2, r2, r1, lsr #1
   1b788:	e35c0000 	cmp	ip, #0
   1b78c:	e1a00233 	lsr	r0, r3, r2
   1b790:	42600000 	rsbmi	r0, r0, #0
   1b794:	e12fff1e 	bx	lr
   1b798:	e52de008 	str	lr, [sp, #-8]!
   1b79c:	eb000075 	bl	1b978 <__div0>
   1b7a0:	e3a00000 	mov	r0, #0
   1b7a4:	e49df008 	ldr	pc, [sp], #8

0001b7a8 <__aeabi_idivmod>:
   1b7a8:	e3510000 	cmp	r1, #0
   1b7ac:	0afffff9 	beq	1b798 <.divsi3_skip_div0_test+0x110>
   1b7b0:	e92d4003 	push	{r0, r1, lr}
   1b7b4:	ebffffb3 	bl	1b688 <.divsi3_skip_div0_test>
   1b7b8:	e8bd4006 	pop	{r1, r2, lr}
   1b7bc:	e0030092 	mul	r3, r2, r0
   1b7c0:	e0411003 	sub	r1, r1, r3
   1b7c4:	e12fff1e 	bx	lr

0001b7c8 <__umodsi3>:
   1b7c8:	e2512001 	subs	r2, r1, #1
   1b7cc:	3a00002c 	bcc	1b884 <__umodsi3+0xbc>
   1b7d0:	11500001 	cmpne	r0, r1
   1b7d4:	03a00000 	moveq	r0, #0
   1b7d8:	81110002 	tsthi	r1, r2
   1b7dc:	00000002 	andeq	r0, r0, r2
   1b7e0:	912fff1e 	bxls	lr
   1b7e4:	e3a02000 	mov	r2, #0
   1b7e8:	e3510201 	cmp	r1, #268435456	; 0x10000000
   1b7ec:	31510000 	cmpcc	r1, r0
   1b7f0:	31a01201 	lslcc	r1, r1, #4
   1b7f4:	32822004 	addcc	r2, r2, #4
   1b7f8:	3afffffa 	bcc	1b7e8 <__umodsi3+0x20>
   1b7fc:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
   1b800:	31510000 	cmpcc	r1, r0
   1b804:	31a01081 	lslcc	r1, r1, #1
   1b808:	32822001 	addcc	r2, r2, #1
   1b80c:	3afffffa 	bcc	1b7fc <__umodsi3+0x34>
   1b810:	e2522003 	subs	r2, r2, #3
   1b814:	ba00000e 	blt	1b854 <__umodsi3+0x8c>
   1b818:	e1500001 	cmp	r0, r1
   1b81c:	20400001 	subcs	r0, r0, r1
   1b820:	e15000a1 	cmp	r0, r1, lsr #1
   1b824:	204000a1 	subcs	r0, r0, r1, lsr #1
   1b828:	e1500121 	cmp	r0, r1, lsr #2
   1b82c:	20400121 	subcs	r0, r0, r1, lsr #2
   1b830:	e15001a1 	cmp	r0, r1, lsr #3
   1b834:	204001a1 	subcs	r0, r0, r1, lsr #3
   1b838:	e3500001 	cmp	r0, #1
   1b83c:	e1a01221 	lsr	r1, r1, #4
   1b840:	a2522004 	subsge	r2, r2, #4
   1b844:	aafffff3 	bge	1b818 <__umodsi3+0x50>
   1b848:	e3120003 	tst	r2, #3
   1b84c:	13300000 	teqne	r0, #0
   1b850:	0a00000a 	beq	1b880 <__umodsi3+0xb8>
   1b854:	e3720002 	cmn	r2, #2
   1b858:	ba000006 	blt	1b878 <__umodsi3+0xb0>
   1b85c:	0a000002 	beq	1b86c <__umodsi3+0xa4>
   1b860:	e1500001 	cmp	r0, r1
   1b864:	20400001 	subcs	r0, r0, r1
   1b868:	e1a010a1 	lsr	r1, r1, #1
   1b86c:	e1500001 	cmp	r0, r1
   1b870:	20400001 	subcs	r0, r0, r1
   1b874:	e1a010a1 	lsr	r1, r1, #1
   1b878:	e1500001 	cmp	r0, r1
   1b87c:	20400001 	subcs	r0, r0, r1
   1b880:	e12fff1e 	bx	lr
   1b884:	e52de008 	str	lr, [sp, #-8]!
   1b888:	eb00003a 	bl	1b978 <__div0>
   1b88c:	e3a00000 	mov	r0, #0
   1b890:	e49df008 	ldr	pc, [sp], #8

0001b894 <__modsi3>:
   1b894:	e3510000 	cmp	r1, #0
   1b898:	0a000032 	beq	1b968 <__modsi3+0xd4>
   1b89c:	42611000 	rsbmi	r1, r1, #0
   1b8a0:	e1b0c000 	movs	ip, r0
   1b8a4:	42600000 	rsbmi	r0, r0, #0
   1b8a8:	e2512001 	subs	r2, r1, #1
   1b8ac:	11500001 	cmpne	r0, r1
   1b8b0:	03a00000 	moveq	r0, #0
   1b8b4:	81110002 	tsthi	r1, r2
   1b8b8:	00000002 	andeq	r0, r0, r2
   1b8bc:	9a000026 	bls	1b95c <__modsi3+0xc8>
   1b8c0:	e3a02000 	mov	r2, #0
   1b8c4:	e3510201 	cmp	r1, #268435456	; 0x10000000
   1b8c8:	31510000 	cmpcc	r1, r0
   1b8cc:	31a01201 	lslcc	r1, r1, #4
   1b8d0:	32822004 	addcc	r2, r2, #4
   1b8d4:	3afffffa 	bcc	1b8c4 <__modsi3+0x30>
   1b8d8:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
   1b8dc:	31510000 	cmpcc	r1, r0
   1b8e0:	31a01081 	lslcc	r1, r1, #1
   1b8e4:	32822001 	addcc	r2, r2, #1
   1b8e8:	3afffffa 	bcc	1b8d8 <__modsi3+0x44>
   1b8ec:	e2522003 	subs	r2, r2, #3
   1b8f0:	ba00000e 	blt	1b930 <__modsi3+0x9c>
   1b8f4:	e1500001 	cmp	r0, r1
   1b8f8:	20400001 	subcs	r0, r0, r1
   1b8fc:	e15000a1 	cmp	r0, r1, lsr #1
   1b900:	204000a1 	subcs	r0, r0, r1, lsr #1
   1b904:	e1500121 	cmp	r0, r1, lsr #2
   1b908:	20400121 	subcs	r0, r0, r1, lsr #2
   1b90c:	e15001a1 	cmp	r0, r1, lsr #3
   1b910:	204001a1 	subcs	r0, r0, r1, lsr #3
   1b914:	e3500001 	cmp	r0, #1
   1b918:	e1a01221 	lsr	r1, r1, #4
   1b91c:	a2522004 	subsge	r2, r2, #4
   1b920:	aafffff3 	bge	1b8f4 <__modsi3+0x60>
   1b924:	e3120003 	tst	r2, #3
   1b928:	13300000 	teqne	r0, #0
   1b92c:	0a00000a 	beq	1b95c <__modsi3+0xc8>
   1b930:	e3720002 	cmn	r2, #2
   1b934:	ba000006 	blt	1b954 <__modsi3+0xc0>
   1b938:	0a000002 	beq	1b948 <__modsi3+0xb4>
   1b93c:	e1500001 	cmp	r0, r1
   1b940:	20400001 	subcs	r0, r0, r1
   1b944:	e1a010a1 	lsr	r1, r1, #1
   1b948:	e1500001 	cmp	r0, r1
   1b94c:	20400001 	subcs	r0, r0, r1
   1b950:	e1a010a1 	lsr	r1, r1, #1
   1b954:	e1500001 	cmp	r0, r1
   1b958:	20400001 	subcs	r0, r0, r1
   1b95c:	e35c0000 	cmp	ip, #0
   1b960:	42600000 	rsbmi	r0, r0, #0
   1b964:	e12fff1e 	bx	lr
   1b968:	e52de008 	str	lr, [sp, #-8]!
   1b96c:	eb000001 	bl	1b978 <__div0>
   1b970:	e3a00000 	mov	r0, #0
   1b974:	e49df008 	ldr	pc, [sp], #8

0001b978 <__div0>:
   1b978:	e12fff1e 	bx	lr

0001b97c <__aeabi_drsub>:
   1b97c:	e2200102 	eor	r0, r0, #-2147483648	; 0x80000000
   1b980:	ea000000 	b	1b988 <__adddf3>

0001b984 <__aeabi_dsub>:
   1b984:	e2222102 	eor	r2, r2, #-2147483648	; 0x80000000

0001b988 <__adddf3>:
   1b988:	e92d4030 	push	{r4, r5, lr}
   1b98c:	e1a04080 	lsl	r4, r0, #1
   1b990:	e1a05082 	lsl	r5, r2, #1
   1b994:	e1340005 	teq	r4, r5
   1b998:	01310003 	teqeq	r1, r3
   1b99c:	1194c001 	orrsne	ip, r4, r1
   1b9a0:	1195c003 	orrsne	ip, r5, r3
   1b9a4:	11f0cac4 	mvnsne	ip, r4, asr #21
   1b9a8:	11f0cac5 	mvnsne	ip, r5, asr #21
   1b9ac:	0a000086 	beq	1bbcc <__adddf3+0x244>
   1b9b0:	e1a04aa4 	lsr	r4, r4, #21
   1b9b4:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
   1b9b8:	b2655000 	rsblt	r5, r5, #0
   1b9bc:	da000006 	ble	1b9dc <__adddf3+0x54>
   1b9c0:	e0844005 	add	r4, r4, r5
   1b9c4:	e0213003 	eor	r3, r1, r3
   1b9c8:	e0202002 	eor	r2, r0, r2
   1b9cc:	e0231001 	eor	r1, r3, r1
   1b9d0:	e0220000 	eor	r0, r2, r0
   1b9d4:	e0213003 	eor	r3, r1, r3
   1b9d8:	e0202002 	eor	r2, r0, r2
   1b9dc:	e3550036 	cmp	r5, #54	; 0x36
   1b9e0:	88bd8030 	pophi	{r4, r5, pc}
   1b9e4:	e3100102 	tst	r0, #-2147483648	; 0x80000000
   1b9e8:	e1a00600 	lsl	r0, r0, #12
   1b9ec:	e3a0c601 	mov	ip, #1048576	; 0x100000
   1b9f0:	e18c0620 	orr	r0, ip, r0, lsr #12
   1b9f4:	0a000001 	beq	1ba00 <__adddf3+0x78>
   1b9f8:	e2711000 	rsbs	r1, r1, #0
   1b9fc:	e2e00000 	rsc	r0, r0, #0
   1ba00:	e3120102 	tst	r2, #-2147483648	; 0x80000000
   1ba04:	e1a02602 	lsl	r2, r2, #12
   1ba08:	e18c2622 	orr	r2, ip, r2, lsr #12
   1ba0c:	0a000001 	beq	1ba18 <__adddf3+0x90>
   1ba10:	e2733000 	rsbs	r3, r3, #0
   1ba14:	e2e22000 	rsc	r2, r2, #0
   1ba18:	e1340005 	teq	r4, r5
   1ba1c:	0a000064 	beq	1bbb4 <__adddf3+0x22c>
   1ba20:	e2444001 	sub	r4, r4, #1
   1ba24:	e275e020 	rsbs	lr, r5, #32
   1ba28:	ba000005 	blt	1ba44 <__adddf3+0xbc>
   1ba2c:	e1a0ce13 	lsl	ip, r3, lr
   1ba30:	e0911533 	adds	r1, r1, r3, lsr r5
   1ba34:	e2a00000 	adc	r0, r0, #0
   1ba38:	e0911e12 	adds	r1, r1, r2, lsl lr
   1ba3c:	e0b00552 	adcs	r0, r0, r2, asr r5
   1ba40:	ea000006 	b	1ba60 <__adddf3+0xd8>
   1ba44:	e2455020 	sub	r5, r5, #32
   1ba48:	e28ee020 	add	lr, lr, #32
   1ba4c:	e3530001 	cmp	r3, #1
   1ba50:	e1a0ce12 	lsl	ip, r2, lr
   1ba54:	238cc002 	orrcs	ip, ip, #2
   1ba58:	e0911552 	adds	r1, r1, r2, asr r5
   1ba5c:	e0b00fc2 	adcs	r0, r0, r2, asr #31
   1ba60:	e2005102 	and	r5, r0, #-2147483648	; 0x80000000
   1ba64:	5a000002 	bpl	1ba74 <__adddf3+0xec>
   1ba68:	e27cc000 	rsbs	ip, ip, #0
   1ba6c:	e2f11000 	rscs	r1, r1, #0
   1ba70:	e2e00000 	rsc	r0, r0, #0
   1ba74:	e3500601 	cmp	r0, #1048576	; 0x100000
   1ba78:	3a00000e 	bcc	1bab8 <__adddf3+0x130>
   1ba7c:	e3500602 	cmp	r0, #2097152	; 0x200000
   1ba80:	3a000006 	bcc	1baa0 <__adddf3+0x118>
   1ba84:	e1b000a0 	lsrs	r0, r0, #1
   1ba88:	e1b01061 	rrxs	r1, r1
   1ba8c:	e1a0c06c 	rrx	ip, ip
   1ba90:	e2844001 	add	r4, r4, #1
   1ba94:	e1a02a84 	lsl	r2, r4, #21
   1ba98:	e3720501 	cmn	r2, #4194304	; 0x400000
   1ba9c:	2a000062 	bcs	1bc2c <__adddf3+0x2a4>
   1baa0:	e35c0102 	cmp	ip, #-2147483648	; 0x80000000
   1baa4:	01b0c0a1 	lsrseq	ip, r1, #1
   1baa8:	e2b11000 	adcs	r1, r1, #0
   1baac:	e0a00a04 	adc	r0, r0, r4, lsl #20
   1bab0:	e1800005 	orr	r0, r0, r5
   1bab4:	e8bd8030 	pop	{r4, r5, pc}
   1bab8:	e1b0c08c 	lsls	ip, ip, #1
   1babc:	e0b11001 	adcs	r1, r1, r1
   1bac0:	e0a00000 	adc	r0, r0, r0
   1bac4:	e3100601 	tst	r0, #1048576	; 0x100000
   1bac8:	e2444001 	sub	r4, r4, #1
   1bacc:	1afffff3 	bne	1baa0 <__adddf3+0x118>
   1bad0:	e3300000 	teq	r0, #0
   1bad4:	13a03014 	movne	r3, #20
   1bad8:	03a03034 	moveq	r3, #52	; 0x34
   1badc:	01a00001 	moveq	r0, r1
   1bae0:	03a01000 	moveq	r1, #0
   1bae4:	e1a02000 	mov	r2, r0
   1bae8:	e3520801 	cmp	r2, #65536	; 0x10000
   1baec:	21a02822 	lsrcs	r2, r2, #16
   1baf0:	22433010 	subcs	r3, r3, #16
   1baf4:	e3520c01 	cmp	r2, #256	; 0x100
   1baf8:	21a02422 	lsrcs	r2, r2, #8
   1bafc:	22433008 	subcs	r3, r3, #8
   1bb00:	e3520010 	cmp	r2, #16
   1bb04:	21a02222 	lsrcs	r2, r2, #4
   1bb08:	22433004 	subcs	r3, r3, #4
   1bb0c:	e3520004 	cmp	r2, #4
   1bb10:	22433002 	subcs	r3, r3, #2
   1bb14:	304330a2 	subcc	r3, r3, r2, lsr #1
   1bb18:	e04331a2 	sub	r3, r3, r2, lsr #3
   1bb1c:	e2532020 	subs	r2, r3, #32
   1bb20:	aa000007 	bge	1bb44 <__adddf3+0x1bc>
   1bb24:	e292200c 	adds	r2, r2, #12
   1bb28:	da000004 	ble	1bb40 <__adddf3+0x1b8>
   1bb2c:	e282c014 	add	ip, r2, #20
   1bb30:	e262200c 	rsb	r2, r2, #12
   1bb34:	e1a01c10 	lsl	r1, r0, ip
   1bb38:	e1a00230 	lsr	r0, r0, r2
   1bb3c:	ea000004 	b	1bb54 <__adddf3+0x1cc>
   1bb40:	e2822014 	add	r2, r2, #20
   1bb44:	d262c020 	rsble	ip, r2, #32
   1bb48:	e1a00210 	lsl	r0, r0, r2
   1bb4c:	d1800c31 	orrle	r0, r0, r1, lsr ip
   1bb50:	d1a01211 	lslle	r1, r1, r2
   1bb54:	e0544003 	subs	r4, r4, r3
   1bb58:	a0800a04 	addge	r0, r0, r4, lsl #20
   1bb5c:	a1800005 	orrge	r0, r0, r5
   1bb60:	a8bd8030 	popge	{r4, r5, pc}
   1bb64:	e1e04004 	mvn	r4, r4
   1bb68:	e254401f 	subs	r4, r4, #31
   1bb6c:	aa00000d 	bge	1bba8 <__adddf3+0x220>
   1bb70:	e294400c 	adds	r4, r4, #12
   1bb74:	ca000005 	bgt	1bb90 <__adddf3+0x208>
   1bb78:	e2844014 	add	r4, r4, #20
   1bb7c:	e2642020 	rsb	r2, r4, #32
   1bb80:	e1a01431 	lsr	r1, r1, r4
   1bb84:	e1811210 	orr	r1, r1, r0, lsl r2
   1bb88:	e1850430 	orr	r0, r5, r0, lsr r4
   1bb8c:	e8bd8030 	pop	{r4, r5, pc}
   1bb90:	e264400c 	rsb	r4, r4, #12
   1bb94:	e2642020 	rsb	r2, r4, #32
   1bb98:	e1a01231 	lsr	r1, r1, r2
   1bb9c:	e1811410 	orr	r1, r1, r0, lsl r4
   1bba0:	e1a00005 	mov	r0, r5
   1bba4:	e8bd8030 	pop	{r4, r5, pc}
   1bba8:	e1a01430 	lsr	r1, r0, r4
   1bbac:	e1a00005 	mov	r0, r5
   1bbb0:	e8bd8030 	pop	{r4, r5, pc}
   1bbb4:	e3340000 	teq	r4, #0
   1bbb8:	e2222601 	eor	r2, r2, #1048576	; 0x100000
   1bbbc:	02200601 	eoreq	r0, r0, #1048576	; 0x100000
   1bbc0:	02844001 	addeq	r4, r4, #1
   1bbc4:	12455001 	subne	r5, r5, #1
   1bbc8:	eaffff94 	b	1ba20 <__adddf3+0x98>
   1bbcc:	e1f0cac4 	mvns	ip, r4, asr #21
   1bbd0:	11f0cac5 	mvnsne	ip, r5, asr #21
   1bbd4:	0a000018 	beq	1bc3c <__adddf3+0x2b4>
   1bbd8:	e1340005 	teq	r4, r5
   1bbdc:	01310003 	teqeq	r1, r3
   1bbe0:	0a000003 	beq	1bbf4 <__adddf3+0x26c>
   1bbe4:	e194c001 	orrs	ip, r4, r1
   1bbe8:	01a00002 	moveq	r0, r2
   1bbec:	01a01003 	moveq	r1, r3
   1bbf0:	e8bd8030 	pop	{r4, r5, pc}
   1bbf4:	e1300002 	teq	r0, r2
   1bbf8:	13a00000 	movne	r0, #0
   1bbfc:	13a01000 	movne	r1, #0
   1bc00:	18bd8030 	popne	{r4, r5, pc}
   1bc04:	e1b0caa4 	lsrs	ip, r4, #21
   1bc08:	1a000003 	bne	1bc1c <__adddf3+0x294>
   1bc0c:	e1b01081 	lsls	r1, r1, #1
   1bc10:	e0b00000 	adcs	r0, r0, r0
   1bc14:	23800102 	orrcs	r0, r0, #-2147483648	; 0x80000000
   1bc18:	e8bd8030 	pop	{r4, r5, pc}
   1bc1c:	e2944501 	adds	r4, r4, #4194304	; 0x400000
   1bc20:	32800601 	addcc	r0, r0, #1048576	; 0x100000
   1bc24:	38bd8030 	popcc	{r4, r5, pc}
   1bc28:	e2005102 	and	r5, r0, #-2147483648	; 0x80000000
   1bc2c:	e385047f 	orr	r0, r5, #2130706432	; 0x7f000000
   1bc30:	e380060f 	orr	r0, r0, #15728640	; 0xf00000
   1bc34:	e3a01000 	mov	r1, #0
   1bc38:	e8bd8030 	pop	{r4, r5, pc}
   1bc3c:	e1f0cac4 	mvns	ip, r4, asr #21
   1bc40:	11a00002 	movne	r0, r2
   1bc44:	11a01003 	movne	r1, r3
   1bc48:	01f0cac5 	mvnseq	ip, r5, asr #21
   1bc4c:	11a02000 	movne	r2, r0
   1bc50:	11a03001 	movne	r3, r1
   1bc54:	e1914600 	orrs	r4, r1, r0, lsl #12
   1bc58:	01935602 	orrseq	r5, r3, r2, lsl #12
   1bc5c:	01300002 	teqeq	r0, r2
   1bc60:	13800702 	orrne	r0, r0, #524288	; 0x80000
   1bc64:	e8bd8030 	pop	{r4, r5, pc}

0001bc68 <__aeabi_ui2d>:
   1bc68:	e3300000 	teq	r0, #0
   1bc6c:	03a01000 	moveq	r1, #0
   1bc70:	012fff1e 	bxeq	lr
   1bc74:	e92d4030 	push	{r4, r5, lr}
   1bc78:	e3a04b01 	mov	r4, #1024	; 0x400
   1bc7c:	e2844032 	add	r4, r4, #50	; 0x32
   1bc80:	e3a05000 	mov	r5, #0
   1bc84:	e1a01000 	mov	r1, r0
   1bc88:	e3a00000 	mov	r0, #0
   1bc8c:	eaffff8f 	b	1bad0 <__adddf3+0x148>

0001bc90 <__aeabi_i2d>:
   1bc90:	e3300000 	teq	r0, #0
   1bc94:	03a01000 	moveq	r1, #0
   1bc98:	012fff1e 	bxeq	lr
   1bc9c:	e92d4030 	push	{r4, r5, lr}
   1bca0:	e3a04b01 	mov	r4, #1024	; 0x400
   1bca4:	e2844032 	add	r4, r4, #50	; 0x32
   1bca8:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
   1bcac:	42600000 	rsbmi	r0, r0, #0
   1bcb0:	e1a01000 	mov	r1, r0
   1bcb4:	e3a00000 	mov	r0, #0
   1bcb8:	eaffff84 	b	1bad0 <__adddf3+0x148>

0001bcbc <__aeabi_f2d>:
   1bcbc:	e1b02080 	lsls	r2, r0, #1
   1bcc0:	e1a001c2 	asr	r0, r2, #3
   1bcc4:	e1a00060 	rrx	r0, r0
   1bcc8:	e1a01e02 	lsl	r1, r2, #28
   1bccc:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
   1bcd0:	133304ff 	teqne	r3, #-16777216	; 0xff000000
   1bcd4:	1220030e 	eorne	r0, r0, #939524096	; 0x38000000
   1bcd8:	112fff1e 	bxne	lr
   1bcdc:	e3320000 	teq	r2, #0
   1bce0:	133304ff 	teqne	r3, #-16777216	; 0xff000000
   1bce4:	012fff1e 	bxeq	lr
   1bce8:	e92d4030 	push	{r4, r5, lr}
   1bcec:	e3a04d0e 	mov	r4, #896	; 0x380
   1bcf0:	e2005102 	and	r5, r0, #-2147483648	; 0x80000000
   1bcf4:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
   1bcf8:	eaffff74 	b	1bad0 <__adddf3+0x148>

0001bcfc <__aeabi_ul2d>:
   1bcfc:	e1902001 	orrs	r2, r0, r1
   1bd00:	012fff1e 	bxeq	lr
   1bd04:	e92d4030 	push	{r4, r5, lr}
   1bd08:	e3a05000 	mov	r5, #0
   1bd0c:	ea000006 	b	1bd2c <__aeabi_l2d+0x1c>

0001bd10 <__aeabi_l2d>:
   1bd10:	e1902001 	orrs	r2, r0, r1
   1bd14:	012fff1e 	bxeq	lr
   1bd18:	e92d4030 	push	{r4, r5, lr}
   1bd1c:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
   1bd20:	5a000001 	bpl	1bd2c <__aeabi_l2d+0x1c>
   1bd24:	e2700000 	rsbs	r0, r0, #0
   1bd28:	e2e11000 	rsc	r1, r1, #0
   1bd2c:	e3a04b01 	mov	r4, #1024	; 0x400
   1bd30:	e2844032 	add	r4, r4, #50	; 0x32
   1bd34:	e1a0c000 	mov	ip, r0
   1bd38:	e1a00001 	mov	r0, r1
   1bd3c:	e1a0100c 	mov	r1, ip
   1bd40:	e1b0cb20 	lsrs	ip, r0, #22
   1bd44:	0affff4a 	beq	1ba74 <__adddf3+0xec>
   1bd48:	e3a02003 	mov	r2, #3
   1bd4c:	e1b0c1ac 	lsrs	ip, ip, #3
   1bd50:	12822003 	addne	r2, r2, #3
   1bd54:	e1b0c1ac 	lsrs	ip, ip, #3
   1bd58:	12822003 	addne	r2, r2, #3
   1bd5c:	e08221ac 	add	r2, r2, ip, lsr #3
   1bd60:	e2623020 	rsb	r3, r2, #32
   1bd64:	e1a0c311 	lsl	ip, r1, r3
   1bd68:	e1a01231 	lsr	r1, r1, r2
   1bd6c:	e1811310 	orr	r1, r1, r0, lsl r3
   1bd70:	e1a00230 	lsr	r0, r0, r2
   1bd74:	e0844002 	add	r4, r4, r2
   1bd78:	eaffff3d 	b	1ba74 <__adddf3+0xec>

0001bd7c <__aeabi_dmul>:
   1bd7c:	e92d4070 	push	{r4, r5, r6, lr}
   1bd80:	e3a0c0ff 	mov	ip, #255	; 0xff
   1bd84:	e38ccc07 	orr	ip, ip, #1792	; 0x700
   1bd88:	e01c4a20 	ands	r4, ip, r0, lsr #20
   1bd8c:	101c5a22 	andsne	r5, ip, r2, lsr #20
   1bd90:	1134000c 	teqne	r4, ip
   1bd94:	1135000c 	teqne	r5, ip
   1bd98:	0b00006f 	bleq	1bf5c <__aeabi_dmul+0x1e0>
   1bd9c:	e0844005 	add	r4, r4, r5
   1bda0:	e0206002 	eor	r6, r0, r2
   1bda4:	e1c00a8c 	bic	r0, r0, ip, lsl #21
   1bda8:	e1c22a8c 	bic	r2, r2, ip, lsl #21
   1bdac:	e1915600 	orrs	r5, r1, r0, lsl #12
   1bdb0:	11935602 	orrsne	r5, r3, r2, lsl #12
   1bdb4:	e3800601 	orr	r0, r0, #1048576	; 0x100000
   1bdb8:	e3822601 	orr	r2, r2, #1048576	; 0x100000
   1bdbc:	0a00001c 	beq	1be34 <__aeabi_dmul+0xb8>
   1bdc0:	e08ec391 	umull	ip, lr, r1, r3
   1bdc4:	e3a05000 	mov	r5, #0
   1bdc8:	e0a5e390 	umlal	lr, r5, r0, r3
   1bdcc:	e2063102 	and	r3, r6, #-2147483648	; 0x80000000
   1bdd0:	e0a5e291 	umlal	lr, r5, r1, r2
   1bdd4:	e3a06000 	mov	r6, #0
   1bdd8:	e0a65290 	umlal	r5, r6, r0, r2
   1bddc:	e33c0000 	teq	ip, #0
   1bde0:	138ee001 	orrne	lr, lr, #1
   1bde4:	e24440ff 	sub	r4, r4, #255	; 0xff
   1bde8:	e3560c02 	cmp	r6, #512	; 0x200
   1bdec:	e2c44c03 	sbc	r4, r4, #768	; 0x300
   1bdf0:	2a000002 	bcs	1be00 <__aeabi_dmul+0x84>
   1bdf4:	e1b0e08e 	lsls	lr, lr, #1
   1bdf8:	e0b55005 	adcs	r5, r5, r5
   1bdfc:	e0a66006 	adc	r6, r6, r6
   1be00:	e1830586 	orr	r0, r3, r6, lsl #11
   1be04:	e1800aa5 	orr	r0, r0, r5, lsr #21
   1be08:	e1a01585 	lsl	r1, r5, #11
   1be0c:	e1811aae 	orr	r1, r1, lr, lsr #21
   1be10:	e1a0e58e 	lsl	lr, lr, #11
   1be14:	e254c0fd 	subs	ip, r4, #253	; 0xfd
   1be18:	835c0c07 	cmphi	ip, #1792	; 0x700
   1be1c:	8a00000f 	bhi	1be60 <__aeabi_dmul+0xe4>
   1be20:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
   1be24:	01b0e0a1 	lsrseq	lr, r1, #1
   1be28:	e2b11000 	adcs	r1, r1, #0
   1be2c:	e0a00a04 	adc	r0, r0, r4, lsl #20
   1be30:	e8bd8070 	pop	{r4, r5, r6, pc}
   1be34:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
   1be38:	e1860000 	orr	r0, r6, r0
   1be3c:	e1811003 	orr	r1, r1, r3
   1be40:	e0200002 	eor	r0, r0, r2
   1be44:	e05440ac 	subs	r4, r4, ip, lsr #1
   1be48:	c074500c 	rsbsgt	r5, r4, ip
   1be4c:	c1800a04 	orrgt	r0, r0, r4, lsl #20
   1be50:	c8bd8070 	popgt	{r4, r5, r6, pc}
   1be54:	e3800601 	orr	r0, r0, #1048576	; 0x100000
   1be58:	e3a0e000 	mov	lr, #0
   1be5c:	e2544001 	subs	r4, r4, #1
   1be60:	ca000058 	bgt	1bfc8 <__aeabi_dmul+0x24c>
   1be64:	e3740036 	cmn	r4, #54	; 0x36
   1be68:	d3a01000 	movle	r1, #0
   1be6c:	d2000102 	andle	r0, r0, #-2147483648	; 0x80000000
   1be70:	d8bd8070 	pople	{r4, r5, r6, pc}
   1be74:	e2644000 	rsb	r4, r4, #0
   1be78:	e2544020 	subs	r4, r4, #32
   1be7c:	aa000018 	bge	1bee4 <__aeabi_dmul+0x168>
   1be80:	e294400c 	adds	r4, r4, #12
   1be84:	ca00000b 	bgt	1beb8 <__aeabi_dmul+0x13c>
   1be88:	e2844014 	add	r4, r4, #20
   1be8c:	e2645020 	rsb	r5, r4, #32
   1be90:	e1a03511 	lsl	r3, r1, r5
   1be94:	e1a01431 	lsr	r1, r1, r4
   1be98:	e1811510 	orr	r1, r1, r0, lsl r5
   1be9c:	e2002102 	and	r2, r0, #-2147483648	; 0x80000000
   1bea0:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
   1bea4:	e0911fa3 	adds	r1, r1, r3, lsr #31
   1bea8:	e0a20430 	adc	r0, r2, r0, lsr r4
   1beac:	e19ee083 	orrs	lr, lr, r3, lsl #1
   1beb0:	01c11fa3 	biceq	r1, r1, r3, lsr #31
   1beb4:	e8bd8070 	pop	{r4, r5, r6, pc}
   1beb8:	e264400c 	rsb	r4, r4, #12
   1bebc:	e2645020 	rsb	r5, r4, #32
   1bec0:	e1a03411 	lsl	r3, r1, r4
   1bec4:	e1a01531 	lsr	r1, r1, r5
   1bec8:	e1811410 	orr	r1, r1, r0, lsl r4
   1becc:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
   1bed0:	e0911fa3 	adds	r1, r1, r3, lsr #31
   1bed4:	e2a00000 	adc	r0, r0, #0
   1bed8:	e19ee083 	orrs	lr, lr, r3, lsl #1
   1bedc:	01c11fa3 	biceq	r1, r1, r3, lsr #31
   1bee0:	e8bd8070 	pop	{r4, r5, r6, pc}
   1bee4:	e2645020 	rsb	r5, r4, #32
   1bee8:	e18ee511 	orr	lr, lr, r1, lsl r5
   1beec:	e1a03431 	lsr	r3, r1, r4
   1bef0:	e1833510 	orr	r3, r3, r0, lsl r5
   1bef4:	e1a01430 	lsr	r1, r0, r4
   1bef8:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
   1befc:	e1c11430 	bic	r1, r1, r0, lsr r4
   1bf00:	e0811fa3 	add	r1, r1, r3, lsr #31
   1bf04:	e19ee083 	orrs	lr, lr, r3, lsl #1
   1bf08:	01c11fa3 	biceq	r1, r1, r3, lsr #31
   1bf0c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1bf10:	e3340000 	teq	r4, #0
   1bf14:	1a000008 	bne	1bf3c <__aeabi_dmul+0x1c0>
   1bf18:	e2006102 	and	r6, r0, #-2147483648	; 0x80000000
   1bf1c:	e1b01081 	lsls	r1, r1, #1
   1bf20:	e0a00000 	adc	r0, r0, r0
   1bf24:	e3100601 	tst	r0, #1048576	; 0x100000
   1bf28:	02444001 	subeq	r4, r4, #1
   1bf2c:	0afffffa 	beq	1bf1c <__aeabi_dmul+0x1a0>
   1bf30:	e1800006 	orr	r0, r0, r6
   1bf34:	e3350000 	teq	r5, #0
   1bf38:	112fff1e 	bxne	lr
   1bf3c:	e2026102 	and	r6, r2, #-2147483648	; 0x80000000
   1bf40:	e1b03083 	lsls	r3, r3, #1
   1bf44:	e0a22002 	adc	r2, r2, r2
   1bf48:	e3120601 	tst	r2, #1048576	; 0x100000
   1bf4c:	02455001 	subeq	r5, r5, #1
   1bf50:	0afffffa 	beq	1bf40 <__aeabi_dmul+0x1c4>
   1bf54:	e1822006 	orr	r2, r2, r6
   1bf58:	e12fff1e 	bx	lr
   1bf5c:	e134000c 	teq	r4, ip
   1bf60:	e00c5a22 	and	r5, ip, r2, lsr #20
   1bf64:	1135000c 	teqne	r5, ip
   1bf68:	0a000006 	beq	1bf88 <__aeabi_dmul+0x20c>
   1bf6c:	e1916080 	orrs	r6, r1, r0, lsl #1
   1bf70:	11936082 	orrsne	r6, r3, r2, lsl #1
   1bf74:	1affffe5 	bne	1bf10 <__aeabi_dmul+0x194>
   1bf78:	e0200002 	eor	r0, r0, r2
   1bf7c:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
   1bf80:	e3a01000 	mov	r1, #0
   1bf84:	e8bd8070 	pop	{r4, r5, r6, pc}
   1bf88:	e1916080 	orrs	r6, r1, r0, lsl #1
   1bf8c:	01a01003 	moveq	r1, r3
   1bf90:	01a00002 	moveq	r0, r2
   1bf94:	11936082 	orrsne	r6, r3, r2, lsl #1
   1bf98:	0a00000f 	beq	1bfdc <__aeabi_dmul+0x260>
   1bf9c:	e134000c 	teq	r4, ip
   1bfa0:	1a000001 	bne	1bfac <__aeabi_dmul+0x230>
   1bfa4:	e1916600 	orrs	r6, r1, r0, lsl #12
   1bfa8:	1a00000b 	bne	1bfdc <__aeabi_dmul+0x260>
   1bfac:	e135000c 	teq	r5, ip
   1bfb0:	1a000003 	bne	1bfc4 <__aeabi_dmul+0x248>
   1bfb4:	e1936602 	orrs	r6, r3, r2, lsl #12
   1bfb8:	11a01003 	movne	r1, r3
   1bfbc:	11a00002 	movne	r0, r2
   1bfc0:	1a000005 	bne	1bfdc <__aeabi_dmul+0x260>
   1bfc4:	e0200002 	eor	r0, r0, r2
   1bfc8:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
   1bfcc:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
   1bfd0:	e380060f 	orr	r0, r0, #15728640	; 0xf00000
   1bfd4:	e3a01000 	mov	r1, #0
   1bfd8:	e8bd8070 	pop	{r4, r5, r6, pc}
   1bfdc:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
   1bfe0:	e380073e 	orr	r0, r0, #16252928	; 0xf80000
   1bfe4:	e8bd8070 	pop	{r4, r5, r6, pc}

0001bfe8 <__aeabi_ddiv>:
   1bfe8:	e92d4070 	push	{r4, r5, r6, lr}
   1bfec:	e3a0c0ff 	mov	ip, #255	; 0xff
   1bff0:	e38ccc07 	orr	ip, ip, #1792	; 0x700
   1bff4:	e01c4a20 	ands	r4, ip, r0, lsr #20
   1bff8:	101c5a22 	andsne	r5, ip, r2, lsr #20
   1bffc:	1134000c 	teqne	r4, ip
   1c000:	1135000c 	teqne	r5, ip
   1c004:	0b00005c 	bleq	1c17c <__aeabi_ddiv+0x194>
   1c008:	e0444005 	sub	r4, r4, r5
   1c00c:	e020e002 	eor	lr, r0, r2
   1c010:	e1935602 	orrs	r5, r3, r2, lsl #12
   1c014:	e1a00600 	lsl	r0, r0, #12
   1c018:	0a00004b 	beq	1c14c <__aeabi_ddiv+0x164>
   1c01c:	e1a02602 	lsl	r2, r2, #12
   1c020:	e3a05201 	mov	r5, #268435456	; 0x10000000
   1c024:	e1852222 	orr	r2, r5, r2, lsr #4
   1c028:	e1822c23 	orr	r2, r2, r3, lsr #24
   1c02c:	e1a03403 	lsl	r3, r3, #8
   1c030:	e1855220 	orr	r5, r5, r0, lsr #4
   1c034:	e1855c21 	orr	r5, r5, r1, lsr #24
   1c038:	e1a06401 	lsl	r6, r1, #8
   1c03c:	e20e0102 	and	r0, lr, #-2147483648	; 0x80000000
   1c040:	e1550002 	cmp	r5, r2
   1c044:	01560003 	cmpeq	r6, r3
   1c048:	e2a440fd 	adc	r4, r4, #253	; 0xfd
   1c04c:	e2844c03 	add	r4, r4, #768	; 0x300
   1c050:	2a000001 	bcs	1c05c <__aeabi_ddiv+0x74>
   1c054:	e1b020a2 	lsrs	r2, r2, #1
   1c058:	e1a03063 	rrx	r3, r3
   1c05c:	e0566003 	subs	r6, r6, r3
   1c060:	e0c55002 	sbc	r5, r5, r2
   1c064:	e1b020a2 	lsrs	r2, r2, #1
   1c068:	e1a03063 	rrx	r3, r3
   1c06c:	e3a01601 	mov	r1, #1048576	; 0x100000
   1c070:	e3a0c702 	mov	ip, #524288	; 0x80000
   1c074:	e056e003 	subs	lr, r6, r3
   1c078:	e0d5e002 	sbcs	lr, r5, r2
   1c07c:	20466003 	subcs	r6, r6, r3
   1c080:	21a0500e 	movcs	r5, lr
   1c084:	2181100c 	orrcs	r1, r1, ip
   1c088:	e1b020a2 	lsrs	r2, r2, #1
   1c08c:	e1a03063 	rrx	r3, r3
   1c090:	e056e003 	subs	lr, r6, r3
   1c094:	e0d5e002 	sbcs	lr, r5, r2
   1c098:	20466003 	subcs	r6, r6, r3
   1c09c:	21a0500e 	movcs	r5, lr
   1c0a0:	218110ac 	orrcs	r1, r1, ip, lsr #1
   1c0a4:	e1b020a2 	lsrs	r2, r2, #1
   1c0a8:	e1a03063 	rrx	r3, r3
   1c0ac:	e056e003 	subs	lr, r6, r3
   1c0b0:	e0d5e002 	sbcs	lr, r5, r2
   1c0b4:	20466003 	subcs	r6, r6, r3
   1c0b8:	21a0500e 	movcs	r5, lr
   1c0bc:	2181112c 	orrcs	r1, r1, ip, lsr #2
   1c0c0:	e1b020a2 	lsrs	r2, r2, #1
   1c0c4:	e1a03063 	rrx	r3, r3
   1c0c8:	e056e003 	subs	lr, r6, r3
   1c0cc:	e0d5e002 	sbcs	lr, r5, r2
   1c0d0:	20466003 	subcs	r6, r6, r3
   1c0d4:	21a0500e 	movcs	r5, lr
   1c0d8:	218111ac 	orrcs	r1, r1, ip, lsr #3
   1c0dc:	e195e006 	orrs	lr, r5, r6
   1c0e0:	0a00000d 	beq	1c11c <__aeabi_ddiv+0x134>
   1c0e4:	e1a05205 	lsl	r5, r5, #4
   1c0e8:	e1855e26 	orr	r5, r5, r6, lsr #28
   1c0ec:	e1a06206 	lsl	r6, r6, #4
   1c0f0:	e1a02182 	lsl	r2, r2, #3
   1c0f4:	e1822ea3 	orr	r2, r2, r3, lsr #29
   1c0f8:	e1a03183 	lsl	r3, r3, #3
   1c0fc:	e1b0c22c 	lsrs	ip, ip, #4
   1c100:	1affffdb 	bne	1c074 <__aeabi_ddiv+0x8c>
   1c104:	e3100601 	tst	r0, #1048576	; 0x100000
   1c108:	1a000006 	bne	1c128 <__aeabi_ddiv+0x140>
   1c10c:	e1800001 	orr	r0, r0, r1
   1c110:	e3a01000 	mov	r1, #0
   1c114:	e3a0c102 	mov	ip, #-2147483648	; 0x80000000
   1c118:	eaffffd5 	b	1c074 <__aeabi_ddiv+0x8c>
   1c11c:	e3100601 	tst	r0, #1048576	; 0x100000
   1c120:	01800001 	orreq	r0, r0, r1
   1c124:	03a01000 	moveq	r1, #0
   1c128:	e254c0fd 	subs	ip, r4, #253	; 0xfd
   1c12c:	835c0c07 	cmphi	ip, #1792	; 0x700
   1c130:	8affff4a 	bhi	1be60 <__aeabi_dmul+0xe4>
   1c134:	e055c002 	subs	ip, r5, r2
   1c138:	0056c003 	subseq	ip, r6, r3
   1c13c:	01b0c0a1 	lsrseq	ip, r1, #1
   1c140:	e2b11000 	adcs	r1, r1, #0
   1c144:	e0a00a04 	adc	r0, r0, r4, lsl #20
   1c148:	e8bd8070 	pop	{r4, r5, r6, pc}
   1c14c:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
   1c150:	e18e0620 	orr	r0, lr, r0, lsr #12
   1c154:	e09440ac 	adds	r4, r4, ip, lsr #1
   1c158:	c074500c 	rsbsgt	r5, r4, ip
   1c15c:	c1800a04 	orrgt	r0, r0, r4, lsl #20
   1c160:	c8bd8070 	popgt	{r4, r5, r6, pc}
   1c164:	e3800601 	orr	r0, r0, #1048576	; 0x100000
   1c168:	e3a0e000 	mov	lr, #0
   1c16c:	e2544001 	subs	r4, r4, #1
   1c170:	eaffff3a 	b	1be60 <__aeabi_dmul+0xe4>
   1c174:	e185e006 	orr	lr, r5, r6
   1c178:	eaffff38 	b	1be60 <__aeabi_dmul+0xe4>
   1c17c:	e00c5a22 	and	r5, ip, r2, lsr #20
   1c180:	e134000c 	teq	r4, ip
   1c184:	0135000c 	teqeq	r5, ip
   1c188:	0affff93 	beq	1bfdc <__aeabi_dmul+0x260>
   1c18c:	e134000c 	teq	r4, ip
   1c190:	1a000006 	bne	1c1b0 <__aeabi_ddiv+0x1c8>
   1c194:	e1914600 	orrs	r4, r1, r0, lsl #12
   1c198:	1affff8f 	bne	1bfdc <__aeabi_dmul+0x260>
   1c19c:	e135000c 	teq	r5, ip
   1c1a0:	1affff87 	bne	1bfc4 <__aeabi_dmul+0x248>
   1c1a4:	e1a01003 	mov	r1, r3
   1c1a8:	e1a00002 	mov	r0, r2
   1c1ac:	eaffff8a 	b	1bfdc <__aeabi_dmul+0x260>
   1c1b0:	e135000c 	teq	r5, ip
   1c1b4:	1a000004 	bne	1c1cc <__aeabi_ddiv+0x1e4>
   1c1b8:	e1935602 	orrs	r5, r3, r2, lsl #12
   1c1bc:	0affff6d 	beq	1bf78 <__aeabi_dmul+0x1fc>
   1c1c0:	e1a01003 	mov	r1, r3
   1c1c4:	e1a00002 	mov	r0, r2
   1c1c8:	eaffff83 	b	1bfdc <__aeabi_dmul+0x260>
   1c1cc:	e1916080 	orrs	r6, r1, r0, lsl #1
   1c1d0:	11936082 	orrsne	r6, r3, r2, lsl #1
   1c1d4:	1affff4d 	bne	1bf10 <__aeabi_dmul+0x194>
   1c1d8:	e1914080 	orrs	r4, r1, r0, lsl #1
   1c1dc:	1affff78 	bne	1bfc4 <__aeabi_dmul+0x248>
   1c1e0:	e1935082 	orrs	r5, r3, r2, lsl #1
   1c1e4:	1affff63 	bne	1bf78 <__aeabi_dmul+0x1fc>
   1c1e8:	eaffff7b 	b	1bfdc <__aeabi_dmul+0x260>

0001c1ec <__gedf2>:
   1c1ec:	e3e0c000 	mvn	ip, #0
   1c1f0:	ea000002 	b	1c200 <__cmpdf2+0x4>

0001c1f4 <__ledf2>:
   1c1f4:	e3a0c001 	mov	ip, #1
   1c1f8:	ea000000 	b	1c200 <__cmpdf2+0x4>

0001c1fc <__cmpdf2>:
   1c1fc:	e3a0c001 	mov	ip, #1
   1c200:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
   1c204:	e1a0c080 	lsl	ip, r0, #1
   1c208:	e1f0cacc 	mvns	ip, ip, asr #21
   1c20c:	e1a0c082 	lsl	ip, r2, #1
   1c210:	11f0cacc 	mvnsne	ip, ip, asr #21
   1c214:	0a00000e 	beq	1c254 <__cmpdf2+0x58>
   1c218:	e28dd004 	add	sp, sp, #4
   1c21c:	e191c080 	orrs	ip, r1, r0, lsl #1
   1c220:	0193c082 	orrseq	ip, r3, r2, lsl #1
   1c224:	11300002 	teqne	r0, r2
   1c228:	01310003 	teqeq	r1, r3
   1c22c:	03a00000 	moveq	r0, #0
   1c230:	012fff1e 	bxeq	lr
   1c234:	e3700000 	cmn	r0, #0
   1c238:	e1300002 	teq	r0, r2
   1c23c:	51500002 	cmppl	r0, r2
   1c240:	01510003 	cmpeq	r1, r3
   1c244:	21a00fc2 	asrcs	r0, r2, #31
   1c248:	31e00fc2 	mvncc	r0, r2, asr #31
   1c24c:	e3800001 	orr	r0, r0, #1
   1c250:	e12fff1e 	bx	lr
   1c254:	e1a0c080 	lsl	ip, r0, #1
   1c258:	e1f0cacc 	mvns	ip, ip, asr #21
   1c25c:	1a000001 	bne	1c268 <__cmpdf2+0x6c>
   1c260:	e191c600 	orrs	ip, r1, r0, lsl #12
   1c264:	1a000004 	bne	1c27c <__cmpdf2+0x80>
   1c268:	e1a0c082 	lsl	ip, r2, #1
   1c26c:	e1f0cacc 	mvns	ip, ip, asr #21
   1c270:	1affffe8 	bne	1c218 <__cmpdf2+0x1c>
   1c274:	e193c602 	orrs	ip, r3, r2, lsl #12
   1c278:	0affffe6 	beq	1c218 <__cmpdf2+0x1c>
   1c27c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
   1c280:	e12fff1e 	bx	lr

0001c284 <__aeabi_cdrcmple>:
   1c284:	e1a0c000 	mov	ip, r0
   1c288:	e1a00002 	mov	r0, r2
   1c28c:	e1a0200c 	mov	r2, ip
   1c290:	e1a0c001 	mov	ip, r1
   1c294:	e1a01003 	mov	r1, r3
   1c298:	e1a0300c 	mov	r3, ip
   1c29c:	eaffffff 	b	1c2a0 <__aeabi_cdcmpeq>

0001c2a0 <__aeabi_cdcmpeq>:
   1c2a0:	e92d4001 	push	{r0, lr}
   1c2a4:	ebffffd4 	bl	1c1fc <__cmpdf2>
   1c2a8:	e3500000 	cmp	r0, #0
   1c2ac:	43700000 	cmnmi	r0, #0
   1c2b0:	e8bd8001 	pop	{r0, pc}

0001c2b4 <__aeabi_dcmpeq>:
   1c2b4:	e52de008 	str	lr, [sp, #-8]!
   1c2b8:	ebfffff8 	bl	1c2a0 <__aeabi_cdcmpeq>
   1c2bc:	03a00001 	moveq	r0, #1
   1c2c0:	13a00000 	movne	r0, #0
   1c2c4:	e49df008 	ldr	pc, [sp], #8

0001c2c8 <__aeabi_dcmplt>:
   1c2c8:	e52de008 	str	lr, [sp, #-8]!
   1c2cc:	ebfffff3 	bl	1c2a0 <__aeabi_cdcmpeq>
   1c2d0:	33a00001 	movcc	r0, #1
   1c2d4:	23a00000 	movcs	r0, #0
   1c2d8:	e49df008 	ldr	pc, [sp], #8

0001c2dc <__aeabi_dcmple>:
   1c2dc:	e52de008 	str	lr, [sp, #-8]!
   1c2e0:	ebffffee 	bl	1c2a0 <__aeabi_cdcmpeq>
   1c2e4:	93a00001 	movls	r0, #1
   1c2e8:	83a00000 	movhi	r0, #0
   1c2ec:	e49df008 	ldr	pc, [sp], #8

0001c2f0 <__aeabi_dcmpge>:
   1c2f0:	e52de008 	str	lr, [sp, #-8]!
   1c2f4:	ebffffe2 	bl	1c284 <__aeabi_cdrcmple>
   1c2f8:	93a00001 	movls	r0, #1
   1c2fc:	83a00000 	movhi	r0, #0
   1c300:	e49df008 	ldr	pc, [sp], #8

0001c304 <__aeabi_dcmpgt>:
   1c304:	e52de008 	str	lr, [sp, #-8]!
   1c308:	ebffffdd 	bl	1c284 <__aeabi_cdrcmple>
   1c30c:	33a00001 	movcc	r0, #1
   1c310:	23a00000 	movcs	r0, #0
   1c314:	e49df008 	ldr	pc, [sp], #8

0001c318 <__aeabi_d2iz>:
   1c318:	e1a02080 	lsl	r2, r0, #1
   1c31c:	e2922602 	adds	r2, r2, #2097152	; 0x200000
   1c320:	2a00000c 	bcs	1c358 <__aeabi_d2iz+0x40>
   1c324:	5a000009 	bpl	1c350 <__aeabi_d2iz+0x38>
   1c328:	e3e03e3e 	mvn	r3, #992	; 0x3e0
   1c32c:	e0532ac2 	subs	r2, r3, r2, asr #21
   1c330:	9a00000a 	bls	1c360 <__aeabi_d2iz+0x48>
   1c334:	e1a03580 	lsl	r3, r0, #11
   1c338:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
   1c33c:	e1833aa1 	orr	r3, r3, r1, lsr #21
   1c340:	e3100102 	tst	r0, #-2147483648	; 0x80000000
   1c344:	e1a00233 	lsr	r0, r3, r2
   1c348:	12600000 	rsbne	r0, r0, #0
   1c34c:	e12fff1e 	bx	lr
   1c350:	e3a00000 	mov	r0, #0
   1c354:	e12fff1e 	bx	lr
   1c358:	e1911600 	orrs	r1, r1, r0, lsl #12
   1c35c:	1a000002 	bne	1c36c <__aeabi_d2iz+0x54>
   1c360:	e2100102 	ands	r0, r0, #-2147483648	; 0x80000000
   1c364:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
   1c368:	e12fff1e 	bx	lr
   1c36c:	e3a00000 	mov	r0, #0
   1c370:	e12fff1e 	bx	lr
   1c374:	07050301 	.word	0x07050301
   1c378:	12100e09 	.word	0x12100e09
   1c37c:	1c181614 	.word	0x1c181614
   1c380:	1e          	.byte	0x1e

0001c381 <blanks.4052>:
   1c381:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     

0001c391 <zeroes.4053>:
   1c391:	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30     0000000000000000
   1c3a1:	00 00 00                                            ...

0001c3a4 <_global_impure_ptr>:
   1c3a4:	1c 00 00 40                                         ...@

0001c3a8 <p05.2571>:
   1c3a8:	05 00 00 00 19 00 00 00 7d 00 00 00                 ........}...

0001c3b4 <__mprec_tens>:
   1c3b4:	00 00 f0 3f 00 00 00 00 00 00 24 40 00 00 00 00     ...?......$@....
   1c3c4:	00 00 59 40 00 00 00 00 00 40 8f 40 00 00 00 00     ..Y@.....@.@....
   1c3d4:	00 88 c3 40 00 00 00 00 00 6a f8 40 00 00 00 00     ...@.....j.@....
   1c3e4:	80 84 2e 41 00 00 00 00 d0 12 63 41 00 00 00 00     ...A......cA....
   1c3f4:	84 d7 97 41 00 00 00 00 65 cd cd 41 00 00 00 00     ...A....e..A....
   1c404:	5f a0 02 42 00 00 00 20 76 48 37 42 00 00 00 e8     _..B... vH7B....
   1c414:	94 1a 6d 42 00 00 00 a2 9c 30 a2 42 00 00 40 e5     ..mB.....0.B..@.
   1c424:	c4 bc d6 42 00 00 90 1e f5 6b 0c 43 00 00 34 26     ...B.....k.C..4&
   1c434:	79 c3 41 43 00 80 e0 37 57 34 76 43 00 a0 d8 85     y.AC...7W4vC....
   1c444:	6d c1 ab 43 00 c8 4e 67 e4 58 e1 43 00 3d 91 60     m..C..Ng.X.C.=.`
   1c454:	1d af 15 44 40 8c b5 78 e4 1a 4b 44 50 ef e2 d6     ...D@..x..KDP...
   1c464:	cf f0 80 44 92 d5 4d 06 02 2d b5 44 f6 4a e1 c7     ...D..M..-.D.J..
   1c474:	43 78 ea 44 b4 9d d9 79                             Cx.D...y

0001c47c <__mprec_tinytens>:
   1c47c:	b2 d2 9c 3c bc 89 d8 97 23 f6 49 39 33 a7 a8 d5     ...<....#.I93...
   1c48c:	fd 0f a5 32 3d a7 f4 44 08 ba 5b 25 9d 97 8c cf     ...2=..D..[%....
   1c49c:	28 06 c8 0a 43 6f ac 64                             (...Co.d

0001c4a4 <__mprec_bigtens>:
   1c4a4:	79 c3 41 43 00 80 e0 37 b5 b8 93 46 17 6e 05 b5     y.AC...7...F.n..
   1c4b4:	03 4f 38 4d f5 f9 3f e9 48 77 82 5a 32 1d 30 f9     .O8M..?.Hw.Z2.0.
   1c4c4:	dd 4f 15 75 3c bf 73 7f                             .O.u<.s.

0001c4cc <blanks.3996>:
   1c4cc:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     

0001c4dc <zeroes.3997>:
   1c4dc:	30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30     0000000000000000
   1c4ec:	0a 44 65 66 61 75 6c 74 20 56 49 43 20 53 74 6f     .Default VIC Sto
   1c4fc:	70 00 25 64 00 20 20 20 00 53 44 20 49 6e 69 74     p.%d.   .SD Init
   1c50c:	20 45 72 72 6f 72 0a 0d 00 53 44 20 4f 70 65 6e      Error...SD Open
   1c51c:	52 6f 6f 74 20 45 72 72 6f 72 0a 0d 00 0a 0d 4c     Root Error.....L
   1c52c:	6f 67 6f 6d 61 74 69 63 20 56 32 20 54 65 73 74     ogomatic V2 Test
   1c53c:	20 43 6f 64 65 3a 0a 0d 00 41 44 43 20 54 65 73      Code:...ADC Tes
   1c54c:	74 20 77 69 6c 6c 20 62 65 67 69 6e 20 69 6e 20     t will begin in 
   1c55c:	35 20 73 65 63 6f 6e 64 73 2c 20 68 69 74 20 73     5 seconds, hit s
   1c56c:	74 6f 70 20 62 75 74 74 6f 6e 20 74 6f 20 74 65     top button to te
   1c57c:	72 6d 69 6e 61 74 65 20 74 68 65 20 74 65 73 74     rminate the test
   1c58c:	2e 0d 0a 0a 00 0a 0d 54 65 73 74 20 63 6f 6d 70     .......Test comp
   1c59c:	6c 65 74 65 2c 20 6c 6f 63 6b 69 6e 67 20 75 70     lete, locking up
   1c5ac:	2e 2e 2e 0a 0d 00 4c 4f 47 43 4f 4e 2e 74 78 74     ......LOGCON.txt
   1c5bc:	00 45 72 72 6f 72 20 63 72 65 61 74 69 6e 67 20     .Error creating 
   1c5cc:	4c 4f 47 43 4f 4e 2e 74 78 74 2c 20 6c 6f 63 6b     LOGCON.txt, lock
   1c5dc:	69 6e 67 20 75 70 2e 2e 2e 0a 0d 00 4d 4f 44 45     ing up......MODE
   1c5ec:	20 3d 20 30 0d 0a 41 53 43 49 49 20 3d 20 4e 0d      = 0..ASCII = N.
   1c5fc:	0a 42 61 75 64 20 3d 20 34 0d 0a 46 72 65 71 75     .Baud = 4..Frequ
   1c60c:	65 6e 63 79 20 3d 20 31 30 30 0d 0a 54 72 69 67     ency = 100..Trig
   1c61c:	67 65 72 20 43 68 61 72 61 63 74 65 72 20 3d 20     ger Character = 
   1c62c:	24 0d 0a 54 65 78 74 20 46 72 61 6d 65 20 3d 20     $..Text Frame = 
   1c63c:	31 30 30 0d 0a 41 44 30 2e 33 20 3d 20 4e 0d 0a     100..AD0.3 = N..
   1c64c:	41 44 30 2e 32 20 3d 20 4e 0d 0a 41 44 30 2e 31     AD0.2 = N..AD0.1
   1c65c:	20 3d 20 4e 0d 0a 41 44 30 2e 34 20 3d 20 4e 0d      = N..AD0.4 = N.
   1c66c:	0a 41 44 31 2e 37 20 3d 20 4e 0d 0a 41 44 31 2e     .AD1.7 = N..AD1.
   1c67c:	36 20 3d 20 4e 0d 0a 41 44 31 2e 32 20 3d 20 4e     6 = N..AD1.2 = N
   1c68c:	0d 0a 41 44 31 2e 33 20 3d 20 4e 0d 0a 53 61 66     ..AD1.3 = N..Saf
   1c69c:	74 65 79 20 4f 6e 20 3d 20 59 0d 0a 00 6d 6f 64     tey On = Y...mod
   1c6ac:	65 20 3d 20 25 64 0a 0d 00 61 73 63 20 3d 20 25     e = %d...asc = %
   1c6bc:	63 0a 0d 00 62 61 75 64 20 3d 20 25 64 0a 0d 00     c...baud = %d...
   1c6cc:	66 72 65 71 20 3d 20 25 64 0a 0d 00 74 72 69 67     freq = %d...trig
   1c6dc:	20 3d 20 25 63 0a 0d 00 66 72 61 6d 65 20 3d 20      = %c...frame = 
   1c6ec:	25 64 0a 0d 00 61 64 30 5f 33 20 3d 20 25 63 0a     %d...ad0_3 = %c.
   1c6fc:	0d 00 61 64 30 5f 32 20 3d 20 25 63 0a 0d 00 61     ..ad0_2 = %c...a
   1c70c:	64 30 5f 31 20 3d 20 25 63 0a 0d 00 61 64 30 5f     d0_1 = %c...ad0_
   1c71c:	34 20 3d 20 25 63 0a 0d 00 61 64 31 5f 37 20 3d     4 = %c...ad1_7 =
   1c72c:	20 25 63 0a 0d 00 61 64 31 5f 36 20 3d 20 25 63      %c...ad1_6 = %c
   1c73c:	0a 0d 00 61 64 31 5f 32 20 3d 20 25 63 0a 0d 00     ...ad1_2 = %c...
   1c74c:	61 64 31 5f 33 20 3d 20 25 63 0a 0d 00 73 61 66     ad1_3 = %c...saf
   1c75c:	65 74 79 20 3d 20 25 63 0a 0d 00 25 30 32 64 3a     ety = %c...%02d:
   1c76c:	25 30 32 64 3a 25 30 32 64 00 4d 4f 44 45 20 33     %02d:%02d.MODE 3
   1c77c:	0a 0d 00 4d 4f 44 45 20 32 0a 0d 00 4d 4f 44 45     ...MODE 2...MODE
   1c78c:	20 31 0a 0d 00 4d 4f 44 45 20 30 0a 0d 00 4c 4f      1...MODE 0...LO
   1c79c:	47 25 30 32 64 2e 74 78 74 00 54 6f 6f 20 4d 61     G%02d.txt.Too Ma
   1c7ac:	6e 79 20 4c 6f 67 73 21 0a 0d 00 4d 6f 64 65 20     ny Logs!...Mode 
   1c7bc:	25 64 20 6e 6f 74 20 76 61 6c 69 64 2e 0a 0d 00     %d not valid....
   1c7cc:	6f 70 65 6e 69 6e 67 20 70 61 72 74 69 74 69 6f     opening partitio
   1c7dc:	6e 20 66 61 69 6c 65 64 0a 0d 00 6f 70 65 6e 69     n failed...openi
   1c7ec:	6e 67 20 66 69 6c 65 73 79 73 74 65 6d 20 66 61     ng filesystem fa
   1c7fc:	69 6c 65 64 0a 0d 00 2f 00 6f 70 65 6e 69 6e 67     iled.../.opening
   1c80c:	20 72 6f 6f 74 20 64 69 72 65 63 74 6f 72 79 20      root directory 
   1c81c:	66 61 69 6c 65 64 0a 0d 00 6d 61 6e 75 66 3a 20     failed...manuf: 
   1c82c:	20 30 78 25 30 32 78 0a 0d 00 6f 65 6d 3a 20 20      0x%02x...oem:  
   1c83c:	20 20 25 73 0a 0d 00 70 72 6f 64 3a 20 20 20 25       %s...prod:   %
   1c84c:	73 0a 0d 00 72 65 76 3a 20 20 20 20 25 30 32 78     s...rev:    %02x
   1c85c:	0a 0d 00 73 65 72 69 61 6c 3a 20 30 78 25 30 38     ...serial: 0x%08
   1c86c:	6c 78 0a 0d 00 64 61 74 65 3a 20 20 20 25 30 32     lx...date:   %02
   1c87c:	64 2f 25 30 32 64 0a 0d 00 73 69 7a 65 3a 20 20     d/%02d...size:  
   1c88c:	20 25 6c 64 0a 0d 00 63 6f 70 79 3a 20 20 20 25      %ld...copy:   %
   1c89c:	64 0a 0d 00 77 72 2e 70 72 2e 3a 20 25 64 2f 25     d...wr.pr.: %d/%
   1c8ac:	64 0a 0d 00 66 6f 72 6d 61 74 3a 20 25 64 0a 0d     d...format: %d..
   1c8bc:	00 66 72 65 65 3a 20 20 20 25 6c 64 2f 25 6c 64     .free:   %ld/%ld
   1c8cc:	0a 0d 00 30 31 32 33 34 35 36 37 38 39 41 42 43     ...0123456789ABC
   1c8dc:	44 45 46 00 49 4e 46 00 69 6e 66 00 4e 41 4e 00     DEF.INF.inf.NAN.
   1c8ec:	6e 61 6e 00 30 31 32 33 34 35 36 37 38 39 61 62     nan.0123456789ab
   1c8fc:	63 64 65 66 00 30 00 49 6e 66 69 6e 69 74 79 00     cdef.0.Infinity.
   1c90c:	4e 61 4e 00 43 00 50 4f 53 49 58 00 2e 00 00 00     NaN.C.POSIX.....
