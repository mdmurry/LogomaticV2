
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000066a8  00010000  00010000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ctors        00000000  000166a8  000166a8  00020018  2**0
                  CONTENTS
  2 .dtors        00000000  000166a8  000166a8  00020018  2**0
                  CONTENTS
  3 .data         00000018  40000000  000166a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000a9c  40000018  000166c0  00020018  2**2
                  ALLOC
  5 .stack        00000c00  40000b00  40000b00  00020020  2**4
                  CONTENTS
  6 .comment      00000011  00000000  00000000  00020c20  2**0
                  CONTENTS, READONLY
  7 .ARM.attributes 00000010  00000000  00000000  00020c31  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000390  00000000  00000000  00020c48  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000848a  00000000  00000000  00020fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001bdf  00000000  00000000  00029462  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002c9d  00000000  00000000  0002b041  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001018  00000000  00000000  0002dce0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001a34  00000000  00000000  0002ecf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000053c5  00000000  00000000  0003072c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006d8  00000000  00000000  00035af8  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00010000 <__Vectors>:

// Exception Vectors
// Mapped to Address 0.
// Absolute addressing mode must be used.

__Vectors:        LDR     PC,Reset_Addr         
   10000:	e59ff018 	ldr	pc, [pc, #24]	; 10020 <Reset_Addr>
                LDR     PC,Undef_Addr
   10004:	e59ff018 	ldr	pc, [pc, #24]	; 10024 <Undef_Addr>
                LDR     PC,SWI_Addr
   10008:	e59ff018 	ldr	pc, [pc, #24]	; 10028 <SWI_Addr>
                LDR     PC,PAbt_Addr
   1000c:	e59ff018 	ldr	pc, [pc, #24]	; 1002c <PAbt_Addr>
                LDR     PC,DAbt_Addr
   10010:	e59ff018 	ldr	pc, [pc, #24]	; 10030 <DAbt_Addr>
                NOP                            /* Reserved Vector */
   10014:	e1a00000 	nop			; (mov r0, r0)
//                LDR     PC,IRQ_Addr
//                LDR     PC,[PC, #-0x0FF0]      /* Vector from VicVectAddr */
                LDR     PC,IRQ_Wrapper_Addr
   10018:	e59ff018 	ldr	pc, [pc, #24]	; 10038 <IRQ_Wrapper_Addr>
                LDR     PC,FIQ_Addr
   1001c:	e59ff018 	ldr	pc, [pc, #24]	; 1003c <FIQ_Addr>

00010020 <Reset_Addr>:
   10020:	00010098 	.word	0x00010098

00010024 <Undef_Addr>:
   10024:	00010040 	.word	0x00010040

00010028 <SWI_Addr>:
   10028:	00000000 	.word	0x00000000

0001002c <PAbt_Addr>:
   1002c:	00010044 	.word	0x00010044

00010030 <DAbt_Addr>:
   10030:	00010048 	.word	0x00010048
   10034:	00000000 	.word	0x00000000

00010038 <IRQ_Wrapper_Addr>:
   10038:	00010050 	.word	0x00010050

0001003c <FIQ_Addr>:
   1003c:	0001004c 	.word	0x0001004c

00010040 <Undef_Handler>:
                  .word     0                      /* Reserved Address */
// IRQ_Addr:         .word     __IRQ_Handler
IRQ_Wrapper_Addr: .word    __IRQ_Wrapper
FIQ_Addr:         .word     FIQ_Handler

Undef_Handler:  B       Undef_Handler
   10040:	eafffffe 	b	10040 <Undef_Handler>

00010044 <PAbt_Handler>:
/* SWI_Handler:    B       SWI_Handler */
PAbt_Handler:   B       PAbt_Handler
   10044:	eafffffe 	b	10044 <PAbt_Handler>

00010048 <DAbt_Handler>:
DAbt_Handler:   B       DAbt_Handler
   10048:	eafffffe 	b	10048 <DAbt_Handler>

0001004c <FIQ_Handler>:
/* IRQ_Handler:    B       IRQ_Handler */
FIQ_Handler:    B       FIQ_Handler
   1004c:	eafffffe 	b	1004c <FIQ_Handler>

00010050 <__IRQ_Wrapper>:
        .global __IRQ_Wrapper
        .func   __IRQ_Wrapper
__IRQ_Wrapper:
/*- Manage Exception Entry  */
/*- Adjust and save LR_irq in IRQ stack  */
            sub         lr, lr, #4
   10050:	e24ee004 	sub	lr, lr, #4
            stmfd       sp!, {lr}
   10054:	e92d4000 	stmfd	sp!, {lr}

/*- Save SPSR need to be saved for nested interrupt */
            mrs         r14, SPSR
   10058:	e14fe000 	mrs	lr, SPSR
            stmfd       sp!, {r14}
   1005c:	e92d4000 	stmfd	sp!, {lr}

/*- Save and r0 in IRQ stack  */
            stmfd       sp!, {r0}
   10060:	e92d0001 	stmfd	sp!, {r0}

/*- Write in the IVR to support Protect Mode  */
/*- No effect in Normal Mode  */
/*- De-assert the NIRQ and clear the source in Protect Mode */
/* R14 = LR */
            ldr         r14, =VIC_base_addr
   10064:	e59fe028 	ldr	lr, [pc, #40]	; 10094 <__IRQ_Wrapper+0x44>
            ldr         r0 , [r14, #VIC_vect_offs]
   10068:	e59e0030 	ldr	r0, [lr, #48]	; 0x30
            /*str         r14, [r14, #VIC_vect_offs]*/

/*- Enable Interrupt and Switch in Supervisor Mode */
            msr         CPSR_c, #Mode_SVC
   1006c:	e321f013 	msr	CPSR_c, #19

/*- Save scratch/used registers and LR in User Stack */
            /*stmfd       sp!, { r1-r3, r12, r14}*/
            stmfd       sp!, { r1-r12, r14 }
   10070:	e92d5ffe 	push	{r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}

/*- Branch to the routine pointed by the VIC-Vector-Address  */
            mov         r14, pc
   10074:	e1a0e00f 	mov	lr, pc
            bx          r0
   10078:	e12fff10 	bx	r0
/*- Restore scratch/used registers and LR from User Stack*/
            /* ldmia       sp!, { r1-r3, r12, r14} */
            ldmia       sp!, { r1-r12, r14 }
   1007c:	e8bd5ffe 	pop	{r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}

/*- Disable Interrupt and switch back in IRQ mode */
            msr         CPSR_c, #I_Bit | Mode_IRQ
   10080:	e321f092 	msr	CPSR_c, #146	; 0x92
            ldr         r14, =VIC_base_addr
            str         r14, [r14, #VIC_vect_offs]
#endif

/*- Restore SPSR_irq and r0 from IRQ stack */
            ldmia       sp!, {r0}
   10084:	e8bd0001 	ldmfd	sp!, {r0}

/*- Restore SPSR_irq and r0 from IRQ stack */
            ldmia       sp!, {r14}
   10088:	e8bd4000 	ldmfd	sp!, {lr}
            msr         SPSR_cxsf, r14
   1008c:	e16ff00e 	msr	SPSR_fsxc, lr

/*- Restore adjusted  LR_irq from IRQ stack directly in the PC */
            ldmia       sp!, {pc}^
   10090:	e8fd8000 	ldm	sp!, {pc}^

/*- Write in the IVR to support Protect Mode  */
/*- No effect in Normal Mode  */
/*- De-assert the NIRQ and clear the source in Protect Mode */
/* R14 = LR */
            ldr         r14, =VIC_base_addr
   10094:	fffff000 	.word	0xfffff000

00010098 <__startup>:
.endif
                STR     R1, [R0]
.endif

// Setup Stack for each mode
                LDR     R0, =Top_Stack
   10098:	e59f00c8 	ldr	r0, [pc, #200]	; 10168 <__exit_THUMB+0x4>

// Enter Undefined Instruction Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_UND|I_Bit|F_Bit
   1009c:	e321f0db 	msr	CPSR_c, #219	; 0xdb
                MOV     SP, R0
   100a0:	e1a0d000 	mov	sp, r0
                SUB     R0, R0, #UND_Stack_Size
   100a4:	e2400080 	sub	r0, r0, #128	; 0x80

// Enter Abort Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_ABT|I_Bit|F_Bit
   100a8:	e321f0d7 	msr	CPSR_c, #215	; 0xd7
                MOV     SP, R0
   100ac:	e1a0d000 	mov	sp, r0
                SUB     R0, R0, #ABT_Stack_Size
   100b0:	e2400080 	sub	r0, r0, #128	; 0x80

// Enter FIQ Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_FIQ|I_Bit|F_Bit
   100b4:	e321f0d1 	msr	CPSR_c, #209	; 0xd1
                MOV     SP, R0
   100b8:	e1a0d000 	mov	sp, r0
                SUB     R0, R0, #FIQ_Stack_Size
   100bc:	e2400080 	sub	r0, r0, #128	; 0x80

// Enter IRQ Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_IRQ|I_Bit|F_Bit
   100c0:	e321f0d2 	msr	CPSR_c, #210	; 0xd2
                MOV     SP, R0
   100c4:	e1a0d000 	mov	sp, r0
                SUB     R0, R0, #IRQ_Stack_Size
   100c8:	e2400c02 	sub	r0, r0, #512	; 0x200

// Enter Supervisor Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_SVC|I_Bit|F_Bit
   100cc:	e321f0d3 	msr	CPSR_c, #211	; 0xd3
                MOV     SP, R0
   100d0:	e1a0d000 	mov	sp, r0
                SUB     R0, R0, #SVC_Stack_Size
   100d4:	e2400080 	sub	r0, r0, #128	; 0x80

// Enter User Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_SYS /* Interrupts enabled */
   100d8:	e321f01f 	msr	CPSR_c, #31
//				MSR     CPSR_c, #Mode_USR|I_Bit|F_Bit /* Interrupts disabled */
                MOV     SP, R0
   100dc:	e1a0d000 	mov	sp, r0


.if (RAM_MODE==0)
/* Relocate .data section (Copy from ROM to RAM) */
                LDR     R1, =_etext 
   100e0:	e59f1084 	ldr	r1, [pc, #132]	; 1016c <__exit_THUMB+0x8>
                LDR     R2, =_data 
   100e4:	e59f2084 	ldr	r2, [pc, #132]	; 10170 <__exit_THUMB+0xc>
                LDR     R3, =_edata 
   100e8:	e59f3084 	ldr	r3, [pc, #132]	; 10174 <__exit_THUMB+0x10>
                CMP     R2, R3
   100ec:	e1520003 	cmp	r2, r3
                BEQ     DataIsEmpty
   100f0:	0a000003 	beq	10104 <DataIsEmpty>

000100f4 <LoopRel>:
LoopRel:        CMP     R2, R3 
   100f4:	e1520003 	cmp	r2, r3
                LDRLO   R0, [R1], #4 
   100f8:	34910004 	ldrcc	r0, [r1], #4
                STRLO   R0, [R2], #4 
   100fc:	34820004 	strcc	r0, [r2], #4
                BLO     LoopRel 
   10100:	3afffffb 	bcc	100f4 <LoopRel>

00010104 <DataIsEmpty>:
DataIsEmpty:
.endif
 
/* Clear .bss section (Zero init) */
                MOV     R0, #0 
   10104:	e3a00000 	mov	r0, #0
                LDR     R1, =__bss_start__ 
   10108:	e59f1068 	ldr	r1, [pc, #104]	; 10178 <__exit_THUMB+0x14>
                LDR     R2, =__bss_end__ 
   1010c:	e59f2068 	ldr	r2, [pc, #104]	; 1017c <__exit_THUMB+0x18>
                CMP     R1,R2
   10110:	e1510002 	cmp	r1, r2
                BEQ     BSSIsEmpty
   10114:	0a000002 	beq	10124 <BSSIsEmpty>

00010118 <LoopZI>:
LoopZI:         CMP     R1, R2 
   10118:	e1510002 	cmp	r1, r2
                STRLO   R0, [R1], #4 
   1011c:	34810004 	strcc	r0, [r1], #4
                BLO     LoopZI 
   10120:	3afffffc 	bcc	10118 <LoopZI>

00010124 <BSSIsEmpty>:
BSSIsEmpty:


// call C++ constructors of global objects
		LDR 	r0, =__ctors_start__
   10124:	e59f0054 	ldr	r0, [pc, #84]	; 10180 <__exit_THUMB+0x1c>
		LDR 	r1, =__ctors_end__
   10128:	e59f1054 	ldr	r1, [pc, #84]	; 10184 <__exit_THUMB+0x20>

0001012c <ctor_loop>:
ctor_loop:
		CMP 	r0, r1
   1012c:	e1500001 	cmp	r0, r1
		BEQ 	ctor_end
   10130:	0a000005 	beq	1014c <ctor_end>
		LDR 	r2, [r0], #4
   10134:	e4902004 	ldr	r2, [r0], #4
		STMFD 	sp!, {r0-r1}
   10138:	e92d0003 	push	{r0, r1}
		MOV 	lr, pc
   1013c:	e1a0e00f 	mov	lr, pc
		MOV 	pc, r2
   10140:	e1a0f002 	mov	pc, r2
		LDMFD 	sp!, {r0-r1}
   10144:	e8bd0003 	pop	{r0, r1}
		B 		ctor_loop
   10148:	eafffff7 	b	1012c <ctor_loop>

0001014c <ctor_end>:
ctor_end:

// Enter the C code
                //LDR     R0,=INIT
                LDR     R0,=main
   1014c:	e59f0034 	ldr	r0, [pc, #52]	; 10188 <__exit_THUMB+0x24>
                TST     R0,#1             // Bit-0 set: main is Thumb
   10150:	e3100001 	tst	r0, #1
                LDREQ   LR,=__exit_ARM    // ARM Mode
   10154:	059fe030 	ldreq	lr, [pc, #48]	; 1018c <__exit_THUMB+0x28>
                LDRNE   LR,=__exit_THUMB  // Thumb Mode
   10158:	159fe030 	ldrne	lr, [pc, #48]	; 10190 <__exit_THUMB+0x2c>
                BX      R0
   1015c:	e12fff10 	bx	r0

00010160 <__exit_ARM>:

.arm
.global __exit_ARM
.func __exit_ARM
__exit_ARM:
                B       __exit_ARM
   10160:	eafffffe 	b	10160 <__exit_ARM>

00010164 <__exit_THUMB>:

.thumb
.global __exit_THUMB
.func __exit_THUMB
__exit_THUMB:
                B       __exit_THUMB
   10164:	e7fe      	b.n	10164 <__exit_THUMB>
   10166:	0000      	.short	0x0000
.endif
                STR     R1, [R0]
.endif

// Setup Stack for each mode
                LDR     R0, =Top_Stack
   10168:	40001700 	.word	0x40001700
                MOV     SP, R0


.if (RAM_MODE==0)
/* Relocate .data section (Copy from ROM to RAM) */
                LDR     R1, =_etext 
   1016c:	000166a8 	.word	0x000166a8
                LDR     R2, =_data 
   10170:	40000000 	.word	0x40000000
                LDR     R3, =_edata 
   10174:	40000018 	.word	0x40000018
DataIsEmpty:
.endif
 
/* Clear .bss section (Zero init) */
                MOV     R0, #0 
                LDR     R1, =__bss_start__ 
   10178:	40000018 	.word	0x40000018
                LDR     R2, =__bss_end__ 
   1017c:	40000ab4 	.word	0x40000ab4
                BLO     LoopZI 
BSSIsEmpty:


// call C++ constructors of global objects
		LDR 	r0, =__ctors_start__
   10180:	000166a8 	.word	0x000166a8
		LDR 	r1, =__ctors_end__
   10184:	000166a8 	.word	0x000166a8
		B 		ctor_loop
ctor_end:

// Enter the C code
                //LDR     R0,=INIT
                LDR     R0,=main
   10188:	000122e0 	.word	0x000122e0
                TST     R0,#1             // Bit-0 set: main is Thumb
                LDREQ   LR,=__exit_ARM    // ARM Mode
   1018c:	00010160 	.word	0x00010160
                LDRNE   LR,=__exit_THUMB  // Thumb Mode
   10190:	00010164 	.word	0x00010164

00010194 <DefaultVICHandler>:
**
******************************************************************************/
// mthomas: inserted static to avoid gcc-warning
static void DefaultVICHandler (void) __attribute__ ((interrupt("IRQ")));
static void DefaultVICHandler (void)
{
   10194:	e24ee004 	sub	lr, lr, #4
   10198:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
    /* if the IRQ is not installed into the VIC, and interrupt occurs, the
        default interrupt VIC address will be used. This could happen in a race
        condition. For debugging, use this endless loop to trace back. */
    /* For more details, see Philips appnote AN10414 */
    VICVectAddr = 0;        /* Acknowledge Interrupt */
   1019c:	e3a02000 	mov	r2, #0
   101a0:	e3e03000 	mvn	r3, #0
   101a4:	e5032fcf 	str	r2, [r3, #-4047]	; 0xfffff031
    rprintf("\nDefault VIC Stop");
   101a8:	e59f0004 	ldr	r0, [pc, #4]	; 101b4 <DefaultVICHandler+0x20>
   101ac:	eb0008f8 	bl	12594 <rprintf>
   101b0:	eafffffe 	b	101b0 <DefaultVICHandler+0x1c>
   101b4:	000162e1 	.word	0x000162e1

000101b8 <init_VIC>:
{
    DWORD i = 0;
    DWORD *vect_addr, *vect_cntl;

    /* initialize VIC*/
    VICIntEnClr = 0xffffffff;
   101b8:	e3e03000 	mvn	r3, #0
    VICVectAddr = 0;
   101bc:	e3a02000 	mov	r2, #0
{
    DWORD i = 0;
    DWORD *vect_addr, *vect_cntl;

    /* initialize VIC*/
    VICIntEnClr = 0xffffffff;
   101c0:	e5033feb 	str	r3, [r3, #-4075]	; 0xfffff015
    VICVectAddr = 0;
    VICIntSelect = 0;

    /* set all the vector and vector control register to 0 */
    for ( i = 0; i < VIC_SIZE; i++ )
   101c4:	e59f1028 	ldr	r1, [pc, #40]	; 101f4 <init_VIC+0x3c>
    DWORD i = 0;
    DWORD *vect_addr, *vect_cntl;

    /* initialize VIC*/
    VICIntEnClr = 0xffffffff;
    VICVectAddr = 0;
   101c8:	e5032fcf 	str	r2, [r3, #-4047]	; 0xfffff031
    VICIntSelect = 0;
   101cc:	e5032ff3 	str	r2, [r3, #-4083]	; 0xfffff00d
   101d0:	e59f3020 	ldr	r3, [pc, #32]	; 101f8 <init_VIC+0x40>
    /* set all the vector and vector control register to 0 */
    for ( i = 0; i < VIC_SIZE; i++ )
    {
        vect_addr = (DWORD *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + i*4);
        vect_cntl = (DWORD *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + i*4);
        *vect_addr = 0;
   101d4:	e5a32004 	str	r2, [r3, #4]!
    VICIntEnClr = 0xffffffff;
    VICVectAddr = 0;
    VICIntSelect = 0;

    /* set all the vector and vector control register to 0 */
    for ( i = 0; i < VIC_SIZE; i++ )
   101d8:	e1530001 	cmp	r3, r1
    {
        vect_addr = (DWORD *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + i*4);
        vect_cntl = (DWORD *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + i*4);
        *vect_addr = 0;
        *vect_cntl = 0;
   101dc:	e5832100 	str	r2, [r3, #256]	; 0x100
    VICIntEnClr = 0xffffffff;
    VICVectAddr = 0;
    VICIntSelect = 0;

    /* set all the vector and vector control register to 0 */
    for ( i = 0; i < VIC_SIZE; i++ )
   101e0:	1afffffb 	bne	101d4 <init_VIC+0x1c>
        *vect_addr = 0;
        *vect_cntl = 0;
    }

    /* Install the default VIC handler here */
    VICDefVectAddr = (DWORD)DefaultVICHandler;
   101e4:	e59f2010 	ldr	r2, [pc, #16]	; 101fc <init_VIC+0x44>
   101e8:	e3e03000 	mvn	r3, #0
   101ec:	e5032fcb 	str	r2, [r3, #-4043]	; 0xfffff035
   101f0:	e12fff1e 	bx	lr
   101f4:	fffff13c 	.word	0xfffff13c
   101f8:	fffff0fc 	.word	0xfffff0fc
   101fc:	00010194 	.word	0x00010194

00010200 <install_irq>:
{
    DWORD i;
    DWORD *vect_addr;
    DWORD *vect_cntl;

    VICIntEnClr = 1 << IntNumber;   /* Disable Interrupt */
   10200:	e3a0c001 	mov	ip, #1
   10204:	e1a0c01c 	lsl	ip, ip, r0
   10208:	e3e03000 	mvn	r3, #0
   1020c:	e59f2050 	ldr	r2, [pc, #80]	; 10264 <install_irq+0x64>
** parameters:          Interrupt number and interrupt handler address
** Returned value:      true or false, when the table is full, return false
**
******************************************************************************/
DWORD install_irq( DWORD IntNumber, void *HandlerAddr )
{
   10210:	e92d0030 	push	{r4, r5}
    DWORD i;
    DWORD *vect_addr;
    DWORD *vect_cntl;

    VICIntEnClr = 1 << IntNumber;   /* Disable Interrupt */
   10214:	e503cfeb 	str	ip, [r3, #-4075]	; 0xfffff015

    for ( i = 0; i < VIC_SIZE; i++ )
   10218:	e3a03000 	mov	r3, #0
    {
        /* find first un-assigned VIC address for the handler */

        vect_addr = (DWORD *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + i*4);
   1021c:	e1a04002 	mov	r4, r2
        vect_cntl = (DWORD *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + i*4);
        if ( *vect_addr == (DWORD)NULL )
   10220:	e4925004 	ldr	r5, [r2], #4
   10224:	e3550000 	cmp	r5, #0
   10228:	1a000007 	bne	1024c <install_irq+0x4c>
    for ( i = 0; i < VIC_SIZE; i++ )
    {
        /* find first un-assigned VIC address for the handler */

        vect_addr = (DWORD *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + i*4);
        vect_cntl = (DWORD *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + i*4);
   1022c:	e1a03103 	lsl	r3, r3, #2
        if ( *vect_addr == (DWORD)NULL )
        {
            *vect_addr = (DWORD)HandlerAddr;    /* set interrupt vector */
            *vect_cntl = (DWORD)(IRQ_SLOT_EN | IntNumber);
   10230:	e3800020 	orr	r0, r0, #32

        vect_addr = (DWORD *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + i*4);
        vect_cntl = (DWORD *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + i*4);
        if ( *vect_addr == (DWORD)NULL )
        {
            *vect_addr = (DWORD)HandlerAddr;    /* set interrupt vector */
   10234:	e5841000 	str	r1, [r4]
            *vect_cntl = (DWORD)(IRQ_SLOT_EN | IntNumber);
   10238:	e5030e00 	str	r0, [r3, #-3584]	; 0xfffff200
    }
    if ( i == VIC_SIZE )
    {
        return( FALSE );        /* fatal error, can't find empty vector slot */
    }
    VICIntEnable = 1 << IntNumber;  /* Enable Interrupt */
   1023c:	e3e03000 	mvn	r3, #0
   10240:	e503cfef 	str	ip, [r3, #-4079]	; 0xfffff011
    return( TRUE );
   10244:	e3a00001 	mov	r0, #1
   10248:	ea000003 	b	1025c <install_irq+0x5c>
    DWORD *vect_addr;
    DWORD *vect_cntl;

    VICIntEnClr = 1 << IntNumber;   /* Disable Interrupt */

    for ( i = 0; i < VIC_SIZE; i++ )
   1024c:	e2833001 	add	r3, r3, #1
   10250:	e3530010 	cmp	r3, #16
   10254:	1afffff0 	bne	1021c <install_irq+0x1c>
            break;
        }
    }
    if ( i == VIC_SIZE )
    {
        return( FALSE );        /* fatal error, can't find empty vector slot */
   10258:	e3a00000 	mov	r0, #0
    }
    VICIntEnable = 1 << IntNumber;  /* Enable Interrupt */
    return( TRUE );
}
   1025c:	e8bd0030 	pop	{r4, r5}
   10260:	e12fff1e 	bx	lr
   10264:	fffff100 	.word	0xfffff100

00010268 <uninstall_irq>:
{
    DWORD i;
    DWORD *vect_addr;
    DWORD *vect_cntl;

    VICIntEnClr = 1 << IntNumber;   /* Disable Interrupt */
   10268:	e3a01001 	mov	r1, #1
   1026c:	e1a01011 	lsl	r1, r1, r0
   10270:	e3e03000 	mvn	r3, #0
   10274:	e59f205c 	ldr	r2, [pc, #92]	; 102d8 <uninstall_irq+0x70>
** Returned value:      true or false, when the interrupt number is not found,
**              return false
**
******************************************************************************/
DWORD uninstall_irq( DWORD IntNumber )
{
   10278:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    DWORD i;
    DWORD *vect_addr;
    DWORD *vect_cntl;

    VICIntEnClr = 1 << IntNumber;   /* Disable Interrupt */
   1027c:	e5031feb 	str	r1, [r3, #-4075]	; 0xfffff015

    for ( i = 0; i < VIC_SIZE; i++ )
   10280:	e3a03000 	mov	r3, #0
    {
        /* find first un-assigned VIC address for the handler */
        vect_addr = (DWORD *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + i*4);
        vect_cntl = (DWORD *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + i*4);
   10284:	e1a0c002 	mov	ip, r2
        if ( (*vect_cntl & ~IRQ_SLOT_EN ) == IntNumber )
   10288:	e4924004 	ldr	r4, [r2], #4
   1028c:	e3c44020 	bic	r4, r4, #32
   10290:	e1540000 	cmp	r4, r0
   10294:	1a000009 	bne	102c0 <uninstall_irq+0x58>
    VICIntEnClr = 1 << IntNumber;   /* Disable Interrupt */

    for ( i = 0; i < VIC_SIZE; i++ )
    {
        /* find first un-assigned VIC address for the handler */
        vect_addr = (DWORD *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + i*4);
   10298:	e1a03103 	lsl	r3, r3, #2
        vect_cntl = (DWORD *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + i*4);
        if ( (*vect_cntl & ~IRQ_SLOT_EN ) == IntNumber )
        {
            *vect_addr = (DWORD)NULL;   /* clear the VIC entry in the VIC table */
   1029c:	e3a02000 	mov	r2, #0
   102a0:	e5032f00 	str	r2, [r3, #-3840]	; 0xfffff100
            *vect_cntl &= ~IRQ_SLOT_EN; /* disable SLOT_EN bit */
   102a4:	e59c3000 	ldr	r3, [ip]
   102a8:	e3c33020 	bic	r3, r3, #32
   102ac:	e58c3000 	str	r3, [ip]
    if ( i == VIC_SIZE )
    {
        return( FALSE );        /* fatal error, can't find interrupt number
                            in vector slot */
    }
    VICIntEnable = 1 << IntNumber;  /* Enable Interrupt */
   102b0:	e3e03000 	mvn	r3, #0
   102b4:	e5031fef 	str	r1, [r3, #-4079]	; 0xfffff011
    return( TRUE );
   102b8:	e3a00001 	mov	r0, #1
   102bc:	ea000003 	b	102d0 <uninstall_irq+0x68>
    DWORD *vect_addr;
    DWORD *vect_cntl;

    VICIntEnClr = 1 << IntNumber;   /* Disable Interrupt */

    for ( i = 0; i < VIC_SIZE; i++ )
   102c0:	e2833001 	add	r3, r3, #1
   102c4:	e3530010 	cmp	r3, #16
   102c8:	1affffed 	bne	10284 <uninstall_irq+0x1c>
            break;
        }
    }
    if ( i == VIC_SIZE )
    {
        return( FALSE );        /* fatal error, can't find interrupt number
   102cc:	e3a00000 	mov	r0, #0
                            in vector slot */
    }
    VICIntEnable = 1 << IntNumber;  /* Enable Interrupt */
    return( TRUE );
}
   102d0:	e8bd0010 	ldmfd	sp!, {r4}
   102d4:	e12fff1e 	bx	lr
   102d8:	fffff200 	.word	0xfffff200

000102dc <UART0ISR>:
static void UART0ISR(void)
{
	char temp;


	if(RX_in < 512)
   102dc:	e59f3088 	ldr	r3, [pc, #136]	; 1036c <UART0ISR+0x90>
   102e0:	e1d320b0 	ldrh	r2, [r3]
   102e4:	e1a0c802 	lsl	ip, r2, #16
   102e8:	e1a0184c 	asr	r1, ip, #16
   102ec:	e59f007c 	ldr	r0, [pc, #124]	; 10370 <UART0ISR+0x94>
   102f0:	e3510c02 	cmp	r1, #512	; 0x200
	{
		RX_array1[RX_in] = U0RBR;
   102f4:	e5d00000 	ldrb	r0, [r0]
static void UART0ISR(void)
{
	char temp;


	if(RX_in < 512)
   102f8:	aa000009 	bge	10324 <UART0ISR+0x48>
	{
		RX_array1[RX_in] = U0RBR;
	
		RX_in++;
   102fc:	e2822001 	add	r2, r2, #1
   10300:	e1a02802 	lsl	r2, r2, #16
   10304:	e1a02822 	lsr	r2, r2, #16

		if(RX_in == 512) log_array1 = 1;
   10308:	e3520c02 	cmp	r2, #512	; 0x200
	char temp;


	if(RX_in < 512)
	{
		RX_array1[RX_in] = U0RBR;
   1030c:	e59f1060 	ldr	r1, [pc, #96]	; 10374 <UART0ISR+0x98>
	
		RX_in++;
   10310:	e1c320b0 	strh	r2, [r3]

		if(RX_in == 512) log_array1 = 1;
   10314:	03a02001 	moveq	r2, #1
	char temp;


	if(RX_in < 512)
	{
		RX_array1[RX_in] = U0RBR;
   10318:	e7c1084c 	strb	r0, [r1, ip, asr #16]
	
		RX_in++;

		if(RX_in == 512) log_array1 = 1;
   1031c:	05c32002 	strbeq	r2, [r3, #2]
   10320:	ea00000b 	b	10354 <UART0ISR+0x78>
	}
	else if(RX_in >= 512)
	{
		RX_array2[RX_in-512] = U0RBR;
		RX_in++;
   10324:	e2822001 	add	r2, r2, #1
   10328:	e1a02802 	lsl	r2, r2, #16
   1032c:	e1a02822 	lsr	r2, r2, #16

		if(RX_in == 1024)
   10330:	e3520b01 	cmp	r2, #1024	; 0x400

		if(RX_in == 512) log_array1 = 1;
	}
	else if(RX_in >= 512)
	{
		RX_array2[RX_in-512] = U0RBR;
   10334:	e59fc03c 	ldr	ip, [pc, #60]	; 10378 <UART0ISR+0x9c>
		RX_in++;
   10338:	e1c320b0 	strh	r2, [r3]

		if(RX_in == 1024)
		{
			log_array2 = 1;
   1033c:	03a02001 	moveq	r2, #1

		if(RX_in == 512) log_array1 = 1;
	}
	else if(RX_in >= 512)
	{
		RX_array2[RX_in-512] = U0RBR;
   10340:	e08c1001 	add	r1, ip, r1
		RX_in++;

		if(RX_in == 1024)
		{
			log_array2 = 1;
   10344:	05c32003 	strbeq	r2, [r3, #3]
			RX_in = 0;
   10348:	03a02000 	moveq	r2, #0

		if(RX_in == 512) log_array1 = 1;
	}
	else if(RX_in >= 512)
	{
		RX_array2[RX_in-512] = U0RBR;
   1034c:	e5410200 	strb	r0, [r1, #-512]	; 0xfffffe00
		RX_in++;

		if(RX_in == 1024)
		{
			log_array2 = 1;
			RX_in = 0;
   10350:	01c320b0 	strheq	r2, [r3]
		}
	}


	temp = U0IIR; // Have to read this to clear the interrupt 
   10354:	e59f3014 	ldr	r3, [pc, #20]	; 10370 <UART0ISR+0x94>

	VICVectAddr = 0;
   10358:	e3a02000 	mov	r2, #0
			RX_in = 0;
		}
	}


	temp = U0IIR; // Have to read this to clear the interrupt 
   1035c:	e5d33008 	ldrb	r3, [r3, #8]

	VICVectAddr = 0;
   10360:	e3e03000 	mvn	r3, #0
   10364:	e5032fcf 	str	r2, [r3, #-4047]	; 0xfffff031
   10368:	e12fff1e 	bx	lr
   1036c:	40000018 	.word	0x40000018
   10370:	e000c000 	.word	0xe000c000
   10374:	40000664 	.word	0x40000664
   10378:	40000360 	.word	0x40000360

0001037c <UART0ISR_2>:
	
}

static void UART0ISR_2(void)
{
   1037c:	e92d0030 	push	{r4, r5}
	char temp;
	temp = U0RBR;
   10380:	e59f310c 	ldr	r3, [pc, #268]	; 10494 <UART0ISR_2+0x118>
   10384:	e5d3c000 	ldrb	ip, [r3]

	if(temp == trig){ get_frame = 1; }
   10388:	e59f3108 	ldr	r3, [pc, #264]	; 10498 <UART0ISR_2+0x11c>
   1038c:	e5d33000 	ldrb	r3, [r3]
}

static void UART0ISR_2(void)
{
	char temp;
	temp = U0RBR;
   10390:	e20cc0ff 	and	ip, ip, #255	; 0xff

	if(temp == trig){ get_frame = 1; }
   10394:	e153000c 	cmp	r3, ip
   10398:	e59f20fc 	ldr	r2, [pc, #252]	; 1049c <UART0ISR_2+0x120>
   1039c:	03a03001 	moveq	r3, #1
   103a0:	05c23004 	strbeq	r3, [r2, #4]
	
	if(get_frame)
   103a4:	e5d22004 	ldrb	r2, [r2, #4]
   103a8:	e3520000 	cmp	r2, #0
   103ac:	e59f30e8 	ldr	r3, [pc, #232]	; 1049c <UART0ISR_2+0x120>
   103b0:	0a000030 	beq	10478 <UART0ISR_2+0xfc>
	{
		if(RX_in < frame)
   103b4:	e1d300b0 	ldrh	r0, [r3]
   103b8:	e59f20d8 	ldr	r2, [pc, #216]	; 10498 <UART0ISR_2+0x11c>
   103bc:	e1a05800 	lsl	r5, r0, #16
   103c0:	e1d220f2 	ldrsh	r2, [r2, #2]
   103c4:	e1a04845 	asr	r4, r5, #16
   103c8:	e1540002 	cmp	r4, r2
   103cc:	e2800001 	add	r0, r0, #1
   103d0:	aa000012 	bge	10420 <UART0ISR_2+0xa4>
		{
			RX_array1[RX_in] = temp;
			RX_in++;
   103d4:	e1a00800 	lsl	r0, r0, #16
   103d8:	e1a00820 	lsr	r0, r0, #16
	
	if(get_frame)
	{
		if(RX_in < frame)
		{
			RX_array1[RX_in] = temp;
   103dc:	e59f10bc 	ldr	r1, [pc, #188]	; 104a0 <UART0ISR_2+0x124>
			RX_in++;
   103e0:	e1c300b0 	strh	r0, [r3]

			if(RX_in == frame)
   103e4:	e1a00800 	lsl	r0, r0, #16
	
	if(get_frame)
	{
		if(RX_in < frame)
		{
			RX_array1[RX_in] = temp;
   103e8:	e7c1c845 	strb	ip, [r1, r5, asr #16]
			RX_in++;

			if(RX_in == frame)
   103ec:	e1a0c840 	asr	ip, r0, #16
   103f0:	e15c0002 	cmp	ip, r2
   103f4:	1a00001f 	bne	10478 <UART0ISR_2+0xfc>
			{
				RX_array1[RX_in] = 10; // delimiters
   103f8:	e3a0200a 	mov	r2, #10
   103fc:	e7c12840 	strb	r2, [r1, r0, asr #16]
				RX_array1[RX_in + 1] = 13;
   10400:	e3a0200d 	mov	r2, #13
   10404:	e081100c 	add	r1, r1, ip
   10408:	e5c12001 	strb	r2, [r1, #1]
				log_array1 = 1;
   1040c:	e3a02001 	mov	r2, #1
   10410:	e5c32002 	strb	r2, [r3, #2]
				get_frame = 0;
   10414:	e3a02000 	mov	r2, #0
   10418:	e5c32004 	strb	r2, [r3, #4]
   1041c:	ea000015 	b	10478 <UART0ISR_2+0xfc>
			}
		}
		else if(RX_in >= frame)
		{
			RX_array2[RX_in - frame] = temp;
			RX_in++;
   10420:	e1a00800 	lsl	r0, r0, #16
   10424:	e1a00820 	lsr	r0, r0, #16
   10428:	e1c300b0 	strh	r0, [r3]

			if(RX_in == 2*frame)
   1042c:	e1a00800 	lsl	r0, r0, #16
				get_frame = 0;
			}
		}
		else if(RX_in >= frame)
		{
			RX_array2[RX_in - frame] = temp;
   10430:	e59f106c 	ldr	r1, [pc, #108]	; 104a4 <UART0ISR_2+0x128>
			RX_in++;

			if(RX_in == 2*frame)
   10434:	e1a00840 	asr	r0, r0, #16
				get_frame = 0;
			}
		}
		else if(RX_in >= frame)
		{
			RX_array2[RX_in - frame] = temp;
   10438:	e0624004 	rsb	r4, r2, r4
			RX_in++;

			if(RX_in == 2*frame)
   1043c:	e1500082 	cmp	r0, r2, lsl #1
				get_frame = 0;
			}
		}
		else if(RX_in >= frame)
		{
			RX_array2[RX_in - frame] = temp;
   10440:	e7c1c004 	strb	ip, [r1, r4]
			RX_in++;

			if(RX_in == 2*frame)
   10444:	1a00000b 	bne	10478 <UART0ISR_2+0xfc>
			{
				RX_array2[RX_in - frame] = 10; // delimiters
   10448:	e062c000 	rsb	ip, r2, r0
				RX_array2[RX_in + 1 - frame] = 13;
   1044c:	e2800001 	add	r0, r0, #1
   10450:	e0622000 	rsb	r2, r2, r0
			RX_array2[RX_in - frame] = temp;
			RX_in++;

			if(RX_in == 2*frame)
			{
				RX_array2[RX_in - frame] = 10; // delimiters
   10454:	e3a0400a 	mov	r4, #10
				RX_array2[RX_in + 1 - frame] = 13;
   10458:	e3a0000d 	mov	r0, #13
			RX_array2[RX_in - frame] = temp;
			RX_in++;

			if(RX_in == 2*frame)
			{
				RX_array2[RX_in - frame] = 10; // delimiters
   1045c:	e7c1400c 	strb	r4, [r1, ip]
				RX_array2[RX_in + 1 - frame] = 13;
   10460:	e7c10002 	strb	r0, [r1, r2]
				log_array2 = 1;
   10464:	e3a02001 	mov	r2, #1
   10468:	e5c32003 	strb	r2, [r3, #3]
				get_frame = 0;
   1046c:	e3a02000 	mov	r2, #0
   10470:	e5c32004 	strb	r2, [r3, #4]
				RX_in = 0;
   10474:	e1c320b0 	strh	r2, [r3]
			}
		}
	}

	temp = U0IIR; // have to read this to clear the interrupt
   10478:	e59f3014 	ldr	r3, [pc, #20]	; 10494 <UART0ISR_2+0x118>

	VICVectAddr = 0;
   1047c:	e3a02000 	mov	r2, #0
				RX_in = 0;
			}
		}
	}

	temp = U0IIR; // have to read this to clear the interrupt
   10480:	e5d33008 	ldrb	r3, [r3, #8]

	VICVectAddr = 0;
   10484:	e3e03000 	mvn	r3, #0
   10488:	e5032fcf 	str	r2, [r3, #-4047]	; 0xfffff031
}
   1048c:	e8bd0030 	pop	{r4, r5}
   10490:	e12fff1e 	bx	lr
   10494:	e000c000 	.word	0xe000c000
   10498:	40000000 	.word	0x40000000
   1049c:	40000018 	.word	0x40000018
   104a0:	40000664 	.word	0x40000664
   104a4:	40000360 	.word	0x40000360

000104a8 <MODE2ISR>:
		
static void MODE2ISR(void)
{
   104a8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
	int j;
	short a;
	char q[50], temp_buff[4];


	T0IR = 1; // reset TMR0 interrupt
   104ac:	e59f3bfc 	ldr	r3, [pc, #3068]	; 110b0 <MODE2ISR+0xc08>
   104b0:	e3a02001 	mov	r2, #1
   104b4:	e5832000 	str	r2, [r3]
	
	for(j = 0; j < 50; j++)
   104b8:	e3a03000 	mov	r3, #0

	VICVectAddr = 0;
}
		
static void MODE2ISR(void)
{
   104bc:	e24dd038 	sub	sp, sp, #56	; 0x38

	T0IR = 1; // reset TMR0 interrupt
	
	for(j = 0; j < 50; j++)
	{
		q[j] = 0;
   104c0:	e1a01003 	mov	r1, r3
   104c4:	e28d2004 	add	r2, sp, #4
   104c8:	e7c31002 	strb	r1, [r3, r2]
	char q[50], temp_buff[4];


	T0IR = 1; // reset TMR0 interrupt
	
	for(j = 0; j < 50; j++)
   104cc:	e2833001 	add	r3, r3, #1
   104d0:	e3530032 	cmp	r3, #50	; 0x32
   104d4:	1afffffa 	bne	104c4 <MODE2ISR+0x1c>
		q[j] = 0;
	}


	// Get AD1.3
	if(ad1_3 == 'Y')
   104d8:	e59f3bd4 	ldr	r3, [pc, #3028]	; 110b4 <MODE2ISR+0xc0c>
   104dc:	e5d33004 	ldrb	r3, [r3, #4]
   104e0:	e3530059 	cmp	r3, #89	; 0x59
   104e4:	0a000001 	beq	104f0 <MODE2ISR+0x48>
	VICVectAddr = 0;
}
		
static void MODE2ISR(void)
{
	int temp = 0, temp2 = 0, ind = 0;
   104e8:	e3a04000 	mov	r4, #0
   104ec:	ea000044 	b	10604 <MODE2ISR+0x15c>


	// Get AD1.3
	if(ad1_3 == 'Y')
	{
		AD1CR = 0x00020FF08; // AD1.3
   104f0:	e59f3bc0 	ldr	r3, [pc, #3008]	; 110b8 <MODE2ISR+0xc10>
   104f4:	e59f2bc0 	ldr	r2, [pc, #3008]	; 110bc <MODE2ISR+0xc14>
   104f8:	e5832000 	str	r2, [r3]
		AD1CR |= 0x01000000; // start conversion
   104fc:	e5932000 	ldr	r2, [r3]
   10500:	e3822401 	orr	r2, r2, #16777216	; 0x1000000
   10504:	e5832000 	str	r2, [r3]
		while((temp & 0x80000000) == 0)
		{
			temp = AD1DR;
   10508:	e5932004 	ldr	r2, [r3, #4]
	// Get AD1.3
	if(ad1_3 == 'Y')
	{
		AD1CR = 0x00020FF08; // AD1.3
		AD1CR |= 0x01000000; // start conversion
		while((temp & 0x80000000) == 0)
   1050c:	e3520000 	cmp	r2, #0
   10510:	aafffffc 	bge	10508 <MODE2ISR+0x60>
			temp = AD1DR;
		}
		temp &= 0x0000FFC0;
		temp2 = temp / 0x00000040;

		AD1CR = 0x00000000;
   10514:	e59f3b9c 	ldr	r3, [pc, #2972]	; 110b8 <MODE2ISR+0xc10>
   10518:	e3a04000 	mov	r4, #0
   1051c:	e5834000 	str	r4, [r3]

		if(asc == 'Y' || asc == ',')
   10520:	e59f3b8c 	ldr	r3, [pc, #2956]	; 110b4 <MODE2ISR+0xc0c>
		AD1CR |= 0x01000000; // start conversion
		while((temp & 0x80000000) == 0)
		{
			temp = AD1DR;
		}
		temp &= 0x0000FFC0;
   10524:	e59f0b94 	ldr	r0, [pc, #2964]	; 110c0 <MODE2ISR+0xc18>
		temp2 = temp / 0x00000040;

		AD1CR = 0x00000000;

		if(asc == 'Y' || asc == ',')
   10528:	e5d33005 	ldrb	r3, [r3, #5]
		AD1CR |= 0x01000000; // start conversion
		while((temp & 0x80000000) == 0)
		{
			temp = AD1DR;
		}
		temp &= 0x0000FFC0;
   1052c:	e0020000 	and	r0, r2, r0
		temp2 = temp / 0x00000040;

		AD1CR = 0x00000000;

		if(asc == 'Y' || asc == ',')
   10530:	e3530059 	cmp	r3, #89	; 0x59
   10534:	1353002c 	cmpne	r3, #44	; 0x2c
		while((temp & 0x80000000) == 0)
		{
			temp = AD1DR;
		}
		temp &= 0x0000FFC0;
		temp2 = temp / 0x00000040;
   10538:	e1a00340 	asr	r0, r0, #6

		AD1CR = 0x00000000;

		if(asc == 'Y' || asc == ',')
   1053c:	1a00002a 	bne	105ec <MODE2ISR+0x144>
		{
			itoa(temp2, 10, temp_buff);
   10540:	e3a0100a 	mov	r1, #10
   10544:	e1a0200d 	mov	r2, sp
   10548:	eb0015ab 	bl	15bfc <itoa>
			if(temp_buff[0] >= 48 && temp_buff[0] <= 57)
   1054c:	e5dd3000 	ldrb	r3, [sp]
   10550:	e2432030 	sub	r2, r3, #48	; 0x30
   10554:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[0];
   10558:	95cd3004 	strbls	r3, [sp, #4]
				ind++;
			}
			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
   1055c:	e5dd3001 	ldrb	r3, [sp, #1]
   10560:	e2432030 	sub	r2, r3, #48	; 0x30
		{
			itoa(temp2, 10, temp_buff);
			if(temp_buff[0] >= 48 && temp_buff[0] <= 57)
			{
				q[ind] = temp_buff[0];
				ind++;
   10564:	93a04001 	movls	r4, #1
			}
			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
   10568:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[1];
   1056c:	928d1038 	addls	r1, sp, #56	; 0x38
   10570:	90812004 	addls	r2, r1, r4
   10574:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}
			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
   10578:	e5dd3002 	ldrb	r3, [sp, #2]
   1057c:	e2432030 	sub	r2, r3, #48	; 0x30
				ind++;
			}
			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
			{
				q[ind] = temp_buff[1];
				ind++;
   10580:	92844001 	addls	r4, r4, #1
			}
			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
   10584:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[2];
   10588:	928d1038 	addls	r1, sp, #56	; 0x38
   1058c:	90812004 	addls	r2, r1, r4
   10590:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}
			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
   10594:	e5dd3003 	ldrb	r3, [sp, #3]
   10598:	e2432030 	sub	r2, r3, #48	; 0x30
				ind++;
			}
			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
			{
				q[ind] = temp_buff[2];
				ind++;
   1059c:	92844001 	addls	r4, r4, #1
			}
			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
   105a0:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[3];
   105a4:	928d1038 	addls	r1, sp, #56	; 0x38
   105a8:	90812004 	addls	r2, r1, r4
   105ac:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}
	
			if(asc == ',')
   105b0:	e59f3afc 	ldr	r3, [pc, #2812]	; 110b4 <MODE2ISR+0xc0c>
   105b4:	e5d32005 	ldrb	r2, [r3, #5]
				ind++;
			}
			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
			{
				q[ind] = temp_buff[3];
				ind++;
   105b8:	92844001 	addls	r4, r4, #1
   105bc:	e28d1038 	add	r1, sp, #56	; 0x38
			}
	
			if(asc == ',')
   105c0:	e352002c 	cmp	r2, #44	; 0x2c
   105c4:	e0813004 	add	r3, r1, r4
			{
				q[ind] = ',';
			}
			else
			{
				q[ind] = 0;
   105c8:	13a02000 	movne	r2, #0
   105cc:	e5432034 	strb	r2, [r3, #-52]	; 0xffffffcc
			}
			ind++;
			temp = 0; 
			temp2 = 0;
			temp_buff[0] = 0;
   105d0:	e3a03000 	mov	r3, #0
			}
			else
			{
				q[ind] = 0;
			}
			ind++;
   105d4:	e2844001 	add	r4, r4, #1
			temp = 0; 
			temp2 = 0;
			temp_buff[0] = 0;
   105d8:	e5cd3000 	strb	r3, [sp]
			temp_buff[1] = 0;
   105dc:	e5cd3001 	strb	r3, [sp, #1]
			temp_buff[2] = 0;
   105e0:	e5cd3002 	strb	r3, [sp, #2]
			temp_buff[3] = 0;
   105e4:	e5cd3003 	strb	r3, [sp, #3]
   105e8:	ea000005 	b	10604 <MODE2ISR+0x15c>

		}

		else if(asc == 'N')
   105ec:	e353004e 	cmp	r3, #78	; 0x4e
   105f0:	1affffbc 	bne	104e8 <MODE2ISR+0x40>
		{
			a = ((short)temp2 & 0xFF00) / 0x00000100;
   105f4:	e1a03420 	lsr	r3, r0, #8
			q[ind] = (char)a;
   105f8:	e5cd3004 	strb	r3, [sp, #4]
			
			q[ind+1]  = (char)temp2 & 0xFF;
   105fc:	e5cd0005 	strb	r0, [sp, #5]
			ind += 2;
   10600:	e3a04002 	mov	r4, #2
			temp = 0;
		}
	}
	// Get AD0.3
	if(ad0_3 == 'Y')
   10604:	e59f3aa8 	ldr	r3, [pc, #2728]	; 110b4 <MODE2ISR+0xc0c>
   10608:	e5d33006 	ldrb	r3, [r3, #6]
   1060c:	e3530059 	cmp	r3, #89	; 0x59
   10610:	1a000048 	bne	10738 <MODE2ISR+0x290>
	{
		AD0CR = 0x00020FF08; // AD0.3
   10614:	e59f3aa8 	ldr	r3, [pc, #2728]	; 110c4 <MODE2ISR+0xc1c>
   10618:	e59f2a9c 	ldr	r2, [pc, #2716]	; 110bc <MODE2ISR+0xc14>
   1061c:	e5832000 	str	r2, [r3]
		AD0CR |= 0x01000000; // start conversion
   10620:	e5932000 	ldr	r2, [r3]
   10624:	e3822401 	orr	r2, r2, #16777216	; 0x1000000
   10628:	e5832000 	str	r2, [r3]
		while((temp & 0x80000000) == 0)
		{
			temp = AD0DR;
   1062c:	e5932004 	ldr	r2, [r3, #4]
	// Get AD0.3
	if(ad0_3 == 'Y')
	{
		AD0CR = 0x00020FF08; // AD0.3
		AD0CR |= 0x01000000; // start conversion
		while((temp & 0x80000000) == 0)
   10630:	e3520000 	cmp	r2, #0
   10634:	aafffffc 	bge	1062c <MODE2ISR+0x184>
		{
			temp = AD0DR;
		}
		temp &= 0x0000FFC0;
   10638:	e59f0a80 	ldr	r0, [pc, #2688]	; 110c0 <MODE2ISR+0xc18>
		temp2 = temp / 0x00000040;

		AD0CR = 0x00000000;
   1063c:	e59f3a80 	ldr	r3, [pc, #2688]	; 110c4 <MODE2ISR+0xc1c>
		AD0CR |= 0x01000000; // start conversion
		while((temp & 0x80000000) == 0)
		{
			temp = AD0DR;
		}
		temp &= 0x0000FFC0;
   10640:	e0020000 	and	r0, r2, r0
		temp2 = temp / 0x00000040;

		AD0CR = 0x00000000;
   10644:	e3a02000 	mov	r2, #0
   10648:	e5832000 	str	r2, [r3]

		if(asc == 'Y' || asc ==',')
   1064c:	e59f3a60 	ldr	r3, [pc, #2656]	; 110b4 <MODE2ISR+0xc0c>
   10650:	e5d33005 	ldrb	r3, [r3, #5]
   10654:	e3530059 	cmp	r3, #89	; 0x59
   10658:	1353002c 	cmpne	r3, #44	; 0x2c
		while((temp & 0x80000000) == 0)
		{
			temp = AD0DR;
		}
		temp &= 0x0000FFC0;
		temp2 = temp / 0x00000040;
   1065c:	e1a00340 	asr	r0, r0, #6

		AD0CR = 0x00000000;

		if(asc == 'Y' || asc ==',')
   10660:	1a00002c 	bne	10718 <MODE2ISR+0x270>
		{
			itoa(temp2, 10, temp_buff);
   10664:	e3a0100a 	mov	r1, #10
   10668:	e1a0200d 	mov	r2, sp
   1066c:	eb001562 	bl	15bfc <itoa>
			if(temp_buff[0] >= 48 && temp_buff[0] <= 57)
   10670:	e5dd3000 	ldrb	r3, [sp]
   10674:	e2432030 	sub	r2, r3, #48	; 0x30
   10678:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[0];
   1067c:	928d1038 	addls	r1, sp, #56	; 0x38
   10680:	90812004 	addls	r2, r1, r4
   10684:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}
			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
   10688:	e5dd3001 	ldrb	r3, [sp, #1]
   1068c:	e2432030 	sub	r2, r3, #48	; 0x30
		{
			itoa(temp2, 10, temp_buff);
			if(temp_buff[0] >= 48 && temp_buff[0] <= 57)
			{
				q[ind] = temp_buff[0];
				ind++;
   10690:	92844001 	addls	r4, r4, #1
			}
			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
   10694:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[1];
   10698:	928d1038 	addls	r1, sp, #56	; 0x38
   1069c:	90812004 	addls	r2, r1, r4
   106a0:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}
			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
   106a4:	e5dd3002 	ldrb	r3, [sp, #2]
   106a8:	e2432030 	sub	r2, r3, #48	; 0x30
				ind++;
			}
			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
			{
				q[ind] = temp_buff[1];
				ind++;
   106ac:	92844001 	addls	r4, r4, #1
			}
			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
   106b0:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[2];
   106b4:	928d1038 	addls	r1, sp, #56	; 0x38
   106b8:	90812004 	addls	r2, r1, r4
   106bc:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}
			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
   106c0:	e5dd3003 	ldrb	r3, [sp, #3]
   106c4:	e2432030 	sub	r2, r3, #48	; 0x30
				ind++;
			}
			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
			{
				q[ind] = temp_buff[2];
				ind++;
   106c8:	92844001 	addls	r4, r4, #1
			}
			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
   106cc:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[3];
   106d0:	928d1038 	addls	r1, sp, #56	; 0x38
   106d4:	90812004 	addls	r2, r1, r4
   106d8:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}

			if(asc == ',')
   106dc:	e59f39d0 	ldr	r3, [pc, #2512]	; 110b4 <MODE2ISR+0xc0c>
   106e0:	e5d32005 	ldrb	r2, [r3, #5]
				ind++;
			}
			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
			{
				q[ind] = temp_buff[3];
				ind++;
   106e4:	92844001 	addls	r4, r4, #1
   106e8:	e28d1038 	add	r1, sp, #56	; 0x38
			}

			if(asc == ',')
   106ec:	e352002c 	cmp	r2, #44	; 0x2c
   106f0:	e0813004 	add	r3, r1, r4
			{
				q[ind] = ',';
			}
			else
			{
				q[ind] = 0;
   106f4:	13a02000 	movne	r2, #0
   106f8:	e5432034 	strb	r2, [r3, #-52]	; 0xffffffcc
			}
			ind++;
			temp = 0; 
			temp2 = 0;
			temp_buff[0] = 0;
   106fc:	e3a03000 	mov	r3, #0
			}
			else
			{
				q[ind] = 0;
			}
			ind++;
   10700:	e2844001 	add	r4, r4, #1
			temp = 0; 
			temp2 = 0;
			temp_buff[0] = 0;
   10704:	e5cd3000 	strb	r3, [sp]
			temp_buff[1] = 0;
   10708:	e5cd3001 	strb	r3, [sp, #1]
			temp_buff[2] = 0;
   1070c:	e5cd3002 	strb	r3, [sp, #2]
			temp_buff[3] = 0;
   10710:	e5cd3003 	strb	r3, [sp, #3]
   10714:	ea000007 	b	10738 <MODE2ISR+0x290>

		}

		else if(asc == 'N')
   10718:	e353004e 	cmp	r3, #78	; 0x4e
   1071c:	1a000005 	bne	10738 <MODE2ISR+0x290>
		{
			a = ((short)temp2 & 0xFF00) / 0x00000100;
			q[ind] = (char)a;
   10720:	e28d2038 	add	r2, sp, #56	; 0x38
   10724:	e0823004 	add	r3, r2, r4

		}

		else if(asc == 'N')
		{
			a = ((short)temp2 & 0xFF00) / 0x00000100;
   10728:	e1a02420 	lsr	r2, r0, #8
			q[ind] = (char)a;
   1072c:	e5432034 	strb	r2, [r3, #-52]	; 0xffffffcc
			
			q[ind+1]  = (char)temp2 & 0xFF;
   10730:	e5430033 	strb	r0, [r3, #-51]	; 0xffffffcd
			ind += 2;
   10734:	e2844002 	add	r4, r4, #2
			temp = 0;
		}
	}
	// Get AD0.2
	if(ad0_2 == 'Y')
   10738:	e59f3974 	ldr	r3, [pc, #2420]	; 110b4 <MODE2ISR+0xc0c>
   1073c:	e5d33007 	ldrb	r3, [r3, #7]
   10740:	e3530059 	cmp	r3, #89	; 0x59
   10744:	1a000048 	bne	1086c <MODE2ISR+0x3c4>
	{
		AD0CR = 0x00020FF04; // AD1.2
   10748:	e59f3974 	ldr	r3, [pc, #2420]	; 110c4 <MODE2ISR+0xc1c>
   1074c:	e59f2974 	ldr	r2, [pc, #2420]	; 110c8 <MODE2ISR+0xc20>
   10750:	e5832000 	str	r2, [r3]
		AD0CR |= 0x01000000; // start conversion
   10754:	e5932000 	ldr	r2, [r3]
   10758:	e3822401 	orr	r2, r2, #16777216	; 0x1000000
   1075c:	e5832000 	str	r2, [r3]
		while((temp & 0x80000000) == 0)
		{
			temp = AD0DR;
   10760:	e5932004 	ldr	r2, [r3, #4]
	// Get AD0.2
	if(ad0_2 == 'Y')
	{
		AD0CR = 0x00020FF04; // AD1.2
		AD0CR |= 0x01000000; // start conversion
		while((temp & 0x80000000) == 0)
   10764:	e3520000 	cmp	r2, #0
   10768:	aafffffc 	bge	10760 <MODE2ISR+0x2b8>
		{
			temp = AD0DR;
		}
		temp &= 0x0000FFC0;
   1076c:	e59f094c 	ldr	r0, [pc, #2380]	; 110c0 <MODE2ISR+0xc18>
		temp2 = temp / 0x00000040;

		AD0CR = 0x00000000;
   10770:	e59f394c 	ldr	r3, [pc, #2380]	; 110c4 <MODE2ISR+0xc1c>
		AD0CR |= 0x01000000; // start conversion
		while((temp & 0x80000000) == 0)
		{
			temp = AD0DR;
		}
		temp &= 0x0000FFC0;
   10774:	e0020000 	and	r0, r2, r0
		temp2 = temp / 0x00000040;

		AD0CR = 0x00000000;
   10778:	e3a02000 	mov	r2, #0
   1077c:	e5832000 	str	r2, [r3]

		if(asc == 'Y' || asc == ',')
   10780:	e59f392c 	ldr	r3, [pc, #2348]	; 110b4 <MODE2ISR+0xc0c>
   10784:	e5d33005 	ldrb	r3, [r3, #5]
   10788:	e3530059 	cmp	r3, #89	; 0x59
   1078c:	1353002c 	cmpne	r3, #44	; 0x2c
		while((temp & 0x80000000) == 0)
		{
			temp = AD0DR;
		}
		temp &= 0x0000FFC0;
		temp2 = temp / 0x00000040;
   10790:	e1a00340 	asr	r0, r0, #6

		AD0CR = 0x00000000;

		if(asc == 'Y' || asc == ',')
   10794:	1a00002c 	bne	1084c <MODE2ISR+0x3a4>
		{
			itoa(temp2, 10, temp_buff);
   10798:	e3a0100a 	mov	r1, #10
   1079c:	e1a0200d 	mov	r2, sp
   107a0:	eb001515 	bl	15bfc <itoa>
			if(temp_buff[0] >= 48 && temp_buff[0] <= 57)
   107a4:	e5dd3000 	ldrb	r3, [sp]
   107a8:	e2432030 	sub	r2, r3, #48	; 0x30
   107ac:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[0];
   107b0:	928d1038 	addls	r1, sp, #56	; 0x38
   107b4:	90812004 	addls	r2, r1, r4
   107b8:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}
			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
   107bc:	e5dd3001 	ldrb	r3, [sp, #1]
   107c0:	e2432030 	sub	r2, r3, #48	; 0x30
		{
			itoa(temp2, 10, temp_buff);
			if(temp_buff[0] >= 48 && temp_buff[0] <= 57)
			{
				q[ind] = temp_buff[0];
				ind++;
   107c4:	92844001 	addls	r4, r4, #1
			}
			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
   107c8:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[1];
   107cc:	928d1038 	addls	r1, sp, #56	; 0x38
   107d0:	90812004 	addls	r2, r1, r4
   107d4:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}
			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
   107d8:	e5dd3002 	ldrb	r3, [sp, #2]
   107dc:	e2432030 	sub	r2, r3, #48	; 0x30
				ind++;
			}
			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
			{
				q[ind] = temp_buff[1];
				ind++;
   107e0:	92844001 	addls	r4, r4, #1
			}
			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
   107e4:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[2];
   107e8:	928d1038 	addls	r1, sp, #56	; 0x38
   107ec:	90812004 	addls	r2, r1, r4
   107f0:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}
			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
   107f4:	e5dd3003 	ldrb	r3, [sp, #3]
   107f8:	e2432030 	sub	r2, r3, #48	; 0x30
				ind++;
			}
			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
			{
				q[ind] = temp_buff[2];
				ind++;
   107fc:	92844001 	addls	r4, r4, #1
			}
			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
   10800:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[3];
   10804:	928d1038 	addls	r1, sp, #56	; 0x38
   10808:	90812004 	addls	r2, r1, r4
   1080c:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}

			if(asc == ',')
   10810:	e59f389c 	ldr	r3, [pc, #2204]	; 110b4 <MODE2ISR+0xc0c>
   10814:	e5d32005 	ldrb	r2, [r3, #5]
				ind++;
			}
			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
			{
				q[ind] = temp_buff[3];
				ind++;
   10818:	92844001 	addls	r4, r4, #1
   1081c:	e28d1038 	add	r1, sp, #56	; 0x38
			}

			if(asc == ',')
   10820:	e352002c 	cmp	r2, #44	; 0x2c
   10824:	e0813004 	add	r3, r1, r4
			{
				q[ind] = ',';
			}
			else
			{
				q[ind] = 0;
   10828:	13a02000 	movne	r2, #0
   1082c:	e5432034 	strb	r2, [r3, #-52]	; 0xffffffcc
			}
			ind++;
			temp = 0; 
			temp2 = 0;
			temp_buff[0] = 0;
   10830:	e3a03000 	mov	r3, #0
			}
			else
			{
				q[ind] = 0;
			}
			ind++;
   10834:	e2844001 	add	r4, r4, #1
			temp = 0; 
			temp2 = 0;
			temp_buff[0] = 0;
   10838:	e5cd3000 	strb	r3, [sp]
			temp_buff[1] = 0;
   1083c:	e5cd3001 	strb	r3, [sp, #1]
			temp_buff[2] = 0;
   10840:	e5cd3002 	strb	r3, [sp, #2]
			temp_buff[3] = 0;
   10844:	e5cd3003 	strb	r3, [sp, #3]
   10848:	ea000007 	b	1086c <MODE2ISR+0x3c4>

		}

		else if(asc == 'N')
   1084c:	e353004e 	cmp	r3, #78	; 0x4e
   10850:	1a000005 	bne	1086c <MODE2ISR+0x3c4>
		{
			a = ((short)temp2 & 0xFF00) / 0x00000100;
			q[ind] = (char)a;
   10854:	e28d2038 	add	r2, sp, #56	; 0x38
   10858:	e0823004 	add	r3, r2, r4

		}

		else if(asc == 'N')
		{
			a = ((short)temp2 & 0xFF00) / 0x00000100;
   1085c:	e1a02420 	lsr	r2, r0, #8
			q[ind] = (char)a;
   10860:	e5432034 	strb	r2, [r3, #-52]	; 0xffffffcc
			
			q[ind+1]  = (char)temp2 & 0xFF;
   10864:	e5430033 	strb	r0, [r3, #-51]	; 0xffffffcd
			ind += 2;
   10868:	e2844002 	add	r4, r4, #2
			temp = 0;
		}
	}
	// Get AD0.1
	if(ad0_1 == 'Y')
   1086c:	e59f3840 	ldr	r3, [pc, #2112]	; 110b4 <MODE2ISR+0xc0c>
   10870:	e5d33008 	ldrb	r3, [r3, #8]
   10874:	e3530059 	cmp	r3, #89	; 0x59
   10878:	1a000048 	bne	109a0 <MODE2ISR+0x4f8>
	{
		AD0CR = 0x00020FF02; // AD0.1
   1087c:	e59f3840 	ldr	r3, [pc, #2112]	; 110c4 <MODE2ISR+0xc1c>
   10880:	e59f2844 	ldr	r2, [pc, #2116]	; 110cc <MODE2ISR+0xc24>
   10884:	e5832000 	str	r2, [r3]
		AD0CR |= 0x01000000; // start conversion
   10888:	e5932000 	ldr	r2, [r3]
   1088c:	e3822401 	orr	r2, r2, #16777216	; 0x1000000
   10890:	e5832000 	str	r2, [r3]
		while((temp & 0x80000000) == 0)
		{
			temp = AD0DR;
   10894:	e5932004 	ldr	r2, [r3, #4]
	// Get AD0.1
	if(ad0_1 == 'Y')
	{
		AD0CR = 0x00020FF02; // AD0.1
		AD0CR |= 0x01000000; // start conversion
		while((temp & 0x80000000) == 0)
   10898:	e3520000 	cmp	r2, #0
   1089c:	aafffffc 	bge	10894 <MODE2ISR+0x3ec>
		{
			temp = AD0DR;
		}
		temp &= 0x0000FFC0;
   108a0:	e59f0818 	ldr	r0, [pc, #2072]	; 110c0 <MODE2ISR+0xc18>
		temp2 = temp / 0x00000040;

		AD0CR = 0x00000000;
   108a4:	e59f3818 	ldr	r3, [pc, #2072]	; 110c4 <MODE2ISR+0xc1c>
		AD0CR |= 0x01000000; // start conversion
		while((temp & 0x80000000) == 0)
		{
			temp = AD0DR;
		}
		temp &= 0x0000FFC0;
   108a8:	e0020000 	and	r0, r2, r0
		temp2 = temp / 0x00000040;

		AD0CR = 0x00000000;
   108ac:	e3a02000 	mov	r2, #0
   108b0:	e5832000 	str	r2, [r3]

		if(asc == 'Y' || asc == ',')
   108b4:	e59f37f8 	ldr	r3, [pc, #2040]	; 110b4 <MODE2ISR+0xc0c>
   108b8:	e5d33005 	ldrb	r3, [r3, #5]
   108bc:	e3530059 	cmp	r3, #89	; 0x59
   108c0:	1353002c 	cmpne	r3, #44	; 0x2c
		while((temp & 0x80000000) == 0)
		{
			temp = AD0DR;
		}
		temp &= 0x0000FFC0;
		temp2 = temp / 0x00000040;
   108c4:	e1a00340 	asr	r0, r0, #6

		AD0CR = 0x00000000;

		if(asc == 'Y' || asc == ',')
   108c8:	1a00002c 	bne	10980 <MODE2ISR+0x4d8>
		{
			itoa(temp2, 10, temp_buff);
   108cc:	e3a0100a 	mov	r1, #10
   108d0:	e1a0200d 	mov	r2, sp
   108d4:	eb0014c8 	bl	15bfc <itoa>
			if(temp_buff[0] >= 48 && temp_buff[0] <= 57)
   108d8:	e5dd3000 	ldrb	r3, [sp]
   108dc:	e2432030 	sub	r2, r3, #48	; 0x30
   108e0:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[0];
   108e4:	928d1038 	addls	r1, sp, #56	; 0x38
   108e8:	90812004 	addls	r2, r1, r4
   108ec:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}
			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
   108f0:	e5dd3001 	ldrb	r3, [sp, #1]
   108f4:	e2432030 	sub	r2, r3, #48	; 0x30
		{
			itoa(temp2, 10, temp_buff);
			if(temp_buff[0] >= 48 && temp_buff[0] <= 57)
			{
				q[ind] = temp_buff[0];
				ind++;
   108f8:	92844001 	addls	r4, r4, #1
			}
			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
   108fc:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[1];
   10900:	928d1038 	addls	r1, sp, #56	; 0x38
   10904:	90812004 	addls	r2, r1, r4
   10908:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}
			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
   1090c:	e5dd3002 	ldrb	r3, [sp, #2]
   10910:	e2432030 	sub	r2, r3, #48	; 0x30
				ind++;
			}
			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
			{
				q[ind] = temp_buff[1];
				ind++;
   10914:	92844001 	addls	r4, r4, #1
			}
			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
   10918:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[2];
   1091c:	928d1038 	addls	r1, sp, #56	; 0x38
   10920:	90812004 	addls	r2, r1, r4
   10924:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}
			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
   10928:	e5dd3003 	ldrb	r3, [sp, #3]
   1092c:	e2432030 	sub	r2, r3, #48	; 0x30
				ind++;
			}
			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
			{
				q[ind] = temp_buff[2];
				ind++;
   10930:	92844001 	addls	r4, r4, #1
			}
			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
   10934:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[3];
   10938:	928d1038 	addls	r1, sp, #56	; 0x38
   1093c:	90812004 	addls	r2, r1, r4
   10940:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}

			if(asc == ',')
   10944:	e59f3768 	ldr	r3, [pc, #1896]	; 110b4 <MODE2ISR+0xc0c>
   10948:	e5d32005 	ldrb	r2, [r3, #5]
				ind++;
			}
			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
			{
				q[ind] = temp_buff[3];
				ind++;
   1094c:	92844001 	addls	r4, r4, #1
   10950:	e28d1038 	add	r1, sp, #56	; 0x38
			}

			if(asc == ',')
   10954:	e352002c 	cmp	r2, #44	; 0x2c
   10958:	e0813004 	add	r3, r1, r4
			{
				q[ind] = ',';
			}
			else
			{
				q[ind] = 0;
   1095c:	13a02000 	movne	r2, #0
   10960:	e5432034 	strb	r2, [r3, #-52]	; 0xffffffcc
			}
			ind++;
			temp = 0; 
			temp2 = 0;
			temp_buff[0] = 0;
   10964:	e3a03000 	mov	r3, #0
			}
			else
			{
				q[ind] = 0;
			}
			ind++;
   10968:	e2844001 	add	r4, r4, #1
			temp = 0; 
			temp2 = 0;
			temp_buff[0] = 0;
   1096c:	e5cd3000 	strb	r3, [sp]
			temp_buff[1] = 0;
   10970:	e5cd3001 	strb	r3, [sp, #1]
			temp_buff[2] = 0;
   10974:	e5cd3002 	strb	r3, [sp, #2]
			temp_buff[3] = 0;
   10978:	e5cd3003 	strb	r3, [sp, #3]
   1097c:	ea000007 	b	109a0 <MODE2ISR+0x4f8>

		}

		else if(asc == 'N')
   10980:	e353004e 	cmp	r3, #78	; 0x4e
   10984:	1a000005 	bne	109a0 <MODE2ISR+0x4f8>
		{
			a = ((short)temp2 & 0xFF00) / 0x00000100;
			q[ind] = (char)a;
   10988:	e28d2038 	add	r2, sp, #56	; 0x38
   1098c:	e0823004 	add	r3, r2, r4

		}

		else if(asc == 'N')
		{
			a = ((short)temp2 & 0xFF00) / 0x00000100;
   10990:	e1a02420 	lsr	r2, r0, #8
			q[ind] = (char)a;
   10994:	e5432034 	strb	r2, [r3, #-52]	; 0xffffffcc
			
			q[ind+1]  = (char)temp2 & 0xFF;
   10998:	e5430033 	strb	r0, [r3, #-51]	; 0xffffffcd
			ind += 2;
   1099c:	e2844002 	add	r4, r4, #2
			temp = 0;
		}
	}
	// Get AD1.2
	if(ad1_2 == 'Y')
   109a0:	e59f370c 	ldr	r3, [pc, #1804]	; 110b4 <MODE2ISR+0xc0c>
   109a4:	e5d33009 	ldrb	r3, [r3, #9]
   109a8:	e3530059 	cmp	r3, #89	; 0x59
   109ac:	1a000048 	bne	10ad4 <MODE2ISR+0x62c>
	{
		AD1CR = 0x00020FF04; // AD1.2
   109b0:	e59f3700 	ldr	r3, [pc, #1792]	; 110b8 <MODE2ISR+0xc10>
   109b4:	e59f270c 	ldr	r2, [pc, #1804]	; 110c8 <MODE2ISR+0xc20>
   109b8:	e5832000 	str	r2, [r3]
		AD1CR |= 0x01000000; // start conversion
   109bc:	e5932000 	ldr	r2, [r3]
   109c0:	e3822401 	orr	r2, r2, #16777216	; 0x1000000
   109c4:	e5832000 	str	r2, [r3]
		while((temp & 0x80000000) == 0)
		{
			temp = AD1DR;
   109c8:	e5932004 	ldr	r2, [r3, #4]
	// Get AD1.2
	if(ad1_2 == 'Y')
	{
		AD1CR = 0x00020FF04; // AD1.2
		AD1CR |= 0x01000000; // start conversion
		while((temp & 0x80000000) == 0)
   109cc:	e3520000 	cmp	r2, #0
   109d0:	aafffffc 	bge	109c8 <MODE2ISR+0x520>
		{
			temp = AD1DR;
		}
		temp &= 0x0000FFC0;
   109d4:	e59f06e4 	ldr	r0, [pc, #1764]	; 110c0 <MODE2ISR+0xc18>
		temp2 = temp / 0x00000040;

		AD1CR = 0x00000000;
   109d8:	e59f36d8 	ldr	r3, [pc, #1752]	; 110b8 <MODE2ISR+0xc10>
		AD1CR |= 0x01000000; // start conversion
		while((temp & 0x80000000) == 0)
		{
			temp = AD1DR;
		}
		temp &= 0x0000FFC0;
   109dc:	e0020000 	and	r0, r2, r0
		temp2 = temp / 0x00000040;

		AD1CR = 0x00000000;
   109e0:	e3a02000 	mov	r2, #0
   109e4:	e5832000 	str	r2, [r3]

		if(asc == 'Y' || asc == ',')
   109e8:	e59f36c4 	ldr	r3, [pc, #1732]	; 110b4 <MODE2ISR+0xc0c>
   109ec:	e5d33005 	ldrb	r3, [r3, #5]
   109f0:	e3530059 	cmp	r3, #89	; 0x59
   109f4:	1353002c 	cmpne	r3, #44	; 0x2c
		while((temp & 0x80000000) == 0)
		{
			temp = AD1DR;
		}
		temp &= 0x0000FFC0;
		temp2 = temp / 0x00000040;
   109f8:	e1a00340 	asr	r0, r0, #6

		AD1CR = 0x00000000;

		if(asc == 'Y' || asc == ',')
   109fc:	1a00002c 	bne	10ab4 <MODE2ISR+0x60c>
		{
			itoa(temp2, 10, temp_buff);
   10a00:	e3a0100a 	mov	r1, #10
   10a04:	e1a0200d 	mov	r2, sp
   10a08:	eb00147b 	bl	15bfc <itoa>
			if(temp_buff[0] >= 48 && temp_buff[0] <= 57)
   10a0c:	e5dd3000 	ldrb	r3, [sp]
   10a10:	e2432030 	sub	r2, r3, #48	; 0x30
   10a14:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[0];
   10a18:	928d1038 	addls	r1, sp, #56	; 0x38
   10a1c:	90812004 	addls	r2, r1, r4
   10a20:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}
			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
   10a24:	e5dd3001 	ldrb	r3, [sp, #1]
   10a28:	e2432030 	sub	r2, r3, #48	; 0x30
		{
			itoa(temp2, 10, temp_buff);
			if(temp_buff[0] >= 48 && temp_buff[0] <= 57)
			{
				q[ind] = temp_buff[0];
				ind++;
   10a2c:	92844001 	addls	r4, r4, #1
			}
			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
   10a30:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[1];
   10a34:	928d1038 	addls	r1, sp, #56	; 0x38
   10a38:	90812004 	addls	r2, r1, r4
   10a3c:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}
			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
   10a40:	e5dd3002 	ldrb	r3, [sp, #2]
   10a44:	e2432030 	sub	r2, r3, #48	; 0x30
				ind++;
			}
			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
			{
				q[ind] = temp_buff[1];
				ind++;
   10a48:	92844001 	addls	r4, r4, #1
			}
			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
   10a4c:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[2];
   10a50:	928d1038 	addls	r1, sp, #56	; 0x38
   10a54:	90812004 	addls	r2, r1, r4
   10a58:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}
			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
   10a5c:	e5dd3003 	ldrb	r3, [sp, #3]
   10a60:	e2432030 	sub	r2, r3, #48	; 0x30
				ind++;
			}
			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
			{
				q[ind] = temp_buff[2];
				ind++;
   10a64:	92844001 	addls	r4, r4, #1
			}
			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
   10a68:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[3];
   10a6c:	928d1038 	addls	r1, sp, #56	; 0x38
   10a70:	90812004 	addls	r2, r1, r4
   10a74:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}

			if(asc == ',')
   10a78:	e59f3634 	ldr	r3, [pc, #1588]	; 110b4 <MODE2ISR+0xc0c>
   10a7c:	e5d32005 	ldrb	r2, [r3, #5]
				ind++;
			}
			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
			{
				q[ind] = temp_buff[3];
				ind++;
   10a80:	92844001 	addls	r4, r4, #1
   10a84:	e28d1038 	add	r1, sp, #56	; 0x38
			}

			if(asc == ',')
   10a88:	e352002c 	cmp	r2, #44	; 0x2c
   10a8c:	e0813004 	add	r3, r1, r4
			{
				q[ind] = ',';
			}
			else
			{
				q[ind] = 0;
   10a90:	13a02000 	movne	r2, #0
   10a94:	e5432034 	strb	r2, [r3, #-52]	; 0xffffffcc
			}
			ind++;
			temp = 0; 
			temp2 = 0;
			temp_buff[0] = 0;
   10a98:	e3a03000 	mov	r3, #0
			}
			else
			{
				q[ind] = 0;
			}
			ind++;
   10a9c:	e2844001 	add	r4, r4, #1
			temp = 0; 
			temp2 = 0;
			temp_buff[0] = 0;
   10aa0:	e5cd3000 	strb	r3, [sp]
			temp_buff[1] = 0;
   10aa4:	e5cd3001 	strb	r3, [sp, #1]
			temp_buff[2] = 0;
   10aa8:	e5cd3002 	strb	r3, [sp, #2]
			temp_buff[3] = 0;
   10aac:	e5cd3003 	strb	r3, [sp, #3]
   10ab0:	ea000007 	b	10ad4 <MODE2ISR+0x62c>

		}

		else if(asc == 'N')
   10ab4:	e353004e 	cmp	r3, #78	; 0x4e
   10ab8:	1a000005 	bne	10ad4 <MODE2ISR+0x62c>
		{
			a = ((short)temp2 & 0xFF00) / 0x00000100;
			q[ind] = (char)a;
   10abc:	e28d2038 	add	r2, sp, #56	; 0x38
   10ac0:	e0823004 	add	r3, r2, r4

		}

		else if(asc == 'N')
		{
			a = ((short)temp2 & 0xFF00) / 0x00000100;
   10ac4:	e1a02420 	lsr	r2, r0, #8
			q[ind] = (char)a;
   10ac8:	e5432034 	strb	r2, [r3, #-52]	; 0xffffffcc
			
			q[ind+1]  = (char)temp2 & 0xFF;
   10acc:	e5430033 	strb	r0, [r3, #-51]	; 0xffffffcd
			ind += 2;
   10ad0:	e2844002 	add	r4, r4, #2
			temp = 0;
		}
	}
	// Get AD0.4
	if(ad0_4 == 'Y')
   10ad4:	e59f35d8 	ldr	r3, [pc, #1496]	; 110b4 <MODE2ISR+0xc0c>
   10ad8:	e5d3300a 	ldrb	r3, [r3, #10]
   10adc:	e3530059 	cmp	r3, #89	; 0x59
   10ae0:	1a000048 	bne	10c08 <MODE2ISR+0x760>
	{
		AD0CR = 0x00020FF10; // AD0.4
   10ae4:	e59f35d8 	ldr	r3, [pc, #1496]	; 110c4 <MODE2ISR+0xc1c>
   10ae8:	e59f25e0 	ldr	r2, [pc, #1504]	; 110d0 <MODE2ISR+0xc28>
   10aec:	e5832000 	str	r2, [r3]
		AD0CR |= 0x01000000; // start conversion
   10af0:	e5932000 	ldr	r2, [r3]
   10af4:	e3822401 	orr	r2, r2, #16777216	; 0x1000000
   10af8:	e5832000 	str	r2, [r3]
		while((temp & 0x80000000) == 0)
		{
			temp = AD0DR;
   10afc:	e5932004 	ldr	r2, [r3, #4]
	// Get AD0.4
	if(ad0_4 == 'Y')
	{
		AD0CR = 0x00020FF10; // AD0.4
		AD0CR |= 0x01000000; // start conversion
		while((temp & 0x80000000) == 0)
   10b00:	e3520000 	cmp	r2, #0
   10b04:	aafffffc 	bge	10afc <MODE2ISR+0x654>
		{
			temp = AD0DR;
		}
		temp &= 0x0000FFC0;
   10b08:	e59f05b0 	ldr	r0, [pc, #1456]	; 110c0 <MODE2ISR+0xc18>
		temp2 = temp / 0x00000040;

		AD0CR = 0x00000000;
   10b0c:	e59f35b0 	ldr	r3, [pc, #1456]	; 110c4 <MODE2ISR+0xc1c>
		AD0CR |= 0x01000000; // start conversion
		while((temp & 0x80000000) == 0)
		{
			temp = AD0DR;
		}
		temp &= 0x0000FFC0;
   10b10:	e0020000 	and	r0, r2, r0
		temp2 = temp / 0x00000040;

		AD0CR = 0x00000000;
   10b14:	e3a02000 	mov	r2, #0
   10b18:	e5832000 	str	r2, [r3]

		if(asc == 'Y' || asc == ',')
   10b1c:	e59f3590 	ldr	r3, [pc, #1424]	; 110b4 <MODE2ISR+0xc0c>
   10b20:	e5d33005 	ldrb	r3, [r3, #5]
   10b24:	e3530059 	cmp	r3, #89	; 0x59
   10b28:	1353002c 	cmpne	r3, #44	; 0x2c
		while((temp & 0x80000000) == 0)
		{
			temp = AD0DR;
		}
		temp &= 0x0000FFC0;
		temp2 = temp / 0x00000040;
   10b2c:	e1a00340 	asr	r0, r0, #6

		AD0CR = 0x00000000;

		if(asc == 'Y' || asc == ',')
   10b30:	1a00002c 	bne	10be8 <MODE2ISR+0x740>
		{
			itoa(temp2, 10, temp_buff);
   10b34:	e3a0100a 	mov	r1, #10
   10b38:	e1a0200d 	mov	r2, sp
   10b3c:	eb00142e 	bl	15bfc <itoa>
			if(temp_buff[0] >= 48 && temp_buff[0] <= 57)
   10b40:	e5dd3000 	ldrb	r3, [sp]
   10b44:	e2432030 	sub	r2, r3, #48	; 0x30
   10b48:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[0];
   10b4c:	928d1038 	addls	r1, sp, #56	; 0x38
   10b50:	90812004 	addls	r2, r1, r4
   10b54:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}
			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
   10b58:	e5dd3001 	ldrb	r3, [sp, #1]
   10b5c:	e2432030 	sub	r2, r3, #48	; 0x30
		{
			itoa(temp2, 10, temp_buff);
			if(temp_buff[0] >= 48 && temp_buff[0] <= 57)
			{
				q[ind] = temp_buff[0];
				ind++;
   10b60:	92844001 	addls	r4, r4, #1
			}
			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
   10b64:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[1];
   10b68:	928d1038 	addls	r1, sp, #56	; 0x38
   10b6c:	90812004 	addls	r2, r1, r4
   10b70:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}
			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
   10b74:	e5dd3002 	ldrb	r3, [sp, #2]
   10b78:	e2432030 	sub	r2, r3, #48	; 0x30
				ind++;
			}
			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
			{
				q[ind] = temp_buff[1];
				ind++;
   10b7c:	92844001 	addls	r4, r4, #1
			}
			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
   10b80:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[2];
   10b84:	928d1038 	addls	r1, sp, #56	; 0x38
   10b88:	90812004 	addls	r2, r1, r4
   10b8c:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}
			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
   10b90:	e5dd3003 	ldrb	r3, [sp, #3]
   10b94:	e2432030 	sub	r2, r3, #48	; 0x30
				ind++;
			}
			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
			{
				q[ind] = temp_buff[2];
				ind++;
   10b98:	92844001 	addls	r4, r4, #1
			}
			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
   10b9c:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[3];
   10ba0:	928d1038 	addls	r1, sp, #56	; 0x38
   10ba4:	90812004 	addls	r2, r1, r4
   10ba8:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}

			if(asc == ',')
   10bac:	e59f3500 	ldr	r3, [pc, #1280]	; 110b4 <MODE2ISR+0xc0c>
   10bb0:	e5d32005 	ldrb	r2, [r3, #5]
				ind++;
			}
			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
			{
				q[ind] = temp_buff[3];
				ind++;
   10bb4:	92844001 	addls	r4, r4, #1
   10bb8:	e28d1038 	add	r1, sp, #56	; 0x38
			}

			if(asc == ',')
   10bbc:	e352002c 	cmp	r2, #44	; 0x2c
   10bc0:	e0813004 	add	r3, r1, r4
			{
				q[ind] = ',';
			}
			else
			{
				q[ind] = 0;
   10bc4:	13a02000 	movne	r2, #0
   10bc8:	e5432034 	strb	r2, [r3, #-52]	; 0xffffffcc
			}
			ind++;
			temp = 0; 
			temp2 = 0;
			temp_buff[0] = 0;
   10bcc:	e3a03000 	mov	r3, #0
			}
			else
			{
				q[ind] = 0;
			}
			ind++;
   10bd0:	e2844001 	add	r4, r4, #1
			temp = 0; 
			temp2 = 0;
			temp_buff[0] = 0;
   10bd4:	e5cd3000 	strb	r3, [sp]
			temp_buff[1] = 0;
   10bd8:	e5cd3001 	strb	r3, [sp, #1]
			temp_buff[2] = 0;
   10bdc:	e5cd3002 	strb	r3, [sp, #2]
			temp_buff[3] = 0;
   10be0:	e5cd3003 	strb	r3, [sp, #3]
   10be4:	ea000007 	b	10c08 <MODE2ISR+0x760>

		}

		else if(asc == 'N')
   10be8:	e353004e 	cmp	r3, #78	; 0x4e
   10bec:	1a000005 	bne	10c08 <MODE2ISR+0x760>
		{
			a = ((short)temp2 & 0xFF00) / 0x00000100;
			q[ind] = (char)a;
   10bf0:	e28d2038 	add	r2, sp, #56	; 0x38
   10bf4:	e0823004 	add	r3, r2, r4

		}

		else if(asc == 'N')
		{
			a = ((short)temp2 & 0xFF00) / 0x00000100;
   10bf8:	e1a02420 	lsr	r2, r0, #8
			q[ind] = (char)a;
   10bfc:	e5432034 	strb	r2, [r3, #-52]	; 0xffffffcc
			
			q[ind+1]  = (char)temp2 & 0xFF;
   10c00:	e5430033 	strb	r0, [r3, #-51]	; 0xffffffcd
			ind += 2;
   10c04:	e2844002 	add	r4, r4, #2
			temp = 0;
		}
	}
	// Get AD1.7
	if(ad1_7 == 'Y')
   10c08:	e59f34a4 	ldr	r3, [pc, #1188]	; 110b4 <MODE2ISR+0xc0c>
   10c0c:	e5d3300b 	ldrb	r3, [r3, #11]
   10c10:	e3530059 	cmp	r3, #89	; 0x59
   10c14:	1a000048 	bne	10d3c <MODE2ISR+0x894>
	{
		AD1CR = 0x00020FF80; // AD1.7
   10c18:	e59f3498 	ldr	r3, [pc, #1176]	; 110b8 <MODE2ISR+0xc10>
   10c1c:	e59f24b0 	ldr	r2, [pc, #1200]	; 110d4 <MODE2ISR+0xc2c>
   10c20:	e5832000 	str	r2, [r3]
		AD1CR |= 0x01000000; // start conversion
   10c24:	e5932000 	ldr	r2, [r3]
   10c28:	e3822401 	orr	r2, r2, #16777216	; 0x1000000
   10c2c:	e5832000 	str	r2, [r3]
		while((temp & 0x80000000) == 0)
		{
			temp = AD1DR;
   10c30:	e5932004 	ldr	r2, [r3, #4]
	// Get AD1.7
	if(ad1_7 == 'Y')
	{
		AD1CR = 0x00020FF80; // AD1.7
		AD1CR |= 0x01000000; // start conversion
		while((temp & 0x80000000) == 0)
   10c34:	e3520000 	cmp	r2, #0
   10c38:	aafffffc 	bge	10c30 <MODE2ISR+0x788>
		{
			temp = AD1DR;
		}
		temp &= 0x0000FFC0;
   10c3c:	e59f047c 	ldr	r0, [pc, #1148]	; 110c0 <MODE2ISR+0xc18>
		temp2 = temp / 0x00000040;

		AD1CR = 0x00000000;
   10c40:	e59f3470 	ldr	r3, [pc, #1136]	; 110b8 <MODE2ISR+0xc10>
		AD1CR |= 0x01000000; // start conversion
		while((temp & 0x80000000) == 0)
		{
			temp = AD1DR;
		}
		temp &= 0x0000FFC0;
   10c44:	e0020000 	and	r0, r2, r0
		temp2 = temp / 0x00000040;

		AD1CR = 0x00000000;
   10c48:	e3a02000 	mov	r2, #0
   10c4c:	e5832000 	str	r2, [r3]

		if(asc == 'Y' || asc == ',')
   10c50:	e59f345c 	ldr	r3, [pc, #1116]	; 110b4 <MODE2ISR+0xc0c>
   10c54:	e5d33005 	ldrb	r3, [r3, #5]
   10c58:	e3530059 	cmp	r3, #89	; 0x59
   10c5c:	1353002c 	cmpne	r3, #44	; 0x2c
		while((temp & 0x80000000) == 0)
		{
			temp = AD1DR;
		}
		temp &= 0x0000FFC0;
		temp2 = temp / 0x00000040;
   10c60:	e1a00340 	asr	r0, r0, #6

		AD1CR = 0x00000000;

		if(asc == 'Y' || asc == ',')
   10c64:	1a00002c 	bne	10d1c <MODE2ISR+0x874>
		{
			itoa(temp2, 10, temp_buff);
   10c68:	e3a0100a 	mov	r1, #10
   10c6c:	e1a0200d 	mov	r2, sp
   10c70:	eb0013e1 	bl	15bfc <itoa>
			if(temp_buff[0] >= 48 && temp_buff[0] <= 57)
   10c74:	e5dd3000 	ldrb	r3, [sp]
   10c78:	e2432030 	sub	r2, r3, #48	; 0x30
   10c7c:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[0];
   10c80:	928d1038 	addls	r1, sp, #56	; 0x38
   10c84:	90812004 	addls	r2, r1, r4
   10c88:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}
			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
   10c8c:	e5dd3001 	ldrb	r3, [sp, #1]
   10c90:	e2432030 	sub	r2, r3, #48	; 0x30
		{
			itoa(temp2, 10, temp_buff);
			if(temp_buff[0] >= 48 && temp_buff[0] <= 57)
			{
				q[ind] = temp_buff[0];
				ind++;
   10c94:	92844001 	addls	r4, r4, #1
			}
			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
   10c98:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[1];
   10c9c:	928d1038 	addls	r1, sp, #56	; 0x38
   10ca0:	90812004 	addls	r2, r1, r4
   10ca4:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}
			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
   10ca8:	e5dd3002 	ldrb	r3, [sp, #2]
   10cac:	e2432030 	sub	r2, r3, #48	; 0x30
				ind++;
			}
			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
			{
				q[ind] = temp_buff[1];
				ind++;
   10cb0:	92844001 	addls	r4, r4, #1
			}
			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
   10cb4:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[2];
   10cb8:	928d1038 	addls	r1, sp, #56	; 0x38
   10cbc:	90812004 	addls	r2, r1, r4
   10cc0:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}
			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
   10cc4:	e5dd3003 	ldrb	r3, [sp, #3]
   10cc8:	e2432030 	sub	r2, r3, #48	; 0x30
				ind++;
			}
			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
			{
				q[ind] = temp_buff[2];
				ind++;
   10ccc:	92844001 	addls	r4, r4, #1
			}
			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
   10cd0:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[3];
   10cd4:	928d1038 	addls	r1, sp, #56	; 0x38
   10cd8:	90812004 	addls	r2, r1, r4
   10cdc:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}

			if(asc == ',')
   10ce0:	e59f33cc 	ldr	r3, [pc, #972]	; 110b4 <MODE2ISR+0xc0c>
   10ce4:	e5d32005 	ldrb	r2, [r3, #5]
				ind++;
			}
			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
			{
				q[ind] = temp_buff[3];
				ind++;
   10ce8:	92844001 	addls	r4, r4, #1
   10cec:	e28d1038 	add	r1, sp, #56	; 0x38
			}

			if(asc == ',')
   10cf0:	e352002c 	cmp	r2, #44	; 0x2c
   10cf4:	e0813004 	add	r3, r1, r4
			{
				q[ind] = ',';
			}
			else
			{
				q[ind] = 0;
   10cf8:	13a02000 	movne	r2, #0
   10cfc:	e5432034 	strb	r2, [r3, #-52]	; 0xffffffcc
			}
			ind++;
			temp = 0; 
			temp2 = 0;
			temp_buff[0] = 0;
   10d00:	e3a03000 	mov	r3, #0
			}
			else
			{
				q[ind] = 0;
			}
			ind++;
   10d04:	e2844001 	add	r4, r4, #1
			temp = 0; 
			temp2 = 0;
			temp_buff[0] = 0;
   10d08:	e5cd3000 	strb	r3, [sp]
			temp_buff[1] = 0;
   10d0c:	e5cd3001 	strb	r3, [sp, #1]
			temp_buff[2] = 0;
   10d10:	e5cd3002 	strb	r3, [sp, #2]
			temp_buff[3] = 0;
   10d14:	e5cd3003 	strb	r3, [sp, #3]
   10d18:	ea000007 	b	10d3c <MODE2ISR+0x894>

		}

		else if(asc == 'N')
   10d1c:	e353004e 	cmp	r3, #78	; 0x4e
   10d20:	1a000005 	bne	10d3c <MODE2ISR+0x894>
		{
			a = ((short)temp2 & 0xFF00) / 0x00000100;
			q[ind] = (char)a;
   10d24:	e28d2038 	add	r2, sp, #56	; 0x38
   10d28:	e0823004 	add	r3, r2, r4

		}

		else if(asc == 'N')
		{
			a = ((short)temp2 & 0xFF00) / 0x00000100;
   10d2c:	e1a02420 	lsr	r2, r0, #8
			q[ind] = (char)a;
   10d30:	e5432034 	strb	r2, [r3, #-52]	; 0xffffffcc
			
			q[ind+1]  = (char)temp2 & 0xFF;
   10d34:	e5430033 	strb	r0, [r3, #-51]	; 0xffffffcd
			ind += 2;
   10d38:	e2844002 	add	r4, r4, #2
			temp = 0;
		}
	}
	// Get AD1.6
	if(ad1_6 == 'Y')
   10d3c:	e59f3370 	ldr	r3, [pc, #880]	; 110b4 <MODE2ISR+0xc0c>
   10d40:	e5d3300c 	ldrb	r3, [r3, #12]
   10d44:	e3530059 	cmp	r3, #89	; 0x59
   10d48:	1a000048 	bne	10e70 <MODE2ISR+0x9c8>
	{
		AD1CR = 0x00020FF40; // AD1.3
   10d4c:	e59f3364 	ldr	r3, [pc, #868]	; 110b8 <MODE2ISR+0xc10>
   10d50:	e59f2380 	ldr	r2, [pc, #896]	; 110d8 <MODE2ISR+0xc30>
   10d54:	e5832000 	str	r2, [r3]
		AD1CR |= 0x01000000; // start conversion
   10d58:	e5932000 	ldr	r2, [r3]
   10d5c:	e3822401 	orr	r2, r2, #16777216	; 0x1000000
   10d60:	e5832000 	str	r2, [r3]
		while((temp & 0x80000000) == 0)
		{
			temp = AD1DR;
   10d64:	e5932004 	ldr	r2, [r3, #4]
	// Get AD1.6
	if(ad1_6 == 'Y')
	{
		AD1CR = 0x00020FF40; // AD1.3
		AD1CR |= 0x01000000; // start conversion
		while((temp & 0x80000000) == 0)
   10d68:	e3520000 	cmp	r2, #0
   10d6c:	aafffffc 	bge	10d64 <MODE2ISR+0x8bc>
		{
			temp = AD1DR;
		}
		temp &= 0x0000FFC0;
   10d70:	e59f0348 	ldr	r0, [pc, #840]	; 110c0 <MODE2ISR+0xc18>
		temp2 = temp / 0x00000040;

		AD1CR = 0x00000000;
   10d74:	e59f333c 	ldr	r3, [pc, #828]	; 110b8 <MODE2ISR+0xc10>
		AD1CR |= 0x01000000; // start conversion
		while((temp & 0x80000000) == 0)
		{
			temp = AD1DR;
		}
		temp &= 0x0000FFC0;
   10d78:	e0020000 	and	r0, r2, r0
		temp2 = temp / 0x00000040;

		AD1CR = 0x00000000;
   10d7c:	e3a02000 	mov	r2, #0
   10d80:	e5832000 	str	r2, [r3]

		if(asc == 'Y' || asc == ',')
   10d84:	e59f3328 	ldr	r3, [pc, #808]	; 110b4 <MODE2ISR+0xc0c>
   10d88:	e5d33005 	ldrb	r3, [r3, #5]
   10d8c:	e3530059 	cmp	r3, #89	; 0x59
   10d90:	1353002c 	cmpne	r3, #44	; 0x2c
		while((temp & 0x80000000) == 0)
		{
			temp = AD1DR;
		}
		temp &= 0x0000FFC0;
		temp2 = temp / 0x00000040;
   10d94:	e1a00340 	asr	r0, r0, #6

		AD1CR = 0x00000000;

		if(asc == 'Y' || asc == ',')
   10d98:	1a00002c 	bne	10e50 <MODE2ISR+0x9a8>
		{
			itoa(temp2, 10, temp_buff);
   10d9c:	e3a0100a 	mov	r1, #10
   10da0:	e1a0200d 	mov	r2, sp
   10da4:	eb001394 	bl	15bfc <itoa>
			if(temp_buff[0] >= 48 && temp_buff[0] <= 57)
   10da8:	e5dd3000 	ldrb	r3, [sp]
   10dac:	e2432030 	sub	r2, r3, #48	; 0x30
   10db0:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[0];
   10db4:	928d1038 	addls	r1, sp, #56	; 0x38
   10db8:	90812004 	addls	r2, r1, r4
   10dbc:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}
			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
   10dc0:	e5dd3001 	ldrb	r3, [sp, #1]
   10dc4:	e2432030 	sub	r2, r3, #48	; 0x30
		{
			itoa(temp2, 10, temp_buff);
			if(temp_buff[0] >= 48 && temp_buff[0] <= 57)
			{
				q[ind] = temp_buff[0];
				ind++;
   10dc8:	92844001 	addls	r4, r4, #1
			}
			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
   10dcc:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[1];
   10dd0:	928d1038 	addls	r1, sp, #56	; 0x38
   10dd4:	90812004 	addls	r2, r1, r4
   10dd8:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}
			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
   10ddc:	e5dd3002 	ldrb	r3, [sp, #2]
   10de0:	e2432030 	sub	r2, r3, #48	; 0x30
				ind++;
			}
			if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
			{
				q[ind] = temp_buff[1];
				ind++;
   10de4:	92844001 	addls	r4, r4, #1
			}
			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
   10de8:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[2];
   10dec:	928d1038 	addls	r1, sp, #56	; 0x38
   10df0:	90812004 	addls	r2, r1, r4
   10df4:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}
			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
   10df8:	e5dd3003 	ldrb	r3, [sp, #3]
   10dfc:	e2432030 	sub	r2, r3, #48	; 0x30
				ind++;
			}
			if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
			{
				q[ind] = temp_buff[2];
				ind++;
   10e00:	92844001 	addls	r4, r4, #1
			}
			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
   10e04:	e3520009 	cmp	r2, #9
			{
				q[ind] = temp_buff[3];
   10e08:	928d1038 	addls	r1, sp, #56	; 0x38
   10e0c:	90812004 	addls	r2, r1, r4
   10e10:	95423034 	strbls	r3, [r2, #-52]	; 0xffffffcc
				ind++;
			}

			if(asc == ',')
   10e14:	e59f3298 	ldr	r3, [pc, #664]	; 110b4 <MODE2ISR+0xc0c>
   10e18:	e5d32005 	ldrb	r2, [r3, #5]
				ind++;
			}
			if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
			{
				q[ind] = temp_buff[3];
				ind++;
   10e1c:	92844001 	addls	r4, r4, #1
   10e20:	e28d1038 	add	r1, sp, #56	; 0x38
			}

			if(asc == ',')
   10e24:	e352002c 	cmp	r2, #44	; 0x2c
   10e28:	e0813004 	add	r3, r1, r4
			{
				q[ind] = ',';
			}
			else
			{
				q[ind] = 0;
   10e2c:	13a02000 	movne	r2, #0
   10e30:	e5432034 	strb	r2, [r3, #-52]	; 0xffffffcc
			}
			ind++;
			temp = 0; 
			temp2 = 0;
			temp_buff[0] = 0;
   10e34:	e3a03000 	mov	r3, #0
			}
			else
			{
				q[ind] = 0;
			}
			ind++;
   10e38:	e2844001 	add	r4, r4, #1
			temp = 0; 
			temp2 = 0;
			temp_buff[0] = 0;
   10e3c:	e5cd3000 	strb	r3, [sp]
			temp_buff[1] = 0;
   10e40:	e5cd3001 	strb	r3, [sp, #1]
			temp_buff[2] = 0;
   10e44:	e5cd3002 	strb	r3, [sp, #2]
			temp_buff[3] = 0;
   10e48:	e5cd3003 	strb	r3, [sp, #3]
   10e4c:	ea000007 	b	10e70 <MODE2ISR+0x9c8>

		}

		else if(asc == 'N')
   10e50:	e353004e 	cmp	r3, #78	; 0x4e
   10e54:	1a000005 	bne	10e70 <MODE2ISR+0x9c8>
		{
			a = ((short)temp2 & 0xFF00) / 0x00000100;
			q[ind] = (char)a;
   10e58:	e28d2038 	add	r2, sp, #56	; 0x38
   10e5c:	e0823004 	add	r3, r2, r4

		}

		else if(asc == 'N')
		{
			a = ((short)temp2 & 0xFF00) / 0x00000100;
   10e60:	e1a02420 	lsr	r2, r0, #8
			q[ind] = (char)a;
   10e64:	e5432034 	strb	r2, [r3, #-52]	; 0xffffffcc
			
			q[ind+1]  = (char)temp2 & 0xFF;
   10e68:	e5430033 	strb	r0, [r3, #-51]	; 0xffffffcd
			ind += 2;
   10e6c:	e2844002 	add	r4, r4, #2
			temp = 0;
		}
	}
	
	if(asc == ',')	// remove final comma, replace with zero (NULL)
   10e70:	e59f323c 	ldr	r3, [pc, #572]	; 110b4 <MODE2ISR+0xc0c>
   10e74:	e5d33005 	ldrb	r3, [r3, #5]
   10e78:	e353002c 	cmp	r3, #44	; 0x2c
   10e7c:	1a000004 	bne	10e94 <MODE2ISR+0x9ec>
	{
		if(ind > 0)	// sanity check, maybe no ADCs were marked to be read
   10e80:	e3540000 	cmp	r4, #0
		{
			q[ind-1] = 0;
   10e84:	128d1038 	addne	r1, sp, #56	; 0x38
   10e88:	10812004 	addne	r2, r1, r4
   10e8c:	13a01000 	movne	r1, #0
   10e90:	15421035 	strbne	r1, [r2, #-53]	; 0xffffffcb
   10e94:	e59f1240 	ldr	r1, [pc, #576]	; 110dc <MODE2ISR+0xc34>
   10e98:	e59f7240 	ldr	r7, [pc, #576]	; 110e0 <MODE2ISR+0xc38>
   10e9c:	e1d120b0 	ldrh	r2, [r1]
   10ea0:	e5d1c002 	ldrb	ip, [r1, #2]
   10ea4:	e5d10003 	ldrb	r0, [r1, #3]

			if(RX_in == 512) log_array1 = 1;
		}
		else if(RX_in >= 512)
		{
			RX_array2[RX_in - 512] = q[j];
   10ea8:	e59f8234 	ldr	r8, [pc, #564]	; 110e4 <MODE2ISR+0xc3c>
			RX_in++;

			if(RX_in == 1024)
			{
				log_array2 = 1;
				RX_in = 0;
   10eac:	e3a01000 	mov	r1, #0
	
	for(j = 0; j < ind; j++)
	{
		if(RX_in < 512)
		{
			RX_array1[RX_in] = q[j];
   10eb0:	e59fa230 	ldr	sl, [pc, #560]	; 110e8 <MODE2ISR+0xc40>
   10eb4:	ea000017 	b	10f18 <MODE2ISR+0xa70>
		}
	}
	
	for(j = 0; j < ind; j++)
	{
		if(RX_in < 512)
   10eb8:	e1a09802 	lsl	r9, r2, #16
   10ebc:	e1a06849 	asr	r6, r9, #16
   10ec0:	e1560007 	cmp	r6, r7
   10ec4:	e28d5004 	add	r5, sp, #4
   10ec8:	ca000007 	bgt	10eec <MODE2ISR+0xa44>
		{
			RX_array1[RX_in] = q[j];
   10ecc:	e7d55001 	ldrb	r5, [r5, r1]
			RX_in++;
   10ed0:	e2822001 	add	r2, r2, #1
	
	for(j = 0; j < ind; j++)
	{
		if(RX_in < 512)
		{
			RX_array1[RX_in] = q[j];
   10ed4:	e7ca5849 	strb	r5, [sl, r9, asr #16]
			RX_in++;
   10ed8:	e1a05802 	lsl	r5, r2, #16

			if(RX_in == 512) log_array1 = 1;
   10edc:	e3550402 	cmp	r5, #33554432	; 0x2000000
   10ee0:	e1a02825 	lsr	r2, r5, #16
   10ee4:	03a0c001 	moveq	ip, #1
   10ee8:	ea000009 	b	10f14 <MODE2ISR+0xa6c>
		}
		else if(RX_in >= 512)
		{
			RX_array2[RX_in - 512] = q[j];
   10eec:	e7d55001 	ldrb	r5, [r5, r1]
			RX_in++;
   10ef0:	e2822001 	add	r2, r2, #1
   10ef4:	e1a02802 	lsl	r2, r2, #16

			if(RX_in == 512) log_array1 = 1;
		}
		else if(RX_in >= 512)
		{
			RX_array2[RX_in - 512] = q[j];
   10ef8:	e0886006 	add	r6, r8, r6
   10efc:	e5465200 	strb	r5, [r6, #-512]	; 0xfffffe00
			RX_in++;

			if(RX_in == 1024)
   10f00:	e1a05842 	asr	r5, r2, #16
			{
				log_array2 = 1;
   10f04:	e3550b01 	cmp	r5, #1024	; 0x400
   10f08:	03a00001 	moveq	r0, #1
   10f0c:	03a02000 	moveq	r2, #0
   10f10:	11a02822 	lsrne	r2, r2, #16
		{
			q[ind-1] = 0;
		}
	}
	
	for(j = 0; j < ind; j++)
   10f14:	e2811001 	add	r1, r1, #1
   10f18:	e1510004 	cmp	r1, r4
   10f1c:	baffffe5 	blt	10eb8 <MODE2ISR+0xa10>
   10f20:	e59f11b4 	ldr	r1, [pc, #436]	; 110dc <MODE2ISR+0xc34>
   10f24:	e5c1c002 	strb	ip, [r1, #2]
   10f28:	e5c10003 	strb	r0, [r1, #3]
				log_array2 = 1;
				RX_in = 0;
			}
		}
	}
	if(RX_in < 512)
   10f2c:	e59fc1ac 	ldr	ip, [pc, #428]	; 110e0 <MODE2ISR+0xc38>
   10f30:	e1a00802 	lsl	r0, r2, #16
   10f34:	e1a01840 	asr	r1, r0, #16
   10f38:	e151000c 	cmp	r1, ip
   10f3c:	ca000011 	bgt	10f88 <MODE2ISR+0xae0>
	{
		if(asc == 'N') { RX_array1[RX_in] = '$'; }
   10f40:	e353004e 	cmp	r3, #78	; 0x4e
   10f44:	03a0c024 	moveq	ip, #36	; 0x24
   10f48:	0a000003 	beq	10f5c <MODE2ISR+0xab4>
		else if(asc == 'Y' || asc == ','){ RX_array1[RX_in] = 13; }
   10f4c:	e3530059 	cmp	r3, #89	; 0x59
   10f50:	1353002c 	cmpne	r3, #44	; 0x2c
   10f54:	1a000002 	bne	10f64 <MODE2ISR+0xabc>
   10f58:	e3a0c00d 	mov	ip, #13
   10f5c:	e59f1184 	ldr	r1, [pc, #388]	; 110e8 <MODE2ISR+0xc40>
   10f60:	e7c1c840 	strb	ip, [r1, r0, asr #16]
		RX_in++;
   10f64:	e2822001 	add	r2, r2, #1
   10f68:	e1a02802 	lsl	r2, r2, #16
   10f6c:	e1a02822 	lsr	r2, r2, #16
   10f70:	e59f1164 	ldr	r1, [pc, #356]	; 110dc <MODE2ISR+0xc34>

		if(RX_in == 512) log_array1 = 1;
   10f74:	e3520c02 	cmp	r2, #512	; 0x200
	}
	if(RX_in < 512)
	{
		if(asc == 'N') { RX_array1[RX_in] = '$'; }
		else if(asc == 'Y' || asc == ','){ RX_array1[RX_in] = 13; }
		RX_in++;
   10f78:	e1c120b0 	strh	r2, [r1]

		if(RX_in == 512) log_array1 = 1;
   10f7c:	03a02001 	moveq	r2, #1
   10f80:	05c12002 	strbeq	r2, [r1, #2]
   10f84:	ea000015 	b	10fe0 <MODE2ISR+0xb38>
	}
	else if(RX_in >= 512)
	{
		
		if(asc == 'N') RX_array2[RX_in - 512] = '$';
   10f88:	e353004e 	cmp	r3, #78	; 0x4e
   10f8c:	059f0150 	ldreq	r0, [pc, #336]	; 110e4 <MODE2ISR+0xc3c>
   10f90:	00801001 	addeq	r1, r0, r1
   10f94:	03a00024 	moveq	r0, #36	; 0x24
   10f98:	0a000005 	beq	10fb4 <MODE2ISR+0xb0c>
		else if(asc == 'Y' || asc == ','){ RX_array2[RX_in - 512] = 13; }
   10f9c:	e3530059 	cmp	r3, #89	; 0x59
   10fa0:	1353002c 	cmpne	r3, #44	; 0x2c
   10fa4:	1a000003 	bne	10fb8 <MODE2ISR+0xb10>
   10fa8:	e59f0134 	ldr	r0, [pc, #308]	; 110e4 <MODE2ISR+0xc3c>
   10fac:	e0801001 	add	r1, r0, r1
   10fb0:	e3a0000d 	mov	r0, #13
   10fb4:	e5410200 	strb	r0, [r1, #-512]	; 0xfffffe00
		RX_in++;
   10fb8:	e2822001 	add	r2, r2, #1
   10fbc:	e1a02802 	lsl	r2, r2, #16
   10fc0:	e1a02822 	lsr	r2, r2, #16
   10fc4:	e59f1110 	ldr	r1, [pc, #272]	; 110dc <MODE2ISR+0xc34>
		
		if(RX_in == 1024)
   10fc8:	e3520b01 	cmp	r2, #1024	; 0x400
	else if(RX_in >= 512)
	{
		
		if(asc == 'N') RX_array2[RX_in - 512] = '$';
		else if(asc == 'Y' || asc == ','){ RX_array2[RX_in - 512] = 13; }
		RX_in++;
   10fcc:	e1c120b0 	strh	r2, [r1]
		
		if(RX_in == 1024)
		{
			log_array2 = 1;
   10fd0:	03a02001 	moveq	r2, #1
   10fd4:	05c12003 	strbeq	r2, [r1, #3]
			RX_in = 0;
   10fd8:	03a02000 	moveq	r2, #0
   10fdc:	01c120b0 	strheq	r2, [r1]
		}
	}
	if(RX_in < 512)
   10fe0:	e59f20f4 	ldr	r2, [pc, #244]	; 110dc <MODE2ISR+0xc34>
   10fe4:	e1d220b0 	ldrh	r2, [r2]
   10fe8:	e1a00802 	lsl	r0, r2, #16
   10fec:	e1a01840 	asr	r1, r0, #16
   10ff0:	e3510c02 	cmp	r1, #512	; 0x200
   10ff4:	aa000011 	bge	11040 <MODE2ISR+0xb98>
	{
		if(asc == 'N') RX_array1[RX_in] = '$';
   10ff8:	e353004e 	cmp	r3, #78	; 0x4e
   10ffc:	03a01024 	moveq	r1, #36	; 0x24
   11000:	0a000003 	beq	11014 <MODE2ISR+0xb6c>
		else if(asc == 'Y' || asc == ','){ RX_array1[RX_in] = 10; }
   11004:	e3530059 	cmp	r3, #89	; 0x59
   11008:	1353002c 	cmpne	r3, #44	; 0x2c
   1100c:	1a000002 	bne	1101c <MODE2ISR+0xb74>
   11010:	e3a0100a 	mov	r1, #10
   11014:	e59f30cc 	ldr	r3, [pc, #204]	; 110e8 <MODE2ISR+0xc40>
   11018:	e7c31840 	strb	r1, [r3, r0, asr #16]
		RX_in++;
   1101c:	e2822001 	add	r2, r2, #1
   11020:	e1a02802 	lsl	r2, r2, #16
   11024:	e1a02822 	lsr	r2, r2, #16
   11028:	e59f30ac 	ldr	r3, [pc, #172]	; 110dc <MODE2ISR+0xc34>

		if(RX_in == 512) log_array1 = 1;
   1102c:	e3520c02 	cmp	r2, #512	; 0x200
	}
	if(RX_in < 512)
	{
		if(asc == 'N') RX_array1[RX_in] = '$';
		else if(asc == 'Y' || asc == ','){ RX_array1[RX_in] = 10; }
		RX_in++;
   11030:	e1c320b0 	strh	r2, [r3]

		if(RX_in == 512) log_array1 = 1;
   11034:	03a02001 	moveq	r2, #1
   11038:	05c32002 	strbeq	r2, [r3, #2]
   1103c:	ea000015 	b	11098 <MODE2ISR+0xbf0>
	}
	else if(RX_in >= 512)
	{
		
		if(asc == 'N') RX_array2[RX_in - 512] = '$';
   11040:	e353004e 	cmp	r3, #78	; 0x4e
   11044:	059f3098 	ldreq	r3, [pc, #152]	; 110e4 <MODE2ISR+0xc3c>
   11048:	00831001 	addeq	r1, r3, r1
   1104c:	03a03024 	moveq	r3, #36	; 0x24
   11050:	0a000005 	beq	1106c <MODE2ISR+0xbc4>
		else if(asc == 'Y' || asc == ','){ RX_array2[RX_in - 512] = 10; }
   11054:	e3530059 	cmp	r3, #89	; 0x59
   11058:	1353002c 	cmpne	r3, #44	; 0x2c
   1105c:	1a000003 	bne	11070 <MODE2ISR+0xbc8>
   11060:	e59f307c 	ldr	r3, [pc, #124]	; 110e4 <MODE2ISR+0xc3c>
   11064:	e0831001 	add	r1, r3, r1
   11068:	e3a0300a 	mov	r3, #10
   1106c:	e5413200 	strb	r3, [r1, #-512]	; 0xfffffe00
		RX_in++;
   11070:	e2822001 	add	r2, r2, #1
   11074:	e1a02802 	lsl	r2, r2, #16
   11078:	e1a02822 	lsr	r2, r2, #16
   1107c:	e59f3058 	ldr	r3, [pc, #88]	; 110dc <MODE2ISR+0xc34>
		
		if(RX_in == 1024)
   11080:	e3520b01 	cmp	r2, #1024	; 0x400
	else if(RX_in >= 512)
	{
		
		if(asc == 'N') RX_array2[RX_in - 512] = '$';
		else if(asc == 'Y' || asc == ','){ RX_array2[RX_in - 512] = 10; }
		RX_in++;
   11084:	e1c320b0 	strh	r2, [r3]
		
		if(RX_in == 1024)
		{
			log_array2 = 1;
   11088:	03a02001 	moveq	r2, #1
   1108c:	05c32003 	strbeq	r2, [r3, #3]
			RX_in = 0;
   11090:	03a02000 	moveq	r2, #0
   11094:	01c320b0 	strheq	r2, [r3]
		}
	}

	VICVectAddr= 0;
   11098:	e3a02000 	mov	r2, #0
   1109c:	e3e03000 	mvn	r3, #0
   110a0:	e5032fcf 	str	r2, [r3, #-4047]	; 0xfffff031
}
   110a4:	e28dd038 	add	sp, sp, #56	; 0x38
   110a8:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   110ac:	e12fff1e 	bx	lr
   110b0:	e0004000 	.word	0xe0004000
   110b4:	40000000 	.word	0x40000000
   110b8:	e0060000 	.word	0xe0060000
   110bc:	0020ff08 	.word	0x0020ff08
   110c0:	0000ffc0 	.word	0x0000ffc0
   110c4:	e0034000 	.word	0xe0034000
   110c8:	0020ff04 	.word	0x0020ff04
   110cc:	0020ff02 	.word	0x0020ff02
   110d0:	0020ff10 	.word	0x0020ff10
   110d4:	0020ff80 	.word	0x0020ff80
   110d8:	0020ff40 	.word	0x0020ff40
   110dc:	40000018 	.word	0x40000018
   110e0:	000001ff 	.word	0x000001ff
   110e4:	40000360 	.word	0x40000360
   110e8:	40000664 	.word	0x40000664

000110ec <Initialize>:
 ******************************************************/

#define PLOCK 0x400

void Initialize(void)
{
   110ec:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	rprintf_devopen(putc_serial0);
   110f0:	e59f004c 	ldr	r0, [pc, #76]	; 11144 <Initialize+0x58>
   110f4:	eb000522 	bl	12584 <rprintf_devopen>
	
	PINSEL0 = 0xCF351505;
   110f8:	e59f3048 	ldr	r3, [pc, #72]	; 11148 <Initialize+0x5c>
   110fc:	e59f2048 	ldr	r2, [pc, #72]	; 1114c <Initialize+0x60>
   11100:	e5832000 	str	r2, [r3]
	PINSEL1 = 0x15441801;
   11104:	e59f2044 	ldr	r2, [pc, #68]	; 11150 <Initialize+0x64>
   11108:	e5832004 	str	r2, [r3, #4]
	IODIR0 |= 0x00000884;
   1110c:	e2433901 	sub	r3, r3, #16384	; 0x4000
   11110:	e5932008 	ldr	r2, [r3, #8]
   11114:	e3822d22 	orr	r2, r2, #2176	; 0x880
   11118:	e3822004 	orr	r2, r2, #4
   1111c:	e5832008 	str	r2, [r3, #8]
	IOSET0 = 0x00000080;
   11120:	e3a02080 	mov	r2, #128	; 0x80
   11124:	e5832004 	str	r2, [r3, #4]

	S0SPCR = 0x08;  // SPI clk to be pclk/8
   11128:	e2433902 	sub	r3, r3, #32768	; 0x8000
   1112c:	e3a02008 	mov	r2, #8
   11130:	e5c32000 	strb	r2, [r3]
	S0SPCR = 0x30;  // master, msb, first clk edge, active high, no ints
   11134:	e3a02030 	mov	r2, #48	; 0x30
   11138:	e5c32000 	strb	r2, [r3]

}
   1113c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   11140:	e12fff1e 	bx	lr
   11144:	00012b64 	.word	0x00012b64
   11148:	e002c000 	.word	0xe002c000
   1114c:	cf351505 	.word	0xcf351505
   11150:	15441801 	.word	0x15441801

00011154 <feed>:

void feed(void)
{
	PLLFEED=0xAA;
   11154:	e59f3010 	ldr	r3, [pc, #16]	; 1116c <feed+0x18>
   11158:	e3e02055 	mvn	r2, #85	; 0x55
   1115c:	e5c3208c 	strb	r2, [r3, #140]	; 0x8c
	PLLFEED=0x55;
   11160:	e3a02055 	mov	r2, #85	; 0x55
   11164:	e5c3208c 	strb	r2, [r3, #140]	; 0x8c
   11168:	e12fff1e 	bx	lr
   1116c:	e01fc000 	.word	0xe01fc000

00011170 <FIQ_Routine>:

	VICVectAddr= 0;
}

void FIQ_Routine(void)
{
   11170:	e92d000c 	push	{r2, r3}
		if(onoff){ IOCLR0 = 0x00000800; } // On
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
   11174:	e59f301c 	ldr	r3, [pc, #28]	; 11198 <FIQ_Routine+0x28>
   11178:	e3a02004 	mov	r2, #4
   1117c:	e583200c 	str	r2, [r3, #12]
		else { IOSET0 = 0x00000004; } // Off
   11180:	e5832004 	str	r2, [r3, #4]
	int j;

	stat(0,ON);
	for(j = 0; j < 5000000; j++);
	stat(0,OFF);
	a = U0RBR;
   11184:	e2433907 	sub	r3, r3, #114688	; 0x1c000
   11188:	e5d32000 	ldrb	r2, [r3]

	a = U0IIR;  // have to read this to clear the interrupt
   1118c:	e5d33008 	ldrb	r3, [r3, #8]
}
   11190:	e8bd000c 	pop	{r2, r3}
   11194:	e25ef004 	subs	pc, lr, #4
   11198:	e0028000 	.word	0xe0028000

0001119c <SWI_Routine>:

void SWI_Routine(void)
{
   1119c:	eafffffe 	b	1119c <SWI_Routine>

000111a0 <UNDEF_Routine>:
	while(1);
}

void UNDEF_Routine(void)
{
   111a0:	e92d000c 	push	{r2, r3}
		if(onoff){ IOCLR0 = 0x00000800; } // On
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
   111a4:	e59f300c 	ldr	r3, [pc, #12]	; 111b8 <UNDEF_Routine+0x18>
   111a8:	e3a02004 	mov	r2, #4
   111ac:	e583200c 	str	r2, [r3, #12]
}

void UNDEF_Routine(void)
{
	stat(0,ON);
}
   111b0:	e8bd000c 	pop	{r2, r3}
   111b4:	e1b0f00e 	movs	pc, lr
   111b8:	e0028000 	.word	0xe0028000

000111bc <setup_uart0>:

void setup_uart0(int newbaud, char want_ints)
{
	baud = newbaud;
   111bc:	e59f3160 	ldr	r3, [pc, #352]	; 11324 <setup_uart0+0x168>
{
	stat(0,ON);
}

void setup_uart0(int newbaud, char want_ints)
{
   111c0:	e92d4070 	push	{r4, r5, r6, lr}
	baud = newbaud;
   111c4:	e5830010 	str	r0, [r3, #16]
	U0LCR = 0x83;   // 8 bits, no parity, 1 stop bit, DLAB = 1
   111c8:	e59f3158 	ldr	r3, [pc, #344]	; 11328 <setup_uart0+0x16c>
   111cc:	e3e0207c 	mvn	r2, #124	; 0x7c
	
	if(baud == 1200)
   111d0:	e3500e4b 	cmp	r0, #1200	; 0x4b0
}

void setup_uart0(int newbaud, char want_ints)
{
	baud = newbaud;
	U0LCR = 0x83;   // 8 bits, no parity, 1 stop bit, DLAB = 1
   111d4:	e5c3200c 	strb	r2, [r3, #12]
{
	stat(0,ON);
}

void setup_uart0(int newbaud, char want_ints)
{
   111d8:	e20140ff 	and	r4, r1, #255	; 0xff
	baud = newbaud;
	U0LCR = 0x83;   // 8 bits, no parity, 1 stop bit, DLAB = 1
	
	if(baud == 1200)
	{
		U0DLM = 0x0C;
   111dc:	03a0200c 	moveq	r2, #12
void setup_uart0(int newbaud, char want_ints)
{
	baud = newbaud;
	U0LCR = 0x83;   // 8 bits, no parity, 1 stop bit, DLAB = 1
	
	if(baud == 1200)
   111e0:	0a000002 	beq	111f0 <setup_uart0+0x34>
	{
		U0DLM = 0x0C;
		U0DLL = 0x00;
	}
	else if(baud == 2400)
   111e4:	e3500e96 	cmp	r0, #2400	; 0x960
   111e8:	1a000003 	bne	111fc <setup_uart0+0x40>
	{
		U0DLM = 0x06;
   111ec:	e3a02006 	mov	r2, #6
   111f0:	e5c32004 	strb	r2, [r3, #4]
		U0DLL = 0x00;
   111f4:	e3a02000 	mov	r2, #0
   111f8:	ea00001c 	b	11270 <setup_uart0+0xb4>
	}
	else if(baud == 4800)
   111fc:	e3500d4b 	cmp	r0, #4800	; 0x12c0
	{
		U0DLM = 0x03;
   11200:	03a02003 	moveq	r2, #3
	else if(baud == 2400)
	{
		U0DLM = 0x06;
		U0DLL = 0x00;
	}
	else if(baud == 4800)
   11204:	0afffff9 	beq	111f0 <setup_uart0+0x34>
	{
		U0DLM = 0x03;
		U0DLL = 0x00;
	}
	else if(baud == 9600)
   11208:	e3500d96 	cmp	r0, #9600	; 0x2580
	{
		U0DLM = 0x01;
   1120c:	03a02001 	moveq	r2, #1
   11210:	05c32004 	strbeq	r2, [r3, #4]
		U0DLL = 0x80;
   11214:	03e0207f 	mvneq	r2, #127	; 0x7f
	else if(baud == 4800)
	{
		U0DLM = 0x03;
		U0DLL = 0x00;
	}
	else if(baud == 9600)
   11218:	0a000014 	beq	11270 <setup_uart0+0xb4>
	{
		U0DLM = 0x01;
		U0DLL = 0x80;
	}
	else if(baud == 19200)
   1121c:	e3500c4b 	cmp	r0, #19200	; 0x4b00
	{
		U0DLM = 0x00;
   11220:	03a02000 	moveq	r2, #0
   11224:	05c32004 	strbeq	r2, [r3, #4]
		U0DLL = 0xC0;
   11228:	03e0203f 	mvneq	r2, #63	; 0x3f
	else if(baud == 9600)
	{
		U0DLM = 0x01;
		U0DLL = 0x80;
	}
	else if(baud == 19200)
   1122c:	0a00000f 	beq	11270 <setup_uart0+0xb4>
	{
		U0DLM = 0x00;
		U0DLL = 0xC0;
	}
	else if(baud == 38400)
   11230:	e3500c96 	cmp	r0, #38400	; 0x9600
	{
		U0DLM = 0x00;
   11234:	03a02000 	moveq	r2, #0
   11238:	05c32004 	strbeq	r2, [r3, #4]
		U0DLL = 0x60;
   1123c:	03a02060 	moveq	r2, #96	; 0x60
	else if(baud == 19200)
	{
		U0DLM = 0x00;
		U0DLL = 0xC0;
	}
	else if(baud == 38400)
   11240:	0a00000a 	beq	11270 <setup_uart0+0xb4>
	{
		U0DLM = 0x00;
		U0DLL = 0x60;
	}
	else if(baud == 57600)
   11244:	e3500ce1 	cmp	r0, #57600	; 0xe100
	{
		U0DLM = 0x00;
   11248:	03a02000 	moveq	r2, #0
   1124c:	05c32004 	strbeq	r2, [r3, #4]
		U0DLL = 0x40;
   11250:	03a02040 	moveq	r2, #64	; 0x40
	else if(baud == 38400)
	{
		U0DLM = 0x00;
		U0DLL = 0x60;
	}
	else if(baud == 57600)
   11254:	0a000005 	beq	11270 <setup_uart0+0xb4>
	{
		U0DLM = 0x00;
		U0DLL = 0x40;
	}
	else if(baud == 115200)
   11258:	e59f20cc 	ldr	r2, [pc, #204]	; 1132c <setup_uart0+0x170>
   1125c:	e1500002 	cmp	r0, r2
   11260:	1a000003 	bne	11274 <setup_uart0+0xb8>
	{
		U0DLM = 0x00;
   11264:	e3a02000 	mov	r2, #0
   11268:	e5c32004 	strb	r2, [r3, #4]
		U0DLL = 0x20;
   1126c:	e3a02020 	mov	r2, #32
   11270:	e5c32000 	strb	r2, [r3]
	}

	U0FCR = 0x01;
   11274:	e3a06001 	mov	r6, #1
	U0LCR = 0x03;   
   11278:	e3a02003 	mov	r2, #3

	if(want_ints == 1)
   1127c:	e1540006 	cmp	r4, r6
	{
		U0DLM = 0x00;
		U0DLL = 0x20;
	}

	U0FCR = 0x01;
   11280:	e5c36008 	strb	r6, [r3, #8]
   11284:	e59f509c 	ldr	r5, [pc, #156]	; 11328 <setup_uart0+0x16c>
	U0LCR = 0x03;   
   11288:	e5c3200c 	strb	r2, [r3, #12]

	if(want_ints == 1)
   1128c:	1a00000c 	bne	112c4 <setup_uart0+0x108>
	{
		enableIRQ();
   11290:	eb001287 	bl	15cb4 <enableIRQ>
		VICIntSelect &= ~0x00000040;
   11294:	e3e03000 	mvn	r3, #0
   11298:	e5132ff3 	ldr	r2, [r3, #-4083]	; 0xfffff00d
   1129c:	e3c22040 	bic	r2, r2, #64	; 0x40
   112a0:	e5032ff3 	str	r2, [r3, #-4083]	; 0xfffff00d
		VICIntEnable |= 0x00000040;
   112a4:	e5132fef 	ldr	r2, [r3, #-4079]	; 0xfffff011
   112a8:	e3822040 	orr	r2, r2, #64	; 0x40
   112ac:	e5032fef 	str	r2, [r3, #-4079]	; 0xfffff011
		VICVectCntl1 = 0x26;
   112b0:	e3a02026 	mov	r2, #38	; 0x26
   112b4:	e5032dfb 	str	r2, [r3, #-3579]	; 0xfffff205
		VICVectAddr1 = (unsigned int)UART0ISR;
   112b8:	e59f2070 	ldr	r2, [pc, #112]	; 11330 <setup_uart0+0x174>
   112bc:	e5032efb 	str	r2, [r3, #-3835]	; 0xfffff105
   112c0:	ea000014 	b	11318 <setup_uart0+0x15c>
		U0IER = 0x01;
	}
	else if(want_ints == 2)
   112c4:	e3540002 	cmp	r4, #2
   112c8:	1a00000d 	bne	11304 <setup_uart0+0x148>
	{
		enableIRQ();
   112cc:	eb001278 	bl	15cb4 <enableIRQ>
		VICIntSelect &= ~0x00000040;
   112d0:	e3e03000 	mvn	r3, #0
   112d4:	e5132ff3 	ldr	r2, [r3, #-4083]	; 0xfffff00d
   112d8:	e3c22040 	bic	r2, r2, #64	; 0x40
   112dc:	e5032ff3 	str	r2, [r3, #-4083]	; 0xfffff00d
		VICIntEnable |= 0x00000040;
   112e0:	e5132fef 	ldr	r2, [r3, #-4079]	; 0xfffff011
   112e4:	e3822040 	orr	r2, r2, #64	; 0x40
   112e8:	e5032fef 	str	r2, [r3, #-4079]	; 0xfffff011
		VICVectCntl2 = 0x26;
   112ec:	e3a02026 	mov	r2, #38	; 0x26
   112f0:	e5032df7 	str	r2, [r3, #-3575]	; 0xfffff209
		VICVectAddr2 = (unsigned int)UART0ISR_2;
   112f4:	e59f2038 	ldr	r2, [pc, #56]	; 11334 <setup_uart0+0x178>
   112f8:	e5032ef7 	str	r2, [r3, #-3831]	; 0xfffff109
		U0IER = 0X01;
   112fc:	e5c56004 	strb	r6, [r5, #4]
   11300:	ea000005 	b	1131c <setup_uart0+0x160>
	}
	else if(want_ints == 0)
   11304:	e3540000 	cmp	r4, #0
   11308:	1a000003 	bne	1131c <setup_uart0+0x160>
	{
		VICIntEnClr = 0x00000040;
   1130c:	e3a02040 	mov	r2, #64	; 0x40
   11310:	e3e03000 	mvn	r3, #0
   11314:	e5032feb 	str	r2, [r3, #-4075]	; 0xfffff015
		U0IER = 0x00;
   11318:	e5c54004 	strb	r4, [r5, #4]
	}
}
   1131c:	e8bd4070 	pop	{r4, r5, r6, lr}
   11320:	e12fff1e 	bx	lr
   11324:	40000000 	.word	0x40000000
   11328:	e000c000 	.word	0xe000c000
   1132c:	0001c200 	.word	0x0001c200
   11330:	000102dc 	.word	0x000102dc
   11334:	0001037c 	.word	0x0001037c

00011338 <stat>:

void stat(int statnum, int onoff)
{
	if(statnum) // Stat 1
   11338:	e3500000 	cmp	r0, #0
   1133c:	e59f3020 	ldr	r3, [pc, #32]	; 11364 <stat+0x2c>
   11340:	0a000002 	beq	11350 <stat+0x18>
	{
		if(onoff){ IOCLR0 = 0x00000800; } // On
   11344:	e3510000 	cmp	r1, #0
   11348:	e3a02b02 	mov	r2, #2048	; 0x800
   1134c:	ea000001 	b	11358 <stat+0x20>
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
   11350:	e3510000 	cmp	r1, #0
   11354:	e3a02004 	mov	r2, #4
   11358:	1583200c 	strne	r2, [r3, #12]
		else { IOSET0 = 0x00000004; } // Off
   1135c:	05832004 	streq	r2, [r3, #4]
   11360:	e12fff1e 	bx	lr
   11364:	e0028000 	.word	0xe0028000

00011368 <AD_conversion>:

void AD_conversion(int regbank)
{
	int temp = 0, temp2;

	if(!regbank) // bank 0
   11368:	e3500000 	cmp	r0, #0
	while(1);
		
}

void AD_conversion(int regbank)
{
   1136c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	int temp = 0, temp2;

	if(!regbank) // bank 0
   11370:	1a00000c 	bne	113a8 <AD_conversion+0x40>
	{
		AD0CR |= 0x01000000; // start conversion
   11374:	e59f3078 	ldr	r3, [pc, #120]	; 113f4 <AD_conversion+0x8c>
   11378:	e5932000 	ldr	r2, [r3]
   1137c:	e3822401 	orr	r2, r2, #16777216	; 0x1000000
   11380:	e5832000 	str	r2, [r3]
		while((temp & 0x80000000) == 0)
		{
			temp = AD0DR;
   11384:	e5932004 	ldr	r2, [r3, #4]
	int temp = 0, temp2;

	if(!regbank) // bank 0
	{
		AD0CR |= 0x01000000; // start conversion
		while((temp & 0x80000000) == 0)
   11388:	e3520000 	cmp	r2, #0
   1138c:	aafffffc 	bge	11384 <AD_conversion+0x1c>
		{
			temp = AD0DR;
		}
		temp &= 0x0000FFC0;
   11390:	e59f1060 	ldr	r1, [pc, #96]	; 113f8 <AD_conversion+0x90>
   11394:	e0021001 	and	r1, r2, r1
		temp2 = temp / 0x00000040;
   11398:	e1a01341 	asr	r1, r1, #6

		AD0CR = 0x00000000;
   1139c:	e3a02000 	mov	r2, #0
   113a0:	e59f304c 	ldr	r3, [pc, #76]	; 113f4 <AD_conversion+0x8c>
   113a4:	ea00000b 	b	113d8 <AD_conversion+0x70>
	}
	else	    // bank 1
	{
		AD1CR |= 0x01000000; // start conversion
   113a8:	e59f304c 	ldr	r3, [pc, #76]	; 113fc <AD_conversion+0x94>
   113ac:	e5932000 	ldr	r2, [r3]
   113b0:	e3822401 	orr	r2, r2, #16777216	; 0x1000000
   113b4:	e5832000 	str	r2, [r3]
		while((temp & 0x80000000) == 0)
		{
			temp = AD1DR;
   113b8:	e5932004 	ldr	r2, [r3, #4]
		AD0CR = 0x00000000;
	}
	else	    // bank 1
	{
		AD1CR |= 0x01000000; // start conversion
		while((temp & 0x80000000) == 0)
   113bc:	e3520000 	cmp	r2, #0
   113c0:	aafffffc 	bge	113b8 <AD_conversion+0x50>
		{
			temp = AD1DR;
		}
		temp &= 0x0000FFC0;
   113c4:	e59f102c 	ldr	r1, [pc, #44]	; 113f8 <AD_conversion+0x90>
		temp2 = temp / 0x00000040;

		AD1CR = 0x00000000;
   113c8:	e59f302c 	ldr	r3, [pc, #44]	; 113fc <AD_conversion+0x94>
		AD1CR |= 0x01000000; // start conversion
		while((temp & 0x80000000) == 0)
		{
			temp = AD1DR;
		}
		temp &= 0x0000FFC0;
   113cc:	e0021001 	and	r1, r2, r1
		temp2 = temp / 0x00000040;
   113d0:	e1a01341 	asr	r1, r1, #6

		AD1CR = 0x00000000;
   113d4:	e3a02000 	mov	r2, #0
   113d8:	e5832000 	str	r2, [r3]
	}

	rprintf("%d", temp2);
   113dc:	e59f001c 	ldr	r0, [pc, #28]	; 11400 <AD_conversion+0x98>
   113e0:	eb00046b 	bl	12594 <rprintf>
	rprintf("   ");
   113e4:	e59f0018 	ldr	r0, [pc, #24]	; 11404 <AD_conversion+0x9c>
   113e8:	eb000469 	bl	12594 <rprintf>
	
}
   113ec:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   113f0:	e12fff1e 	bx	lr
   113f4:	e0034000 	.word	0xe0034000
   113f8:	0000ffc0 	.word	0x0000ffc0
   113fc:	e0060000 	.word	0xe0060000
   11400:	000162f3 	.word	0x000162f3
   11404:	000162f6 	.word	0x000162f6

00011408 <fat_initialize>:

void fat_initialize(void)
{
   11408:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	if(!sd_raw_init())
   1140c:	eb0007fb 	bl	13400 <sd_raw_init>
   11410:	e3500000 	cmp	r0, #0
   11414:	1a000002 	bne	11424 <fat_initialize+0x1c>
	{
		rprintf("SD Init Error\n\r");
   11418:	e59f001c 	ldr	r0, [pc, #28]	; 1143c <fat_initialize+0x34>
   1141c:	eb00045c 	bl	12594 <rprintf>
   11420:	eafffffe 	b	11420 <fat_initialize+0x18>
		while(1);
	}

	if(openroot())
   11424:	eb0005f5 	bl	12c00 <openroot>
   11428:	e3500000 	cmp	r0, #0
	{ 
		rprintf("SD OpenRoot Error\n\r");
   1142c:	159f000c 	ldrne	r0, [pc, #12]	; 11440 <fat_initialize+0x38>
   11430:	1b000457 	blne	12594 <rprintf>
	}
}
   11434:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   11438:	e12fff1e 	bx	lr
   1143c:	000162fa 	.word	0x000162fa
   11440:	0001630a 	.word	0x0001630a

00011444 <delay_ms>:

void delay_ms(int count)
{
	int i;
	count *= 10000;
   11444:	e59f301c 	ldr	r3, [pc, #28]	; 11468 <delay_ms+0x24>
   11448:	e0000093 	mul	r0, r3, r0
	for(i = 0; i < count; i++)
   1144c:	e3a03000 	mov	r3, #0
   11450:	ea000001 	b	1145c <delay_ms+0x18>
		asm volatile ("nop");
   11454:	e1a00000 	nop			; (mov r0, r0)

void delay_ms(int count)
{
	int i;
	count *= 10000;
	for(i = 0; i < count; i++)
   11458:	e2833001 	add	r3, r3, #1
   1145c:	e1530000 	cmp	r3, r0
   11460:	bafffffb 	blt	11454 <delay_ms+0x10>
		asm volatile ("nop");
}
   11464:	e12fff1e 	bx	lr
   11468:	00002710 	.word	0x00002710

0001146c <test>:
	}

}

void test(void)
{
   1146c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}

	rprintf("\n\rLogomatic V2 Test Code:\n\r");
   11470:	e59f00c0 	ldr	r0, [pc, #192]	; 11538 <test+0xcc>
   11474:	eb000446 	bl	12594 <rprintf>
	rprintf("ADC Test will begin in 5 seconds, hit stop button to terminate the test.\r\n\n");
   11478:	e59f00bc 	ldr	r0, [pc, #188]	; 1153c <test+0xd0>
   1147c:	eb000444 	bl	12594 <rprintf>

	delay_ms(5000);
   11480:	e59f00b8 	ldr	r0, [pc, #184]	; 11540 <test+0xd4>
   11484:	ebffffee 	bl	11444 <delay_ms>

	while((IOPIN0 & 0x00000008) == 0x00000008)
   11488:	e59f80b4 	ldr	r8, [pc, #180]	; 11544 <test+0xd8>
	{
		// Get AD1.3
		AD1CR = 0x0020FF08;
   1148c:	e59f40b4 	ldr	r4, [pc, #180]	; 11548 <test+0xdc>
   11490:	e59f60b4 	ldr	r6, [pc, #180]	; 1154c <test+0xe0>
	rprintf("\n\rLogomatic V2 Test Code:\n\r");
	rprintf("ADC Test will begin in 5 seconds, hit stop button to terminate the test.\r\n\n");

	delay_ms(5000);

	while((IOPIN0 & 0x00000008) == 0x00000008)
   11494:	ea000021 	b	11520 <test+0xb4>
		// Get AD1.3
		AD1CR = 0x0020FF08;
		AD_conversion(1);

		// Get AD0.3
		AD0CR = 0x0020FF08;
   11498:	e59f50b0 	ldr	r5, [pc, #176]	; 11550 <test+0xe4>

	while((IOPIN0 & 0x00000008) == 0x00000008)
	{
		// Get AD1.3
		AD1CR = 0x0020FF08;
		AD_conversion(1);
   1149c:	e3a00001 	mov	r0, #1
		// Get AD0.3
		AD0CR = 0x0020FF08;
		AD_conversion(0);
		
		// Get AD0.2
		AD0CR = 0x0020FF04;
   114a0:	e59f70ac 	ldr	r7, [pc, #172]	; 11554 <test+0xe8>
	delay_ms(5000);

	while((IOPIN0 & 0x00000008) == 0x00000008)
	{
		// Get AD1.3
		AD1CR = 0x0020FF08;
   114a4:	e5846000 	str	r6, [r4]
		AD_conversion(1);
   114a8:	ebffffae 	bl	11368 <AD_conversion>

		// Get AD0.3
		AD0CR = 0x0020FF08;
		AD_conversion(0);
   114ac:	e3a00000 	mov	r0, #0
		// Get AD1.3
		AD1CR = 0x0020FF08;
		AD_conversion(1);

		// Get AD0.3
		AD0CR = 0x0020FF08;
   114b0:	e5856000 	str	r6, [r5]
		AD_conversion(0);
   114b4:	ebffffab 	bl	11368 <AD_conversion>
		
		// Get AD0.2
		AD0CR = 0x0020FF04;
		AD_conversion(0);
   114b8:	e3a00000 	mov	r0, #0
		// Get AD0.3
		AD0CR = 0x0020FF08;
		AD_conversion(0);
		
		// Get AD0.2
		AD0CR = 0x0020FF04;
   114bc:	e5857000 	str	r7, [r5]
		AD_conversion(0);
   114c0:	ebffffa8 	bl	11368 <AD_conversion>

		// Get AD0.1
		AD0CR = 0x0020FF02;
   114c4:	e59f308c 	ldr	r3, [pc, #140]	; 11558 <test+0xec>
		AD_conversion(0);
   114c8:	e3a00000 	mov	r0, #0
		// Get AD0.2
		AD0CR = 0x0020FF04;
		AD_conversion(0);

		// Get AD0.1
		AD0CR = 0x0020FF02;
   114cc:	e5853000 	str	r3, [r5]
		AD_conversion(0);
   114d0:	ebffffa4 	bl	11368 <AD_conversion>

		// Get AD1.2
		AD1CR = 0x0020FF04;
		AD_conversion(1);
   114d4:	e3a00001 	mov	r0, #1
		// Get AD0.1
		AD0CR = 0x0020FF02;
		AD_conversion(0);

		// Get AD1.2
		AD1CR = 0x0020FF04;
   114d8:	e5847000 	str	r7, [r4]
		AD_conversion(1);
   114dc:	ebffffa1 	bl	11368 <AD_conversion>
		
		// Get AD0.4
		AD0CR = 0x0020FF10;
   114e0:	e59f3074 	ldr	r3, [pc, #116]	; 1155c <test+0xf0>
		AD_conversion(0);
   114e4:	e3a00000 	mov	r0, #0
		// Get AD1.2
		AD1CR = 0x0020FF04;
		AD_conversion(1);
		
		// Get AD0.4
		AD0CR = 0x0020FF10;
   114e8:	e5853000 	str	r3, [r5]
		AD_conversion(0);
   114ec:	ebffff9d 	bl	11368 <AD_conversion>

		// Get AD1.7
		AD1CR = 0x0020FF80;
   114f0:	e59f3068 	ldr	r3, [pc, #104]	; 11560 <test+0xf4>
		AD_conversion(1);
   114f4:	e3a00001 	mov	r0, #1
		// Get AD0.4
		AD0CR = 0x0020FF10;
		AD_conversion(0);

		// Get AD1.7
		AD1CR = 0x0020FF80;
   114f8:	e5843000 	str	r3, [r4]
		AD_conversion(1);
   114fc:	ebffff99 	bl	11368 <AD_conversion>

		// Get AD1.6
		AD1CR = 0x0020FF40;
   11500:	e59f305c 	ldr	r3, [pc, #92]	; 11564 <test+0xf8>
		AD_conversion(1);
   11504:	e3a00001 	mov	r0, #1
		// Get AD1.7
		AD1CR = 0x0020FF80;
		AD_conversion(1);

		// Get AD1.6
		AD1CR = 0x0020FF40;
   11508:	e5843000 	str	r3, [r4]
		AD_conversion(1);
   1150c:	ebffff95 	bl	11368 <AD_conversion>

		delay_ms(1000);
   11510:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   11514:	ebffffca 	bl	11444 <delay_ms>
		rprintf("\n\r");
   11518:	e59f0048 	ldr	r0, [pc, #72]	; 11568 <test+0xfc>
   1151c:	eb00041c 	bl	12594 <rprintf>
	rprintf("\n\rLogomatic V2 Test Code:\n\r");
	rprintf("ADC Test will begin in 5 seconds, hit stop button to terminate the test.\r\n\n");

	delay_ms(5000);

	while((IOPIN0 & 0x00000008) == 0x00000008)
   11520:	e5983000 	ldr	r3, [r8]
   11524:	e3130008 	tst	r3, #8
   11528:	1affffda 	bne	11498 <test+0x2c>

		delay_ms(1000);
		rprintf("\n\r");
	}

	rprintf("\n\rTest complete, locking up...\n\r");
   1152c:	e59f0038 	ldr	r0, [pc, #56]	; 1156c <test+0x100>
   11530:	eb000417 	bl	12594 <rprintf>
   11534:	eafffffe 	b	11534 <test+0xc8>
   11538:	0001631e 	.word	0x0001631e
   1153c:	0001633a 	.word	0x0001633a
   11540:	00001388 	.word	0x00001388
   11544:	e0028000 	.word	0xe0028000
   11548:	e0060000 	.word	0xe0060000
   1154c:	0020ff08 	.word	0x0020ff08
   11550:	e0034000 	.word	0xe0034000
   11554:	0020ff04 	.word	0x0020ff04
   11558:	0020ff02 	.word	0x0020ff02
   1155c:	0020ff10 	.word	0x0020ff10
   11560:	0020ff80 	.word	0x0020ff80
   11564:	0020ff40 	.word	0x0020ff40
   11568:	00016591 	.word	0x00016591
   1156c:	00016386 	.word	0x00016386

00011570 <Log_init>:
		else { IOSET0 = 0x00000004; } // Off
	}
}

void Log_init(void)
{
   11570:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int x, mark = 0, ind = 0;
	char temp, temp2 = 0, safety = 0;
//	signed char handle;

	if(root_file_exists("LOGCON.txt"))
   11574:	e59f0508 	ldr	r0, [pc, #1288]	; 11a84 <Log_init+0x514>
   11578:	eb0005dc 	bl	12cf0 <root_file_exists>
   1157c:	e3500000 	cmp	r0, #0
   11580:	e59f4500 	ldr	r4, [pc, #1280]	; 11a88 <Log_init+0x518>
	{
		//rprintf("\n\rFound LOGcon.txt\n");
		fd = root_open("LOGCON.txt");
   11584:	e59f04f8 	ldr	r0, [pc, #1272]	; 11a84 <Log_init+0x514>
{
	int x, mark = 0, ind = 0;
	char temp, temp2 = 0, safety = 0;
//	signed char handle;

	if(root_file_exists("LOGCON.txt"))
   11588:	0a00000c 	beq	115c0 <Log_init+0x50>
	{
		//rprintf("\n\rFound LOGcon.txt\n");
		fd = root_open("LOGCON.txt");
   1158c:	eb0005f6 	bl	12d6c <root_open>
		stringSize = fat_read_file(fd, (unsigned char *)stringBuf, 512);
   11590:	e59f54f4 	ldr	r5, [pc, #1268]	; 11a8c <Log_init+0x51c>
   11594:	e3a02c02 	mov	r2, #512	; 0x200
   11598:	e1a01005 	mov	r1, r5
//	signed char handle;

	if(root_file_exists("LOGCON.txt"))
	{
		//rprintf("\n\rFound LOGcon.txt\n");
		fd = root_open("LOGCON.txt");
   1159c:	e5840000 	str	r0, [r4]
		stringSize = fat_read_file(fd, (unsigned char *)stringBuf, 512);
   115a0:	eb000d6d 	bl	14b5c <fat_read_file>
   115a4:	e59f34e4 	ldr	r3, [pc, #1252]	; 11a90 <Log_init+0x520>
   115a8:	e5830000 	str	r0, [r3]
		stringBuf[stringSize] = '\0';
   115ac:	e3a03000 	mov	r3, #0
   115b0:	e7c53000 	strb	r3, [r5, r0]
		fat_close_file(fd);
   115b4:	e5940000 	ldr	r0, [r4]
   115b8:	eb000d63 	bl	14b4c <fat_close_file>
   115bc:	ea00001f 	b	11640 <Log_init+0xd0>
	}
	else
	{
		//rprintf("Couldn't find LOGcon.txt, creating...\n");
		fd = root_open_new("LOGCON.txt");
   115c0:	eb0005d7 	bl	12d24 <root_open_new>
		if(fd == NULL)
   115c4:	e3500000 	cmp	r0, #0
		fat_close_file(fd);
	}
	else
	{
		//rprintf("Couldn't find LOGcon.txt, creating...\n");
		fd = root_open_new("LOGCON.txt");
   115c8:	e1a05000 	mov	r5, r0
   115cc:	e5840000 	str	r0, [r4]
		if(fd == NULL)
   115d0:	1a00000e 	bne	11610 <Log_init+0xa0>
		{
		 	rprintf("Error creating LOGCON.txt, locking up...\n\r");
   115d4:	e59f04b8 	ldr	r0, [pc, #1208]	; 11a94 <Log_init+0x524>
   115d8:	eb0003ed 	bl	12594 <rprintf>
		if(onoff){ IOCLR0 = 0x00000800; } // On
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
   115dc:	e3a05004 	mov	r5, #4
   115e0:	e59f44b0 	ldr	r4, [pc, #1200]	; 11a98 <Log_init+0x528>
   115e4:	e1a07005 	mov	r7, r5
		{
		 	rprintf("Error creating LOGCON.txt, locking up...\n\r");
		 	while(1)
			{
				stat(0,ON);
				delay_ms(50);
   115e8:	e3a00032 	mov	r0, #50	; 0x32

void stat(int statnum, int onoff)
{
	if(statnum) // Stat 1
	{
		if(onoff){ IOCLR0 = 0x00000800; } // On
   115ec:	e3a06b02 	mov	r6, #2048	; 0x800
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
   115f0:	e584700c 	str	r7, [r4, #12]
		{
		 	rprintf("Error creating LOGCON.txt, locking up...\n\r");
		 	while(1)
			{
				stat(0,ON);
				delay_ms(50);
   115f4:	ebffff92 	bl	11444 <delay_ms>
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
		else { IOSET0 = 0x00000004; } // Off
   115f8:	e5845004 	str	r5, [r4, #4]
			{
				stat(0,ON);
				delay_ms(50);
				stat(0,OFF);
				stat(1,ON);
				delay_ms(50);
   115fc:	e3a00032 	mov	r0, #50	; 0x32

void stat(int statnum, int onoff)
{
	if(statnum) // Stat 1
	{
		if(onoff){ IOCLR0 = 0x00000800; } // On
   11600:	e584600c 	str	r6, [r4, #12]
			{
				stat(0,ON);
				delay_ms(50);
				stat(0,OFF);
				stat(1,ON);
				delay_ms(50);
   11604:	ebffff8e 	bl	11444 <delay_ms>
void stat(int statnum, int onoff)
{
	if(statnum) // Stat 1
	{
		if(onoff){ IOCLR0 = 0x00000800; } // On
		else { IOSET0 = 0x00000800; } // Off
   11608:	e5846004 	str	r6, [r4, #4]
   1160c:	eafffff5 	b	115e8 <Log_init+0x78>
				delay_ms(50);
				stat(1,OFF);
			}
		}

		strcpy(stringBuf, "MODE = 0\r\nASCII = N\r\nBaud = 4\r\nFrequency = 100\r\nTrigger Character = $\r\nText Frame = 100\r\nAD0.3 = N\r\nAD0.2 = N\r\nAD0.1 = N\r\nAD0.4 = N\r\nAD1.7 = N\r\nAD1.6 = N\r\nAD1.2 = N\r\nAD1.3 = N\r\nSaftey On = Y\r\n");
   11610:	e59f1484 	ldr	r1, [pc, #1156]	; 11a9c <Log_init+0x52c>
   11614:	e59f0470 	ldr	r0, [pc, #1136]	; 11a8c <Log_init+0x51c>
   11618:	eb0011da 	bl	15d88 <strcpy>
		stringSize = strlen(stringBuf);
   1161c:	e59f0468 	ldr	r0, [pc, #1128]	; 11a8c <Log_init+0x51c>
   11620:	eb0011de 	bl	15da0 <strlen>
   11624:	e59f3464 	ldr	r3, [pc, #1124]	; 11a90 <Log_init+0x520>
   11628:	e1a02000 	mov	r2, r0
   1162c:	e5830000 	str	r0, [r3]
		fat_write_file(fd, (unsigned char*)stringBuf, stringSize);
   11630:	e59f1454 	ldr	r1, [pc, #1108]	; 11a8c <Log_init+0x51c>
   11634:	e1a00005 	mov	r0, r5
   11638:	eb000dab 	bl	14cec <fat_write_file>
		sd_raw_sync();
   1163c:	eb0006cf 	bl	13180 <sd_raw_sync>
		else { IOSET0 = 0x00000004; } // Off
	}
}

void Log_init(void)
{
   11640:	e3a08000 	mov	r8, #0
   11644:	e59f6454 	ldr	r6, [pc, #1108]	; 11aa0 <Log_init+0x530>
   11648:	e1a04008 	mov	r4, r8
   1164c:	e1a07008 	mov	r7, r8
   11650:	e1a0a008 	mov	sl, r8
		stringSize = strlen(stringBuf);
		fat_write_file(fd, (unsigned char*)stringBuf, stringSize);
		sd_raw_sync();
	}

	for(x = 0; x < stringSize; x++)
   11654:	e59fb434 	ldr	fp, [pc, #1076]	; 11a90 <Log_init+0x520>
				if(ad1_7 == 'Y'){ temp2++; }
				rprintf("ad1_7 = %c\n\r",ad1_7);
			}
			else if(ind == 14)
			{
				ad1_6 = stringBuf[mark-2]; // default is 'N'
   11658:	e59f5444 	ldr	r5, [pc, #1092]	; 11aa4 <Log_init+0x534>
				rprintf("trig = %c\n\r",trig);
			}
			else if(ind == 6)
			{
				frame = (stringBuf[mark-2]-48) + (stringBuf[mark-3]-48) * 10 + (stringBuf[mark-4]-48)*100;
				if(frame > 510){ frame = 510; } // up to 510 characters
   1165c:	e59f9444 	ldr	r9, [pc, #1092]	; 11aa8 <Log_init+0x538>
   11660:	ea0000b0 	b	11928 <Log_init+0x3b8>
	}

	for(x = 0; x < stringSize; x++)
	{
		temp = stringBuf[x];
		if(temp == 10)
   11664:	e5f63001 	ldrb	r3, [r6, #1]!
   11668:	e353000a 	cmp	r3, #10
   1166c:	1a0000ac 	bne	11924 <Log_init+0x3b4>
		{
			mark = x;
			ind++;
   11670:	e2877001 	add	r7, r7, #1
			if(ind == 1)
   11674:	e3570001 	cmp	r7, #1
   11678:	1a000006 	bne	11698 <Log_init+0x128>
			{
				mode = stringBuf[mark-2]-48; // 0 = auto uart, 1 = trigger uart, 2 = adc
   1167c:	e5561002 	ldrb	r1, [r6, #-2]
   11680:	e59f3424 	ldr	r3, [pc, #1060]	; 11aac <Log_init+0x53c>
   11684:	e2411030 	sub	r1, r1, #48	; 0x30
   11688:	e20110ff 	and	r1, r1, #255	; 0xff
   1168c:	e5c31005 	strb	r1, [r3, #5]
				rprintf("mode = %d\n\r",mode);
   11690:	e59f0418 	ldr	r0, [pc, #1048]	; 11ab0 <Log_init+0x540>
   11694:	ea0000a1 	b	11920 <Log_init+0x3b0>
			}
			else if(ind == 2)
   11698:	e3570002 	cmp	r7, #2
			{
				asc = stringBuf[mark-2]; // default is 'N'
   1169c:	05561002 	ldrbeq	r1, [r6, #-2]
				rprintf("asc = %c\n\r",asc);
   116a0:	059f040c 	ldreq	r0, [pc, #1036]	; 11ab4 <Log_init+0x544>
				mode = stringBuf[mark-2]-48; // 0 = auto uart, 1 = trigger uart, 2 = adc
				rprintf("mode = %d\n\r",mode);
			}
			else if(ind == 2)
			{
				asc = stringBuf[mark-2]; // default is 'N'
   116a4:	05c51005 	strbeq	r1, [r5, #5]
   116a8:	0a00009c 	beq	11920 <Log_init+0x3b0>
				rprintf("asc = %c\n\r",asc);
			}
			else if(ind == 3)
   116ac:	e3570003 	cmp	r7, #3
   116b0:	1a00001c 	bne	11728 <Log_init+0x1b8>
			{
				if(stringBuf[mark-2] == '1'){ baud = 1200; }
   116b4:	e5563002 	ldrb	r3, [r6, #-2]
   116b8:	e3530031 	cmp	r3, #49	; 0x31
   116bc:	03a03e4b 	moveq	r3, #1200	; 0x4b0
   116c0:	0a000014 	beq	11718 <Log_init+0x1a8>
				else if(stringBuf[mark-2] == '2'){ baud = 2400; }
   116c4:	e3530032 	cmp	r3, #50	; 0x32
   116c8:	03a03e96 	moveq	r3, #2400	; 0x960
   116cc:	0a000011 	beq	11718 <Log_init+0x1a8>
				else if(stringBuf[mark-2] == '3'){ baud = 4800; }
   116d0:	e3530033 	cmp	r3, #51	; 0x33
   116d4:	03a03d4b 	moveq	r3, #4800	; 0x12c0
   116d8:	0a00000e 	beq	11718 <Log_init+0x1a8>
				else if(stringBuf[mark-2] == '4'){ baud = 9600; }
   116dc:	e3530034 	cmp	r3, #52	; 0x34
   116e0:	03a03d96 	moveq	r3, #9600	; 0x2580
   116e4:	0a00000b 	beq	11718 <Log_init+0x1a8>
				else if(stringBuf[mark-2] == '5'){ baud = 19200; }
   116e8:	e3530035 	cmp	r3, #53	; 0x35
   116ec:	03a03c4b 	moveq	r3, #19200	; 0x4b00
   116f0:	0a000008 	beq	11718 <Log_init+0x1a8>
				else if(stringBuf[mark-2] == '6'){ baud = 38400; }
   116f4:	e3530036 	cmp	r3, #54	; 0x36
   116f8:	03a03c96 	moveq	r3, #38400	; 0x9600
   116fc:	0a000005 	beq	11718 <Log_init+0x1a8>
				else if(stringBuf[mark-2] == '7'){ baud = 57600; }
   11700:	e3530037 	cmp	r3, #55	; 0x37
   11704:	03a03ce1 	moveq	r3, #57600	; 0xe100
   11708:	0a000002 	beq	11718 <Log_init+0x1a8>
				else if(stringBuf[mark-2] == '8'){ baud = 115200; }
   1170c:	e3530038 	cmp	r3, #56	; 0x38
   11710:	1a000001 	bne	1171c <Log_init+0x1ac>
   11714:	e59f339c 	ldr	r3, [pc, #924]	; 11ab8 <Log_init+0x548>
   11718:	e5853010 	str	r3, [r5, #16]

				rprintf("baud = %d\n\r",baud);
   1171c:	e59f0398 	ldr	r0, [pc, #920]	; 11abc <Log_init+0x54c>
   11720:	e5951010 	ldr	r1, [r5, #16]
   11724:	ea00007d 	b	11920 <Log_init+0x3b0>
			}
			else if(ind == 4)
   11728:	e3570004 	cmp	r7, #4
   1172c:	1a000017 	bne	11790 <Log_init+0x220>
			{
				freq = (stringBuf[mark-2]-48) + (stringBuf[mark-3]-48) * 10;
   11730:	e5562002 	ldrb	r2, [r6, #-2]
   11734:	e5561003 	ldrb	r1, [r6, #-3]
   11738:	e0232391 	mla	r3, r1, r3, r2
				if((stringBuf[mark-4] >= 48) && (stringBuf[mark-4] < 58))
   1173c:	e5562004 	ldrb	r2, [r6, #-4]
   11740:	e2421030 	sub	r1, r2, #48	; 0x30

				rprintf("baud = %d\n\r",baud);
			}
			else if(ind == 4)
			{
				freq = (stringBuf[mark-2]-48) + (stringBuf[mark-3]-48) * 10;
   11744:	e2433e21 	sub	r3, r3, #528	; 0x210
				if((stringBuf[mark-4] >= 48) && (stringBuf[mark-4] < 58))
   11748:	e3510009 	cmp	r1, #9

				rprintf("baud = %d\n\r",baud);
			}
			else if(ind == 4)
			{
				freq = (stringBuf[mark-2]-48) + (stringBuf[mark-3]-48) * 10;
   1174c:	e5853014 	str	r3, [r5, #20]
				if((stringBuf[mark-4] >= 48) && (stringBuf[mark-4] < 58))
   11750:	8a00000b 	bhi	11784 <Log_init+0x214>
				{
					freq+= (stringBuf[mark-4]-48) * 100;
   11754:	e3a01064 	mov	r1, #100	; 0x64
   11758:	e0223291 	mla	r2, r1, r2, r3
					if((stringBuf[mark-5] >= 48) && (stringBuf[mark-5] < 58)){ freq += (stringBuf[mark-5]-48)*1000; }
   1175c:	e5563005 	ldrb	r3, [r6, #-5]
   11760:	e2431030 	sub	r1, r3, #48	; 0x30
   11764:	e3510009 	cmp	r1, #9
			else if(ind == 4)
			{
				freq = (stringBuf[mark-2]-48) + (stringBuf[mark-3]-48) * 10;
				if((stringBuf[mark-4] >= 48) && (stringBuf[mark-4] < 58))
				{
					freq+= (stringBuf[mark-4]-48) * 100;
   11768:	e2422d4b 	sub	r2, r2, #4800	; 0x12c0
					if((stringBuf[mark-5] >= 48) && (stringBuf[mark-5] < 58)){ freq += (stringBuf[mark-5]-48)*1000; }
   1176c:	93a01ffa 	movls	r1, #1000	; 0x3e8
   11770:	90232391 	mlals	r3, r1, r3, r2
   11774:	92433cbb 	subls	r3, r3, #47872	; 0xbb00
   11778:	92433080 	subls	r3, r3, #128	; 0x80
			else if(ind == 4)
			{
				freq = (stringBuf[mark-2]-48) + (stringBuf[mark-3]-48) * 10;
				if((stringBuf[mark-4] >= 48) && (stringBuf[mark-4] < 58))
				{
					freq+= (stringBuf[mark-4]-48) * 100;
   1177c:	e5852014 	str	r2, [r5, #20]
					if((stringBuf[mark-5] >= 48) && (stringBuf[mark-5] < 58)){ freq += (stringBuf[mark-5]-48)*1000; }
   11780:	95853014 	strls	r3, [r5, #20]
				}
				rprintf("freq = %d\n\r",freq);
   11784:	e59f0334 	ldr	r0, [pc, #820]	; 11ac0 <Log_init+0x550>
   11788:	e5951014 	ldr	r1, [r5, #20]
   1178c:	ea000063 	b	11920 <Log_init+0x3b0>
			}
			else if(ind == 5)
   11790:	e3570005 	cmp	r7, #5
			{
				trig = stringBuf[mark-2]; // default is $
   11794:	05561002 	ldrbeq	r1, [r6, #-2]
				
				rprintf("trig = %c\n\r",trig);
   11798:	059f0324 	ldreq	r0, [pc, #804]	; 11ac4 <Log_init+0x554>
				}
				rprintf("freq = %d\n\r",freq);
			}
			else if(ind == 5)
			{
				trig = stringBuf[mark-2]; // default is $
   1179c:	05c51000 	strbeq	r1, [r5]
   117a0:	0a00005e 	beq	11920 <Log_init+0x3b0>
				
				rprintf("trig = %c\n\r",trig);
			}
			else if(ind == 6)
   117a4:	e3570006 	cmp	r7, #6
   117a8:	1a00000f 	bne	117ec <Log_init+0x27c>
			{
				frame = (stringBuf[mark-2]-48) + (stringBuf[mark-3]-48) * 10 + (stringBuf[mark-4]-48)*100;
   117ac:	e5562002 	ldrb	r2, [r6, #-2]
   117b0:	e5561003 	ldrb	r1, [r6, #-3]
   117b4:	e2422d53 	sub	r2, r2, #5312	; 0x14c0
   117b8:	e2422010 	sub	r2, r2, #16
   117bc:	e0222193 	mla	r2, r3, r1, r2
   117c0:	e5563004 	ldrb	r3, [r6, #-4]
   117c4:	e3a01064 	mov	r1, #100	; 0x64
   117c8:	e0232391 	mla	r3, r1, r3, r2
   117cc:	e1a03803 	lsl	r3, r3, #16
				if(frame > 510){ frame = 510; } // up to 510 characters
   117d0:	e1590843 	cmp	r9, r3, asr #16
   117d4:	e1a02823 	lsr	r2, r3, #16
				
				rprintf("trig = %c\n\r",trig);
			}
			else if(ind == 6)
			{
				frame = (stringBuf[mark-2]-48) + (stringBuf[mark-3]-48) * 10 + (stringBuf[mark-4]-48)*100;
   117d8:	a1c520b2 	strhge	r2, [r5, #2]
				if(frame > 510){ frame = 510; } // up to 510 characters
   117dc:	b1c590b2 	strhlt	r9, [r5, #2]
				rprintf("frame = %d\n\r",frame);
   117e0:	e59f02e0 	ldr	r0, [pc, #736]	; 11ac8 <Log_init+0x558>
   117e4:	e1d510f2 	ldrsh	r1, [r5, #2]
   117e8:	ea00004c 	b	11920 <Log_init+0x3b0>
			}
			else if(ind == 7)
   117ec:	e3570007 	cmp	r7, #7
   117f0:	1a000006 	bne	11810 <Log_init+0x2a0>
			{
				ad1_3 = stringBuf[mark-2]; // default is 'N'
   117f4:	e5561002 	ldrb	r1, [r6, #-2]
				if(ad1_3 == 'Y'){ temp2++; }
   117f8:	e3510059 	cmp	r1, #89	; 0x59
   117fc:	02844001 	addeq	r4, r4, #1
				if(frame > 510){ frame = 510; } // up to 510 characters
				rprintf("frame = %d\n\r",frame);
			}
			else if(ind == 7)
			{
				ad1_3 = stringBuf[mark-2]; // default is 'N'
   11800:	e5c51004 	strb	r1, [r5, #4]
				if(ad1_3 == 'Y'){ temp2++; }
   11804:	020440ff 	andeq	r4, r4, #255	; 0xff
				rprintf("ad1_3 = %c\n\r",ad1_3);
   11808:	e59f02bc 	ldr	r0, [pc, #700]	; 11acc <Log_init+0x55c>
   1180c:	ea000043 	b	11920 <Log_init+0x3b0>
			}
			else if(ind == 8)
   11810:	e3570008 	cmp	r7, #8
   11814:	1a000006 	bne	11834 <Log_init+0x2c4>
			{
				ad0_3 = stringBuf[mark-2]; // default is 'N'
   11818:	e5561002 	ldrb	r1, [r6, #-2]
				if(ad0_3 == 'Y'){ temp2++; }
   1181c:	e3510059 	cmp	r1, #89	; 0x59
   11820:	02844001 	addeq	r4, r4, #1
				if(ad1_3 == 'Y'){ temp2++; }
				rprintf("ad1_3 = %c\n\r",ad1_3);
			}
			else if(ind == 8)
			{
				ad0_3 = stringBuf[mark-2]; // default is 'N'
   11824:	e5c51006 	strb	r1, [r5, #6]
				if(ad0_3 == 'Y'){ temp2++; }
   11828:	020440ff 	andeq	r4, r4, #255	; 0xff
				rprintf("ad0_3 = %c\n\r",ad0_3);
   1182c:	e59f029c 	ldr	r0, [pc, #668]	; 11ad0 <Log_init+0x560>
   11830:	ea00003a 	b	11920 <Log_init+0x3b0>
			}
			else if(ind == 9)
   11834:	e3570009 	cmp	r7, #9
   11838:	1a000006 	bne	11858 <Log_init+0x2e8>
			{
				ad0_2 = stringBuf[mark-2]; // default is 'N'
   1183c:	e5561002 	ldrb	r1, [r6, #-2]
				if(ad0_2 == 'Y'){ temp2++; }
   11840:	e3510059 	cmp	r1, #89	; 0x59
   11844:	02844001 	addeq	r4, r4, #1
				if(ad0_3 == 'Y'){ temp2++; }
				rprintf("ad0_3 = %c\n\r",ad0_3);
			}
			else if(ind == 9)
			{
				ad0_2 = stringBuf[mark-2]; // default is 'N'
   11848:	e5c51007 	strb	r1, [r5, #7]
				if(ad0_2 == 'Y'){ temp2++; }
   1184c:	020440ff 	andeq	r4, r4, #255	; 0xff
				rprintf("ad0_2 = %c\n\r",ad0_2);
   11850:	e59f027c 	ldr	r0, [pc, #636]	; 11ad4 <Log_init+0x564>
   11854:	ea000031 	b	11920 <Log_init+0x3b0>
			}
			else if(ind == 10)
   11858:	e357000a 	cmp	r7, #10
   1185c:	1a000006 	bne	1187c <Log_init+0x30c>
			{
				ad0_1 = stringBuf[mark-2]; // default is 'N'
   11860:	e5561002 	ldrb	r1, [r6, #-2]
				if(ad0_1 == 'Y'){ temp2++; }
   11864:	e3510059 	cmp	r1, #89	; 0x59
   11868:	02844001 	addeq	r4, r4, #1
				if(ad0_2 == 'Y'){ temp2++; }
				rprintf("ad0_2 = %c\n\r",ad0_2);
			}
			else if(ind == 10)
			{
				ad0_1 = stringBuf[mark-2]; // default is 'N'
   1186c:	e5c51008 	strb	r1, [r5, #8]
				if(ad0_1 == 'Y'){ temp2++; }
   11870:	020440ff 	andeq	r4, r4, #255	; 0xff
				rprintf("ad0_1 = %c\n\r",ad0_1);
   11874:	e59f025c 	ldr	r0, [pc, #604]	; 11ad8 <Log_init+0x568>
   11878:	ea000028 	b	11920 <Log_init+0x3b0>
			}
			else if(ind == 11)
   1187c:	e357000b 	cmp	r7, #11
   11880:	1a000006 	bne	118a0 <Log_init+0x330>
			{
				ad1_2 = stringBuf[mark-2]; // default is 'N'
   11884:	e5561002 	ldrb	r1, [r6, #-2]
				if(ad1_2 == 'Y'){ temp2++; }
   11888:	e3510059 	cmp	r1, #89	; 0x59
   1188c:	02844001 	addeq	r4, r4, #1
				if(ad0_1 == 'Y'){ temp2++; }
				rprintf("ad0_1 = %c\n\r",ad0_1);
			}
			else if(ind == 11)
			{
				ad1_2 = stringBuf[mark-2]; // default is 'N'
   11890:	e5c51009 	strb	r1, [r5, #9]
				if(ad1_2 == 'Y'){ temp2++; }
   11894:	020440ff 	andeq	r4, r4, #255	; 0xff
				rprintf("ad1_2 = %c\n\r",ad1_2);
   11898:	e59f023c 	ldr	r0, [pc, #572]	; 11adc <Log_init+0x56c>
   1189c:	ea00001f 	b	11920 <Log_init+0x3b0>
			}
			else if(ind == 12)
   118a0:	e357000c 	cmp	r7, #12
   118a4:	1a000006 	bne	118c4 <Log_init+0x354>
			{
				ad0_4 = stringBuf[mark-2]; // default is 'N'
   118a8:	e5561002 	ldrb	r1, [r6, #-2]
				if(ad0_4 == 'Y'){ temp2++; }
   118ac:	e3510059 	cmp	r1, #89	; 0x59
   118b0:	02844001 	addeq	r4, r4, #1
				if(ad1_2 == 'Y'){ temp2++; }
				rprintf("ad1_2 = %c\n\r",ad1_2);
			}
			else if(ind == 12)
			{
				ad0_4 = stringBuf[mark-2]; // default is 'N'
   118b4:	e5c5100a 	strb	r1, [r5, #10]
				if(ad0_4 == 'Y'){ temp2++; }
   118b8:	020440ff 	andeq	r4, r4, #255	; 0xff
				rprintf("ad0_4 = %c\n\r",ad0_4);
   118bc:	e59f021c 	ldr	r0, [pc, #540]	; 11ae0 <Log_init+0x570>
   118c0:	ea000016 	b	11920 <Log_init+0x3b0>
			}
			else if(ind == 13)
   118c4:	e357000d 	cmp	r7, #13
   118c8:	1a000006 	bne	118e8 <Log_init+0x378>
			{
				ad1_7 = stringBuf[mark-2]; // default is 'N'
   118cc:	e5561002 	ldrb	r1, [r6, #-2]
				if(ad1_7 == 'Y'){ temp2++; }
   118d0:	e3510059 	cmp	r1, #89	; 0x59
   118d4:	02844001 	addeq	r4, r4, #1
				if(ad0_4 == 'Y'){ temp2++; }
				rprintf("ad0_4 = %c\n\r",ad0_4);
			}
			else if(ind == 13)
			{
				ad1_7 = stringBuf[mark-2]; // default is 'N'
   118d8:	e5c5100b 	strb	r1, [r5, #11]
				if(ad1_7 == 'Y'){ temp2++; }
   118dc:	020440ff 	andeq	r4, r4, #255	; 0xff
				rprintf("ad1_7 = %c\n\r",ad1_7);
   118e0:	e59f01fc 	ldr	r0, [pc, #508]	; 11ae4 <Log_init+0x574>
   118e4:	ea00000d 	b	11920 <Log_init+0x3b0>
			}
			else if(ind == 14)
   118e8:	e357000e 	cmp	r7, #14
   118ec:	1a000006 	bne	1190c <Log_init+0x39c>
			{
				ad1_6 = stringBuf[mark-2]; // default is 'N'
   118f0:	e5561002 	ldrb	r1, [r6, #-2]
				if(ad1_6 == 'Y'){ temp2++; }
   118f4:	e3510059 	cmp	r1, #89	; 0x59
   118f8:	02844001 	addeq	r4, r4, #1
				if(ad1_7 == 'Y'){ temp2++; }
				rprintf("ad1_7 = %c\n\r",ad1_7);
			}
			else if(ind == 14)
			{
				ad1_6 = stringBuf[mark-2]; // default is 'N'
   118fc:	e5c5100c 	strb	r1, [r5, #12]
				if(ad1_6 == 'Y'){ temp2++; }
   11900:	020440ff 	andeq	r4, r4, #255	; 0xff
				rprintf("ad1_6 = %c\n\r",ad1_6);
   11904:	e59f01dc 	ldr	r0, [pc, #476]	; 11ae8 <Log_init+0x578>
   11908:	ea000004 	b	11920 <Log_init+0x3b0>
			}
			else if(ind == 15)
   1190c:	e357000f 	cmp	r7, #15
   11910:	1a000003 	bne	11924 <Log_init+0x3b4>
			{
				safety = stringBuf[mark-2]; // default is 'Y'
   11914:	e5568002 	ldrb	r8, [r6, #-2]
				rprintf("safety = %c\n\r",safety);
   11918:	e59f01cc 	ldr	r0, [pc, #460]	; 11aec <Log_init+0x57c>
   1191c:	e1a01008 	mov	r1, r8
   11920:	eb00031b 	bl	12594 <rprintf>
		stringSize = strlen(stringBuf);
		fat_write_file(fd, (unsigned char*)stringBuf, stringSize);
		sd_raw_sync();
	}

	for(x = 0; x < stringSize; x++)
   11924:	e28aa001 	add	sl, sl, #1
   11928:	e59b3000 	ldr	r3, [fp]
   1192c:	e15a0003 	cmp	sl, r3
   11930:	baffff4b 	blt	11664 <Log_init+0xf4>
				rprintf("safety = %c\n\r",safety);
			}
		}
	}

	if(safety == 'Y')
   11934:	e3580059 	cmp	r8, #89	; 0x59
   11938:	1a00004d 	bne	11a74 <Log_init+0x504>
	{
		if((temp2 ==10) && (freq > 150)){ freq = 150; }
   1193c:	e354000a 	cmp	r4, #10
   11940:	1a000005 	bne	1195c <Log_init+0x3ec>
   11944:	e59f3158 	ldr	r3, [pc, #344]	; 11aa4 <Log_init+0x534>
   11948:	e5932014 	ldr	r2, [r3, #20]
   1194c:	e3520096 	cmp	r2, #150	; 0x96
   11950:	c3a02096 	movgt	r2, #150	; 0x96
   11954:	ca000007 	bgt	11978 <Log_init+0x408>
   11958:	ea000047 	b	11a7c <Log_init+0x50c>
		else if((temp2 == 9) && (freq > 166)){ freq = 166; }
   1195c:	e3540009 	cmp	r4, #9
   11960:	1a000006 	bne	11980 <Log_init+0x410>
   11964:	e59f3138 	ldr	r3, [pc, #312]	; 11aa4 <Log_init+0x534>
   11968:	e5932014 	ldr	r2, [r3, #20]
   1196c:	e35200a6 	cmp	r2, #166	; 0xa6
   11970:	da000041 	ble	11a7c <Log_init+0x50c>
   11974:	e3a020a6 	mov	r2, #166	; 0xa6
   11978:	e5832014 	str	r2, [r3, #20]
   1197c:	ea00003e 	b	11a7c <Log_init+0x50c>
		else if((temp2 == 8) && (freq > 187)){ freq = 187; }
   11980:	e3540008 	cmp	r4, #8
   11984:	1a000005 	bne	119a0 <Log_init+0x430>
   11988:	e59f3114 	ldr	r3, [pc, #276]	; 11aa4 <Log_init+0x534>
   1198c:	e5932014 	ldr	r2, [r3, #20]
   11990:	e35200bb 	cmp	r2, #187	; 0xbb
   11994:	c3a020bb 	movgt	r2, #187	; 0xbb
   11998:	cafffff6 	bgt	11978 <Log_init+0x408>
   1199c:	ea000036 	b	11a7c <Log_init+0x50c>
		else if((temp2 == 7) && (freq > 214)){ freq = 214; }
   119a0:	e3540007 	cmp	r4, #7
   119a4:	1a000005 	bne	119c0 <Log_init+0x450>
   119a8:	e59f30f4 	ldr	r3, [pc, #244]	; 11aa4 <Log_init+0x534>
   119ac:	e5932014 	ldr	r2, [r3, #20]
   119b0:	e35200d6 	cmp	r2, #214	; 0xd6
   119b4:	c3a020d6 	movgt	r2, #214	; 0xd6
   119b8:	caffffee 	bgt	11978 <Log_init+0x408>
   119bc:	ea00002e 	b	11a7c <Log_init+0x50c>
		else if((temp2 == 6) && (freq > 250)){ freq = 250; }
   119c0:	e3540006 	cmp	r4, #6
   119c4:	1a000005 	bne	119e0 <Log_init+0x470>
   119c8:	e59f30d4 	ldr	r3, [pc, #212]	; 11aa4 <Log_init+0x534>
   119cc:	e5932014 	ldr	r2, [r3, #20]
   119d0:	e35200fa 	cmp	r2, #250	; 0xfa
   119d4:	c3a020fa 	movgt	r2, #250	; 0xfa
   119d8:	caffffe6 	bgt	11978 <Log_init+0x408>
   119dc:	ea000026 	b	11a7c <Log_init+0x50c>
		else if((temp2 == 5) && (freq > 300)){ freq = 300; }
   119e0:	e3540005 	cmp	r4, #5
   119e4:	1a000005 	bne	11a00 <Log_init+0x490>
   119e8:	e59f30b4 	ldr	r3, [pc, #180]	; 11aa4 <Log_init+0x534>
   119ec:	e5932014 	ldr	r2, [r3, #20]
   119f0:	e3520f4b 	cmp	r2, #300	; 0x12c
   119f4:	c3a02f4b 	movgt	r2, #300	; 0x12c
   119f8:	caffffde 	bgt	11978 <Log_init+0x408>
   119fc:	ea00001e 	b	11a7c <Log_init+0x50c>
		else if((temp2 == 4) && (freq > 375)){ freq = 375; }
   11a00:	e3540004 	cmp	r4, #4
   11a04:	059f3098 	ldreq	r3, [pc, #152]	; 11aa4 <Log_init+0x534>
   11a08:	059f20e0 	ldreq	r2, [pc, #224]	; 11af0 <Log_init+0x580>
   11a0c:	0a00000f 	beq	11a50 <Log_init+0x4e0>
		else if((temp2 == 3) && (freq > 500)){ freq = 500; }
   11a10:	e3540003 	cmp	r4, #3
   11a14:	1a000005 	bne	11a30 <Log_init+0x4c0>
   11a18:	e59f3084 	ldr	r3, [pc, #132]	; 11aa4 <Log_init+0x534>
   11a1c:	e5932014 	ldr	r2, [r3, #20]
   11a20:	e3520f7d 	cmp	r2, #500	; 0x1f4
   11a24:	c3a02f7d 	movgt	r2, #500	; 0x1f4
   11a28:	caffffd2 	bgt	11978 <Log_init+0x408>
   11a2c:	ea000012 	b	11a7c <Log_init+0x50c>
		else if((temp2 == 2) && (freq > 750)){ freq = 750; }
   11a30:	e3540002 	cmp	r4, #2
   11a34:	059f3068 	ldreq	r3, [pc, #104]	; 11aa4 <Log_init+0x534>
   11a38:	059f20b4 	ldreq	r2, [pc, #180]	; 11af4 <Log_init+0x584>
   11a3c:	0a000003 	beq	11a50 <Log_init+0x4e0>
		else if((temp2 == 1) && (freq > 1500)){ freq = 1500; }
   11a40:	e3540001 	cmp	r4, #1
   11a44:	1a000005 	bne	11a60 <Log_init+0x4f0>
   11a48:	e59f3054 	ldr	r3, [pc, #84]	; 11aa4 <Log_init+0x534>
   11a4c:	e59f20a4 	ldr	r2, [pc, #164]	; 11af8 <Log_init+0x588>
   11a50:	e5931014 	ldr	r1, [r3, #20]
   11a54:	e1510002 	cmp	r1, r2
   11a58:	da000007 	ble	11a7c <Log_init+0x50c>
   11a5c:	eaffffc5 	b	11978 <Log_init+0x408>
		else if((temp2 == 0)){ freq = 100; }
   11a60:	e3540000 	cmp	r4, #0
   11a64:	1a000004 	bne	11a7c <Log_init+0x50c>
   11a68:	e3a02064 	mov	r2, #100	; 0x64
   11a6c:	e59f3030 	ldr	r3, [pc, #48]	; 11aa4 <Log_init+0x534>
   11a70:	eaffffc0 	b	11978 <Log_init+0x408>
	}
	
	if(safety == 'T'){ test(); }
   11a74:	e3580054 	cmp	r8, #84	; 0x54
   11a78:	0bfffe7b 	bleq	1146c <test>

}
   11a7c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a80:	e12fff1e 	bx	lr
   11a84:	000163a7 	.word	0x000163a7
   11a88:	40000864 	.word	0x40000864
   11a8c:	40000560 	.word	0x40000560
   11a90:	4000086c 	.word	0x4000086c
   11a94:	000163b2 	.word	0x000163b2
   11a98:	e0028000 	.word	0xe0028000
   11a9c:	000163dd 	.word	0x000163dd
   11aa0:	4000055f 	.word	0x4000055f
   11aa4:	40000000 	.word	0x40000000
   11aa8:	000001fe 	.word	0x000001fe
   11aac:	40000018 	.word	0x40000018
   11ab0:	0001649e 	.word	0x0001649e
   11ab4:	000164aa 	.word	0x000164aa
   11ab8:	0001c200 	.word	0x0001c200
   11abc:	000164b5 	.word	0x000164b5
   11ac0:	000164c1 	.word	0x000164c1
   11ac4:	000164cd 	.word	0x000164cd
   11ac8:	000164d9 	.word	0x000164d9
   11acc:	000164e6 	.word	0x000164e6
   11ad0:	000164f3 	.word	0x000164f3
   11ad4:	00016500 	.word	0x00016500
   11ad8:	0001650d 	.word	0x0001650d
   11adc:	0001651a 	.word	0x0001651a
   11ae0:	00016527 	.word	0x00016527
   11ae4:	00016534 	.word	0x00016534
   11ae8:	00016541 	.word	0x00016541
   11aec:	0001654e 	.word	0x0001654e
   11af0:	00000177 	.word	0x00000177
   11af4:	000002ee 	.word	0x000002ee
   11af8:	000005dc 	.word	0x000005dc

00011afc <GetADCValue>:

/****************************** GetADCValue ******************************
*	Retrieves an ADC value for the ADC pin in 'adc.'
*************************************************************************/
void GetADCValue(int adc)
{
   11afc:	e92d4011 	push	{r0, r4, lr}
	int temp;	// holds 16-bit ADC value (includes some flag bits)
	int temp2;	// holds converted (necessary bit shift) ADC value
	char temp_buff[4];	// holds ascii ADC value - needed for int -> char conversion
	short a;	// used to convert ADC value for writing as text if NOT using ASCII
	
	switch (adc)
   11b00:	e2400001 	sub	r0, r0, #1
   11b04:	e3500007 	cmp	r0, #7
   11b08:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
   11b0c:	ea000061 	b	11c98 <GetADCValue+0x19c>
   11b10:	00011b30 	.word	0x00011b30
   11b14:	00011b5c 	.word	0x00011b5c
   11b18:	00011b88 	.word	0x00011b88
   11b1c:	00011bb4 	.word	0x00011bb4
   11b20:	00011be0 	.word	0x00011be0
   11b24:	00011c0c 	.word	0x00011c0c
   11b28:	00011c38 	.word	0x00011c38
   11b2c:	00011c64 	.word	0x00011c64
	{
		// AD0.3
		case ADC_1:
			AD0CR = 0x00020FF08; // AD0.3
   11b30:	e59f22f0 	ldr	r2, [pc, #752]	; 11e28 <GetADCValue+0x32c>
   11b34:	e59f12f0 	ldr	r1, [pc, #752]	; 11e2c <GetADCValue+0x330>
   11b38:	e5821000 	str	r1, [r2]
			AD0CR |= 0x01000000; // start conversion
   11b3c:	e5921000 	ldr	r1, [r2]
   11b40:	e3811401 	orr	r1, r1, #16777216	; 0x1000000
   11b44:	e5821000 	str	r1, [r2]
			while((temp & 0x80000000) == 0)	// wait for ADC to finish conversion
   11b48:	ea000000 	b	11b50 <GetADCValue+0x54>
			{
				temp = AD0DR;
   11b4c:	e5923004 	ldr	r3, [r2, #4]
	{
		// AD0.3
		case ADC_1:
			AD0CR = 0x00020FF08; // AD0.3
			AD0CR |= 0x01000000; // start conversion
			while((temp & 0x80000000) == 0)	// wait for ADC to finish conversion
   11b50:	e3530000 	cmp	r3, #0
   11b54:	aafffffc 	bge	11b4c <GetADCValue+0x50>
   11b58:	ea00004b 	b	11c8c <GetADCValue+0x190>
			AD0CR = 0x00000000;	// stop ADC conversion			
			break;
			
		// AD0.2	
		case ADC_2:
			AD0CR = 0x00020FF04; // AD0.2
   11b5c:	e59f22c4 	ldr	r2, [pc, #708]	; 11e28 <GetADCValue+0x32c>
   11b60:	e59f12c8 	ldr	r1, [pc, #712]	; 11e30 <GetADCValue+0x334>
   11b64:	e5821000 	str	r1, [r2]
			AD0CR |= 0x01000000; // start conversion
   11b68:	e5921000 	ldr	r1, [r2]
   11b6c:	e3811401 	orr	r1, r1, #16777216	; 0x1000000
   11b70:	e5821000 	str	r1, [r2]
			while((temp & 0x80000000) == 0)
   11b74:	ea000000 	b	11b7c <GetADCValue+0x80>
			{
				temp = AD0DR;
   11b78:	e5923004 	ldr	r3, [r2, #4]
			
		// AD0.2	
		case ADC_2:
			AD0CR = 0x00020FF04; // AD0.2
			AD0CR |= 0x01000000; // start conversion
			while((temp & 0x80000000) == 0)
   11b7c:	e3530000 	cmp	r3, #0
   11b80:	aafffffc 	bge	11b78 <GetADCValue+0x7c>
   11b84:	ea000040 	b	11c8c <GetADCValue+0x190>
			AD0CR = 0x00000000;		
		break;
		
		// AD0.1
		case ADC_3:
			AD0CR = 0x00020FF02; // AD0.1
   11b88:	e59f2298 	ldr	r2, [pc, #664]	; 11e28 <GetADCValue+0x32c>
   11b8c:	e59f12a0 	ldr	r1, [pc, #672]	; 11e34 <GetADCValue+0x338>
   11b90:	e5821000 	str	r1, [r2]
			AD0CR |= 0x01000000; // start conversion
   11b94:	e5921000 	ldr	r1, [r2]
   11b98:	e3811401 	orr	r1, r1, #16777216	; 0x1000000
   11b9c:	e5821000 	str	r1, [r2]
			while((temp & 0x80000000) == 0)
   11ba0:	ea000000 	b	11ba8 <GetADCValue+0xac>
			{
				temp = AD0DR;
   11ba4:	e5923004 	ldr	r3, [r2, #4]
		
		// AD0.1
		case ADC_3:
			AD0CR = 0x00020FF02; // AD0.1
			AD0CR |= 0x01000000; // start conversion
			while((temp & 0x80000000) == 0)
   11ba8:	e3530000 	cmp	r3, #0
   11bac:	aafffffc 	bge	11ba4 <GetADCValue+0xa8>
   11bb0:	ea000035 	b	11c8c <GetADCValue+0x190>
			AD0CR = 0x00000000;		
		break;
		
		// AD0.4
		case ADC_4:
			AD0CR = 0x00020FF10; // AD0.4
   11bb4:	e59f226c 	ldr	r2, [pc, #620]	; 11e28 <GetADCValue+0x32c>
   11bb8:	e59f1278 	ldr	r1, [pc, #632]	; 11e38 <GetADCValue+0x33c>
   11bbc:	e5821000 	str	r1, [r2]
			AD0CR |= 0x01000000; // start conversion
   11bc0:	e5921000 	ldr	r1, [r2]
   11bc4:	e3811401 	orr	r1, r1, #16777216	; 0x1000000
   11bc8:	e5821000 	str	r1, [r2]
			while((temp & 0x80000000) == 0)
   11bcc:	ea000000 	b	11bd4 <GetADCValue+0xd8>
			{
				temp = AD0DR;
   11bd0:	e5923004 	ldr	r3, [r2, #4]
		
		// AD0.4
		case ADC_4:
			AD0CR = 0x00020FF10; // AD0.4
			AD0CR |= 0x01000000; // start conversion
			while((temp & 0x80000000) == 0)
   11bd4:	e3530000 	cmp	r3, #0
   11bd8:	aafffffc 	bge	11bd0 <GetADCValue+0xd4>
   11bdc:	ea00002a 	b	11c8c <GetADCValue+0x190>
			AD0CR = 0x00000000;		
		break;
		
		// AD1.7
		case ADC_5:
			AD1CR = 0x00020FF80; // AD1.7
   11be0:	e59f2254 	ldr	r2, [pc, #596]	; 11e3c <GetADCValue+0x340>
   11be4:	e59f1254 	ldr	r1, [pc, #596]	; 11e40 <GetADCValue+0x344>
   11be8:	e5821000 	str	r1, [r2]
			AD1CR |= 0x01000000; // start conversion
   11bec:	e5921000 	ldr	r1, [r2]
   11bf0:	e3811401 	orr	r1, r1, #16777216	; 0x1000000
   11bf4:	e5821000 	str	r1, [r2]
			while((temp & 0x80000000) == 0)
   11bf8:	ea000000 	b	11c00 <GetADCValue+0x104>
			{
				temp = AD1DR;
   11bfc:	e5923004 	ldr	r3, [r2, #4]
		
		// AD1.7
		case ADC_5:
			AD1CR = 0x00020FF80; // AD1.7
			AD1CR |= 0x01000000; // start conversion
			while((temp & 0x80000000) == 0)
   11c00:	e3530000 	cmp	r3, #0
   11c04:	aafffffc 	bge	11bfc <GetADCValue+0x100>
   11c08:	ea00001f 	b	11c8c <GetADCValue+0x190>
			AD1CR = 0x00000000;		
		break;
		
		// AD1.6
		case ADC_6:
			AD1CR = 0x00020FF40; // AD1.3
   11c0c:	e59f2228 	ldr	r2, [pc, #552]	; 11e3c <GetADCValue+0x340>
   11c10:	e59f122c 	ldr	r1, [pc, #556]	; 11e44 <GetADCValue+0x348>
   11c14:	e5821000 	str	r1, [r2]
			AD1CR |= 0x01000000; // start conversion
   11c18:	e5921000 	ldr	r1, [r2]
   11c1c:	e3811401 	orr	r1, r1, #16777216	; 0x1000000
   11c20:	e5821000 	str	r1, [r2]
			while((temp & 0x80000000) == 0)
   11c24:	ea000000 	b	11c2c <GetADCValue+0x130>
			{
				temp = AD1DR;
   11c28:	e5923004 	ldr	r3, [r2, #4]
		
		// AD1.6
		case ADC_6:
			AD1CR = 0x00020FF40; // AD1.3
			AD1CR |= 0x01000000; // start conversion
			while((temp & 0x80000000) == 0)
   11c2c:	e3530000 	cmp	r3, #0
   11c30:	aafffffc 	bge	11c28 <GetADCValue+0x12c>
   11c34:	ea000014 	b	11c8c <GetADCValue+0x190>
			AD1CR = 0x00000000;		
		break;
		
		// AD1.2
		case ADC_7:
			AD1CR = 0x00020FF04; // AD1.2
   11c38:	e59f21fc 	ldr	r2, [pc, #508]	; 11e3c <GetADCValue+0x340>
   11c3c:	e59f11ec 	ldr	r1, [pc, #492]	; 11e30 <GetADCValue+0x334>
   11c40:	e5821000 	str	r1, [r2]
			AD1CR |= 0x01000000; // start conversion
   11c44:	e5921000 	ldr	r1, [r2]
   11c48:	e3811401 	orr	r1, r1, #16777216	; 0x1000000
   11c4c:	e5821000 	str	r1, [r2]
			while((temp & 0x80000000) == 0)
   11c50:	ea000000 	b	11c58 <GetADCValue+0x15c>
			{
				temp = AD1DR;
   11c54:	e5923004 	ldr	r3, [r2, #4]
		
		// AD1.2
		case ADC_7:
			AD1CR = 0x00020FF04; // AD1.2
			AD1CR |= 0x01000000; // start conversion
			while((temp & 0x80000000) == 0)
   11c58:	e3530000 	cmp	r3, #0
   11c5c:	aafffffc 	bge	11c54 <GetADCValue+0x158>
   11c60:	ea000009 	b	11c8c <GetADCValue+0x190>
			AD1CR = 0x00000000;
		break;
		
		// AD1.3
		case ADC_8:
			AD1CR = 0x00020FF08; // AD1.3
   11c64:	e59f21d0 	ldr	r2, [pc, #464]	; 11e3c <GetADCValue+0x340>
   11c68:	e59f11bc 	ldr	r1, [pc, #444]	; 11e2c <GetADCValue+0x330>
   11c6c:	e5821000 	str	r1, [r2]
			AD1CR |= 0x01000000; // start conversion
   11c70:	e5921000 	ldr	r1, [r2]
   11c74:	e3811401 	orr	r1, r1, #16777216	; 0x1000000
   11c78:	e5821000 	str	r1, [r2]
			while((temp & 0x80000000) == 0)
   11c7c:	ea000000 	b	11c84 <GetADCValue+0x188>
			{
				temp = AD1DR;
   11c80:	e5923004 	ldr	r3, [r2, #4]
		
		// AD1.3
		case ADC_8:
			AD1CR = 0x00020FF08; // AD1.3
			AD1CR |= 0x01000000; // start conversion
			while((temp & 0x80000000) == 0)
   11c84:	e3530000 	cmp	r3, #0
   11c88:	aafffffc 	bge	11c80 <GetADCValue+0x184>
			{
				temp = AD1DR;
			}
			AD1CR = 0x00000000;	
   11c8c:	e3a01000 	mov	r1, #0
   11c90:	e5821000 	str	r1, [r2]
		break;
   11c94:	ea00000f 	b	11cd8 <GetADCValue+0x1dc>
		
		// should never get here - logic error
		default:
			ADC_array[ADC_in] = 'e';
   11c98:	e59f11a8 	ldr	r1, [pc, #424]	; 11e48 <GetADCValue+0x34c>
   11c9c:	e1d130b6 	ldrh	r3, [r1, #6]
   11ca0:	e59f21a4 	ldr	r2, [pc, #420]	; 11e4c <GetADCValue+0x350>
   11ca4:	e1a00803 	lsl	r0, r3, #16
   11ca8:	e3a0c065 	mov	ip, #101	; 0x65
   11cac:	e7c2c840 	strb	ip, [r2, r0, asr #16]
			ADC_in++;
   11cb0:	e283c001 	add	ip, r3, #1
			ADC_array[ADC_in] = 'r';
   11cb4:	e1a0c80c 	lsl	ip, ip, #16
   11cb8:	e3a00072 	mov	r0, #114	; 0x72
   11cbc:	e7c2084c 	strb	r0, [r2, ip, asr #16]
			ADC_in++;
   11cc0:	e283c002 	add	ip, r3, #2
			ADC_array[ADC_in] = 'r';
   11cc4:	e1a0c80c 	lsl	ip, ip, #16
			ADC_in++;
   11cc8:	e2833003 	add	r3, r3, #3
		default:
			ADC_array[ADC_in] = 'e';
			ADC_in++;
			ADC_array[ADC_in] = 'r';
			ADC_in++;
			ADC_array[ADC_in] = 'r';
   11ccc:	e7c2084c 	strb	r0, [r2, ip, asr #16]
			ADC_in++;
   11cd0:	e1c130b6 	strh	r3, [r1, #6]
   11cd4:	ea000051 	b	11e20 <GetADCValue+0x324>
		break;
	}
	
	//	convert ADC value - bit shift required (some bits are flags, not part
	//  of actual ADC value) 15:6 create the 10 bit ADC value
	temp &= 0x0000FFC0;	// strip all bits except 15:6
   11cd8:	e59f0170 	ldr	r0, [pc, #368]	; 11e50 <GetADCValue+0x354>
   11cdc:	e0030000 	and	r0, r3, r0
	temp2 = temp / 0x00000040; // shift bit right 6 places

	// convert value to characters
	
	if(asc == 'Y' || asc ==',')
   11ce0:	e59f316c 	ldr	r3, [pc, #364]	; 11e54 <GetADCValue+0x358>
   11ce4:	e5d33005 	ldrb	r3, [r3, #5]
   11ce8:	e3530059 	cmp	r3, #89	; 0x59
   11cec:	1353002c 	cmpne	r3, #44	; 0x2c
	}
	
	//	convert ADC value - bit shift required (some bits are flags, not part
	//  of actual ADC value) 15:6 create the 10 bit ADC value
	temp &= 0x0000FFC0;	// strip all bits except 15:6
	temp2 = temp / 0x00000040; // shift bit right 6 places
   11cf0:	e1a00340 	asr	r0, r0, #6

	// convert value to characters
	
	if(asc == 'Y' || asc ==',')
   11cf4:	1a00003c 	bne	11dec <GetADCValue+0x2f0>
	{
		itoa(temp2, 10, temp_buff);
   11cf8:	e3a0100a 	mov	r1, #10
   11cfc:	e1a0200d 	mov	r2, sp
   11d00:	eb000fbd 	bl	15bfc <itoa>
		if(temp_buff[0] >= 48 && temp_buff[0] <= 57)
   11d04:	e5dd1000 	ldrb	r1, [sp]
   11d08:	e2413030 	sub	r3, r1, #48	; 0x30
   11d0c:	e3530009 	cmp	r3, #9
   11d10:	8a000006 	bhi	11d30 <GetADCValue+0x234>
		{
			ADC_array[ADC_in] = temp_buff[0];
   11d14:	e59f312c 	ldr	r3, [pc, #300]	; 11e48 <GetADCValue+0x34c>
   11d18:	e1d320b6 	ldrh	r2, [r3, #6]
   11d1c:	e59f0128 	ldr	r0, [pc, #296]	; 11e4c <GetADCValue+0x350>
   11d20:	e1a0c802 	lsl	ip, r2, #16
			ADC_in++;
   11d24:	e2822001 	add	r2, r2, #1
	if(asc == 'Y' || asc ==',')
	{
		itoa(temp2, 10, temp_buff);
		if(temp_buff[0] >= 48 && temp_buff[0] <= 57)
		{
			ADC_array[ADC_in] = temp_buff[0];
   11d28:	e7c0184c 	strb	r1, [r0, ip, asr #16]
			ADC_in++;
   11d2c:	e1c320b6 	strh	r2, [r3, #6]
		}
		if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
   11d30:	e5dd1001 	ldrb	r1, [sp, #1]
   11d34:	e2413030 	sub	r3, r1, #48	; 0x30
   11d38:	e3530009 	cmp	r3, #9
   11d3c:	8a000006 	bhi	11d5c <GetADCValue+0x260>
		{
			ADC_array[ADC_in] = temp_buff[1];
   11d40:	e59f3100 	ldr	r3, [pc, #256]	; 11e48 <GetADCValue+0x34c>
   11d44:	e1d320b6 	ldrh	r2, [r3, #6]
   11d48:	e59f00fc 	ldr	r0, [pc, #252]	; 11e4c <GetADCValue+0x350>
   11d4c:	e1a0c802 	lsl	ip, r2, #16
			ADC_in++;
   11d50:	e2822001 	add	r2, r2, #1
			ADC_array[ADC_in] = temp_buff[0];
			ADC_in++;
		}
		if(temp_buff[1] >= 48 && temp_buff[1] <= 57)
		{
			ADC_array[ADC_in] = temp_buff[1];
   11d54:	e7c0184c 	strb	r1, [r0, ip, asr #16]
			ADC_in++;
   11d58:	e1c320b6 	strh	r2, [r3, #6]
		}
		if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
   11d5c:	e5dd1002 	ldrb	r1, [sp, #2]
   11d60:	e2413030 	sub	r3, r1, #48	; 0x30
   11d64:	e3530009 	cmp	r3, #9
   11d68:	8a000006 	bhi	11d88 <GetADCValue+0x28c>
		{
			ADC_array[ADC_in] = temp_buff[2];
   11d6c:	e59f30d4 	ldr	r3, [pc, #212]	; 11e48 <GetADCValue+0x34c>
   11d70:	e1d320b6 	ldrh	r2, [r3, #6]
   11d74:	e59f00d0 	ldr	r0, [pc, #208]	; 11e4c <GetADCValue+0x350>
   11d78:	e1a0c802 	lsl	ip, r2, #16
			ADC_in++;
   11d7c:	e2822001 	add	r2, r2, #1
			ADC_array[ADC_in] = temp_buff[1];
			ADC_in++;
		}
		if(temp_buff[2] >= 48 && temp_buff[2] <= 57)
		{
			ADC_array[ADC_in] = temp_buff[2];
   11d80:	e7c0184c 	strb	r1, [r0, ip, asr #16]
			ADC_in++;
   11d84:	e1c320b6 	strh	r2, [r3, #6]
		}
		if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
   11d88:	e5dd1003 	ldrb	r1, [sp, #3]
   11d8c:	e2413030 	sub	r3, r1, #48	; 0x30
   11d90:	e3530009 	cmp	r3, #9
   11d94:	8a000006 	bhi	11db4 <GetADCValue+0x2b8>
		{
			ADC_array[ADC_in] = temp_buff[3];
   11d98:	e59f30a8 	ldr	r3, [pc, #168]	; 11e48 <GetADCValue+0x34c>
   11d9c:	e1d320b6 	ldrh	r2, [r3, #6]
   11da0:	e59f00a4 	ldr	r0, [pc, #164]	; 11e4c <GetADCValue+0x350>
   11da4:	e1a0c802 	lsl	ip, r2, #16
			ADC_in++;
   11da8:	e2822001 	add	r2, r2, #1
			ADC_array[ADC_in] = temp_buff[2];
			ADC_in++;
		}
		if(temp_buff[3] >= 48 && temp_buff[3] <= 57)
		{
			ADC_array[ADC_in] = temp_buff[3];
   11dac:	e7c0184c 	strb	r1, [r0, ip, asr #16]
			ADC_in++;
   11db0:	e1c320b6 	strh	r2, [r3, #6]
		}

		if(asc == ',')
   11db4:	e59f3098 	ldr	r3, [pc, #152]	; 11e54 <GetADCValue+0x358>
   11db8:	e5d30005 	ldrb	r0, [r3, #5]
   11dbc:	e59f3084 	ldr	r3, [pc, #132]	; 11e48 <GetADCValue+0x34c>
		{
			ADC_array[ADC_in] = ',';
   11dc0:	e1d320b6 	ldrh	r2, [r3, #6]
		{
			ADC_array[ADC_in] = temp_buff[3];
			ADC_in++;
		}

		if(asc == ',')
   11dc4:	e350002c 	cmp	r0, #44	; 0x2c
   11dc8:	e59f107c 	ldr	r1, [pc, #124]	; 11e4c <GetADCValue+0x350>
		{
			ADC_array[ADC_in] = ',';
   11dcc:	01a0c802 	lsleq	ip, r2, #16
			ADC_in++;
		}
		else
		{
			ADC_array[ADC_in] = 0;
   11dd0:	11a00802 	lslne	r0, r2, #16
   11dd4:	13a0c000 	movne	ip, #0
			ADC_in++;
   11dd8:	e2822001 	add	r2, r2, #1
			ADC_in++;
		}

		if(asc == ',')
		{
			ADC_array[ADC_in] = ',';
   11ddc:	07c1084c 	strbeq	r0, [r1, ip, asr #16]
			ADC_in++;
		}
		else
		{
			ADC_array[ADC_in] = 0;
   11de0:	17c1c840 	strbne	ip, [r1, r0, asr #16]
			ADC_in++;
   11de4:	e1c320b6 	strh	r2, [r3, #6]
   11de8:	ea00000c 	b	11e20 <GetADCValue+0x324>
		}
	}
	else if(asc == 'N')
   11dec:	e353004e 	cmp	r3, #78	; 0x4e
   11df0:	1a00000a 	bne	11e20 <GetADCValue+0x324>
	{
		a = ((short)temp2 & 0xFF00) / 0x00000100;
		ADC_array[ADC_in] = (char)a;
   11df4:	e59f204c 	ldr	r2, [pc, #76]	; 11e48 <GetADCValue+0x34c>
   11df8:	e1d230b6 	ldrh	r3, [r2, #6]
   11dfc:	e59f1048 	ldr	r1, [pc, #72]	; 11e4c <GetADCValue+0x350>
   11e00:	e1a0c803 	lsl	ip, r3, #16
			ADC_in++;
		}
	}
	else if(asc == 'N')
	{
		a = ((short)temp2 & 0xFF00) / 0x00000100;
   11e04:	e1a04420 	lsr	r4, r0, #8
		ADC_array[ADC_in] = (char)a;
   11e08:	e7c1484c 	strb	r4, [r1, ip, asr #16]
		ADC_in++;
   11e0c:	e283c001 	add	ip, r3, #1
		ADC_array[ADC_in] = (char)temp2 & 0xFF;
   11e10:	e1a0c80c 	lsl	ip, ip, #16
		ADC_in++;
   11e14:	e2833002 	add	r3, r3, #2
	else if(asc == 'N')
	{
		a = ((short)temp2 & 0xFF00) / 0x00000100;
		ADC_array[ADC_in] = (char)a;
		ADC_in++;
		ADC_array[ADC_in] = (char)temp2 & 0xFF;
   11e18:	e7c1084c 	strb	r0, [r1, ip, asr #16]
		ADC_in++;
   11e1c:	e1c230b6 	strh	r3, [r2, #6]
	}
}
   11e20:	e8bd4018 	pop	{r3, r4, lr}
   11e24:	e12fff1e 	bx	lr
   11e28:	e0034000 	.word	0xe0034000
   11e2c:	0020ff08 	.word	0x0020ff08
   11e30:	0020ff04 	.word	0x0020ff04
   11e34:	0020ff02 	.word	0x0020ff02
   11e38:	0020ff10 	.word	0x0020ff10
   11e3c:	e0060000 	.word	0xe0060000
   11e40:	0020ff80 	.word	0x0020ff80
   11e44:	0020ff40 	.word	0x0020ff40
   11e48:	40000018 	.word	0x40000018
   11e4c:	40000870 	.word	0x40000870
   11e50:	0000ffc0 	.word	0x0000ffc0
   11e54:	40000000 	.word	0x40000000

00011e58 <LogADC>:
/********************** LogADC *****************************
*  Called each time GPS data is logged to generate ADC data
* and log it
************************************************************/
void LogADC(void)
{
   11e58:	e92d4010 	push	{r4, lr}
	
	// reset TMR0 interrupt
	T0IR = 1;
   11e5c:	e59f315c 	ldr	r3, [pc, #348]	; 11fc0 <LogADC+0x168>
   11e60:	e3a00001 	mov	r0, #1
   11e64:	e5830000 	str	r0, [r3]
	
	// reset ADC log buffer pointer to beginning
	ADC_in = 0;

	//ADC_1 - ad0_3
	if(ad0_3 == 'Y')
   11e68:	e59f4154 	ldr	r4, [pc, #340]	; 11fc4 <LogADC+0x16c>
	
	// reset TMR0 interrupt
	T0IR = 1;
	
	// reset ADC log buffer pointer to beginning
	ADC_in = 0;
   11e6c:	e59f3154 	ldr	r3, [pc, #340]	; 11fc8 <LogADC+0x170>
   11e70:	e3a02000 	mov	r2, #0
   11e74:	e1c320b6 	strh	r2, [r3, #6]

	//ADC_1 - ad0_3
	if(ad0_3 == 'Y')
   11e78:	e5d43006 	ldrb	r3, [r4, #6]
   11e7c:	e3530059 	cmp	r3, #89	; 0x59
		GetADCValue(ADC_1);
   11e80:	0bffff1d 	bleq	11afc <GetADCValue>
		
	// ADC_2 - ad0_2
	if(ad0_2 == 'Y')
   11e84:	e5d43007 	ldrb	r3, [r4, #7]
   11e88:	e3530059 	cmp	r3, #89	; 0x59
		GetADCValue(ADC_2);
   11e8c:	03a00002 	moveq	r0, #2
   11e90:	0bffff19 	bleq	11afc <GetADCValue>
	
	// ADC_3 - ad0_1
	if(ad0_1 == 'Y')
   11e94:	e5d43008 	ldrb	r3, [r4, #8]
   11e98:	e3530059 	cmp	r3, #89	; 0x59
		GetADCValue(ADC_3);
   11e9c:	03a00003 	moveq	r0, #3
   11ea0:	0bffff15 	bleq	11afc <GetADCValue>
	
	// ADC_4 - ad0_4
	if(ad0_4 == 'Y')
   11ea4:	e59f4118 	ldr	r4, [pc, #280]	; 11fc4 <LogADC+0x16c>
   11ea8:	e5d4300a 	ldrb	r3, [r4, #10]
   11eac:	e3530059 	cmp	r3, #89	; 0x59
		GetADCValue(ADC_4);
   11eb0:	03a00004 	moveq	r0, #4
   11eb4:	0bffff10 	bleq	11afc <GetADCValue>
	
	// ADC_5 - ad1_7
	if(ad1_7 == 'Y')
   11eb8:	e5d4300b 	ldrb	r3, [r4, #11]
   11ebc:	e3530059 	cmp	r3, #89	; 0x59
		GetADCValue(ADC_5);
   11ec0:	03a00005 	moveq	r0, #5
   11ec4:	0bffff0c 	bleq	11afc <GetADCValue>
		
	// ADC_6 - ad1_6
	if(ad1_6 == 'Y')
   11ec8:	e5d4300c 	ldrb	r3, [r4, #12]
   11ecc:	e3530059 	cmp	r3, #89	; 0x59
		GetADCValue(ADC_6);
   11ed0:	03a00006 	moveq	r0, #6
   11ed4:	0bffff08 	bleq	11afc <GetADCValue>
		
	// ADC_7 - ad1_2
	if(ad1_2 == 'Y')
   11ed8:	e59f30e4 	ldr	r3, [pc, #228]	; 11fc4 <LogADC+0x16c>
   11edc:	e5d32009 	ldrb	r2, [r3, #9]
   11ee0:	e3520059 	cmp	r2, #89	; 0x59
   11ee4:	e1a04003 	mov	r4, r3
		GetADCValue(ADC_7);
   11ee8:	03a00007 	moveq	r0, #7
   11eec:	0bffff02 	bleq	11afc <GetADCValue>
		
	// ADC_8 - ad1_3
	if(ad1_3 == 'Y')
   11ef0:	e5d43004 	ldrb	r3, [r4, #4]
   11ef4:	e3530059 	cmp	r3, #89	; 0x59
		GetADCValue(ADC_8);
   11ef8:	03a00008 	moveq	r0, #8
   11efc:	0bfffefe 	bleq	11afc <GetADCValue>
		
	// if no ADC pins were chosen then write that
	// if ADC pins were chosen there is a trailing ',' that should be
	// removed
	if(ADC_in == 0)	// no ADC pins were selected for reading
   11f00:	e59f20c0 	ldr	r2, [pc, #192]	; 11fc8 <LogADC+0x170>
   11f04:	e1d230b6 	ldrh	r3, [r2, #6]
   11f08:	e3530000 	cmp	r3, #0
		ADC_array[ADC_in] = 'C ';
		ADC_in++;
	}
	else
	{
		ADC_in--;	// back up over trailing ','
   11f0c:	12433001 	subne	r3, r3, #1
		GetADCValue(ADC_8);
		
	// if no ADC pins were chosen then write that
	// if ADC pins were chosen there is a trailing ',' that should be
	// removed
	if(ADC_in == 0)	// no ADC pins were selected for reading
   11f10:	1a00000d 	bne	11f4c <LogADC+0xf4>
	{
		// write a warning message (ADC + GPS was chosen but not used)
		ADC_array[ADC_in] = 'N';
   11f14:	e59f30b0 	ldr	r3, [pc, #176]	; 11fcc <LogADC+0x174>
   11f18:	e3a0104e 	mov	r1, #78	; 0x4e
   11f1c:	e5c31000 	strb	r1, [r3]
		ADC_in++;
		ADC_array[ADC_in] = 'O';
		ADC_in++;
		ADC_array[ADC_in] = ' ';
		ADC_in++;
		ADC_array[ADC_in] = 'A';
   11f20:	e3a00041 	mov	r0, #65	; 0x41
	if(ADC_in == 0)	// no ADC pins were selected for reading
	{
		// write a warning message (ADC + GPS was chosen but not used)
		ADC_array[ADC_in] = 'N';
		ADC_in++;
		ADC_array[ADC_in] = 'O';
   11f24:	e3a0104f 	mov	r1, #79	; 0x4f
   11f28:	e5c31001 	strb	r1, [r3, #1]
		ADC_in++;
		ADC_array[ADC_in] = ' ';
		ADC_in++;
		ADC_array[ADC_in] = 'A';
   11f2c:	e5c30003 	strb	r0, [r3, #3]
		// write a warning message (ADC + GPS was chosen but not used)
		ADC_array[ADC_in] = 'N';
		ADC_in++;
		ADC_array[ADC_in] = 'O';
		ADC_in++;
		ADC_array[ADC_in] = ' ';
   11f30:	e3a01020 	mov	r1, #32
		ADC_in++;
		ADC_array[ADC_in] = 'A';
		ADC_in++;
		ADC_array[ADC_in] = 'D';
   11f34:	e3a00044 	mov	r0, #68	; 0x44
		// write a warning message (ADC + GPS was chosen but not used)
		ADC_array[ADC_in] = 'N';
		ADC_in++;
		ADC_array[ADC_in] = 'O';
		ADC_in++;
		ADC_array[ADC_in] = ' ';
   11f38:	e5c31002 	strb	r1, [r3, #2]
		ADC_in++;
		ADC_array[ADC_in] = 'A';
		ADC_in++;
		ADC_array[ADC_in] = 'D';
   11f3c:	e5c30004 	strb	r0, [r3, #4]
		ADC_in++;
		ADC_array[ADC_in] = 'C ';
   11f40:	e5c31005 	strb	r1, [r3, #5]
		ADC_in++;
   11f44:	e3a03006 	mov	r3, #6
   11f48:	eaffffff 	b	11f4c <LogADC+0xf4>
	}
	else
	{
		ADC_in--;	// back up over trailing ','
   11f4c:	e1c230b6 	strh	r3, [r2, #6]
	}
		
	// add CR/LF and string terminator
	ADC_array[ADC_in] = 13;
   11f50:	e59f2070 	ldr	r2, [pc, #112]	; 11fc8 <LogADC+0x170>
   11f54:	e1d230b6 	ldrh	r3, [r2, #6]
   11f58:	e59f106c 	ldr	r1, [pc, #108]	; 11fcc <LogADC+0x174>
   11f5c:	e1a00803 	lsl	r0, r3, #16
   11f60:	e3a0c00d 	mov	ip, #13
   11f64:	e7c1c840 	strb	ip, [r1, r0, asr #16]
	ADC_in++;
   11f68:	e2830001 	add	r0, r3, #1
	ADC_array[ADC_in] = 10;
   11f6c:	e1a00800 	lsl	r0, r0, #16
   11f70:	e3a0c00a 	mov	ip, #10
   11f74:	e7c1c840 	strb	ip, [r1, r0, asr #16]
	ADC_in++;
   11f78:	e283c002 	add	ip, r3, #2
	ADC_array[ADC_in] = 0;
	ADC_in++;
   11f7c:	e2833003 	add	r3, r3, #3
	// add CR/LF and string terminator
	ADC_array[ADC_in] = 13;
	ADC_in++;
	ADC_array[ADC_in] = 10;
	ADC_in++;
	ADC_array[ADC_in] = 0;
   11f80:	e3a00000 	mov	r0, #0
   11f84:	e1a0c80c 	lsl	ip, ip, #16
	ADC_in++;
   11f88:	e1a03803 	lsl	r3, r3, #16
	// add CR/LF and string terminator
	ADC_array[ADC_in] = 13;
	ADC_in++;
	ADC_array[ADC_in] = 10;
	ADC_in++;
	ADC_array[ADC_in] = 0;
   11f8c:	e7c1084c 	strb	r0, [r1, ip, asr #16]
	ADC_in++;
   11f90:	e1a03823 	lsr	r3, r3, #16
			
	VICVectAddr= 0;
   11f94:	e3e01000 	mvn	r1, #0
	ADC_array[ADC_in] = 13;
	ADC_in++;
	ADC_array[ADC_in] = 10;
	ADC_in++;
	ADC_array[ADC_in] = 0;
	ADC_in++;
   11f98:	e1c230b6 	strh	r3, [r2, #6]
			
	VICVectAddr= 0;
   11f9c:	e5010fcf 	str	r0, [r1, #-4047]	; 0xfffff031
	
	// set microSD write size
	ADCStringSize = ADC_in;
   11fa0:	e1a03803 	lsl	r3, r3, #16
   11fa4:	e59f1024 	ldr	r1, [pc, #36]	; 11fd0 <LogADC+0x178>
   11fa8:	e1a03843 	asr	r3, r3, #16
   11fac:	e5813000 	str	r3, [r1]
	// set ADC logging flag
	log_adc = 1;
   11fb0:	e3a03001 	mov	r3, #1
   11fb4:	e5c23008 	strb	r3, [r2, #8]
}
   11fb8:	e8bd4010 	pop	{r4, lr}
   11fbc:	e12fff1e 	bx	lr
   11fc0:	e0004000 	.word	0xe0004000
   11fc4:	40000000 	.word	0x40000000
   11fc8:	40000018 	.word	0x40000018
   11fcc:	40000870 	.word	0x40000870
   11fd0:	40000660 	.word	0x40000660

00011fd4 <mode_action>:
* button hasn't been pressed which writes all buffers
* to the microSD, lights the STAT0 & STAT1 LEDs,
* and then is locked into an endless loop.
********************************************************/
void mode_action(void)
{
   11fd4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	int j;

	while(1)
	{
		// if the first data buffer is full, write it to the microSD
		if(log_array1 == 1)
   11fd8:	e59f51cc 	ldr	r5, [pc, #460]	; 121ac <mode_action+0x1d8>
		if(onoff){ IOCLR0 = 0x00000800; } // On
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
   11fdc:	e59f41cc 	ldr	r4, [pc, #460]	; 121b0 <mode_action+0x1dc>
		// if the first data buffer is full, write it to the microSD
		if(log_array1 == 1)
		{
			stat(0,ON);
				
			if(fat_write_file(handle,(unsigned char *)RX_array1, stringSize) < 0)
   11fe0:	e59f61cc 	ldr	r6, [pc, #460]	; 121b4 <mode_action+0x1e0>
	int j;

	while(1)
	{
		// if the first data buffer is full, write it to the microSD
		if(log_array1 == 1)
   11fe4:	e5d53002 	ldrb	r3, [r5, #2]
   11fe8:	e3530001 	cmp	r3, #1
   11fec:	1a00001a 	bne	1205c <mode_action+0x88>
		{
			stat(0,ON);
				
			if(fat_write_file(handle,(unsigned char *)RX_array1, stringSize) < 0)
   11ff0:	e59f31c0 	ldr	r3, [pc, #448]	; 121b8 <mode_action+0x1e4>
		if(onoff){ IOCLR0 = 0x00000800; } // On
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
   11ff4:	e3a07004 	mov	r7, #4
   11ff8:	e584700c 	str	r7, [r4, #12]
		// if the first data buffer is full, write it to the microSD
		if(log_array1 == 1)
		{
			stat(0,ON);
				
			if(fat_write_file(handle,(unsigned char *)RX_array1, stringSize) < 0)
   11ffc:	e5960000 	ldr	r0, [r6]
   12000:	e59f11b4 	ldr	r1, [pc, #436]	; 121bc <mode_action+0x1e8>
   12004:	e5932000 	ldr	r2, [r3]
   12008:	eb000b37 	bl	14cec <fat_write_file>
   1200c:	e3500000 	cmp	r0, #0
   12010:	aa00000d 	bge	1204c <mode_action+0x78>
		if(onoff){ IOCLR0 = 0x00000800; } // On
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
   12014:	e59f3194 	ldr	r3, [pc, #404]	; 121b0 <mode_action+0x1dc>

void stat(int statnum, int onoff)
{
	if(statnum) // Stat 1
	{
		if(onoff){ IOCLR0 = 0x00000800; } // On
   12018:	e3a00b02 	mov	r0, #2048	; 0x800
   1201c:	e1a01003 	mov	r1, r3
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
   12020:	e583700c 	str	r7, [r3, #12]
   12024:	e59f2194 	ldr	r2, [pc, #404]	; 121c0 <mode_action+0x1ec>
			if(fat_write_file(handle,(unsigned char *)RX_array1, stringSize) < 0)
			{
				while(1)
				{
					stat(0,ON);
					for(j = 0; j < 500000; j++)
   12028:	e2522001 	subs	r2, r2, #1
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
		else { IOSET0 = 0x00000004; } // Off
   1202c:	e5817004 	str	r7, [r1, #4]
			if(fat_write_file(handle,(unsigned char *)RX_array1, stringSize) < 0)
			{
				while(1)
				{
					stat(0,ON);
					for(j = 0; j < 500000; j++)
   12030:	1afffffc 	bne	12028 <mode_action+0x54>

void stat(int statnum, int onoff)
{
	if(statnum) // Stat 1
	{
		if(onoff){ IOCLR0 = 0x00000800; } // On
   12034:	e581000c 	str	r0, [r1, #12]
   12038:	e59f2180 	ldr	r2, [pc, #384]	; 121c0 <mode_action+0x1ec>
				{
					stat(0,ON);
					for(j = 0; j < 500000; j++)
					stat(0,OFF);
					stat(1,ON);
					for(j = 0; j < 500000; j++)
   1203c:	e2522001 	subs	r2, r2, #1
void stat(int statnum, int onoff)
{
	if(statnum) // Stat 1
	{
		if(onoff){ IOCLR0 = 0x00000800; } // On
		else { IOSET0 = 0x00000800; } // Off
   12040:	e5830004 	str	r0, [r3, #4]
				{
					stat(0,ON);
					for(j = 0; j < 500000; j++)
					stat(0,OFF);
					stat(1,ON);
					for(j = 0; j < 500000; j++)
   12044:	1afffffc 	bne	1203c <mode_action+0x68>
   12048:	eafffff4 	b	12020 <mode_action+0x4c>
					stat(1,OFF);
				}
			}
			
			sd_raw_sync();
   1204c:	eb00044b 	bl	13180 <sd_raw_sync>
			stat(0,OFF);
			log_array1 = 0;
   12050:	e3a03000 	mov	r3, #0
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
		else { IOSET0 = 0x00000004; } // Off
   12054:	e5847004 	str	r7, [r4, #4]
				}
			}
			
			sd_raw_sync();
			stat(0,OFF);
			log_array1 = 0;
   12058:	e5c53002 	strb	r3, [r5, #2]
		}

		// if the second data buffer is full, write it to the microSD
		if(log_array2 == 1)
   1205c:	e5d53003 	ldrb	r3, [r5, #3]
   12060:	e3530001 	cmp	r3, #1
   12064:	1a00001b 	bne	120d8 <mode_action+0x104>
		{
			stat(1,ON);
			
			if(fat_write_file(handle,(unsigned char *)RX_array2, stringSize) < 0)
   12068:	e59f3148 	ldr	r3, [pc, #328]	; 121b8 <mode_action+0x1e4>

void stat(int statnum, int onoff)
{
	if(statnum) // Stat 1
	{
		if(onoff){ IOCLR0 = 0x00000800; } // On
   1206c:	e3a07b02 	mov	r7, #2048	; 0x800
   12070:	e584700c 	str	r7, [r4, #12]
		// if the second data buffer is full, write it to the microSD
		if(log_array2 == 1)
		{
			stat(1,ON);
			
			if(fat_write_file(handle,(unsigned char *)RX_array2, stringSize) < 0)
   12074:	e5960000 	ldr	r0, [r6]
   12078:	e59f1144 	ldr	r1, [pc, #324]	; 121c4 <mode_action+0x1f0>
   1207c:	e5932000 	ldr	r2, [r3]
   12080:	eb000b19 	bl	14cec <fat_write_file>
   12084:	e3500000 	cmp	r0, #0
   12088:	aa00000d 	bge	120c4 <mode_action+0xf0>
		if(onoff){ IOCLR0 = 0x00000800; } // On
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
   1208c:	e59f311c 	ldr	r3, [pc, #284]	; 121b0 <mode_action+0x1dc>
   12090:	e3a01004 	mov	r1, #4
   12094:	e1a00003 	mov	r0, r3
   12098:	e583100c 	str	r1, [r3, #12]
   1209c:	e59f211c 	ldr	r2, [pc, #284]	; 121c0 <mode_action+0x1ec>
			if(fat_write_file(handle,(unsigned char *)RX_array2, stringSize) < 0)
			{
				while(1)
				{
					stat(0,ON);
					for(j = 0; j < 500000; j++)
   120a0:	e2522001 	subs	r2, r2, #1
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
		else { IOSET0 = 0x00000004; } // Off
   120a4:	e5801004 	str	r1, [r0, #4]
			if(fat_write_file(handle,(unsigned char *)RX_array2, stringSize) < 0)
			{
				while(1)
				{
					stat(0,ON);
					for(j = 0; j < 500000; j++)
   120a8:	1afffffc 	bne	120a0 <mode_action+0xcc>

void stat(int statnum, int onoff)
{
	if(statnum) // Stat 1
	{
		if(onoff){ IOCLR0 = 0x00000800; } // On
   120ac:	e580700c 	str	r7, [r0, #12]
   120b0:	e59f2108 	ldr	r2, [pc, #264]	; 121c0 <mode_action+0x1ec>
				{
					stat(0,ON);
					for(j = 0; j < 500000; j++)
					stat(0,OFF);
					stat(1,ON);
					for(j = 0; j < 500000; j++)
   120b4:	e2522001 	subs	r2, r2, #1
void stat(int statnum, int onoff)
{
	if(statnum) // Stat 1
	{
		if(onoff){ IOCLR0 = 0x00000800; } // On
		else { IOSET0 = 0x00000800; } // Off
   120b8:	e5837004 	str	r7, [r3, #4]
				{
					stat(0,ON);
					for(j = 0; j < 500000; j++)
					stat(0,OFF);
					stat(1,ON);
					for(j = 0; j < 500000; j++)
   120bc:	1afffffc 	bne	120b4 <mode_action+0xe0>
   120c0:	eafffff4 	b	12098 <mode_action+0xc4>
					stat(1,OFF);
				}
			}
			
			sd_raw_sync();
   120c4:	eb00042d 	bl	13180 <sd_raw_sync>
void stat(int statnum, int onoff)
{
	if(statnum) // Stat 1
	{
		if(onoff){ IOCLR0 = 0x00000800; } // On
		else { IOSET0 = 0x00000800; } // Off
   120c8:	e5847004 	str	r7, [r4, #4]
				}
			}
			
			sd_raw_sync();
			stat(1,OFF);
			log_array2 = 0;
   120cc:	e3a03000 	mov	r3, #0
   120d0:	e5c53003 	strb	r3, [r5, #3]
			LogADC();
   120d4:	ebffff5f 	bl	11e58 <LogADC>
		}
		
		// see if ADC data needs to be logged
		if(log_adc == 1)
   120d8:	e5d53008 	ldrb	r3, [r5, #8]
   120dc:	e3530001 	cmp	r3, #1
   120e0:	1a00001a 	bne	12150 <mode_action+0x17c>
		{
			stat(0,ON);
			
			if(fat_write_file(handle,(unsigned char *)ADC_array,ADCStringSize) < 0)
   120e4:	e59f30dc 	ldr	r3, [pc, #220]	; 121c8 <mode_action+0x1f4>
		if(onoff){ IOCLR0 = 0x00000800; } // On
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
   120e8:	e3a07004 	mov	r7, #4
   120ec:	e584700c 	str	r7, [r4, #12]
		// see if ADC data needs to be logged
		if(log_adc == 1)
		{
			stat(0,ON);
			
			if(fat_write_file(handle,(unsigned char *)ADC_array,ADCStringSize) < 0)
   120f0:	e5960000 	ldr	r0, [r6]
   120f4:	e59f10d0 	ldr	r1, [pc, #208]	; 121cc <mode_action+0x1f8>
   120f8:	e5932000 	ldr	r2, [r3]
   120fc:	eb000afa 	bl	14cec <fat_write_file>
   12100:	e3500000 	cmp	r0, #0
   12104:	aa00000d 	bge	12140 <mode_action+0x16c>
		if(onoff){ IOCLR0 = 0x00000800; } // On
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
   12108:	e59f30a0 	ldr	r3, [pc, #160]	; 121b0 <mode_action+0x1dc>

void stat(int statnum, int onoff)
{
	if(statnum) // Stat 1
	{
		if(onoff){ IOCLR0 = 0x00000800; } // On
   1210c:	e3a00b02 	mov	r0, #2048	; 0x800
   12110:	e1a01003 	mov	r1, r3
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
   12114:	e583700c 	str	r7, [r3, #12]
   12118:	e59f20a0 	ldr	r2, [pc, #160]	; 121c0 <mode_action+0x1ec>
			if(fat_write_file(handle,(unsigned char *)ADC_array,ADCStringSize) < 0)
			{
				while(1)
				{
					stat(0,ON);
					for(j = 0; j < 500000; j++)
   1211c:	e2522001 	subs	r2, r2, #1
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
		else { IOSET0 = 0x00000004; } // Off
   12120:	e5817004 	str	r7, [r1, #4]
			if(fat_write_file(handle,(unsigned char *)ADC_array,ADCStringSize) < 0)
			{
				while(1)
				{
					stat(0,ON);
					for(j = 0; j < 500000; j++)
   12124:	1afffffc 	bne	1211c <mode_action+0x148>

void stat(int statnum, int onoff)
{
	if(statnum) // Stat 1
	{
		if(onoff){ IOCLR0 = 0x00000800; } // On
   12128:	e581000c 	str	r0, [r1, #12]
   1212c:	e59f208c 	ldr	r2, [pc, #140]	; 121c0 <mode_action+0x1ec>
				{
					stat(0,ON);
					for(j = 0; j < 500000; j++)
					stat(0,OFF);
					stat(1,ON);
					for(j = 0; j < 500000; j++)
   12130:	e2522001 	subs	r2, r2, #1
void stat(int statnum, int onoff)
{
	if(statnum) // Stat 1
	{
		if(onoff){ IOCLR0 = 0x00000800; } // On
		else { IOSET0 = 0x00000800; } // Off
   12134:	e5830004 	str	r0, [r3, #4]
				{
					stat(0,ON);
					for(j = 0; j < 500000; j++)
					stat(0,OFF);
					stat(1,ON);
					for(j = 0; j < 500000; j++)
   12138:	1afffffc 	bne	12130 <mode_action+0x15c>
   1213c:	eafffff4 	b	12114 <mode_action+0x140>
					stat(1,OFF);
				}
			}
			sd_raw_sync();
   12140:	eb00040e 	bl	13180 <sd_raw_sync>
			stat(0,OFF);
			log_adc = 0;
   12144:	e3a03000 	mov	r3, #0
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
		else { IOSET0 = 0x00000004; } // Off
   12148:	e5847004 	str	r7, [r4, #4]
					stat(1,OFF);
				}
			}
			sd_raw_sync();
			stat(0,OFF);
			log_adc = 0;
   1214c:	e5c53008 	strb	r3, [r5, #8]
		}

		// if the 'stop' button has been pressed then write everything to
		// the microSD, turn on the STAT0 & STAT1 LEDs, and lock up
		if((IOPIN0 & 0x00000008) == 0)
   12150:	e5943000 	ldr	r3, [r4]
   12154:	e3130008 	tst	r3, #8
   12158:	1affffa1 	bne	11fe4 <mode_action+0x10>
		{
			VICIntEnClr = 0xFFFFFFFF;
   1215c:	e3e03000 	mvn	r3, #0
   12160:	e5033feb 	str	r3, [r3, #-4075]	; 0xfffff015
			// write whatever is left in the data buffer to the microSD
			if(RX_in < 512)
   12164:	e59f3040 	ldr	r3, [pc, #64]	; 121ac <mode_action+0x1d8>
   12168:	e1d320f0 	ldrsh	r2, [r3]
   1216c:	e59f3040 	ldr	r3, [pc, #64]	; 121b4 <mode_action+0x1e0>
   12170:	e3520c02 	cmp	r2, #512	; 0x200
			{
				fat_write_file(handle, (unsigned char *)RX_array1, RX_in);
   12174:	e5930000 	ldr	r0, [r3]
   12178:	b59f103c 	ldrlt	r1, [pc, #60]	; 121bc <mode_action+0x1e8>
				sd_raw_sync();
			}
			else if(RX_in >= 512)
			{
				fat_write_file(handle, (unsigned char *)RX_array2, RX_in - 512);
   1217c:	a59f1040 	ldrge	r1, [pc, #64]	; 121c4 <mode_action+0x1f0>
   12180:	a2422c02 	subge	r2, r2, #512	; 0x200
   12184:	eb000ad8 	bl	14cec <fat_write_file>
				sd_raw_sync();
   12188:	eb0003fc 	bl	13180 <sd_raw_sync>
		if(onoff){ IOCLR0 = 0x00000800; } // On
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
   1218c:	e59f301c 	ldr	r3, [pc, #28]	; 121b0 <mode_action+0x1dc>
   12190:	e3a01004 	mov	r1, #4

void stat(int statnum, int onoff)
{
	if(statnum) // Stat 1
	{
		if(onoff){ IOCLR0 = 0x00000800; } // On
   12194:	e3a02b02 	mov	r2, #2048	; 0x800
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
   12198:	e583100c 	str	r1, [r3, #12]
		else { IOSET0 = 0x00000004; } // Off
   1219c:	e5831004 	str	r1, [r3, #4]

void stat(int statnum, int onoff)
{
	if(statnum) // Stat 1
	{
		if(onoff){ IOCLR0 = 0x00000800; } // On
   121a0:	e583200c 	str	r2, [r3, #12]
		else { IOSET0 = 0x00000800; } // Off
   121a4:	e5832004 	str	r2, [r3, #4]
   121a8:	eafffffa 	b	12198 <mode_action+0x1c4>
   121ac:	40000018 	.word	0x40000018
   121b0:	e0028000 	.word	0xe0028000
   121b4:	40000868 	.word	0x40000868
   121b8:	4000086c 	.word	0x4000086c
   121bc:	40000664 	.word	0x40000664
   121c0:	0007a120 	.word	0x0007a120
   121c4:	40000360 	.word	0x40000360
   121c8:	40000660 	.word	0x40000660
   121cc:	40000870 	.word	0x40000870

000121d0 <mode_2>:
* Timer Interrupt triggered ADC read mode
* 'Frequency' for LOGCON.TXT determines frequency
* 100 is roughly 1 trigger per second
***************************************************/
void mode_2(void)
{
   121d0:	e92d4010 	push	{r4, lr}
	rprintf("MODE 2\n\r");	
   121d4:	e59f0078 	ldr	r0, [pc, #120]	; 12254 <mode_2+0x84>
   121d8:	eb0000ed 	bl	12594 <rprintf>
	enableIRQ();
   121dc:	eb000eb4 	bl	15cb4 <enableIRQ>
	// Timer0  interrupt is an IRQ interrupt
	VICIntSelect &= ~0x00000010;
   121e0:	e3e03000 	mvn	r3, #0
   121e4:	e5132ff3 	ldr	r2, [r3, #-4083]	; 0xfffff00d
   121e8:	e3c22010 	bic	r2, r2, #16
   121ec:	e5032ff3 	str	r2, [r3, #-4083]	; 0xfffff00d
	// Enable Timer0 interrupt
	VICIntEnable |= 0x00000010;
   121f0:	e5132fef 	ldr	r2, [r3, #-4079]	; 0xfffff011
   121f4:	e3822010 	orr	r2, r2, #16
   121f8:	e5032fef 	str	r2, [r3, #-4079]	; 0xfffff011
	// Use slot 2 for UART0 interrupt
	VICVectCntl2 = 0x24;
   121fc:	e3a02024 	mov	r2, #36	; 0x24
   12200:	e5032df7 	str	r2, [r3, #-3575]	; 0xfffff209
	// Set the address of ISR for slot 1
	VICVectAddr2 = (unsigned int)MODE2ISR;
   12204:	e59f204c 	ldr	r2, [pc, #76]	; 12258 <mode_2+0x88>

	T0TCR = 0x00000002;	// Reset counter and prescaler
   12208:	e59f404c 	ldr	r4, [pc, #76]	; 1225c <mode_2+0x8c>
	// Enable Timer0 interrupt
	VICIntEnable |= 0x00000010;
	// Use slot 2 for UART0 interrupt
	VICVectCntl2 = 0x24;
	// Set the address of ISR for slot 1
	VICVectAddr2 = (unsigned int)MODE2ISR;
   1220c:	e5032ef7 	str	r2, [r3, #-3831]	; 0xfffff109

	T0TCR = 0x00000002;	// Reset counter and prescaler
   12210:	e3a03002 	mov	r3, #2
   12214:	e5843004 	str	r3, [r4, #4]
	T0MCR = 0x00000003;	// On match reset the counter and generate interrupt
   12218:	e3a03003 	mov	r3, #3
   1221c:	e5843014 	str	r3, [r4, #20]
	T0MR0 = 58982400 / freq;
   12220:	e59f3038 	ldr	r3, [pc, #56]	; 12260 <mode_2+0x90>
   12224:	e3a007e1 	mov	r0, #58982400	; 0x3840000
   12228:	e5931014 	ldr	r1, [r3, #20]
   1222c:	eb000f69 	bl	15fd8 <__aeabi_idiv>

	T0PR = 0x00000000;
   12230:	e3a03000 	mov	r3, #0
	// Set the address of ISR for slot 1
	VICVectAddr2 = (unsigned int)MODE2ISR;

	T0TCR = 0x00000002;	// Reset counter and prescaler
	T0MCR = 0x00000003;	// On match reset the counter and generate interrupt
	T0MR0 = 58982400 / freq;
   12234:	e5840018 	str	r0, [r4, #24]

	T0PR = 0x00000000;
   12238:	e584300c 	str	r3, [r4, #12]

	T0TCR = 0x00000001; // enable timer
   1223c:	e3a03001 	mov	r3, #1
   12240:	e5843004 	str	r3, [r4, #4]

	stringSize = 512;
   12244:	e59f3018 	ldr	r3, [pc, #24]	; 12264 <mode_2+0x94>
   12248:	e3a02c02 	mov	r2, #512	; 0x200
   1224c:	e5832000 	str	r2, [r3]
	mode_action();
   12250:	ebffff5f 	bl	11fd4 <mode_action>
   12254:	0001655c 	.word	0x0001655c
   12258:	000104a8 	.word	0x000104a8
   1225c:	e0004000 	.word	0xe0004000
   12260:	40000000 	.word	0x40000000
   12264:	4000086c 	.word	0x4000086c

00012268 <mode_1>:
* Trigger is '$'
* Logs '$' and next 99 characters or until CR/LF
*
***********************************************/
void mode_1(void)
{
   12268:	e92d4010 	push	{r4, lr}
	rprintf("MODE 1\n\r");	

	setup_uart0(baud,2);
   1226c:	e59f4024 	ldr	r4, [pc, #36]	; 12298 <mode_1+0x30>
* Logs '$' and next 99 characters or until CR/LF
*
***********************************************/
void mode_1(void)
{
	rprintf("MODE 1\n\r");	
   12270:	e59f0024 	ldr	r0, [pc, #36]	; 1229c <mode_1+0x34>
   12274:	eb0000c6 	bl	12594 <rprintf>

	setup_uart0(baud,2);
   12278:	e5940010 	ldr	r0, [r4, #16]
   1227c:	e3a01002 	mov	r1, #2
   12280:	ebfffbcd 	bl	111bc <setup_uart0>
	stringSize = frame + 2;
   12284:	e1d420f2 	ldrsh	r2, [r4, #2]
   12288:	e59f3010 	ldr	r3, [pc, #16]	; 122a0 <mode_1+0x38>
   1228c:	e2822002 	add	r2, r2, #2
   12290:	e5832000 	str	r2, [r3]

	mode_action();
   12294:	ebffff4e 	bl	11fd4 <mode_action>
   12298:	40000000 	.word	0x40000000
   1229c:	00016565 	.word	0x00016565
   122a0:	4000086c 	.word	0x4000086c

000122a4 <mode_0>:
* Each time the UART interrupt is triggered the
* arriving character is read and added to the
* data buffer
************************************************/
void mode_0(void) // Auto UART mode
{
   122a4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	rprintf("MODE 0\n\r");
   122a8:	e59f0020 	ldr	r0, [pc, #32]	; 122d0 <mode_0+0x2c>
   122ac:	eb0000b8 	bl	12594 <rprintf>
	setup_uart0(baud,1);
   122b0:	e59f301c 	ldr	r3, [pc, #28]	; 122d4 <mode_0+0x30>
   122b4:	e3a01001 	mov	r1, #1
   122b8:	e5930010 	ldr	r0, [r3, #16]
   122bc:	ebfffbbe 	bl	111bc <setup_uart0>
	stringSize = 512;
   122c0:	e59f3010 	ldr	r3, [pc, #16]	; 122d8 <mode_0+0x34>
   122c4:	e3a02c02 	mov	r2, #512	; 0x200
   122c8:	e5832000 	str	r2, [r3]
	mode_action();
   122cc:	ebffff40 	bl	11fd4 <mode_action>
   122d0:	0001656e 	.word	0x0001656e
   122d4:	40000000 	.word	0x40000000
   122d8:	4000086c 	.word	0x4000086c

000122dc <GetGPSDateTime>:
* ?    - time (2nd field, just after 1st comma)
* ?    - active (3rd field, just after 2nd comma)
* ?    - date (10th field, just after 9th comma)
************************************************************************/
void GetGPSDateTime(void)
{
   122dc:	e12fff1e 	bx	lr

000122e0 <main>:
/*******************************************************
 * 		     	MAIN
 ******************************************************/

int main (void)
{
   122e0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   122e4:	e24dd02c 	sub	sp, sp, #44	; 0x2c
	int i;
	char name[32];
	int count = 0;
	
	enableFIQ();
   122e8:	eb000e80 	bl	15cf0 <enableFIQ>
	
	Initialize();
   122ec:	ebfffb7e 	bl	110ec <Initialize>
	
	setup_uart0(9600, 0);
   122f0:	e3a00d96 	mov	r0, #9600	; 0x2580
   122f4:	e3a01000 	mov	r1, #0
   122f8:	ebfffbaf 	bl	111bc <setup_uart0>

	fat_initialize();		
   122fc:	ebfffc41 	bl	11408 <fat_initialize>
		if(onoff){ IOCLR0 = 0x00000800; } // On
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
   12300:	e3a06004 	mov	r6, #4
   12304:	e59f41bc 	ldr	r4, [pc, #444]	; 124c8 <main+0x1e8>
	
	Initialize();
	
	setup_uart0(9600, 0);

	fat_initialize();		
   12308:	e3a05005 	mov	r5, #5
		if(onoff){ IOCLR0 = 0x00000800; } // On
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
   1230c:	e1a08006 	mov	r8, r6

	// Flash Status Lights
	for(i = 0; i < 5; i++)
	{
		stat(0,ON);
		delay_ms(50);
   12310:	e3a00032 	mov	r0, #50	; 0x32

void stat(int statnum, int onoff)
{
	if(statnum) // Stat 1
	{
		if(onoff){ IOCLR0 = 0x00000800; } // On
   12314:	e3a07b02 	mov	r7, #2048	; 0x800
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
   12318:	e584800c 	str	r8, [r4, #12]

	// Flash Status Lights
	for(i = 0; i < 5; i++)
	{
		stat(0,ON);
		delay_ms(50);
   1231c:	ebfffc48 	bl	11444 <delay_ms>
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
		else { IOSET0 = 0x00000004; } // Off
   12320:	e5846004 	str	r6, [r4, #4]
	{
		stat(0,ON);
		delay_ms(50);
		stat(0,OFF);
		stat(1,ON);
		delay_ms(50);
   12324:	e3a00032 	mov	r0, #50	; 0x32

void stat(int statnum, int onoff)
{
	if(statnum) // Stat 1
	{
		if(onoff){ IOCLR0 = 0x00000800; } // On
   12328:	e584700c 	str	r7, [r4, #12]
	{
		stat(0,ON);
		delay_ms(50);
		stat(0,OFF);
		stat(1,ON);
		delay_ms(50);
   1232c:	ebfffc44 	bl	11444 <delay_ms>

	fat_initialize();		


	// Flash Status Lights
	for(i = 0; i < 5; i++)
   12330:	e2555001 	subs	r5, r5, #1
void stat(int statnum, int onoff)
{
	if(statnum) // Stat 1
	{
		if(onoff){ IOCLR0 = 0x00000800; } // On
		else { IOSET0 = 0x00000800; } // Off
   12334:	e5847004 	str	r7, [r4, #4]

	fat_initialize();		


	// Flash Status Lights
	for(i = 0; i < 5; i++)
   12338:	1afffff4 	bne	12310 <main+0x30>
	}
	
	Log_init();

	count++;
	string_printf(name,"LOG%02d.txt",count);
   1233c:	e28d500c 	add	r5, sp, #12
		stat(1,ON);
		delay_ms(50);
		stat(1,OFF);
	}
	
	Log_init();
   12340:	ebfffc8a 	bl	11570 <Log_init>

	count++;
	string_printf(name,"LOG%02d.txt",count);
   12344:	e1a00005 	mov	r0, r5
   12348:	e59f117c 	ldr	r1, [pc, #380]	; 124cc <main+0x1ec>
   1234c:	e3a02001 	mov	r2, #1
   12350:	eb00012b 	bl	12804 <string_printf>
		stat(1,OFF);
	}
	
	Log_init();

	count++;
   12354:	e3a04001 	mov	r4, #1
	string_printf(name,"LOG%02d.txt",count);
	while(root_file_exists(name))
   12358:	ea000015 	b	123b4 <main+0xd4>
	{
		count++;
   1235c:	e2844001 	add	r4, r4, #1
		if(count == 250) 
   12360:	e35400fa 	cmp	r4, #250	; 0xfa
   12364:	1a00000e 	bne	123a4 <main+0xc4>
		{
			rprintf("Too Many Logs!\n\r");
   12368:	e59f0160 	ldr	r0, [pc, #352]	; 124d0 <main+0x1f0>
   1236c:	eb000088 	bl	12594 <rprintf>
		if(onoff){ IOCLR0 = 0x00000800; } // On
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
   12370:	e3a05004 	mov	r5, #4
   12374:	e59f414c 	ldr	r4, [pc, #332]	; 124c8 <main+0x1e8>
   12378:	e1a07005 	mov	r7, r5

void stat(int statnum, int onoff)
{
	if(statnum) // Stat 1
	{
		if(onoff){ IOCLR0 = 0x00000800; } // On
   1237c:	e3a06b02 	mov	r6, #2048	; 0x800
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
   12380:	e584700c 	str	r7, [r4, #12]
			rprintf("Too Many Logs!\n\r");
			while(1)
			{
				stat(0,ON);
				stat(1,ON);
				delay_ms(1000);
   12384:	e3a00ffa 	mov	r0, #1000	; 0x3e8

void stat(int statnum, int onoff)
{
	if(statnum) // Stat 1
	{
		if(onoff){ IOCLR0 = 0x00000800; } // On
   12388:	e584600c 	str	r6, [r4, #12]
			rprintf("Too Many Logs!\n\r");
			while(1)
			{
				stat(0,ON);
				stat(1,ON);
				delay_ms(1000);
   1238c:	ebfffc2c 	bl	11444 <delay_ms>
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
		else { IOSET0 = 0x00000004; } // Off
   12390:	e5845004 	str	r5, [r4, #4]
				stat(0,ON);
				stat(1,ON);
				delay_ms(1000);
				stat(0,OFF);
				stat(1,OFF);
				delay_ms(1000);
   12394:	e3a00ffa 	mov	r0, #1000	; 0x3e8
void stat(int statnum, int onoff)
{
	if(statnum) // Stat 1
	{
		if(onoff){ IOCLR0 = 0x00000800; } // On
		else { IOSET0 = 0x00000800; } // Off
   12398:	e5846004 	str	r6, [r4, #4]
				stat(0,ON);
				stat(1,ON);
				delay_ms(1000);
				stat(0,OFF);
				stat(1,OFF);
				delay_ms(1000);
   1239c:	ebfffc28 	bl	11444 <delay_ms>
   123a0:	eafffff5 	b	1237c <main+0x9c>
			}

		}
		string_printf(name,"LOG%02d.txt",count);
   123a4:	e1a00005 	mov	r0, r5
   123a8:	e59f111c 	ldr	r1, [pc, #284]	; 124cc <main+0x1ec>
   123ac:	e1a02004 	mov	r2, r4
   123b0:	eb000113 	bl	12804 <string_printf>
	
	Log_init();

	count++;
	string_printf(name,"LOG%02d.txt",count);
	while(root_file_exists(name))
   123b4:	e1a00005 	mov	r0, r5
   123b8:	eb00024c 	bl	12cf0 <root_file_exists>
   123bc:	e3500000 	cmp	r0, #0
   123c0:	1affffe5 	bne	1235c <main+0x7c>

		}
		string_printf(name,"LOG%02d.txt",count);
	}
	
	handle = root_open_new(name);
   123c4:	e1a00005 	mov	r0, r5
   123c8:	eb000255 	bl	12d24 <root_open_new>
   123cc:	e59f6100 	ldr	r6, [pc, #256]	; 124d4 <main+0x1f4>
   123d0:	e5860000 	str	r0, [r6]
		

	sd_raw_sync();	
   123d4:	eb000369 	bl	13180 <sd_raw_sync>
	
	// if mode = 2 (ADC) then write out the ADC pins in use
	if(mode == 2)
   123d8:	e59f30f8 	ldr	r3, [pc, #248]	; 124d8 <main+0x1f8>
   123dc:	e5d33005 	ldrb	r3, [r3, #5]
   123e0:	e3530002 	cmp	r3, #2
   123e4:	1a00002b 	bne	12498 <main+0x1b8>
	{
		char mybuf[10];	// eight pins + CR/LF
		mybuf[0] = ad1_3;
   123e8:	e59f30ec 	ldr	r3, [pc, #236]	; 124dc <main+0x1fc>
   123ec:	e5d32004 	ldrb	r2, [r3, #4]
   123f0:	e5cd2000 	strb	r2, [sp]
		mybuf[1] = ad0_3;
   123f4:	e5d32006 	ldrb	r2, [r3, #6]
   123f8:	e5cd2001 	strb	r2, [sp, #1]
		mybuf[2] = ad0_2;
   123fc:	e5d32007 	ldrb	r2, [r3, #7]
   12400:	e5cd2002 	strb	r2, [sp, #2]
		mybuf[3] = ad0_1;
   12404:	e5d32008 	ldrb	r2, [r3, #8]
   12408:	e5cd2003 	strb	r2, [sp, #3]
		mybuf[4] = ad1_2;
   1240c:	e5d32009 	ldrb	r2, [r3, #9]
   12410:	e5cd2004 	strb	r2, [sp, #4]
		mybuf[5] = ad0_4;
   12414:	e5d3200a 	ldrb	r2, [r3, #10]
   12418:	e5cd2005 	strb	r2, [sp, #5]
		mybuf[6] = ad1_7;
   1241c:	e5d3200b 	ldrb	r2, [r3, #11]
		mybuf[7] = ad1_6;
   12420:	e5d3300c 	ldrb	r3, [r3, #12]
		if(onoff){ IOCLR0 = 0x00000800; } // On
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
   12424:	e59f409c 	ldr	r4, [pc, #156]	; 124c8 <main+0x1e8>
		mybuf[1] = ad0_3;
		mybuf[2] = ad0_2;
		mybuf[3] = ad0_1;
		mybuf[4] = ad1_2;
		mybuf[5] = ad0_4;
		mybuf[6] = ad1_7;
   12428:	e5cd2006 	strb	r2, [sp, #6]
		mybuf[7] = ad1_6;
   1242c:	e5cd3007 	strb	r3, [sp, #7]
		mybuf[8] = 13;
		mybuf[9] = 10;	
   12430:	e3a0200a 	mov	r2, #10
		mybuf[3] = ad0_1;
		mybuf[4] = ad1_2;
		mybuf[5] = ad0_4;
		mybuf[6] = ad1_7;
		mybuf[7] = ad1_6;
		mybuf[8] = 13;
   12434:	e3a0300d 	mov	r3, #13
		if(onoff){ IOCLR0 = 0x00000800; } // On
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
   12438:	e3a05004 	mov	r5, #4
		mybuf[3] = ad0_1;
		mybuf[4] = ad1_2;
		mybuf[5] = ad0_4;
		mybuf[6] = ad1_7;
		mybuf[7] = ad1_6;
		mybuf[8] = 13;
   1243c:	e5cd3008 	strb	r3, [sp, #8]
		mybuf[9] = 10;	
   12440:	e5cd2009 	strb	r2, [sp, #9]
	
		stat(0,ON);
				
		if(fat_write_file(handle,(unsigned char *)mybuf, 10) < 0)
   12444:	e5960000 	ldr	r0, [r6]
		if(onoff){ IOCLR0 = 0x00000800; } // On
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
   12448:	e584500c 	str	r5, [r4, #12]
		mybuf[8] = 13;
		mybuf[9] = 10;	
	
		stat(0,ON);
				
		if(fat_write_file(handle,(unsigned char *)mybuf, 10) < 0)
   1244c:	e1a0100d 	mov	r1, sp
   12450:	eb000a25 	bl	14cec <fat_write_file>
   12454:	e3500000 	cmp	r0, #0
   12458:	aa00000c 	bge	12490 <main+0x1b0>
   1245c:	e1a02004 	mov	r2, r4

void stat(int statnum, int onoff)
{
	if(statnum) // Stat 1
	{
		if(onoff){ IOCLR0 = 0x00000800; } // On
   12460:	e3a01b02 	mov	r1, #2048	; 0x800
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
   12464:	e584500c 	str	r5, [r4, #12]
   12468:	e59f3070 	ldr	r3, [pc, #112]	; 124e0 <main+0x200>
		if(fat_write_file(handle,(unsigned char *)mybuf, 10) < 0)
		{
			while(1)
			{
				stat(0,ON);
				for(int j = 0; j < 500000; j++)
   1246c:	e2533001 	subs	r3, r3, #1
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
		else { IOSET0 = 0x00000004; } // Off
   12470:	e5825004 	str	r5, [r2, #4]
		if(fat_write_file(handle,(unsigned char *)mybuf, 10) < 0)
		{
			while(1)
			{
				stat(0,ON);
				for(int j = 0; j < 500000; j++)
   12474:	1afffffc 	bne	1246c <main+0x18c>

void stat(int statnum, int onoff)
{
	if(statnum) // Stat 1
	{
		if(onoff){ IOCLR0 = 0x00000800; } // On
   12478:	e582100c 	str	r1, [r2, #12]
   1247c:	e59f305c 	ldr	r3, [pc, #92]	; 124e0 <main+0x200>
			{
				stat(0,ON);
				for(int j = 0; j < 500000; j++)
				stat(0,OFF);
				stat(1,ON);
				for(int j = 0; j < 500000; j++)
   12480:	e2533001 	subs	r3, r3, #1
void stat(int statnum, int onoff)
{
	if(statnum) // Stat 1
	{
		if(onoff){ IOCLR0 = 0x00000800; } // On
		else { IOSET0 = 0x00000800; } // Off
   12484:	e5841004 	str	r1, [r4, #4]
			{
				stat(0,ON);
				for(int j = 0; j < 500000; j++)
				stat(0,OFF);
				stat(1,ON);
				for(int j = 0; j < 500000; j++)
   12488:	1afffffc 	bne	12480 <main+0x1a0>
   1248c:	eafffff4 	b	12464 <main+0x184>
				stat(1,OFF);
			}
		}
			
		sd_raw_sync();
   12490:	eb00033a 	bl	13180 <sd_raw_sync>
		else { IOSET0 = 0x00000800; } // Off
	}
	else // Stat 0 
	{
		if(onoff){ IOCLR0 = 0x00000004; } // On
		else { IOSET0 = 0x00000004; } // Off
   12494:	e5845004 	str	r5, [r4, #4]
			
		sd_raw_sync();
		stat(0,OFF);
	}	
	
	if(mode == 0){ mode_0(); }
   12498:	e59f3038 	ldr	r3, [pc, #56]	; 124d8 <main+0x1f8>
   1249c:	e5d33005 	ldrb	r3, [r3, #5]
   124a0:	e3530000 	cmp	r3, #0
   124a4:	0bffff7e 	bleq	122a4 <mode_0>
	else if(mode == 1){ mode_1(); }
   124a8:	e3530001 	cmp	r3, #1
   124ac:	0bffff6d 	bleq	12268 <mode_1>
	else if(mode == 2){ mode_2(); }
   124b0:	e3530002 	cmp	r3, #2
   124b4:	0bffff45 	bleq	121d0 <mode_2>

    	return 0;
}
   124b8:	e3a00000 	mov	r0, #0
   124bc:	e28dd02c 	add	sp, sp, #44	; 0x2c
   124c0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   124c4:	e12fff1e 	bx	lr
   124c8:	e0028000 	.word	0xe0028000
   124cc:	00016577 	.word	0x00016577
   124d0:	00016583 	.word	0x00016583
   124d4:	40000868 	.word	0x40000868
   124d8:	40000018 	.word	0x40000018
   124dc:	40000000 	.word	0x40000000
   124e0:	0007a120 	.word	0x0007a120

000124e4 <_read_r>:
		uart0Putch(c);
	}
*/
//	return len - i;
	return 0;
}
   124e4:	e3a00000 	mov	r0, #0
   124e8:	e12fff1e 	bx	lr

000124ec <_write_r>:
		if (*p == '\n' ) uart0Putch('\r');
		uart0Putch(*p++);
	}
*/
	return len;
}
   124ec:	e1a00003 	mov	r0, r3
   124f0:	e12fff1e 	bx	lr

000124f4 <_close_r>:
int _close_r(
    struct _reent *r, 
    int file)
{
	return 0;
}
   124f4:	e3a00000 	mov	r0, #0
   124f8:	e12fff1e 	bx	lr

000124fc <_lseek_r>:
    int file, 
    _off_t ptr, 
    int dir)
{
	return (_off_t)0;	/*  Always indicate we are at file beginning.	*/
}
   124fc:	e3a00000 	mov	r0, #0
   12500:	e12fff1e 	bx	lr

00012504 <_fstat_r>:
    struct _reent *r, 
    int file, 
    struct stat *st)
{
	/*  Always set as character device.				*/
	st->st_mode = S_IFCHR;	
   12504:	e3a03a02 	mov	r3, #8192	; 0x2000
   12508:	e5823004 	str	r3, [r2, #4]
		/* assigned to strong type with implicit 	*/
		/* signed/unsigned conversion.  Required by 	*/
		/* newlib.					*/

	return 0;
}
   1250c:	e3a00000 	mov	r0, #0
   12510:	e12fff1e 	bx	lr

00012514 <isatty>:
int isatty(int file); /* avoid warning */

int isatty(int file)
{
	return 1;
}
   12514:	e3a00001 	mov	r0, #1
   12518:	e12fff1e 	bx	lr

0001251c <_sbrk_r>:
    struct _reent *_s_r, 
    ptrdiff_t nbytes)
{
	char  *base;		/*  errno should be set to  ENOMEM on error	*/

	if (!heap_ptr) {	/*  Initialize if first time through.		*/
   1251c:	e59f301c 	ldr	r3, [pc, #28]	; 12540 <_sbrk_r+0x24>
   12520:	e5932000 	ldr	r2, [r3]
   12524:	e3520000 	cmp	r2, #0
		heap_ptr = end;
   12528:	059f2014 	ldreq	r2, [pc, #20]	; 12544 <_sbrk_r+0x28>
   1252c:	05832000 	streq	r2, [r3]
	}
	base = heap_ptr;	/*  Point to end of heap.			*/
   12530:	e5930000 	ldr	r0, [r3]
	heap_ptr += nbytes;	/*  Increase heap.				*/
   12534:	e0801001 	add	r1, r0, r1
   12538:	e5831000 	str	r1, [r3]
	
	return base;		/*  Return pointer to start of new heap area.	*/
}
   1253c:	e12fff1e 	bx	lr
   12540:	4000002c 	.word	0x4000002c
   12544:	40001700 	.word	0x40001700

00012548 <myputchar>:
    putcharfunc = put;
}

static void myputchar(unsigned char c)
{
    if(c == '\n') putcharfunc('\r');
   12548:	e350000a 	cmp	r0, #10
{
    putcharfunc = put;
}

static void myputchar(unsigned char c)
{
   1254c:	e92d4030 	push	{r4, r5, lr}
   12550:	e1a05000 	mov	r5, r0
   12554:	e59f4024 	ldr	r4, [pc, #36]	; 12580 <myputchar+0x38>
    if(c == '\n') putcharfunc('\r');
   12558:	03a0000d 	moveq	r0, #13
   1255c:	0594c000 	ldreq	ip, [r4]
   12560:	01a0e00f 	moveq	lr, pc
   12564:	012fff1c 	bxeq	ip
    putcharfunc(c);
   12568:	e1a00005 	mov	r0, r5
   1256c:	e594c000 	ldr	ip, [r4]
   12570:	e1a0e00f 	mov	lr, pc
   12574:	e12fff1c 	bx	ip
}
   12578:	e8bd4030 	pop	{r4, r5, lr}
   1257c:	e12fff1e 	bx	lr
   12580:	40000030 	.word	0x40000030

00012584 <rprintf_devopen>:

static int (*putcharfunc)(int c);

void rprintf_devopen( int(*put)(int) )
{
    putcharfunc = put;
   12584:	e59f3004 	ldr	r3, [pc, #4]	; 12590 <rprintf_devopen+0xc>
   12588:	e5830000 	str	r0, [r3]
   1258c:	e12fff1e 	bx	lr
   12590:	40000030 	.word	0x40000030

00012594 <rprintf>:
    if(c == '\n') putcharfunc('\r');
    putcharfunc(c);
}

void rprintf(char const *format, ...)
{
   12594:	e92d000f 	push	{r0, r1, r2, r3}
   12598:	e92d4fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    #endif

    unsigned char fill;
    unsigned char width;

    va_start (ap, format);
   1259c:	e28d3038 	add	r3, sp, #56	; 0x38
    if(c == '\n') putcharfunc('\r');
    putcharfunc(c);
}

void rprintf(char const *format, ...)
{
   125a0:	e59d6034 	ldr	r6, [sp, #52]	; 0x34
    #endif

    unsigned char fill;
    unsigned char width;

    va_start (ap, format);
   125a4:	e58d3000 	str	r3, [sp]
        base = 10;

        format_flag = *format++; //get char after '%'

        #ifdef PADDING
            width=0; //no formatting
   125a8:	e3a08000 	mov	r8, #0
    unsigned char width;

    va_start (ap, format);
    for (;;)
    {
		delay_ms(1); //Added for VCOM testing - without it, rprintf will overrun the VCOM buffer causing it to crash
   125ac:	e3a00001 	mov	r0, #1
   125b0:	ebfffba3 	bl	11444 <delay_ms>
   125b4:	e1a05006 	mov	r5, r6
		
        while ((format_flag = *(format++)) != '%')
   125b8:	ea000002 	b	125c8 <rprintf+0x34>
        {      // Until '%' or '\0'
            if (!format_flag){va_end (ap); return;}
   125bc:	e3500000 	cmp	r0, #0
   125c0:	0a000080 	beq	127c8 <rprintf+0x234>
                myputchar(format_flag);
   125c4:	ebffffdf 	bl	12548 <myputchar>
    va_start (ap, format);
    for (;;)
    {
		delay_ms(1); //Added for VCOM testing - without it, rprintf will overrun the VCOM buffer causing it to crash
		
        while ((format_flag = *(format++)) != '%')
   125c8:	e4d50001 	ldrb	r0, [r5], #1
   125cc:	e3500025 	cmp	r0, #37	; 0x25
   125d0:	1afffff9 	bne	125bc <rprintf+0x28>
        }

        issigned=0; //default unsigned
        base = 10;

        format_flag = *format++; //get char after '%'
   125d4:	e5d50000 	ldrb	r0, [r5]

        #ifdef PADDING
            width=0; //no formatting
            fill=0;  //no formatting
            if(format_flag=='0' || format_flag==' ') //SPACE or ZERO padding  ?
   125d8:	e20030ef 	and	r3, r0, #239	; 0xef
   125dc:	e3530020 	cmp	r3, #32
        base = 10;

        format_flag = *format++; //get char after '%'

        #ifdef PADDING
            width=0; //no formatting
   125e0:	13a04000 	movne	r4, #0
        }

        issigned=0; //default unsigned
        base = 10;

        format_flag = *format++; //get char after '%'
   125e4:	12856001 	addne	r6, r5, #1

        #ifdef PADDING
            width=0; //no formatting
            fill=0;  //no formatting
   125e8:	11a07004 	movne	r7, r4
   125ec:	1a00000a 	bne	1261c <rprintf+0x88>
            if(format_flag=='0' || format_flag==' ') //SPACE or ZERO padding  ?
            {
                fill=format_flag;
                format_flag = *format++; //get char after padding char
   125f0:	e5d53001 	ldrb	r3, [r5, #1]
                if(format_flag>='0' && format_flag<='9')
   125f4:	e2434030 	sub	r4, r3, #48	; 0x30
   125f8:	e20440ff 	and	r4, r4, #255	; 0xff
   125fc:	e3540009 	cmp	r4, #9
        }

        issigned=0; //default unsigned
        base = 10;

        format_flag = *format++; //get char after '%'
   12600:	91a07000 	movls	r7, r0
                fill=format_flag;
                format_flag = *format++; //get char after padding char
                if(format_flag>='0' && format_flag<='9')
                {
                    width=format_flag-'0';
                    format_flag = *format++; //get char after width char
   12604:	95d50002 	ldrbls	r0, [r5, #2]
        }

        issigned=0; //default unsigned
        base = 10;

        format_flag = *format++; //get char after '%'
   12608:	81a07000 	movhi	r7, r0
            width=0; //no formatting
            fill=0;  //no formatting
            if(format_flag=='0' || format_flag==' ') //SPACE or ZERO padding  ?
            {
                fill=format_flag;
                format_flag = *format++; //get char after padding char
   1260c:	82856002 	addhi	r6, r5, #2
   12610:	81a00003 	movhi	r0, r3
        base = 10;

        format_flag = *format++; //get char after '%'

        #ifdef PADDING
            width=0; //no formatting
   12614:	83a04000 	movhi	r4, #0
                fill=format_flag;
                format_flag = *format++; //get char after padding char
                if(format_flag>='0' && format_flag<='9')
                {
                    width=format_flag-'0';
                    format_flag = *format++; //get char after width char
   12618:	92856003 	addls	r6, r5, #3
        #endif

        #ifdef USE_LONG
            islong=0; //default int value
            #ifdef USE_UPPER
            if(format_flag=='l' || format_flag=='L') //Long value
   1261c:	e20030df 	and	r3, r0, #223	; 0xdf
   12620:	e353004c 	cmp	r3, #76	; 0x4c
            #else
            if(format_flag=='l') //Long value
            #endif
        {
            islong=1;
            format_flag = *format++; //get char after 'l' or 'L'
   12624:	04d60001 	ldrbeq	r0, [r6], #1
        }
        #endif

        switch (format_flag)
   12628:	e3500058 	cmp	r0, #88	; 0x58
   1262c:	0a000060 	beq	127b4 <rprintf+0x220>
   12630:	8a00000b 	bhi	12664 <rprintf+0xd0>
   12634:	e3500049 	cmp	r0, #73	; 0x49
   12638:	0a000060 	beq	127c0 <rprintf+0x22c>
   1263c:	8a000003 	bhi	12650 <rprintf+0xbc>
   12640:	e3500043 	cmp	r0, #67	; 0x43
   12644:	0a000015 	beq	126a0 <rprintf+0x10c>
   12648:	e3500044 	cmp	r0, #68	; 0x44
   1264c:	ea00000a 	b	1267c <rprintf+0xe8>
   12650:	e3500053 	cmp	r0, #83	; 0x53
   12654:	0a000017 	beq	126b8 <rprintf+0x124>
   12658:	e3500055 	cmp	r0, #85	; 0x55
   1265c:	1a000013 	bne	126b0 <rprintf+0x11c>
   12660:	ea000051 	b	127ac <rprintf+0x218>
   12664:	e3500069 	cmp	r0, #105	; 0x69
   12668:	0a000054 	beq	127c0 <rprintf+0x22c>
   1266c:	8a000004 	bhi	12684 <rprintf+0xf0>
   12670:	e3500063 	cmp	r0, #99	; 0x63
   12674:	0a000009 	beq	126a0 <rprintf+0x10c>
   12678:	e3500064 	cmp	r0, #100	; 0x64
   1267c:	1a00000b 	bne	126b0 <rprintf+0x11c>
   12680:	ea00004e 	b	127c0 <rprintf+0x22c>
   12684:	e3500075 	cmp	r0, #117	; 0x75
   12688:	0a000047 	beq	127ac <rprintf+0x218>
   1268c:	e3500078 	cmp	r0, #120	; 0x78
   12690:	0a000047 	beq	127b4 <rprintf+0x220>
   12694:	e3500073 	cmp	r0, #115	; 0x73
   12698:	1a000004 	bne	126b0 <rprintf+0x11c>
   1269c:	ea000005 	b	126b8 <rprintf+0x124>
            #ifdef USE_CHAR
                case 'c':
                    #ifdef USE_UPPER
                    case 'C':
                #endif
                format_flag = va_arg(ap,int);
   126a0:	e59d3000 	ldr	r3, [sp]
   126a4:	e2832004 	add	r2, r3, #4
   126a8:	e58d2000 	str	r2, [sp]
   126ac:	e5d30000 	ldrb	r0, [r3]
                // no break -> run into default
            #endif

            default:
                myputchar(format_flag);
   126b0:	ebffffa4 	bl	12548 <myputchar>
                continue;
   126b4:	eaffffbc 	b	125ac <rprintf+0x18>
                #ifdef USE_STRING
                    #ifdef USE_UPPER
                    case 'S':
                #endif
                case 's':
                ptr = (unsigned char*)va_arg(ap,char *);
   126b8:	e59d3000 	ldr	r3, [sp]
{
    if(c == '\n') putcharfunc('\r');
    putcharfunc(c);
}

void rprintf(char const *format, ...)
   126bc:	e5934000 	ldr	r4, [r3]
                #ifdef USE_STRING
                    #ifdef USE_UPPER
                    case 'S':
                #endif
                case 's':
                ptr = (unsigned char*)va_arg(ap,char *);
   126c0:	e2832004 	add	r2, r3, #4
   126c4:	e58d2000 	str	r2, [sp]
{
    if(c == '\n') putcharfunc('\r');
    putcharfunc(c);
}

void rprintf(char const *format, ...)
   126c8:	e2444001 	sub	r4, r4, #1
                    #ifdef USE_UPPER
                    case 'S':
                #endif
                case 's':
                ptr = (unsigned char*)va_arg(ap,char *);
                while(*ptr) { myputchar(*ptr); ptr++; }
   126cc:	ea000000 	b	126d4 <rprintf+0x140>
   126d0:	ebffff9c 	bl	12548 <myputchar>
   126d4:	e5f40001 	ldrb	r0, [r4, #1]!
   126d8:	e3500000 	cmp	r0, #0
   126dc:	1afffffb 	bne	126d0 <rprintf+0x13c>
   126e0:	eaffffb1 	b	125ac <rprintf+0x18>

                if(issigned) //Signed types
                {
                    #ifdef USE_LONG
                        if(islong) { s_val = va_arg(ap,long); }
                            else { s_val = va_arg(ap,int); }
   126e4:	e2832004 	add	r2, r3, #4
   126e8:	e58d2000 	str	r2, [sp]
   126ec:	e5935000 	ldr	r5, [r3]
                        #else
                        s_val = va_arg(ap,int);
                    #endif

                    if(s_val < 0) //Value negativ ?
   126f0:	e3550000 	cmp	r5, #0
                    {
                        s_val = - s_val; //Make it positiv
                        myputchar('-');    //Output sign
   126f4:	b3a0002d 	movlt	r0, #45	; 0x2d
                        s_val = va_arg(ap,int);
                    #endif

                    if(s_val < 0) //Value negativ ?
                    {
                        s_val = - s_val; //Make it positiv
   126f8:	b2655000 	rsblt	r5, r5, #0
                        myputchar('-');    //Output sign
   126fc:	bbffff91 	bllt	12548 <myputchar>
            if (!format_flag){va_end (ap); return;}
                myputchar(format_flag);
        }

        issigned=0; //default unsigned
        base = 10;
   12700:	e3a0a00a 	mov	sl, #10
   12704:	ea000002 	b	12714 <rprintf+0x180>
                }
                else //Unsigned types
                {
                    #ifdef USE_LONG
                        if(islong) { u_val = va_arg(ap,unsigned long); }
                            else { u_val = va_arg(ap,unsigned int); }
   12708:	e2832004 	add	r2, r3, #4
   1270c:	e58d2000 	str	r2, [sp]
   12710:	e5935000 	ldr	r5, [r3]
                        u_val = va_arg(ap,unsigned int);
                    #endif
                }

                ptr = scratch + SCRATCH;
                *--ptr = 0;
   12714:	e5cd800f 	strb	r8, [sp, #15]
{
    if(c == '\n') putcharfunc('\r');
    putcharfunc(c);
}

void rprintf(char const *format, ...)
   12718:	e28d900e 	add	r9, sp, #14

                ptr = scratch + SCRATCH;
                *--ptr = 0;
                do
                {
                    char ch = u_val % base + '0';
   1271c:	e1a00005 	mov	r0, r5
   12720:	e1a0100a 	mov	r1, sl
   12724:	eb000e7d 	bl	16120 <__umodsi3>
   12728:	e20000ff 	and	r0, r0, #255	; 0xff
   1272c:	e2803030 	add	r3, r0, #48	; 0x30
   12730:	e20330ff 	and	r3, r3, #255	; 0xff
                    #ifdef USE_HEX
                        if (ch > '9')
   12734:	e3530039 	cmp	r3, #57	; 0x39
                        {
                            ch += 'a' - '9' - 1;
                            #ifdef USE_UPPERHEX
                            ch-=0x20;
   12738:	82803037 	addhi	r3, r0, #55	; 0x37
   1273c:	820330ff 	andhi	r3, r3, #255	; 0xff
                        #endif
                    }
                    #endif
                    *--ptr = ch;
                    u_val /= base;
   12740:	e1a00005 	mov	r0, r5
   12744:	e1a0100a 	mov	r1, sl
                            #ifdef USE_UPPERHEX
                            ch-=0x20;
                        #endif
                    }
                    #endif
                    *--ptr = ch;
   12748:	e1a0b009 	mov	fp, r9
   1274c:	e4493001 	strb	r3, [r9], #-1
                    u_val /= base;
   12750:	eb000dda 	bl	15ec0 <__aeabi_uidiv>

                    #ifdef PADDING
                        if(width) width--; //calculate number of padding chars
   12754:	e3540000 	cmp	r4, #0
   12758:	12444001 	subne	r4, r4, #1
   1275c:	120440ff 	andne	r4, r4, #255	; 0xff
                    #endif
                }
                while (u_val);
   12760:	e3500000 	cmp	r0, #0
                            ch-=0x20;
                        #endif
                    }
                    #endif
                    *--ptr = ch;
                    u_val /= base;
   12764:	e1a05000 	mov	r5, r0

                    #ifdef PADDING
                        if(width) width--; //calculate number of padding chars
                    #endif
                }
                while (u_val);
   12768:	1affffeb 	bne	1271c <rprintf+0x188>
   1276c:	e1a02004 	mov	r2, r4
   12770:	e1a0300b 	mov	r3, fp
   12774:	ea000000 	b	1277c <rprintf+0x1e8>

                #ifdef PADDING
                    while(width--) *--ptr = fill; //insert padding chars
   12778:	e5637001 	strb	r7, [r3, #-1]!
   1277c:	e2444001 	sub	r4, r4, #1
   12780:	e20440ff 	and	r4, r4, #255	; 0xff
   12784:	e35400ff 	cmp	r4, #255	; 0xff
   12788:	1afffffa 	bne	12778 <rprintf+0x1e4>
{
    if(c == '\n') putcharfunc('\r');
    putcharfunc(c);
}

void rprintf(char const *format, ...)
   1278c:	e062b00b 	rsb	fp, r2, fp
   12790:	e24bb001 	sub	fp, fp, #1
   12794:	ea000000 	b	1279c <rprintf+0x208>

                #ifdef PADDING
                    while(width--) *--ptr = fill; //insert padding chars
                #endif

                while(*ptr) { myputchar(*ptr); ptr++; }
   12798:	ebffff6a 	bl	12548 <myputchar>
   1279c:	e5fb0001 	ldrb	r0, [fp, #1]!
   127a0:	e3500000 	cmp	r0, #0
   127a4:	1afffffb 	bne	12798 <rprintf+0x204>
   127a8:	eaffff7f 	b	125ac <rprintf+0x18>
            if (!format_flag){va_end (ap); return;}
                myputchar(format_flag);
        }

        issigned=0; //default unsigned
        base = 10;
   127ac:	e3a0a00a 	mov	sl, #10
   127b0:	ea000000 	b	127b8 <rprintf+0x224>
                    goto CONVERSION_LOOP;
                    case 'x':
                    #ifdef USE_UPPER
                    case 'X':
                #endif
                base = 16;
   127b4:	e3a0a010 	mov	sl, #16
   127b8:	e59d3000 	ldr	r3, [sp]
   127bc:	eaffffd1 	b	12708 <rprintf+0x174>
   127c0:	e59d3000 	ldr	r3, [sp]
   127c4:	eaffffc6 	b	126e4 <rprintf+0x150>
                #endif

                while(*ptr) { myputchar(*ptr); ptr++; }
                    }
        }
    }
   127c8:	e8bd4fff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127cc:	e28dd010 	add	sp, sp, #16
   127d0:	e12fff1e 	bx	lr

000127d4 <string_printf_devopen>:

static int (*putcharfunc)(int c);

void string_printf_devopen( int(*put)(int) )
{
    putcharfunc = put;
   127d4:	e59f3004 	ldr	r3, [pc, #4]	; 127e0 <string_printf_devopen+0xc>
   127d8:	e5830000 	str	r0, [r3]
   127dc:	e12fff1e 	bx	lr
   127e0:	40000034 	.word	0x40000034

000127e4 <string_myputchar>:
}

void string_myputchar(char* s_printf_buffer, unsigned char c)
{
	s_printf_buffer[buffer_ptr] = c;
   127e4:	e59f3014 	ldr	r3, [pc, #20]	; 12800 <string_myputchar+0x1c>
   127e8:	e5d32000 	ldrb	r2, [r3]
   127ec:	e7c01002 	strb	r1, [r0, r2]
	buffer_ptr++;
   127f0:	e5d32000 	ldrb	r2, [r3]
   127f4:	e2822001 	add	r2, r2, #1
   127f8:	e5c32000 	strb	r2, [r3]
   127fc:	e12fff1e 	bx	lr
   12800:	40000a70 	.word	0x40000a70

00012804 <string_printf>:
}

void string_printf(char* string_printf_buffer, char const *format, ...)
{
   12804:	e92d000e 	push	{r1, r2, r3}
   12808:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    unsigned short base;
    unsigned char *ptr;
    unsigned char issigned=0;
    va_list ap;
	
	buffer_ptr = 0;
   1280c:	e59f3260 	ldr	r3, [pc, #608]	; 12a74 <string_printf+0x270>
	s_printf_buffer[buffer_ptr] = c;
	buffer_ptr++;
}

void string_printf(char* string_printf_buffer, char const *format, ...)
{
   12810:	e24dd014 	sub	sp, sp, #20
    unsigned short base;
    unsigned char *ptr;
    unsigned char issigned=0;
    va_list ap;
	
	buffer_ptr = 0;
   12814:	e3a0a000 	mov	sl, #0
   12818:	e5c3a000 	strb	sl, [r3]
    #endif

    unsigned char fill;
    unsigned char width;

    va_start (ap, format);
   1281c:	e28d303c 	add	r3, sp, #60	; 0x3c
	s_printf_buffer[buffer_ptr] = c;
	buffer_ptr++;
}

void string_printf(char* string_printf_buffer, char const *format, ...)
{
   12820:	e1a06000 	mov	r6, r0
   12824:	e59d4038 	ldr	r4, [sp, #56]	; 0x38
    #endif

    unsigned char fill;
    unsigned char width;

    va_start (ap, format);
   12828:	e58d3004 	str	r3, [sp, #4]
   1282c:	ea000007 	b	12850 <string_printf+0x4c>

    for (;;)
    {
        while ((format_flag = *(format++)) != '%')
        {      // Until '%' or '\0'
            if (!format_flag)
   12830:	e3510000 	cmp	r1, #0
   12834:	1a000002 	bne	12844 <string_printf+0x40>
			{
				va_end (ap); 

				string_myputchar(string_printf_buffer, '\0');
   12838:	e1a00006 	mov	r0, r6
   1283c:	ebffffe8 	bl	127e4 <string_myputchar>
   12840:	ea000087 	b	12a64 <string_printf+0x260>

    va_start (ap, format);

    for (;;)
    {
        while ((format_flag = *(format++)) != '%')
   12844:	e2844001 	add	r4, r4, #1

				string_myputchar(string_printf_buffer, '\0');
				
				return;
			}
            string_myputchar(string_printf_buffer, format_flag);
   12848:	e1a00006 	mov	r0, r6
   1284c:	ebffffe4 	bl	127e4 <string_myputchar>

    va_start (ap, format);

    for (;;)
    {
        while ((format_flag = *(format++)) != '%')
   12850:	e5d41000 	ldrb	r1, [r4]
   12854:	e3510025 	cmp	r1, #37	; 0x25
   12858:	1afffff4 	bne	12830 <string_printf+0x2c>
        }

        issigned=0; //default unsigned
        base = 10;

        format_flag = *format++; //get char after '%'
   1285c:	e5d41001 	ldrb	r1, [r4, #1]

        #ifdef PADDING
            width=0; //no formatting
            fill=0;  //no formatting
            if(format_flag=='0' || format_flag==' ') //SPACE or ZERO padding  ?
   12860:	e20130ef 	and	r3, r1, #239	; 0xef
   12864:	e3530020 	cmp	r3, #32
        base = 10;

        format_flag = *format++; //get char after '%'

        #ifdef PADDING
            width=0; //no formatting
   12868:	13a05000 	movne	r5, #0
        }

        issigned=0; //default unsigned
        base = 10;

        format_flag = *format++; //get char after '%'
   1286c:	12844002 	addne	r4, r4, #2

        #ifdef PADDING
            width=0; //no formatting
            fill=0;  //no formatting
   12870:	11a08005 	movne	r8, r5
   12874:	1a00000b 	bne	128a8 <string_printf+0xa4>
            if(format_flag=='0' || format_flag==' ') //SPACE or ZERO padding  ?
            {
                fill=format_flag;
                format_flag = *format++; //get char after padding char
   12878:	e5d43002 	ldrb	r3, [r4, #2]
                if(format_flag>='0' && format_flag<='9')
   1287c:	e2435030 	sub	r5, r3, #48	; 0x30
   12880:	e20550ff 	and	r5, r5, #255	; 0xff
   12884:	e3550009 	cmp	r5, #9
                {
                    width=format_flag-'0';
                    format_flag = *format++; //get char after width char
   12888:	95d43003 	ldrbls	r3, [r4, #3]
        }

        issigned=0; //default unsigned
        base = 10;

        format_flag = *format++; //get char after '%'
   1288c:	81a08001 	movhi	r8, r1
   12890:	91a08001 	movls	r8, r1
            width=0; //no formatting
            fill=0;  //no formatting
            if(format_flag=='0' || format_flag==' ') //SPACE or ZERO padding  ?
            {
                fill=format_flag;
                format_flag = *format++; //get char after padding char
   12894:	82844003 	addhi	r4, r4, #3
   12898:	81a01003 	movhi	r1, r3
        base = 10;

        format_flag = *format++; //get char after '%'

        #ifdef PADDING
            width=0; //no formatting
   1289c:	83a05000 	movhi	r5, #0
                fill=format_flag;
                format_flag = *format++; //get char after padding char
                if(format_flag>='0' && format_flag<='9')
                {
                    width=format_flag-'0';
                    format_flag = *format++; //get char after width char
   128a0:	92844004 	addls	r4, r4, #4
   128a4:	91a01003 	movls	r1, r3
        #endif

        #ifdef USE_LONG
            islong=0; //default int value
            #ifdef USE_UPPER
            if(format_flag=='l' || format_flag=='L') //Long value
   128a8:	e20130df 	and	r3, r1, #223	; 0xdf
   128ac:	e353004c 	cmp	r3, #76	; 0x4c
            #else
            if(format_flag=='l') //Long value
            #endif
        {
            islong=1;
            format_flag = *format++; //get char after 'l' or 'L'
   128b0:	04d41001 	ldrbeq	r1, [r4], #1
        }
        #endif

        switch (format_flag)
   128b4:	e3510058 	cmp	r1, #88	; 0x58
   128b8:	0a000064 	beq	12a50 <string_printf+0x24c>
   128bc:	8a00000b 	bhi	128f0 <string_printf+0xec>
   128c0:	e3510049 	cmp	r1, #73	; 0x49
   128c4:	0a000064 	beq	12a5c <string_printf+0x258>
   128c8:	8a000003 	bhi	128dc <string_printf+0xd8>
   128cc:	e3510043 	cmp	r1, #67	; 0x43
   128d0:	0a000015 	beq	1292c <string_printf+0x128>
   128d4:	e3510044 	cmp	r1, #68	; 0x44
   128d8:	ea00000a 	b	12908 <string_printf+0x104>
   128dc:	e3510053 	cmp	r1, #83	; 0x53
   128e0:	0a000016 	beq	12940 <string_printf+0x13c>
   128e4:	e3510055 	cmp	r1, #85	; 0x55
   128e8:	1affffd6 	bne	12848 <string_printf+0x44>
   128ec:	ea000055 	b	12a48 <string_printf+0x244>
   128f0:	e3510069 	cmp	r1, #105	; 0x69
   128f4:	0a000058 	beq	12a5c <string_printf+0x258>
   128f8:	8a000004 	bhi	12910 <string_printf+0x10c>
   128fc:	e3510063 	cmp	r1, #99	; 0x63
   12900:	0a000009 	beq	1292c <string_printf+0x128>
   12904:	e3510064 	cmp	r1, #100	; 0x64
   12908:	1affffce 	bne	12848 <string_printf+0x44>
   1290c:	ea000052 	b	12a5c <string_printf+0x258>
   12910:	e3510075 	cmp	r1, #117	; 0x75
   12914:	0a00004b 	beq	12a48 <string_printf+0x244>
   12918:	e3510078 	cmp	r1, #120	; 0x78
   1291c:	0a00004b 	beq	12a50 <string_printf+0x24c>
   12920:	e3510073 	cmp	r1, #115	; 0x73
   12924:	1affffc7 	bne	12848 <string_printf+0x44>
   12928:	ea000004 	b	12940 <string_printf+0x13c>
            #ifdef USE_CHAR
                case 'c':
                    #ifdef USE_UPPER
                    case 'C':
                #endif
                format_flag = va_arg(ap,int);
   1292c:	e59d3004 	ldr	r3, [sp, #4]
   12930:	e2832004 	add	r2, r3, #4
   12934:	e58d2004 	str	r2, [sp, #4]
   12938:	e5d31000 	ldrb	r1, [r3]
   1293c:	eaffffc1 	b	12848 <string_printf+0x44>
                #ifdef USE_STRING
                    #ifdef USE_UPPER
                    case 'S':
                #endif
                case 's':
                ptr = (unsigned char*)va_arg(ap,char *);
   12940:	e59d3004 	ldr	r3, [sp, #4]
{
	s_printf_buffer[buffer_ptr] = c;
	buffer_ptr++;
}

void string_printf(char* string_printf_buffer, char const *format, ...)
   12944:	e5935000 	ldr	r5, [r3]
                #ifdef USE_STRING
                    #ifdef USE_UPPER
                    case 'S':
                #endif
                case 's':
                ptr = (unsigned char*)va_arg(ap,char *);
   12948:	e2832004 	add	r2, r3, #4
   1294c:	e58d2004 	str	r2, [sp, #4]
{
	s_printf_buffer[buffer_ptr] = c;
	buffer_ptr++;
}

void string_printf(char* string_printf_buffer, char const *format, ...)
   12950:	e2455001 	sub	r5, r5, #1
                    #ifdef USE_UPPER
                    case 'S':
                #endif
                case 's':
                ptr = (unsigned char*)va_arg(ap,char *);
                while(*ptr) 
   12954:	ea000001 	b	12960 <string_printf+0x15c>
				{ 
					string_myputchar(string_printf_buffer, *ptr); 
   12958:	e1a00006 	mov	r0, r6
   1295c:	ebffffa0 	bl	127e4 <string_myputchar>
                    #ifdef USE_UPPER
                    case 'S':
                #endif
                case 's':
                ptr = (unsigned char*)va_arg(ap,char *);
                while(*ptr) 
   12960:	e5f51001 	ldrb	r1, [r5, #1]!
   12964:	e3510000 	cmp	r1, #0
   12968:	1afffffa 	bne	12958 <string_printf+0x154>
   1296c:	eaffffb7 	b	12850 <string_printf+0x4c>

                if(issigned) //Signed types
                {
                    #ifdef USE_LONG
                        if(islong) { s_val = va_arg(ap,long); }
                            else { s_val = va_arg(ap,int); }
   12970:	e2832004 	add	r2, r3, #4
   12974:	e58d2004 	str	r2, [sp, #4]
   12978:	e5937000 	ldr	r7, [r3]
                        #else
                        s_val = va_arg(ap,int);
                    #endif

                    if(s_val < 0) //Value negativ ?
   1297c:	e3570000 	cmp	r7, #0
                    {
                        s_val = - s_val; //Make it positiv
                        string_myputchar(string_printf_buffer, '-');    //Output sign
   12980:	b1a00006 	movlt	r0, r6
   12984:	b3a0102d 	movlt	r1, #45	; 0x2d
                        s_val = va_arg(ap,int);
                    #endif

                    if(s_val < 0) //Value negativ ?
                    {
                        s_val = - s_val; //Make it positiv
   12988:	b2677000 	rsblt	r7, r7, #0
                        string_myputchar(string_printf_buffer, '-');    //Output sign
   1298c:	bbffff94 	bllt	127e4 <string_myputchar>
			}
            string_myputchar(string_printf_buffer, format_flag);
        }

        issigned=0; //default unsigned
        base = 10;
   12990:	e3a0900a 	mov	r9, #10
   12994:	ea000002 	b	129a4 <string_printf+0x1a0>
                }
                else //Unsigned types
                {
                    #ifdef USE_LONG
                        if(islong) { u_val = va_arg(ap,unsigned long); }
                            else { u_val = va_arg(ap,unsigned int); }
   12998:	e2832004 	add	r2, r3, #4
   1299c:	e58d2004 	str	r2, [sp, #4]
   129a0:	e5937000 	ldr	r7, [r3]
                        u_val = va_arg(ap,unsigned int);
                    #endif
                }

                ptr = scratch + SCRATCH;
                *--ptr = 0;
   129a4:	e5cda013 	strb	sl, [sp, #19]
{
	s_printf_buffer[buffer_ptr] = c;
	buffer_ptr++;
}

void string_printf(char* string_printf_buffer, char const *format, ...)
   129a8:	e28db012 	add	fp, sp, #18

                ptr = scratch + SCRATCH;
                *--ptr = 0;
                do
                {
                    char ch = u_val % base + '0';
   129ac:	e1a00007 	mov	r0, r7
   129b0:	e1a01009 	mov	r1, r9
   129b4:	eb000dd9 	bl	16120 <__umodsi3>
   129b8:	e20000ff 	and	r0, r0, #255	; 0xff
   129bc:	e2803030 	add	r3, r0, #48	; 0x30
   129c0:	e20330ff 	and	r3, r3, #255	; 0xff
                    #ifdef USE_HEX
                        if (ch > '9')
   129c4:	e3530039 	cmp	r3, #57	; 0x39
                        {
                            ch += 'a' - '9' - 1;
                            #ifdef USE_UPPERHEX
                            ch-=0x20;
   129c8:	82803037 	addhi	r3, r0, #55	; 0x37
   129cc:	820330ff 	andhi	r3, r3, #255	; 0xff
                        #endif
                    }
                    #endif
                    *--ptr = ch;
   129d0:	e1a0200b 	mov	r2, fp
                    u_val /= base;
   129d4:	e1a00007 	mov	r0, r7
                            #ifdef USE_UPPERHEX
                            ch-=0x20;
                        #endif
                    }
                    #endif
                    *--ptr = ch;
   129d8:	e44b3001 	strb	r3, [fp], #-1
                    u_val /= base;
   129dc:	e1a01009 	mov	r1, r9
   129e0:	e58d2000 	str	r2, [sp]
   129e4:	eb000d35 	bl	15ec0 <__aeabi_uidiv>

                    #ifdef PADDING
                        if(width) width--; //calculate number of padding chars
   129e8:	e3550000 	cmp	r5, #0
   129ec:	12455001 	subne	r5, r5, #1
   129f0:	120550ff 	andne	r5, r5, #255	; 0xff
                    #endif
                }
                while (u_val);
   129f4:	e3500000 	cmp	r0, #0
                            ch-=0x20;
                        #endif
                    }
                    #endif
                    *--ptr = ch;
                    u_val /= base;
   129f8:	e1a07000 	mov	r7, r0

                    #ifdef PADDING
                        if(width) width--; //calculate number of padding chars
   129fc:	e59d2000 	ldr	r2, [sp]
                    #endif
                }
                while (u_val);
   12a00:	1affffe9 	bne	129ac <string_printf+0x1a8>
   12a04:	e1a01005 	mov	r1, r5
   12a08:	e1a03002 	mov	r3, r2
   12a0c:	ea000000 	b	12a14 <string_printf+0x210>

                #ifdef PADDING
                    while(width--) *--ptr = fill; //insert padding chars
   12a10:	e5638001 	strb	r8, [r3, #-1]!
   12a14:	e2455001 	sub	r5, r5, #1
   12a18:	e20550ff 	and	r5, r5, #255	; 0xff
   12a1c:	e35500ff 	cmp	r5, #255	; 0xff
   12a20:	1afffffa 	bne	12a10 <string_printf+0x20c>
{
	s_printf_buffer[buffer_ptr] = c;
	buffer_ptr++;
}

void string_printf(char* string_printf_buffer, char const *format, ...)
   12a24:	e0615002 	rsb	r5, r1, r2
   12a28:	e2455001 	sub	r5, r5, #1
   12a2c:	ea000001 	b	12a38 <string_printf+0x234>
                #endif

                //Add to buffer
				while(*ptr) 
				{ 
					string_myputchar(string_printf_buffer, *ptr); 
   12a30:	e1a00006 	mov	r0, r6
   12a34:	ebffff6a 	bl	127e4 <string_myputchar>
                #ifdef PADDING
                    while(width--) *--ptr = fill; //insert padding chars
                #endif

                //Add to buffer
				while(*ptr) 
   12a38:	e5f51001 	ldrb	r1, [r5, #1]!
   12a3c:	e3510000 	cmp	r1, #0
   12a40:	1afffffa 	bne	12a30 <string_printf+0x22c>
   12a44:	eaffff81 	b	12850 <string_printf+0x4c>
			}
            string_myputchar(string_printf_buffer, format_flag);
        }

        issigned=0; //default unsigned
        base = 10;
   12a48:	e3a0900a 	mov	r9, #10
   12a4c:	ea000000 	b	12a54 <string_printf+0x250>
                    goto CONVERSION_LOOP;
                    case 'x':
                    #ifdef USE_UPPER
                    case 'X':
                #endif
                base = 16;
   12a50:	e3a09010 	mov	r9, #16
   12a54:	e59d3004 	ldr	r3, [sp, #4]
   12a58:	eaffffce 	b	12998 <string_printf+0x194>
   12a5c:	e59d3004 	ldr	r3, [sp, #4]
   12a60:	eaffffc2 	b	12970 <string_printf+0x16c>
					string_myputchar(string_printf_buffer, *ptr); 
					ptr++; 
				}
            }
        }
    }
   12a64:	e28dd014 	add	sp, sp, #20
   12a68:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a6c:	e28dd00c 	add	sp, sp, #12
   12a70:	e12fff1e 	bx	lr
   12a74:	40000a70 	.word	0x40000a70

00012a78 <init_serial0>:
/* Initialize Serial Interface UART0 */
void init_serial0 ( unsigned long baudrate )
{
    unsigned long Fdiv;

    PINSEL0 = 0x00000005;                  /* Enable RxD0 and TxD0              */
   12a78:	e59f3040 	ldr	r3, [pc, #64]	; 12ac0 <init_serial0+0x48>

#define CR     0x0D

/* Initialize Serial Interface UART0 */
void init_serial0 ( unsigned long baudrate )
{
   12a7c:	e92d4010 	push	{r4, lr}
    unsigned long Fdiv;

    PINSEL0 = 0x00000005;                  /* Enable RxD0 and TxD0              */
   12a80:	e3a02005 	mov	r2, #5
    U0LCR = 0x83;                          /* 8 bits, no Parity, 1 Stop bit     */
   12a84:	e59f4038 	ldr	r4, [pc, #56]	; 12ac4 <init_serial0+0x4c>
/* Initialize Serial Interface UART0 */
void init_serial0 ( unsigned long baudrate )
{
    unsigned long Fdiv;

    PINSEL0 = 0x00000005;                  /* Enable RxD0 and TxD0              */
   12a88:	e5832000 	str	r2, [r3]
    U0LCR = 0x83;                          /* 8 bits, no Parity, 1 Stop bit     */
   12a8c:	e3a03083 	mov	r3, #131	; 0x83

#define CR     0x0D

/* Initialize Serial Interface UART0 */
void init_serial0 ( unsigned long baudrate )
{
   12a90:	e1a01000 	mov	r1, r0
    unsigned long Fdiv;

    PINSEL0 = 0x00000005;                  /* Enable RxD0 and TxD0              */
    U0LCR = 0x83;                          /* 8 bits, no Parity, 1 Stop bit     */
   12a94:	e584300c 	str	r3, [r4, #12]
    Fdiv = ( Fcclk / 16 ) / baudrate ;     /* baud rate                        */
   12a98:	e59f0028 	ldr	r0, [pc, #40]	; 12ac8 <init_serial0+0x50>
   12a9c:	eb000d07 	bl	15ec0 <__aeabi_uidiv>
    U0DLM = Fdiv / 256;
   12aa0:	e1a03420 	lsr	r3, r0, #8
   12aa4:	e5843004 	str	r3, [r4, #4]
    U0DLL = Fdiv % 256;
   12aa8:	e20000ff 	and	r0, r0, #255	; 0xff
    U0LCR = 0x03;                           /* DLAB = 0                         */
   12aac:	e3a03003 	mov	r3, #3

    PINSEL0 = 0x00000005;                  /* Enable RxD0 and TxD0              */
    U0LCR = 0x83;                          /* 8 bits, no Parity, 1 Stop bit     */
    Fdiv = ( Fcclk / 16 ) / baudrate ;     /* baud rate                        */
    U0DLM = Fdiv / 256;
    U0DLL = Fdiv % 256;
   12ab0:	e5840000 	str	r0, [r4]
    U0LCR = 0x03;                           /* DLAB = 0                         */
   12ab4:	e584300c 	str	r3, [r4, #12]
}
   12ab8:	e8bd4010 	pop	{r4, lr}
   12abc:	e12fff1e 	bx	lr
   12ac0:	e002c000 	.word	0xe002c000
   12ac4:	e000c000 	.word	0xe000c000
   12ac8:	00393870 	.word	0x00393870

00012acc <init_serial1>:
/* Initialize Serial Interface UART0 */
void init_serial1 ( unsigned long baudrate )
{
    unsigned long Fdiv;

    PINSEL0 |= (1<<16) | (1<<18);         /* Enable RxD1 and TxD1              */
   12acc:	e59f3044 	ldr	r3, [pc, #68]	; 12b18 <init_serial1+0x4c>
   12ad0:	e5932000 	ldr	r2, [r3]
    U0LCR = 0x03;                           /* DLAB = 0                         */
}

/* Initialize Serial Interface UART0 */
void init_serial1 ( unsigned long baudrate )
{
   12ad4:	e92d4010 	push	{r4, lr}
    unsigned long Fdiv;

    PINSEL0 |= (1<<16) | (1<<18);         /* Enable RxD1 and TxD1              */
   12ad8:	e3822805 	orr	r2, r2, #327680	; 0x50000
    U1LCR = 0x83;                          /* 8 bits, no Parity, 1 Stop bit     */
   12adc:	e59f4038 	ldr	r4, [pc, #56]	; 12b1c <init_serial1+0x50>
/* Initialize Serial Interface UART0 */
void init_serial1 ( unsigned long baudrate )
{
    unsigned long Fdiv;

    PINSEL0 |= (1<<16) | (1<<18);         /* Enable RxD1 and TxD1              */
   12ae0:	e5832000 	str	r2, [r3]
    U1LCR = 0x83;                          /* 8 bits, no Parity, 1 Stop bit     */
   12ae4:	e3a03083 	mov	r3, #131	; 0x83
    U0LCR = 0x03;                           /* DLAB = 0                         */
}

/* Initialize Serial Interface UART0 */
void init_serial1 ( unsigned long baudrate )
{
   12ae8:	e1a01000 	mov	r1, r0
    unsigned long Fdiv;

    PINSEL0 |= (1<<16) | (1<<18);         /* Enable RxD1 and TxD1              */
    U1LCR = 0x83;                          /* 8 bits, no Parity, 1 Stop bit     */
   12aec:	e584300c 	str	r3, [r4, #12]
    Fdiv = ( Fcclk / 16 ) / baudrate ;     /* baud rate                        */
   12af0:	e59f0028 	ldr	r0, [pc, #40]	; 12b20 <init_serial1+0x54>
   12af4:	eb000cf1 	bl	15ec0 <__aeabi_uidiv>
    U1DLM = Fdiv / 256;
   12af8:	e1a03420 	lsr	r3, r0, #8
   12afc:	e5843004 	str	r3, [r4, #4]
    U1DLL = Fdiv % 256;
   12b00:	e20000ff 	and	r0, r0, #255	; 0xff
    U1LCR = 0x03;                           /* DLAB = 0                         */
   12b04:	e3a03003 	mov	r3, #3

    PINSEL0 |= (1<<16) | (1<<18);         /* Enable RxD1 and TxD1              */
    U1LCR = 0x83;                          /* 8 bits, no Parity, 1 Stop bit     */
    Fdiv = ( Fcclk / 16 ) / baudrate ;     /* baud rate                        */
    U1DLM = Fdiv / 256;
    U1DLL = Fdiv % 256;
   12b08:	e5840000 	str	r0, [r4]
    U1LCR = 0x03;                           /* DLAB = 0                         */
   12b0c:	e584300c 	str	r3, [r4, #12]
}
   12b10:	e8bd4010 	pop	{r4, lr}
   12b14:	e12fff1e 	bx	lr
   12b18:	e002c000 	.word	0xe002c000
   12b1c:	e0010000 	.word	0xe0010000
   12b20:	00393870 	.word	0x00393870

00012b24 <putchar_serial0>:

/* Write character to Serial Port 0 with \n -> \r\n  */
int putchar_serial0 (int ch)
{
    if (ch == '\n')
   12b24:	e350000a 	cmp	r0, #10
   12b28:	e59f3030 	ldr	r3, [pc, #48]	; 12b60 <putchar_serial0+0x3c>
   12b2c:	1a000005 	bne	12b48 <putchar_serial0+0x24>
    {
        while (!(U0LSR & 0x20));
   12b30:	e5932014 	ldr	r2, [r3, #20]
   12b34:	e3120020 	tst	r2, #32
   12b38:	0afffffc 	beq	12b30 <putchar_serial0+0xc>
        U0THR = CR;                  /* output CR */
   12b3c:	e59f201c 	ldr	r2, [pc, #28]	; 12b60 <putchar_serial0+0x3c>
   12b40:	e3a0100d 	mov	r1, #13
   12b44:	e5821000 	str	r1, [r2]
    }
    while (!(U0LSR & 0x20));
   12b48:	e5932014 	ldr	r2, [r3, #20]
   12b4c:	e3120020 	tst	r2, #32
   12b50:	0afffffc 	beq	12b48 <putchar_serial0+0x24>
    return (U0THR = ch);
   12b54:	e59f3004 	ldr	r3, [pc, #4]	; 12b60 <putchar_serial0+0x3c>
   12b58:	e5830000 	str	r0, [r3]
}
   12b5c:	e12fff1e 	bx	lr
   12b60:	e000c000 	.word	0xe000c000

00012b64 <putc_serial0>:

/* Write character to Serial Port 0 without \n -> \r\n  */
int putc_serial0 (int ch)
{
    while (!(U0LSR & 0x20));
   12b64:	e59f2014 	ldr	r2, [pc, #20]	; 12b80 <putc_serial0+0x1c>
   12b68:	e5923014 	ldr	r3, [r2, #20]
   12b6c:	e3130020 	tst	r3, #32
   12b70:	0afffffc 	beq	12b68 <putc_serial0+0x4>
    return (U0THR = ch);
   12b74:	e59f3004 	ldr	r3, [pc, #4]	; 12b80 <putc_serial0+0x1c>
   12b78:	e5830000 	str	r0, [r3]
}
   12b7c:	e12fff1e 	bx	lr
   12b80:	e000c000 	.word	0xe000c000

00012b84 <putc_serial1>:

/* Write character to Serial Port 1 without \n -> \r\n  */
int putc_serial1 (int ch)
{
    while (!(U1LSR & 0x20));
   12b84:	e59f2014 	ldr	r2, [pc, #20]	; 12ba0 <putc_serial1+0x1c>
   12b88:	e5923014 	ldr	r3, [r2, #20]
   12b8c:	e3130020 	tst	r3, #32
   12b90:	0afffffc 	beq	12b88 <putc_serial1+0x4>
    return (U1THR = ch);
   12b94:	e59f3004 	ldr	r3, [pc, #4]	; 12ba0 <putc_serial1+0x1c>
   12b98:	e5830000 	str	r0, [r3]
}
   12b9c:	e12fff1e 	bx	lr
   12ba0:	e0010000 	.word	0xe0010000

00012ba4 <putstring_serial0>:

void putstring_serial0 (const char *string)
{
   12ba4:	e92d4010 	push	{r4, lr}
{
    while (!(U1LSR & 0x20));
    return (U1THR = ch);
}

void putstring_serial0 (const char *string)
   12ba8:	e2404001 	sub	r4, r0, #1
{
    char ch;

    while ((ch = *string))
   12bac:	ea000000 	b	12bb4 <putstring_serial0+0x10>
    {
        putchar_serial0(ch);
   12bb0:	ebffffdb 	bl	12b24 <putchar_serial0>

void putstring_serial0 (const char *string)
{
    char ch;

    while ((ch = *string))
   12bb4:	e5f40001 	ldrb	r0, [r4, #1]!
   12bb8:	e3500000 	cmp	r0, #0
   12bbc:	1afffffb 	bne	12bb0 <putstring_serial0+0xc>
    {
        putchar_serial0(ch);
        string++;
    }
}
   12bc0:	e8bd4010 	pop	{r4, lr}
   12bc4:	e12fff1e 	bx	lr

00012bc8 <getkey_serial0>:


/* Read character from Serial Port   */
int getkey_serial0 (void)
{
	if (U0LSR & 0x01)
   12bc8:	e59f300c 	ldr	r3, [pc, #12]	; 12bdc <getkey_serial0+0x14>
   12bcc:	e5930014 	ldr	r0, [r3, #20]
   12bd0:	e2100001 	ands	r0, r0, #1
    {
        return (U0RBR);
   12bd4:	15930000 	ldrne	r0, [r3]
    }
    else
    {
        return 0;
    }
}
   12bd8:	e12fff1e 	bx	lr
   12bdc:	e000c000 	.word	0xe000c000

00012be0 <getc0>:

/* Read character from Serial Port   */
int getc0 (void)
{
	while ( (U0LSR & 0x01) == 0 ); //Wait for character
   12be0:	e59f2014 	ldr	r2, [pc, #20]	; 12bfc <getc0+0x1c>
   12be4:	e5923014 	ldr	r3, [r2, #20]
   12be8:	e3130001 	tst	r3, #1
   12bec:	0afffffc 	beq	12be4 <getc0+0x4>
	return U0RBR;
   12bf0:	e59f3004 	ldr	r3, [pc, #4]	; 12bfc <getc0+0x1c>
   12bf4:	e5930000 	ldr	r0, [r3]
}
   12bf8:	e12fff1e 	bx	lr
   12bfc:	e000c000 	.word	0xe000c000

00012c00 <openroot>:
struct partition_struct* partition;
struct fat_dir_struct* dd;
struct fat_file_struct * fd;

int openroot(void)
{
   12c00:	e92d4011 	push	{r0, r4, lr}
    /* open first partition */
    partition = partition_open((device_read_t) sd_raw_read,
   12c04:	e3a03000 	mov	r3, #0
   12c08:	e58d3000 	str	r3, [sp]
   12c0c:	e59f00ac 	ldr	r0, [pc, #172]	; 12cc0 <openroot+0xc0>
   12c10:	e59f10ac 	ldr	r1, [pc, #172]	; 12cc4 <openroot+0xc4>
   12c14:	e59f20ac 	ldr	r2, [pc, #172]	; 12cc8 <openroot+0xc8>
   12c18:	e59f30ac 	ldr	r3, [pc, #172]	; 12ccc <openroot+0xcc>
   12c1c:	eb000b9e 	bl	15a9c <partition_open>
   12c20:	e59f40a8 	ldr	r4, [pc, #168]	; 12cd0 <openroot+0xd0>
                               (device_read_interval_t) sd_raw_read_interval,
                               (device_write_t) sd_raw_write,
                               (device_write_interval_t) sd_raw_write_interval,
                               0);

    if(!partition)
   12c24:	e3500000 	cmp	r0, #0
struct fat_file_struct * fd;

int openroot(void)
{
    /* open first partition */
    partition = partition_open((device_read_t) sd_raw_read,
   12c28:	e5840000 	str	r0, [r4]
                               (device_read_interval_t) sd_raw_read_interval,
                               (device_write_t) sd_raw_write,
                               (device_write_interval_t) sd_raw_write_interval,
                               0);

    if(!partition)
   12c2c:	1a00000a 	bne	12c5c <openroot+0x5c>
    {
        /* If the partition did not open, assume the storage device
             *      * is a "superfloppy", i.e. has no MBR.
             *           */
        partition = partition_open((device_read_t) sd_raw_read,
   12c30:	e3e03000 	mvn	r3, #0
   12c34:	e58d3000 	str	r3, [sp]
   12c38:	e59f0080 	ldr	r0, [pc, #128]	; 12cc0 <openroot+0xc0>
   12c3c:	e59f1080 	ldr	r1, [pc, #128]	; 12cc4 <openroot+0xc4>
   12c40:	e59f2080 	ldr	r2, [pc, #128]	; 12cc8 <openroot+0xc8>
   12c44:	e59f3080 	ldr	r3, [pc, #128]	; 12ccc <openroot+0xcc>
   12c48:	eb000b93 	bl	15a9c <partition_open>
                                   (device_read_interval_t) sd_raw_read_interval,
                                   (device_write_t) sd_raw_write,
                                   (device_write_interval_t) sd_raw_write_interval,
                                   -1);
        if(!partition)
   12c4c:	e3500000 	cmp	r0, #0
    if(!partition)
    {
        /* If the partition did not open, assume the storage device
             *      * is a "superfloppy", i.e. has no MBR.
             *           */
        partition = partition_open((device_read_t) sd_raw_read,
   12c50:	e5840000 	str	r0, [r4]
                                   (device_write_t) sd_raw_write,
                                   (device_write_interval_t) sd_raw_write_interval,
                                   -1);
        if(!partition)
        {
            rprintf("opening partition failed\n\r");
   12c54:	059f0078 	ldreq	r0, [pc, #120]	; 12cd4 <openroot+0xd4>
        partition = partition_open((device_read_t) sd_raw_read,
                                   (device_read_interval_t) sd_raw_read_interval,
                                   (device_write_t) sd_raw_write,
                                   (device_write_interval_t) sd_raw_write_interval,
                                   -1);
        if(!partition)
   12c58:	0a000013 	beq	12cac <openroot+0xac>
            return 1;
        }
    }

    /* open file system */
    fs = fat_open(partition);
   12c5c:	e59f306c 	ldr	r3, [pc, #108]	; 12cd0 <openroot+0xd0>
   12c60:	e5930000 	ldr	r0, [r3]
   12c64:	eb0006f4 	bl	1483c <fat_open>
   12c68:	e59f4068 	ldr	r4, [pc, #104]	; 12cd8 <openroot+0xd8>
    if(!fs)
   12c6c:	e3500000 	cmp	r0, #0
            return 1;
        }
    }

    /* open file system */
    fs = fat_open(partition);
   12c70:	e5840000 	str	r0, [r4]
    if(!fs)
    {
        rprintf("opening filesystem failed\n\r");
   12c74:	059f0060 	ldreq	r0, [pc, #96]	; 12cdc <openroot+0xdc>
        }
    }

    /* open file system */
    fs = fat_open(partition);
    if(!fs)
   12c78:	0a00000b 	beq	12cac <openroot+0xac>
        rprintf("opening filesystem failed\n\r");
        return 1;
    }

    /* open root directory */
    fat_get_dir_entry_of_path(fs, "/", &dir_entry);
   12c7c:	e59f105c 	ldr	r1, [pc, #92]	; 12ce0 <openroot+0xe0>
   12c80:	e59f205c 	ldr	r2, [pc, #92]	; 12ce4 <openroot+0xe4>
   12c84:	eb0009c0 	bl	1538c <fat_get_dir_entry_of_path>

    dd = fat_open_dir(fs, &dir_entry);
   12c88:	e5940000 	ldr	r0, [r4]
   12c8c:	e59f1050 	ldr	r1, [pc, #80]	; 12ce4 <openroot+0xe4>
   12c90:	eb000929 	bl	1513c <fat_open_dir>
   12c94:	e59f304c 	ldr	r3, [pc, #76]	; 12ce8 <openroot+0xe8>
    if(!dd)
   12c98:	e3500000 	cmp	r0, #0
    }

    /* open root directory */
    fat_get_dir_entry_of_path(fs, "/", &dir_entry);

    dd = fat_open_dir(fs, &dir_entry);
   12c9c:	e5830000 	str	r0, [r3]
    if(!dd)
    {
        rprintf("opening root directory failed\n\r");
        return 1;
    }
    return 0;
   12ca0:	13a00000 	movne	r0, #0

    /* open root directory */
    fat_get_dir_entry_of_path(fs, "/", &dir_entry);

    dd = fat_open_dir(fs, &dir_entry);
    if(!dd)
   12ca4:	1a000003 	bne	12cb8 <openroot+0xb8>
    {
        rprintf("opening root directory failed\n\r");
   12ca8:	e59f003c 	ldr	r0, [pc, #60]	; 12cec <openroot+0xec>
   12cac:	ebfffe38 	bl	12594 <rprintf>
        return 1;
   12cb0:	e3a00001 	mov	r0, #1
   12cb4:	eaffffff 	b	12cb8 <openroot+0xb8>
    }
    return 0;
}
   12cb8:	e8bd4018 	pop	{r3, r4, lr}
   12cbc:	e12fff1e 	bx	lr
   12cc0:	000131c0 	.word	0x000131c0
   12cc4:	00013350 	.word	0x00013350
   12cc8:	0001365c 	.word	0x0001365c
   12ccc:	00013830 	.word	0x00013830
   12cd0:	40000aac 	.word	0x40000aac
   12cd4:	00016594 	.word	0x00016594
   12cd8:	40000a74 	.word	0x40000a74
   12cdc:	000165af 	.word	0x000165af
   12ce0:	000165cb 	.word	0x000165cb
   12ce4:	40000a78 	.word	0x40000a78
   12ce8:	40000ab0 	.word	0x40000ab0
   12cec:	000165cd 	.word	0x000165cd

00012cf0 <root_file_exists>:

/* returns 1 if file exists, 0 else */
int root_file_exists(char* name)
{
    return(find_file_in_dir(fs,dd,name,&dir_entry));
   12cf0:	e59f3020 	ldr	r3, [pc, #32]	; 12d18 <root_file_exists+0x28>
    return 0;
}

/* returns 1 if file exists, 0 else */
int root_file_exists(char* name)
{
   12cf4:	e1a02000 	mov	r2, r0
    return(find_file_in_dir(fs,dd,name,&dir_entry));
   12cf8:	e5930000 	ldr	r0, [r3]
   12cfc:	e59f3018 	ldr	r3, [pc, #24]	; 12d1c <root_file_exists+0x2c>
    return 0;
}

/* returns 1 if file exists, 0 else */
int root_file_exists(char* name)
{
   12d00:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    return(find_file_in_dir(fs,dd,name,&dir_entry));
   12d04:	e5931000 	ldr	r1, [r3]
   12d08:	e59f3010 	ldr	r3, [pc, #16]	; 12d20 <root_file_exists+0x30>
   12d0c:	eb000b41 	bl	15a18 <find_file_in_dir>
}
   12d10:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   12d14:	e12fff1e 	bx	lr
   12d18:	40000a74 	.word	0x40000a74
   12d1c:	40000ab0 	.word	0x40000ab0
   12d20:	40000a78 	.word	0x40000a78

00012d24 <root_open_new>:

/* returns NULL if error, pointer if file opened */
struct fat_file_struct * root_open_new(char* name)
{
   12d24:	e92d4030 	push	{r4, r5, lr}
    if(fat_create_file(dd,name,&dir_entry))
   12d28:	e59f5030 	ldr	r5, [pc, #48]	; 12d60 <root_open_new+0x3c>
    return(find_file_in_dir(fs,dd,name,&dir_entry));
}

/* returns NULL if error, pointer if file opened */
struct fat_file_struct * root_open_new(char* name)
{
   12d2c:	e1a04000 	mov	r4, r0
    if(fat_create_file(dd,name,&dir_entry))
   12d30:	e1a01004 	mov	r1, r4
   12d34:	e5950000 	ldr	r0, [r5]
   12d38:	e59f2024 	ldr	r2, [pc, #36]	; 12d64 <root_open_new+0x40>
   12d3c:	eb0009de 	bl	154bc <fat_create_file>
   12d40:	e3500000 	cmp	r0, #0
    {
        return(open_file_in_dir(fs,dd,name));
   12d44:	159f301c 	ldrne	r3, [pc, #28]	; 12d68 <root_open_new+0x44>
   12d48:	15951000 	ldrne	r1, [r5]
   12d4c:	15930000 	ldrne	r0, [r3]
   12d50:	11a02004 	movne	r2, r4
   12d54:	1b000b44 	blne	15a6c <open_file_in_dir>
    }
    else
    {
        return NULL;
    }
}
   12d58:	e8bd4030 	pop	{r4, r5, lr}
   12d5c:	e12fff1e 	bx	lr
   12d60:	40000ab0 	.word	0x40000ab0
   12d64:	40000a78 	.word	0x40000a78
   12d68:	40000a74 	.word	0x40000a74

00012d6c <root_open>:

struct fat_file_struct * root_open(char* name)
{
    return(open_file_in_dir(fs,dd,name));
   12d6c:	e59f301c 	ldr	r3, [pc, #28]	; 12d90 <root_open+0x24>
        return NULL;
    }
}

struct fat_file_struct * root_open(char* name)
{
   12d70:	e1a02000 	mov	r2, r0
    return(open_file_in_dir(fs,dd,name));
   12d74:	e5930000 	ldr	r0, [r3]
   12d78:	e59f3014 	ldr	r3, [pc, #20]	; 12d94 <root_open+0x28>
        return NULL;
    }
}

struct fat_file_struct * root_open(char* name)
{
   12d7c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    return(open_file_in_dir(fs,dd,name));
   12d80:	e5931000 	ldr	r1, [r3]
   12d84:	eb000b38 	bl	15a6c <open_file_in_dir>
}
   12d88:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   12d8c:	e12fff1e 	bx	lr
   12d90:	40000a74 	.word	0x40000a74
   12d94:	40000ab0 	.word	0x40000ab0

00012d98 <print_disk_info>:

uint8_t print_disk_info(const struct fat_fs_struct* disk_fs)
{
   12d98:	e92d4070 	push	{r4, r5, r6, lr}
    if(!disk_fs)
   12d9c:	e2506000 	subs	r6, r0, #0
{
    return(open_file_in_dir(fs,dd,name));
}

uint8_t print_disk_info(const struct fat_fs_struct* disk_fs)
{
   12da0:	e24dd024 	sub	sp, sp, #36	; 0x24
    if(!disk_fs)
   12da4:	1a000001 	bne	12db0 <print_disk_info+0x18>
        return 0;
   12da8:	e3a00000 	mov	r0, #0
   12dac:	ea000031 	b	12e78 <print_disk_info+0xe0>

    struct sd_raw_info disk_info;
    if(!sd_raw_get_info(&disk_info))
   12db0:	e28d0004 	add	r0, sp, #4
   12db4:	eb0002ce 	bl	138f4 <sd_raw_get_info>
   12db8:	e3500000 	cmp	r0, #0
   12dbc:	0afffff9 	beq	12da8 <print_disk_info+0x10>
        return 0;

//    int temp = get_output();
//    set_output(UART_ONLY);
    rprintf("manuf:  0x%02x\n\r", disk_info.manufacturer);
   12dc0:	e59f00bc 	ldr	r0, [pc, #188]	; 12e84 <print_disk_info+0xec>
   12dc4:	e5dd1004 	ldrb	r1, [sp, #4]
   12dc8:	ebfffdf1 	bl	12594 <rprintf>
    rprintf("oem:    %s\n\r", disk_info.oem);
   12dcc:	e59f00b4 	ldr	r0, [pc, #180]	; 12e88 <print_disk_info+0xf0>
   12dd0:	e28d1005 	add	r1, sp, #5
   12dd4:	ebfffdee 	bl	12594 <rprintf>
    rprintf("prod:   %s\n\r", disk_info.product);
   12dd8:	e59f00ac 	ldr	r0, [pc, #172]	; 12e8c <print_disk_info+0xf4>
   12ddc:	e28d1008 	add	r1, sp, #8
   12de0:	ebfffdeb 	bl	12594 <rprintf>
    rprintf("rev:    %02x\n\r", disk_info.revision);
   12de4:	e59f00a4 	ldr	r0, [pc, #164]	; 12e90 <print_disk_info+0xf8>
   12de8:	e5dd100e 	ldrb	r1, [sp, #14]
   12dec:	ebfffde8 	bl	12594 <rprintf>
    rprintf("serial: 0x%08lx\n\r", disk_info.serial);
   12df0:	e59f009c 	ldr	r0, [pc, #156]	; 12e94 <print_disk_info+0xfc>
   12df4:	e59d1010 	ldr	r1, [sp, #16]
   12df8:	ebfffde5 	bl	12594 <rprintf>
    rprintf("date:   %02d/%02d\n\r", disk_info.manufacturing_month, disk_info.manufacturing_year);
   12dfc:	e59f0094 	ldr	r0, [pc, #148]	; 12e98 <print_disk_info+0x100>
   12e00:	e5dd1015 	ldrb	r1, [sp, #21]
   12e04:	e5dd2014 	ldrb	r2, [sp, #20]
   12e08:	ebfffde1 	bl	12594 <rprintf>
    rprintf("size:   %ld\n\r", disk_info.capacity);
   12e0c:	e28d2018 	add	r2, sp, #24
   12e10:	e8920006 	ldm	r2, {r1, r2}
   12e14:	e59f0080 	ldr	r0, [pc, #128]	; 12e9c <print_disk_info+0x104>
   12e18:	ebfffddd 	bl	12594 <rprintf>
    rprintf("copy:   %d\n\r", disk_info.flag_copy);
   12e1c:	e59f007c 	ldr	r0, [pc, #124]	; 12ea0 <print_disk_info+0x108>
   12e20:	e5dd1020 	ldrb	r1, [sp, #32]
   12e24:	ebfffdda 	bl	12594 <rprintf>
    rprintf("wr.pr.: %d/%d\n\r", disk_info.flag_write_protect_temp, disk_info.flag_write_protect);
   12e28:	e5dd2021 	ldrb	r2, [sp, #33]	; 0x21
   12e2c:	e59f0070 	ldr	r0, [pc, #112]	; 12ea4 <print_disk_info+0x10c>
   12e30:	e5dd1022 	ldrb	r1, [sp, #34]	; 0x22
   12e34:	ebfffdd6 	bl	12594 <rprintf>
    rprintf("format: %d\n\r", disk_info.format);
   12e38:	e59f0068 	ldr	r0, [pc, #104]	; 12ea8 <print_disk_info+0x110>
   12e3c:	e5dd1023 	ldrb	r1, [sp, #35]	; 0x23
   12e40:	ebfffdd3 	bl	12594 <rprintf>
    rprintf("free:   %ld/%ld\n\r", fat_get_fs_free(disk_fs), fat_get_fs_size(disk_fs));
   12e44:	e1a00006 	mov	r0, r6
   12e48:	eb000abd 	bl	15944 <fat_get_fs_free>
   12e4c:	e1a04000 	mov	r4, r0
   12e50:	e1a00006 	mov	r0, r6
   12e54:	e1a05001 	mov	r5, r1
   12e58:	eb000aa8 	bl	15900 <fat_get_fs_size>
   12e5c:	e1a02005 	mov	r2, r5
   12e60:	e58d1000 	str	r1, [sp]
   12e64:	e1a03000 	mov	r3, r0
   12e68:	e1a01004 	mov	r1, r4
   12e6c:	e59f0038 	ldr	r0, [pc, #56]	; 12eac <print_disk_info+0x114>
   12e70:	ebfffdc7 	bl	12594 <rprintf>
//    set_output(temp);
    return 1;
   12e74:	e3a00001 	mov	r0, #1
}
   12e78:	e28dd024 	add	sp, sp, #36	; 0x24
   12e7c:	e8bd4070 	pop	{r4, r5, r6, lr}
   12e80:	e12fff1e 	bx	lr
   12e84:	000165ed 	.word	0x000165ed
   12e88:	000165fe 	.word	0x000165fe
   12e8c:	0001660b 	.word	0x0001660b
   12e90:	00016618 	.word	0x00016618
   12e94:	00016627 	.word	0x00016627
   12e98:	00016639 	.word	0x00016639
   12e9c:	0001664d 	.word	0x0001664d
   12ea0:	0001665b 	.word	0x0001665b
   12ea4:	00016668 	.word	0x00016668
   12ea8:	00016678 	.word	0x00016678
   12eac:	00016685 	.word	0x00016685

00012eb0 <root_disk_info>:

void root_disk_info(void)
{
    print_disk_info(fs);
   12eb0:	e59f3004 	ldr	r3, [pc, #4]	; 12ebc <root_disk_info+0xc>
   12eb4:	e5930000 	ldr	r0, [r3]
   12eb8:	eaffffb6 	b	12d98 <print_disk_info>
   12ebc:	40000a74 	.word	0x40000a74

00012ec0 <rootDirectory_files_stream>:
{

    static int idx = 0;

    /* If reset, we need to reset the dir */
    if(reset)
   12ec0:	e3500000 	cmp	r0, #0
 * has been reached.
 *
 * Assert (1) reset whenever you want to re-start
 */
char rootDirectory_files_stream(int reset)
{
   12ec4:	e92d4010 	push	{r4, lr}

    static int idx = 0;

    /* If reset, we need to reset the dir */
    if(reset)
   12ec8:	0a000004 	beq	12ee0 <rootDirectory_files_stream+0x20>
    {
        fat_reset_dir(dd);
   12ecc:	e59f3070 	ldr	r3, [pc, #112]	; 12f44 <rootDirectory_files_stream+0x84>
   12ed0:	e5930000 	ldr	r0, [r3]
   12ed4:	eb0008c1 	bl	151e0 <fat_reset_dir>
        return 0;
   12ed8:	e3a00000 	mov	r0, #0
   12edc:	ea000016 	b	12f3c <rootDirectory_files_stream+0x7c>
    /* Whenever IDX is zero, we're gonna start a new file,
       * so read a new one.
       * if there's no new file,
       * return 0, because it's over
       */
    if(idx == 0)
   12ee0:	e59f3060 	ldr	r3, [pc, #96]	; 12f48 <rootDirectory_files_stream+0x88>
   12ee4:	e5932000 	ldr	r2, [r3]
   12ee8:	e3520000 	cmp	r2, #0
   12eec:	e1a04003 	mov	r4, r3
   12ef0:	0a000008 	beq	12f18 <rootDirectory_files_stream+0x58>
    /* If we've reached the end of a string,
       * return comma instead of \0,
       * so the list is comma delimited,
       * and terminated with a zero
       */
    if(dir_entry.long_name[idx]=='\0')
   12ef4:	e5942000 	ldr	r2, [r4]
   12ef8:	e59f104c 	ldr	r1, [pc, #76]	; 12f4c <rootDirectory_files_stream+0x8c>
   12efc:	e7d10002 	ldrb	r0, [r1, r2]
   12f00:	e59f3040 	ldr	r3, [pc, #64]	; 12f48 <rootDirectory_files_stream+0x88>
   12f04:	e3500000 	cmp	r0, #0
    {
        idx = 0;
   12f08:	05830000 	streq	r0, [r3]
        return ',';
   12f0c:	03a0002c 	moveq	r0, #44	; 0x2c
    /* If we've reached the end of a string,
       * return comma instead of \0,
       * so the list is comma delimited,
       * and terminated with a zero
       */
    if(dir_entry.long_name[idx]=='\0')
   12f10:	0a000009 	beq	12f3c <rootDirectory_files_stream+0x7c>
   12f14:	ea000006 	b	12f34 <rootDirectory_files_stream+0x74>
       * if there's no new file,
       * return 0, because it's over
       */
    if(idx == 0)
    {
        if(fat_read_dir(dd,&dir_entry)==0)
   12f18:	e59f3024 	ldr	r3, [pc, #36]	; 12f44 <rootDirectory_files_stream+0x84>
   12f1c:	e59f1028 	ldr	r1, [pc, #40]	; 12f4c <rootDirectory_files_stream+0x8c>
   12f20:	e5930000 	ldr	r0, [r3]
   12f24:	eb0008b5 	bl	15200 <fat_read_dir>
   12f28:	e3500000 	cmp	r0, #0
   12f2c:	1afffff0 	bne	12ef4 <rootDirectory_files_stream+0x34>
   12f30:	ea000001 	b	12f3c <rootDirectory_files_stream+0x7c>
        idx = 0;
        return ',';
    }


    return dir_entry.long_name[idx++];
   12f34:	e2822001 	add	r2, r2, #1
   12f38:	e5832000 	str	r2, [r3]

}
   12f3c:	e8bd4010 	pop	{r4, lr}
   12f40:	e12fff1e 	bx	lr
   12f44:	40000ab0 	.word	0x40000ab0
   12f48:	40000038 	.word	0x40000038
   12f4c:	40000a78 	.word	0x40000a78

00012f50 <rootDirectory_files>:
//Pre: buf is an array of characters at least as big as len
//		len is the size of the array to read
//Post: buf contains the characters of the filenames in Root, starting at the first file
//		and ending after len characters
int rootDirectory_files(char* buf, int len)
{
   12f50:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    int i;
    int num=0;
    /* Loop will walk through every file in directory dd */
    fat_reset_dir(dd);
   12f54:	e59f708c 	ldr	r7, [pc, #140]	; 12fe8 <rootDirectory_files+0x98>
//Pre: buf is an array of characters at least as big as len
//		len is the size of the array to read
//Post: buf contains the characters of the filenames in Root, starting at the first file
//		and ending after len characters
int rootDirectory_files(char* buf, int len)
{
   12f58:	e1a06000 	mov	r6, r0
    int i;
    int num=0;
    /* Loop will walk through every file in directory dd */
    fat_reset_dir(dd);
   12f5c:	e5970000 	ldr	r0, [r7]
//Pre: buf is an array of characters at least as big as len
//		len is the size of the array to read
//Post: buf contains the characters of the filenames in Root, starting at the first file
//		and ending after len characters
int rootDirectory_files(char* buf, int len)
{
   12f60:	e1a04001 	mov	r4, r1
    int i;
    int num=0;
   12f64:	e3a05000 	mov	r5, #0
    /* Loop will walk through every file in directory dd */
    fat_reset_dir(dd);
   12f68:	eb00089c 	bl	151e0 <fat_reset_dir>
    while(fat_read_dir(dd,&dir_entry))
   12f6c:	ea000012 	b	12fbc <rootDirectory_files+0x6c>
        while(dir_entry.long_name[i]!='\0')
        {
            /* And copy each character into buf */
            *buf++=dir_entry.long_name[i++];
            len--;
            if(len==1)
   12f70:	e3540001 	cmp	r4, #1
        i = 0;
        /* Spin through the filename */
        while(dir_entry.long_name[i]!='\0')
        {
            /* And copy each character into buf */
            *buf++=dir_entry.long_name[i++];
   12f74:	e5c32000 	strb	r2, [r3]
   12f78:	e1a03006 	mov	r3, r6
            len--;
            if(len==1)
            {
                /* Buf if we ever get to the end of buf, quit */
                *buf='\0';
   12f7c:	03a02000 	moveq	r2, #0
   12f80:	05c62000 	strbeq	r2, [r6]
   12f84:	0a00000a 	beq	12fb4 <rootDirectory_files+0x64>
    fat_reset_dir(dd);
    while(fat_read_dir(dd,&dir_entry))
    {
        i = 0;
        /* Spin through the filename */
        while(dir_entry.long_name[i]!='\0')
   12f88:	e5f12001 	ldrb	r2, [r1, #1]!
   12f8c:	e3520000 	cmp	r2, #0
   12f90:	e2836001 	add	r6, r3, #1
   12f94:	e2444001 	sub	r4, r4, #1
   12f98:	1afffff4 	bne	12f70 <rootDirectory_files+0x20>
                /* Buf if we ever get to the end of buf, quit */
                *buf='\0';
                return 1;
            }
        }
        *buf++=',';
   12f9c:	e3a0102c 	mov	r1, #44	; 0x2c
        num++;
        len--;
        if(len==1)
   12fa0:	e3540001 	cmp	r4, #1
                /* Buf if we ever get to the end of buf, quit */
                *buf='\0';
                return 1;
            }
        }
        *buf++=',';
   12fa4:	e5c31000 	strb	r1, [r3]
        num++;
   12fa8:	e2855001 	add	r5, r5, #1
        len--;
        if(len==1)
   12fac:	1a000002 	bne	12fbc <rootDirectory_files+0x6c>
        {
            /* Buf if we ever get to the end of buf, quit */
            *buf='\0';
   12fb0:	e5c32001 	strb	r2, [r3, #1]
            return 1;
   12fb4:	e1a05004 	mov	r5, r4
   12fb8:	ea000007 	b	12fdc <rootDirectory_files+0x8c>
{
    int i;
    int num=0;
    /* Loop will walk through every file in directory dd */
    fat_reset_dir(dd);
    while(fat_read_dir(dd,&dir_entry))
   12fbc:	e5970000 	ldr	r0, [r7]
   12fc0:	e59f1024 	ldr	r1, [pc, #36]	; 12fec <rootDirectory_files+0x9c>
   12fc4:	eb00088d 	bl	15200 <fat_read_dir>
   12fc8:	e3500000 	cmp	r0, #0
   12fcc:	159f101c 	ldrne	r1, [pc, #28]	; 12ff0 <rootDirectory_files+0xa0>
   12fd0:	11a03006 	movne	r3, r6
   12fd4:	1affffeb 	bne	12f88 <rootDirectory_files+0x38>
            /* Buf if we ever get to the end of buf, quit */
            *buf='\0';
            return 1;
        }
    }
    *buf='\0';
   12fd8:	e5c60000 	strb	r0, [r6]
    return num;
}
   12fdc:	e1a00005 	mov	r0, r5
   12fe0:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   12fe4:	e12fff1e 	bx	lr
   12fe8:	40000ab0 	.word	0x40000ab0
   12fec:	40000a78 	.word	0x40000a78
   12ff0:	40000a77 	.word	0x40000a77

00012ff4 <root_format>:

void root_format(void)
{
   12ff4:	e92d4030 	push	{r4, r5, lr}
    fat_reset_dir(dd);
   12ff8:	e59f403c 	ldr	r4, [pc, #60]	; 1303c <root_format+0x48>
   12ffc:	e5940000 	ldr	r0, [r4]
   13000:	eb000876 	bl	151e0 <fat_reset_dir>
    while(fat_read_dir(dd,&dir_entry))
    {
        fat_delete_file(fs,&dir_entry);
   13004:	e59f5034 	ldr	r5, [pc, #52]	; 13040 <root_format+0x4c>
}

void root_format(void)
{
    fat_reset_dir(dd);
    while(fat_read_dir(dd,&dir_entry))
   13008:	ea000004 	b	13020 <root_format+0x2c>
    {
        fat_delete_file(fs,&dir_entry);
   1300c:	e5950000 	ldr	r0, [r5]
   13010:	e59f102c 	ldr	r1, [pc, #44]	; 13044 <root_format+0x50>
   13014:	eb000960 	bl	1559c <fat_delete_file>
        fat_reset_dir(dd);
   13018:	e5940000 	ldr	r0, [r4]
   1301c:	eb00086f 	bl	151e0 <fat_reset_dir>
}

void root_format(void)
{
    fat_reset_dir(dd);
    while(fat_read_dir(dd,&dir_entry))
   13020:	e5940000 	ldr	r0, [r4]
   13024:	e59f1018 	ldr	r1, [pc, #24]	; 13044 <root_format+0x50>
   13028:	eb000874 	bl	15200 <fat_read_dir>
   1302c:	e3500000 	cmp	r0, #0
   13030:	1afffff5 	bne	1300c <root_format+0x18>
    {
        fat_delete_file(fs,&dir_entry);
        fat_reset_dir(dd);
    }
}
   13034:	e8bd4030 	pop	{r4, r5, lr}
   13038:	e12fff1e 	bx	lr
   1303c:	40000ab0 	.word	0x40000ab0
   13040:	40000a74 	.word	0x40000a74
   13044:	40000a78 	.word	0x40000a78

00013048 <root_delete>:

int root_delete(char* filename)
{
   13048:	e92d4010 	push	{r4, lr}
    if(find_file_in_dir(fs,dd,filename,&dir_entry))
   1304c:	e59f303c 	ldr	r3, [pc, #60]	; 13090 <root_delete+0x48>
   13050:	e59f403c 	ldr	r4, [pc, #60]	; 13094 <root_delete+0x4c>
        fat_reset_dir(dd);
    }
}

int root_delete(char* filename)
{
   13054:	e1a02000 	mov	r2, r0
    if(find_file_in_dir(fs,dd,filename,&dir_entry))
   13058:	e5931000 	ldr	r1, [r3]
   1305c:	e5940000 	ldr	r0, [r4]
   13060:	e59f3030 	ldr	r3, [pc, #48]	; 13098 <root_delete+0x50>
   13064:	eb000a6b 	bl	15a18 <find_file_in_dir>
   13068:	e3500000 	cmp	r0, #0
    {
        fat_delete_file(fs,&dir_entry);
        return 0;
    }
    return 1;
   1306c:	03a00001 	moveq	r0, #1
    }
}

int root_delete(char* filename)
{
    if(find_file_in_dir(fs,dd,filename,&dir_entry))
   13070:	0a000004 	beq	13088 <root_delete+0x40>
    {
        fat_delete_file(fs,&dir_entry);
   13074:	e5940000 	ldr	r0, [r4]
   13078:	e59f1018 	ldr	r1, [pc, #24]	; 13098 <root_delete+0x50>
   1307c:	eb000946 	bl	1559c <fat_delete_file>
        return 0;
   13080:	e3a00000 	mov	r0, #0
   13084:	eaffffff 	b	13088 <root_delete+0x40>
    }
    return 1;
}
   13088:	e8bd4010 	pop	{r4, lr}
   1308c:	e12fff1e 	bx	lr
   13090:	40000ab0 	.word	0x40000ab0
   13094:	40000a74 	.word	0x40000a74
   13098:	40000a78 	.word	0x40000a78

0001309c <sd_raw_send_byte>:
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    S0SPDR = b;
   1309c:	e59f3010 	ldr	r3, [pc, #16]	; 130b4 <sd_raw_send_byte+0x18>
   130a0:	e5830008 	str	r0, [r3, #8]
    /* wait for byte to be shifted out */
    while(!(S0SPSR & 0x80));
   130a4:	e5932004 	ldr	r2, [r3, #4]
   130a8:	e3120080 	tst	r2, #128	; 0x80
   130ac:	0afffffc 	beq	130a4 <sd_raw_send_byte+0x8>
}
   130b0:	e12fff1e 	bx	lr
   130b4:	e0020000 	.word	0xe0020000

000130b8 <sd_raw_rec_byte>:
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte(void)
{
    /* send dummy data for receiving some */
    S0SPDR = 0xff;
   130b8:	e59f3020 	ldr	r3, [pc, #32]	; 130e0 <sd_raw_rec_byte+0x28>
   130bc:	e3a020ff 	mov	r2, #255	; 0xff
   130c0:	e5832008 	str	r2, [r3, #8]
    while(!(S0SPSR & 0x80));
   130c4:	e5932004 	ldr	r2, [r3, #4]
   130c8:	e3120080 	tst	r2, #128	; 0x80
   130cc:	0afffffc 	beq	130c4 <sd_raw_rec_byte+0xc>

    return S0SPDR;
   130d0:	e59f3008 	ldr	r3, [pc, #8]	; 130e0 <sd_raw_rec_byte+0x28>
   130d4:	e5930008 	ldr	r0, [r3, #8]
   130d8:	e20000ff 	and	r0, r0, #255	; 0xff
}
   130dc:	e12fff1e 	bx	lr
   130e0:	e0020000 	.word	0xe0020000

000130e4 <sd_raw_send_command>:
 * \param[in] command The command to send.
 * \param[in] arg The argument for command.
 * \returns The command answer.
 */
uint8_t sd_raw_send_command(uint8_t command, uint32_t arg)
{
   130e4:	e92d4030 	push	{r4, r5, lr}
   130e8:	e1a05000 	mov	r5, r0
   130ec:	e1a04001 	mov	r4, r1
    uint8_t response;

    /* wait some clock cycles */
    sd_raw_rec_byte();
   130f0:	ebfffff0 	bl	130b8 <sd_raw_rec_byte>

    /* send command via SPI */
    sd_raw_send_byte(0x40 | command);
   130f4:	e3850040 	orr	r0, r5, #64	; 0x40
   130f8:	ebffffe7 	bl	1309c <sd_raw_send_byte>
    sd_raw_send_byte((arg >> 24) & 0xff);
   130fc:	e1a00c24 	lsr	r0, r4, #24
   13100:	ebffffe5 	bl	1309c <sd_raw_send_byte>
    }

    unselect_card();

    return 1;
}
   13104:	e1a00824 	lsr	r0, r4, #16
    sd_raw_rec_byte();

    /* send command via SPI */
    sd_raw_send_byte(0x40 | command);
    sd_raw_send_byte((arg >> 24) & 0xff);
    sd_raw_send_byte((arg >> 16) & 0xff);
   13108:	e20000ff 	and	r0, r0, #255	; 0xff
   1310c:	ebffffe2 	bl	1309c <sd_raw_send_byte>
    }

    unselect_card();

    return 1;
}
   13110:	e1a00424 	lsr	r0, r4, #8

    /* send command via SPI */
    sd_raw_send_byte(0x40 | command);
    sd_raw_send_byte((arg >> 24) & 0xff);
    sd_raw_send_byte((arg >> 16) & 0xff);
    sd_raw_send_byte((arg >> 8) & 0xff);
   13114:	e20000ff 	and	r0, r0, #255	; 0xff
   13118:	ebffffdf 	bl	1309c <sd_raw_send_byte>
    }

    unselect_card();

    return 1;
}
   1311c:	e20400ff 	and	r0, r4, #255	; 0xff
    /* send command via SPI */
    sd_raw_send_byte(0x40 | command);
    sd_raw_send_byte((arg >> 24) & 0xff);
    sd_raw_send_byte((arg >> 16) & 0xff);
    sd_raw_send_byte((arg >> 8) & 0xff);
    sd_raw_send_byte((arg >> 0) & 0xff);
   13120:	ebffffdd 	bl	1309c <sd_raw_send_byte>
    switch(command)
   13124:	e3550000 	cmp	r5, #0
    {
        case CMD_GO_IDLE_STATE:
           sd_raw_send_byte(0x95);
   13128:	03a00095 	moveq	r0, #149	; 0x95
    sd_raw_send_byte(0x40 | command);
    sd_raw_send_byte((arg >> 24) & 0xff);
    sd_raw_send_byte((arg >> 16) & 0xff);
    sd_raw_send_byte((arg >> 8) & 0xff);
    sd_raw_send_byte((arg >> 0) & 0xff);
    switch(command)
   1312c:	0a000002 	beq	1313c <sd_raw_send_command+0x58>
   13130:	e3550008 	cmp	r5, #8
           break;
        case CMD_SEND_IF_COND:
           sd_raw_send_byte(0x87);
           break;
        default:
           sd_raw_send_byte(0xff);
   13134:	13a000ff 	movne	r0, #255	; 0xff
    sd_raw_send_byte(0x40 | command);
    sd_raw_send_byte((arg >> 24) & 0xff);
    sd_raw_send_byte((arg >> 16) & 0xff);
    sd_raw_send_byte((arg >> 8) & 0xff);
    sd_raw_send_byte((arg >> 0) & 0xff);
    switch(command)
   13138:	0a000002 	beq	13148 <sd_raw_send_command+0x64>
    {
        case CMD_GO_IDLE_STATE:
           sd_raw_send_byte(0x95);
   1313c:	ebffffd6 	bl	1309c <sd_raw_send_byte>
 * \param[in] command The command to send.
 * \param[in] arg The argument for command.
 * \returns The command answer.
 */
uint8_t sd_raw_send_command(uint8_t command, uint32_t arg)
{
   13140:	e3a0400a 	mov	r4, #10
   13144:	ea000001 	b	13150 <sd_raw_send_command+0x6c>
    {
        case CMD_GO_IDLE_STATE:
           sd_raw_send_byte(0x95);
           break;
        case CMD_SEND_IF_COND:
           sd_raw_send_byte(0x87);
   13148:	e3a00087 	mov	r0, #135	; 0x87
   1314c:	eafffffa 	b	1313c <sd_raw_send_command+0x58>
    }
    
    /* receive response */
    for(uint8_t i = 0; i < 10; ++i)
    {
        response = sd_raw_rec_byte();
   13150:	ebffffd8 	bl	130b8 <sd_raw_rec_byte>
        if(response != 0xff)
   13154:	e35000ff 	cmp	r0, #255	; 0xff
   13158:	1a000002 	bne	13168 <sd_raw_send_command+0x84>
   1315c:	e2444001 	sub	r4, r4, #1
           sd_raw_send_byte(0xff);
           break;
    }
    
    /* receive response */
    for(uint8_t i = 0; i < 10; ++i)
   13160:	e21440ff 	ands	r4, r4, #255	; 0xff
   13164:	1afffff9 	bne	13150 <sd_raw_send_command+0x6c>
        if(response != 0xff)
            break;
    }

    return response;
}
   13168:	e8bd4030 	pop	{r4, r5, lr}
   1316c:	e12fff1e 	bx	lr

00013170 <sd_raw_available>:
 * \returns 1 if the card is available, 0 if it is not.
 */
uint8_t sd_raw_available()
{
    return get_pin_available() == 0x00;
}
   13170:	e3a00001 	mov	r0, #1
   13174:	e12fff1e 	bx	lr

00013178 <sd_raw_locked>:
 * \returns 1 if the card is locked, 0 if it is not.
 */
uint8_t sd_raw_locked()
{
    return get_pin_locked() == 0x00;
}
   13178:	e3a00000 	mov	r0, #0
   1317c:	e12fff1e 	bx	lr

00013180 <sd_raw_sync>:
 *
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_write
 */
uint8_t sd_raw_sync()
{
   13180:	e92d4010 	push	{r4, lr}
#if SD_RAW_WRITE_BUFFERING
    if(raw_block_written)
   13184:	e59f4030 	ldr	r4, [pc, #48]	; 131bc <sd_raw_sync+0x3c>
   13188:	e5d43000 	ldrb	r3, [r4]
   1318c:	e3530000 	cmp	r3, #0
        return 1;
   13190:	13a00001 	movne	r0, #1
 * \see sd_raw_write
 */
uint8_t sd_raw_sync()
{
#if SD_RAW_WRITE_BUFFERING
    if(raw_block_written)
   13194:	1a000006 	bne	131b4 <sd_raw_sync+0x34>
        return 1;
    if(!sd_raw_write(raw_block_address, raw_block, sizeof(raw_block)))
   13198:	e9940003 	ldmib	r4, {r0, r1}
   1319c:	e284200c 	add	r2, r4, #12
   131a0:	e3a03c02 	mov	r3, #512	; 0x200
   131a4:	eb00012c 	bl	1365c <sd_raw_write>
   131a8:	e3500000 	cmp	r0, #0
        return 0;
    raw_block_written = 1;
   131ac:	13a00001 	movne	r0, #1
   131b0:	15c40000 	strbne	r0, [r4]
#endif
    return 1;
}
   131b4:	e8bd4010 	pop	{r4, lr}
   131b8:	e12fff1e 	bx	lr
   131bc:	4000003c 	.word	0x4000003c

000131c0 <sd_raw_read>:
 * \param[in] length The number of bytes to read.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_write_interval
 */
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
   131c0:	e92d4fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        if(read_length > length)
            read_length = length;
        
#if !SD_RAW_SAVE_RAM
        /* check if the requested data is cached */
        if(block_address != raw_block_address)
   131c4:	e59fa174 	ldr	sl, [pc, #372]	; 13340 <sd_raw_read+0x180>
 * \param[in] length The number of bytes to read.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_write_interval
 */
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
   131c8:	e58d0008 	str	r0, [sp, #8]
   131cc:	e58d100c 	str	r1, [sp, #12]
   131d0:	e1a07002 	mov	r7, r2
   131d4:	e1a08003 	mov	r8, r3
            }
#else
            /* read byte block */
            uint8_t* cache = raw_block;
            for(uint16_t i = 0; i < 512; ++i)
                *cache++ = sd_raw_rec_byte();
   131d8:	e28a900c 	add	r9, sl, #12
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
    offset_t block_address;
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
   131dc:	ea000051 	b	13328 <sd_raw_read+0x168>
    {
        /* determine byte count to read at once */
        block_offset = offset & 0x01ff;
   131e0:	e28d2008 	add	r2, sp, #8
   131e4:	e8920006 	ldm	r2, {r1, r2}
   131e8:	e59f3154 	ldr	r3, [pc, #340]	; 13344 <sd_raw_read+0x184>
   131ec:	e0011003 	and	r1, r1, r3
   131f0:	e3a04000 	mov	r4, #0
        block_address = offset - block_offset;
        read_length = 512 - block_offset; /* read up to block border */
   131f4:	e2616c02 	rsb	r6, r1, #512	; 0x200
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    {
        /* determine byte count to read at once */
        block_offset = offset & 0x01ff;
   131f8:	e0022004 	and	r2, r2, r4
        block_address = offset - block_offset;
        read_length = 512 - block_offset; /* read up to block border */
   131fc:	e1a06806 	lsl	r6, r6, #16
    uint16_t read_length;
    while(length > 0)
    {
        /* determine byte count to read at once */
        block_offset = offset & 0x01ff;
        block_address = offset - block_offset;
   13200:	e28d5008 	add	r5, sp, #8
   13204:	e8950030 	ldm	r5, {r4, r5}
        read_length = 512 - block_offset; /* read up to block border */
   13208:	e1a06826 	lsr	r6, r6, #16
    uint16_t read_length;
    while(length > 0)
    {
        /* determine byte count to read at once */
        block_offset = offset & 0x01ff;
        block_address = offset - block_offset;
   1320c:	e0544001 	subs	r4, r4, r1
   13210:	e0c55002 	sbc	r5, r5, r2
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    {
        /* determine byte count to read at once */
        block_offset = offset & 0x01ff;
   13214:	e88d0006 	stm	sp, {r1, r2}
        block_address = offset - block_offset;
        read_length = 512 - block_offset; /* read up to block border */
        if(read_length > length)
   13218:	e1560008 	cmp	r6, r8
            read_length = length;
        
#if !SD_RAW_SAVE_RAM
        /* check if the requested data is cached */
        if(block_address != raw_block_address)
   1321c:	e99a000c 	ldmib	sl, {r2, r3}
        /* determine byte count to read at once */
        block_offset = offset & 0x01ff;
        block_address = offset - block_offset;
        read_length = 512 - block_offset; /* read up to block border */
        if(read_length > length)
            read_length = length;
   13220:	81a06808 	lslhi	r6, r8, #16
   13224:	81a06826 	lsrhi	r6, r6, #16
        
#if !SD_RAW_SAVE_RAM
        /* check if the requested data is cached */
        if(block_address != raw_block_address)
   13228:	e1550003 	cmp	r5, r3
   1322c:	01540002 	cmpeq	r4, r2
   13230:	0a00002e 	beq	132f0 <sd_raw_read+0x130>
#endif
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
   13234:	ebffffd1 	bl	13180 <sd_raw_sync>
   13238:	e3500000 	cmp	r0, #0
   1323c:	0a00003c 	beq	13334 <sd_raw_read+0x174>
                return 0;
#endif

            /* address card */
            select_card();
   13240:	e59f3100 	ldr	r3, [pc, #256]	; 13348 <sd_raw_read+0x188>
   13244:	e593200c 	ldr	r2, [r3, #12]
   13248:	e3822080 	orr	r2, r2, #128	; 0x80
   1324c:	e583200c 	str	r2, [r3, #12]

            /* send single block request */
#if SD_RAW_SDHC
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
   13250:	e5da320c 	ldrb	r3, [sl, #524]	; 0x20c
   13254:	e3130004 	tst	r3, #4
   13258:	11a014a4 	lsrne	r1, r4, #9
   1325c:	11811b85 	orrne	r1, r1, r5, lsl #23
   13260:	01a01004 	moveq	r1, r4
   13264:	e3a00011 	mov	r0, #17
   13268:	ebffff9d 	bl	130e4 <sd_raw_send_command>
   1326c:	e3500000 	cmp	r0, #0
   13270:	0a000005 	beq	1328c <sd_raw_read+0xcc>
#else
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, block_address))
#endif
            {
                unselect_card();
   13274:	e59f30cc 	ldr	r3, [pc, #204]	; 13348 <sd_raw_read+0x188>
   13278:	e5932004 	ldr	r2, [r3, #4]
   1327c:	e3822080 	orr	r2, r2, #128	; 0x80
   13280:	e5832004 	str	r2, [r3, #4]
                return 0;
   13284:	e3a00000 	mov	r0, #0
   13288:	ea000029 	b	13334 <sd_raw_read+0x174>
            }

            /* wait for data block (start byte 0xfe) */
            while(sd_raw_rec_byte() != 0xfe);
   1328c:	ebffff89 	bl	130b8 <sd_raw_rec_byte>
   13290:	e35000fe 	cmp	r0, #254	; 0xfe
   13294:	1afffffc 	bne	1328c <sd_raw_read+0xcc>
   13298:	e3a0b000 	mov	fp, #0
            }
#else
            /* read byte block */
            uint8_t* cache = raw_block;
            for(uint16_t i = 0; i < 512; ++i)
                *cache++ = sd_raw_rec_byte();
   1329c:	ebffff85 	bl	130b8 <sd_raw_rec_byte>
   132a0:	e7c9000b 	strb	r0, [r9, fp]
   132a4:	e28bb001 	add	fp, fp, #1
                    *buffer++ = b;
            }
#else
            /* read byte block */
            uint8_t* cache = raw_block;
            for(uint16_t i = 0; i < 512; ++i)
   132a8:	e35b0c02 	cmp	fp, #512	; 0x200
   132ac:	1afffffa 	bne	1329c <sd_raw_read+0xdc>
                *cache++ = sd_raw_rec_byte();
            raw_block_address = block_address;
   132b0:	e59f3088 	ldr	r3, [pc, #136]	; 13340 <sd_raw_read+0x180>
   132b4:	e9830030 	stmib	r3, {r4, r5}

            memcpy(buffer, raw_block + block_offset, read_length);
   132b8:	e59d4000 	ldr	r4, [sp]
   132bc:	e1a02006 	mov	r2, r6
   132c0:	e0891004 	add	r1, r9, r4
   132c4:	e1a00007 	mov	r0, r7
   132c8:	eb000a8c 	bl	15d00 <memcpy>
            buffer += read_length;
#endif
            
            /* read crc16 */
            sd_raw_rec_byte();
   132cc:	ebffff79 	bl	130b8 <sd_raw_rec_byte>
            sd_raw_rec_byte();
   132d0:	ebffff78 	bl	130b8 <sd_raw_rec_byte>
            
            /* deaddress card */
            unselect_card();
   132d4:	e59f306c 	ldr	r3, [pc, #108]	; 13348 <sd_raw_read+0x188>
   132d8:	e5932004 	ldr	r2, [r3, #4]
   132dc:	e3822080 	orr	r2, r2, #128	; 0x80
   132e0:	e5832004 	str	r2, [r3, #4]
            for(uint16_t i = 0; i < 512; ++i)
                *cache++ = sd_raw_rec_byte();
            raw_block_address = block_address;

            memcpy(buffer, raw_block + block_offset, read_length);
            buffer += read_length;
   132e4:	e0877006 	add	r7, r7, r6
            
            /* deaddress card */
            unselect_card();

            /* let card some time to finish */
            sd_raw_rec_byte();
   132e8:	ebffff72 	bl	130b8 <sd_raw_rec_byte>
   132ec:	ea000006 	b	1330c <sd_raw_read+0x14c>
        }
#if !SD_RAW_SAVE_RAM
        else
        {
            /* use cached data */
            memcpy(buffer, raw_block + block_offset, read_length);
   132f0:	e59d2000 	ldr	r2, [sp]
   132f4:	e59f1050 	ldr	r1, [pc, #80]	; 1334c <sd_raw_read+0x18c>
   132f8:	e1a00007 	mov	r0, r7
   132fc:	e0811002 	add	r1, r1, r2
   13300:	e1a02006 	mov	r2, r6
   13304:	eb000a7d 	bl	15d00 <memcpy>
            buffer += read_length;
   13308:	e0877006 	add	r7, r7, r6
        }
#endif

        length -= read_length;
        offset += read_length;
   1330c:	e28d4008 	add	r4, sp, #8
   13310:	e8940018 	ldm	r4, {r3, r4}
   13314:	e0933006 	adds	r3, r3, r6
   13318:	e2a44000 	adc	r4, r4, #0
   1331c:	e58d3008 	str	r3, [sp, #8]
   13320:	e58d400c 	str	r4, [sp, #12]
            memcpy(buffer, raw_block + block_offset, read_length);
            buffer += read_length;
        }
#endif

        length -= read_length;
   13324:	e0668008 	rsb	r8, r6, r8
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
    offset_t block_address;
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
   13328:	e3580000 	cmp	r8, #0
   1332c:	1affffab 	bne	131e0 <sd_raw_read+0x20>

        length -= read_length;
        offset += read_length;
    }

    return 1;
   13330:	e3a00001 	mov	r0, #1
}
   13334:	e28dd010 	add	sp, sp, #16
   13338:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1333c:	e12fff1e 	bx	lr
   13340:	4000003c 	.word	0x4000003c
   13344:	000001ff 	.word	0x000001ff
   13348:	e0028000 	.word	0xe0028000
   1334c:	40000048 	.word	0x40000048

00013350 <sd_raw_read_interval>:
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_write
 */
uint8_t sd_raw_read_interval(offset_t offset, uint8_t* buffer, uintptr_t interval, uintptr_t length, sd_raw_read_interval_handler_t callback, void* p)
{
   13350:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(!buffer || interval == 0 || length < interval || !callback)
   13354:	e3520000 	cmp	r2, #0
   13358:	13530000 	cmpne	r3, #0
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_write
 */
uint8_t sd_raw_read_interval(offset_t offset, uint8_t* buffer, uintptr_t interval, uintptr_t length, sd_raw_read_interval_handler_t callback, void* p)
{
   1335c:	e1a04000 	mov	r4, r0
   13360:	e1a05001 	mov	r5, r1
   13364:	e59da024 	ldr	sl, [sp, #36]	; 0x24
   13368:	e59d9028 	ldr	r9, [sp, #40]	; 0x28
    if(!buffer || interval == 0 || length < interval || !callback)
   1336c:	e1a08003 	mov	r8, r3
   13370:	e1a0b002 	mov	fp, r2
   13374:	1a000001 	bne	13380 <sd_raw_read_interval+0x30>
        return 0;
   13378:	e3a00000 	mov	r0, #0
   1337c:	ea00001d 	b	133f8 <sd_raw_read_interval+0xa8>
 * \returns 0 on failure, 1 on success
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_write
 */
uint8_t sd_raw_read_interval(offset_t offset, uint8_t* buffer, uintptr_t interval, uintptr_t length, sd_raw_read_interval_handler_t callback, void* p)
{
    if(!buffer || interval == 0 || length < interval || !callback)
   13380:	e15a0003 	cmp	sl, r3
   13384:	23a03000 	movcs	r3, #0
   13388:	33a03001 	movcc	r3, #1
   1338c:	e3590000 	cmp	r9, #0
   13390:	03833001 	orreq	r3, r3, #1
   13394:	e3530000 	cmp	r3, #0
   13398:	1afffff6 	bne	13378 <sd_raw_read_interval+0x28>
         */
        if(!sd_raw_read(offset, buffer, interval))
            return 0;
        if(!callback(buffer, offset, p))
            break;
        offset += interval;
   1339c:	e1a06008 	mov	r6, r8
   133a0:	e3a07000 	mov	r7, #0
    while(length >= interval)
    {
        /* as reading is now buffered, we directly
         * hand over the request to sd_raw_read()
         */
        if(!sd_raw_read(offset, buffer, interval))
   133a4:	e1a00004 	mov	r0, r4
   133a8:	e1a01005 	mov	r1, r5
   133ac:	e1a0200b 	mov	r2, fp
   133b0:	e1a03008 	mov	r3, r8
   133b4:	ebffff81 	bl	131c0 <sd_raw_read>
   133b8:	e3500000 	cmp	r0, #0
   133bc:	0affffed 	beq	13378 <sd_raw_read_interval+0x28>
            return 0;
        if(!callback(buffer, offset, p))
   133c0:	e1a0000b 	mov	r0, fp
   133c4:	e1a01004 	mov	r1, r4
   133c8:	e1a02005 	mov	r2, r5
   133cc:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
   133d0:	e1a0e00f 	mov	lr, pc
   133d4:	e12fff19 	bx	r9
   133d8:	e3500000 	cmp	r0, #0
   133dc:	0a000004 	beq	133f4 <sd_raw_read_interval+0xa4>
 * \param[in] callback The function to call every interval bytes.
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_write
 */
uint8_t sd_raw_read_interval(offset_t offset, uint8_t* buffer, uintptr_t interval, uintptr_t length, sd_raw_read_interval_handler_t callback, void* p)
   133e0:	e0944006 	adds	r4, r4, r6
        if(!sd_raw_read(offset, buffer, interval))
            return 0;
        if(!callback(buffer, offset, p))
            break;
        offset += interval;
        length -= interval;
   133e4:	e068a00a 	rsb	sl, r8, sl
 * \param[in] callback The function to call every interval bytes.
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_write
 */
uint8_t sd_raw_read_interval(offset_t offset, uint8_t* buffer, uintptr_t interval, uintptr_t length, sd_raw_read_interval_handler_t callback, void* p)
   133e8:	e0a55007 	adc	r5, r5, r7
{
    if(!buffer || interval == 0 || length < interval || !callback)
        return 0;

#if !SD_RAW_SAVE_RAM
    while(length >= interval)
   133ec:	e15a0008 	cmp	sl, r8
   133f0:	2affffeb 	bcs	133a4 <sd_raw_read_interval+0x54>
            break;
        offset += interval;
        length -= interval;
    }

    return 1;
   133f4:	e3a00001 	mov	r0, #1
    /* let card some time to finish */
    sd_raw_rec_byte();

    return 1;
#endif
}
   133f8:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133fc:	e12fff1e 	bx	lr

00013400 <sd_raw_init>:
    /* enable inputs for reading card status */
    configure_pin_available();
    configure_pin_locked();

    /* enable outputs for MOSI, SCK, SS, input for MISO */
    configure_pin_mosi();
   13400:	e59f3240 	ldr	r3, [pc, #576]	; 13648 <sd_raw_init+0x248>
   13404:	e5932000 	ldr	r2, [r3]
   13408:	e3822a01 	orr	r2, r2, #4096	; 0x1000
 * Initializes memory card communication.
 *
 * \returns 0 on failure, 1 on success.
 */
uint8_t sd_raw_init()
{
   1340c:	e92d4070 	push	{r4, r5, r6, lr}
    /* enable inputs for reading card status */
    configure_pin_available();
    configure_pin_locked();

    /* enable outputs for MOSI, SCK, SS, input for MISO */
    configure_pin_mosi();
   13410:	e5832000 	str	r2, [r3]
    configure_pin_sck();
   13414:	e5932000 	ldr	r2, [r3]
   13418:	e3822c01 	orr	r2, r2, #256	; 0x100
   1341c:	e5832000 	str	r2, [r3]
    configure_pin_ss();
   13420:	e59f2224 	ldr	r2, [pc, #548]	; 1364c <sd_raw_init+0x24c>
   13424:	e5921008 	ldr	r1, [r2, #8]
   13428:	e3811080 	orr	r1, r1, #128	; 0x80
   1342c:	e5821008 	str	r1, [r2, #8]
    configure_pin_miso();
   13430:	e5931000 	ldr	r1, [r3]
   13434:	e3811b01 	orr	r1, r1, #1024	; 0x400
   13438:	e5831000 	str	r1, [r3]

    unselect_card();
   1343c:	e5923004 	ldr	r3, [r2, #4]
   13440:	e3833080 	orr	r3, r3, #128	; 0x80
   13444:	e5823004 	str	r3, [r2, #4]

    /* initialize SPI with lowest frequency; max. 400kHz during identification mode of card */
    S0SPCCR = 150;  /* Set frequency to 400kHz */
   13448:	e59f3200 	ldr	r3, [pc, #512]	; 13650 <sd_raw_init+0x250>
   1344c:	e3a01096 	mov	r1, #150	; 0x96
   13450:	e583100c 	str	r1, [r3, #12]
    S0SPCR = 0x38;
   13454:	e3a01038 	mov	r1, #56	; 0x38
   13458:	e5831000 	str	r1, [r3]

    /* initialization procedure */
    sd_raw_card_type = 0;
   1345c:	e59f31f0 	ldr	r3, [pc, #496]	; 13654 <sd_raw_init+0x254>
   13460:	e3a01000 	mov	r1, #0
   13464:	e5c3120c 	strb	r1, [r3, #524]	; 0x20c
   13468:	e3a0500a 	mov	r5, #10
   1346c:	e1a04002 	mov	r4, r2
   13470:	e2455001 	sub	r5, r5, #1

    /* card needs 74 cycles minimum to start up */
    for(uint8_t i = 0; i < 10; ++i)
    {
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
   13474:	ebffff0f 	bl	130b8 <sd_raw_rec_byte>
    
    if(!sd_raw_available())
        return 0;

    /* card needs 74 cycles minimum to start up */
    for(uint8_t i = 0; i < 10; ++i)
   13478:	e21550ff 	ands	r5, r5, #255	; 0xff
   1347c:	1afffffb 	bne	13470 <sd_raw_init+0x70>
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
    }

    /* address card */
    select_card();
   13480:	e594300c 	ldr	r3, [r4, #12]
   13484:	e3833080 	orr	r3, r3, #128	; 0x80
   13488:	e584300c 	str	r3, [r4, #12]
   1348c:	e3a04c02 	mov	r4, #512	; 0x200

    /* reset card */
    uint8_t response;
    for(uint16_t i = 0; ; ++i)
    {
        response = sd_raw_send_command(CMD_GO_IDLE_STATE, 0);
   13490:	e3a00000 	mov	r0, #0
   13494:	e1a01000 	mov	r1, r0
   13498:	ebffff11 	bl	130e4 <sd_raw_send_command>
        if(response == (1 << R1_IDLE_STATE))
   1349c:	e3500001 	cmp	r0, #1

    /* reset card */
    uint8_t response;
    for(uint16_t i = 0; ; ++i)
    {
        response = sd_raw_send_command(CMD_GO_IDLE_STATE, 0);
   134a0:	e1a05000 	mov	r5, r0
        if(response == (1 << R1_IDLE_STATE))
   134a4:	0a000004 	beq	134bc <sd_raw_init+0xbc>
   134a8:	e2444001 	sub	r4, r4, #1
   134ac:	e1a04804 	lsl	r4, r4, #16
            break;

        if(i == 0x1ff)
   134b0:	e1b04824 	lsrs	r4, r4, #16
   134b4:	1afffff5 	bne	13490 <sd_raw_init+0x90>
   134b8:	ea00003a 	b	135a8 <sd_raw_init+0x1a8>
        }
    }

#if SD_RAW_SDHC
    /* check for version of SD card specification */
    response = sd_raw_send_command(CMD_SEND_IF_COND, 0x100 /* 2.7V - 3.6V */ | 0xaa /* test pattern */);
   134bc:	e3a00008 	mov	r0, #8
   134c0:	e59f1190 	ldr	r1, [pc, #400]	; 13658 <sd_raw_init+0x258>
   134c4:	ebffff06 	bl	130e4 <sd_raw_send_command>
    if((response & (1 << R1_ILL_COMMAND)) == 0)
   134c8:	e3100004 	tst	r0, #4
   134cc:	1a00000d 	bne	13508 <sd_raw_init+0x108>
    {
        sd_raw_rec_byte();
   134d0:	ebfffef8 	bl	130b8 <sd_raw_rec_byte>
        sd_raw_rec_byte();
   134d4:	ebfffef7 	bl	130b8 <sd_raw_rec_byte>
        if((sd_raw_rec_byte() & 0x01) == 0)
   134d8:	ebfffef6 	bl	130b8 <sd_raw_rec_byte>
   134dc:	e3100001 	tst	r0, #1
   134e0:	0a000045 	beq	135fc <sd_raw_init+0x1fc>
            return 0; /* card operation voltage range doesn't match */
        if(sd_raw_rec_byte() != 0xaa)
   134e4:	ebfffef3 	bl	130b8 <sd_raw_rec_byte>
   134e8:	e35000aa 	cmp	r0, #170	; 0xaa
   134ec:	1a000042 	bne	135fc <sd_raw_init+0x1fc>
            return 0; /* wrong test pattern */

        /* card conforms to SD 2 card specification */
        sd_raw_card_type |= (1 << SD_RAW_SPEC_2);
   134f0:	e59f315c 	ldr	r3, [pc, #348]	; 13654 <sd_raw_init+0x254>
   134f4:	e3a02002 	mov	r2, #2
   134f8:	e5c3220c 	strb	r2, [r3, #524]	; 0x20c
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
    }

    /* address card */
    select_card();
   134fc:	e3a04902 	mov	r4, #32768	; 0x8000
    }

    /* wait for card to get ready */
    for(uint16_t i = 0; ; ++i)
    {
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
   13500:	e59f514c 	ldr	r5, [pc, #332]	; 13654 <sd_raw_init+0x254>
   13504:	ea000009 	b	13530 <sd_raw_init+0x130>
    }
    else
#endif
    {
        /* determine SD/MMC card type */
        sd_raw_send_command(CMD_APP, 0);
   13508:	e3a01000 	mov	r1, #0
   1350c:	e3a00037 	mov	r0, #55	; 0x37
   13510:	ebfffef3 	bl	130e4 <sd_raw_send_command>
        response = sd_raw_send_command(CMD_SD_SEND_OP_COND, 0);
   13514:	e3a00029 	mov	r0, #41	; 0x29
   13518:	e3a01000 	mov	r1, #0
   1351c:	ebfffef0 	bl	130e4 <sd_raw_send_command>
        if((response & (1 << R1_ILL_COMMAND)) == 0)
   13520:	e3100004 	tst	r0, #4
        {
            /* card conforms to SD 1 card specification */
            sd_raw_card_type |= (1 << SD_RAW_SPEC_1);
   13524:	059f3128 	ldreq	r3, [pc, #296]	; 13654 <sd_raw_init+0x254>
   13528:	05c3520c 	strbeq	r5, [r3, #524]	; 0x20c
   1352c:	eafffff2 	b	134fc <sd_raw_init+0xfc>
    }

    /* wait for card to get ready */
    for(uint16_t i = 0; ; ++i)
    {
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
   13530:	e5d5320c 	ldrb	r3, [r5, #524]	; 0x20c
   13534:	e2131003 	ands	r1, r3, #3
            sd_raw_send_command(CMD_APP, 0);
            response = sd_raw_send_command(CMD_SD_SEND_OP_COND, arg);
        }
        else
        {
            response = sd_raw_send_command(CMD_SEND_OP_COND, 0);
   13538:	03a00001 	moveq	r0, #1
    }

    /* wait for card to get ready */
    for(uint16_t i = 0; ; ++i)
    {
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
   1353c:	0a000008 	beq	13564 <sd_raw_init+0x164>
        {
            uint32_t arg = 0;
   13540:	e3130002 	tst	r3, #2
   13544:	13a06101 	movne	r6, #1073741824	; 0x40000000
   13548:	03a06000 	moveq	r6, #0
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
                arg = 0x40000000;
#endif
            sd_raw_send_command(CMD_APP, 0);
   1354c:	e3a01000 	mov	r1, #0
   13550:	e3a00037 	mov	r0, #55	; 0x37
   13554:	ebfffee2 	bl	130e4 <sd_raw_send_command>
            response = sd_raw_send_command(CMD_SD_SEND_OP_COND, arg);
   13558:	e3a00029 	mov	r0, #41	; 0x29
   1355c:	e1a01006 	mov	r1, r6
   13560:	eaffffff 	b	13564 <sd_raw_init+0x164>
        }
        else
        {
            response = sd_raw_send_command(CMD_SEND_OP_COND, 0);
   13564:	ebfffede 	bl	130e4 <sd_raw_send_command>
        }

        if((response & (1 << R1_IDLE_STATE)) == 0)
   13568:	e2106001 	ands	r6, r0, #1
   1356c:	0a000004 	beq	13584 <sd_raw_init+0x184>
   13570:	e2444001 	sub	r4, r4, #1
   13574:	e1a04804 	lsl	r4, r4, #16
            break;

        if(i == 0x7fff)
   13578:	e1b04824 	lsrs	r4, r4, #16
   1357c:	1affffeb 	bne	13530 <sd_raw_init+0x130>
   13580:	ea000008 	b	135a8 <sd_raw_init+0x1a8>
            return 0;
        }
    }

#if SD_RAW_SDHC
    if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
   13584:	e59f40c8 	ldr	r4, [pc, #200]	; 13654 <sd_raw_init+0x254>
   13588:	e5d4520c 	ldrb	r5, [r4, #524]	; 0x20c
   1358c:	e3150002 	tst	r5, #2
   13590:	0a000010 	beq	135d8 <sd_raw_init+0x1d8>
    {
        if(sd_raw_send_command(CMD_READ_OCR, 0))
   13594:	e3a0003a 	mov	r0, #58	; 0x3a
   13598:	e1a01006 	mov	r1, r6
   1359c:	ebfffed0 	bl	130e4 <sd_raw_send_command>
   135a0:	e3500000 	cmp	r0, #0
   135a4:	0a000004 	beq	135bc <sd_raw_init+0x1bc>
        {
            unselect_card();
   135a8:	e59f309c 	ldr	r3, [pc, #156]	; 1364c <sd_raw_init+0x24c>
   135ac:	e5932004 	ldr	r2, [r3, #4]
   135b0:	e3822080 	orr	r2, r2, #128	; 0x80
   135b4:	e5832004 	str	r2, [r3, #4]
   135b8:	ea00000f 	b	135fc <sd_raw_init+0x1fc>
            return 0;
        }

        if(sd_raw_rec_byte() & 0x40)
   135bc:	ebfffebd 	bl	130b8 <sd_raw_rec_byte>
   135c0:	e3100040 	tst	r0, #64	; 0x40
            sd_raw_card_type |= (1 << SD_RAW_SPEC_SDHC);
   135c4:	13855004 	orrne	r5, r5, #4
   135c8:	15c4520c 	strbne	r5, [r4, #524]	; 0x20c

        sd_raw_rec_byte();
   135cc:	ebfffeb9 	bl	130b8 <sd_raw_rec_byte>
        sd_raw_rec_byte();
   135d0:	ebfffeb8 	bl	130b8 <sd_raw_rec_byte>
        sd_raw_rec_byte();
   135d4:	ebfffeb7 	bl	130b8 <sd_raw_rec_byte>
    }
#endif

    /* set block size to 512 bytes */
    if(sd_raw_send_command(CMD_SET_BLOCKLEN, 512))
   135d8:	e3a00010 	mov	r0, #16
   135dc:	e3a01c02 	mov	r1, #512	; 0x200
   135e0:	ebfffebf 	bl	130e4 <sd_raw_send_command>
   135e4:	e59f3060 	ldr	r3, [pc, #96]	; 1364c <sd_raw_init+0x24c>
    {
        unselect_card();
   135e8:	e5932004 	ldr	r2, [r3, #4]
        sd_raw_rec_byte();
    }
#endif

    /* set block size to 512 bytes */
    if(sd_raw_send_command(CMD_SET_BLOCKLEN, 512))
   135ec:	e3500000 	cmp	r0, #0
    {
        unselect_card();
   135f0:	e3822080 	orr	r2, r2, #128	; 0x80
   135f4:	e5832004 	str	r2, [r3, #4]
        sd_raw_rec_byte();
    }
#endif

    /* set block size to 512 bytes */
    if(sd_raw_send_command(CMD_SET_BLOCKLEN, 512))
   135f8:	0a000001 	beq	13604 <sd_raw_init+0x204>
    {
        unselect_card();
        return 0;
   135fc:	e3a00000 	mov	r0, #0
   13600:	ea00000e 	b	13640 <sd_raw_init+0x240>

    /* deaddress card */
    unselect_card();

    /* switch to highest SPI frequency possible */
    S0SPCCR = 60; /* ~1MHz-- potentially can be faster */
   13604:	e59f3044 	ldr	r3, [pc, #68]	; 13650 <sd_raw_init+0x250>
   13608:	e3a0203c 	mov	r2, #60	; 0x3c
   1360c:	e583200c 	str	r2, [r3, #12]

#if !SD_RAW_SAVE_RAM
    /* the first block is likely to be accessed first, so precache it here */
    raw_block_address = (offset_t) -1;
   13610:	e59f203c 	ldr	r2, [pc, #60]	; 13654 <sd_raw_init+0x254>
   13614:	e3e00000 	mvn	r0, #0
   13618:	e3e01000 	mvn	r1, #0
#if SD_RAW_WRITE_BUFFERING
    raw_block_written = 1;
   1361c:	e3a03001 	mov	r3, #1
    /* switch to highest SPI frequency possible */
    S0SPCCR = 60; /* ~1MHz-- potentially can be faster */

#if !SD_RAW_SAVE_RAM
    /* the first block is likely to be accessed first, so precache it here */
    raw_block_address = (offset_t) -1;
   13620:	e9820003 	stmib	r2, {r0, r1}
#if SD_RAW_WRITE_BUFFERING
    raw_block_written = 1;
   13624:	e4c2300c 	strb	r3, [r2], #12
#endif
    if(!sd_raw_read(0, raw_block, sizeof(raw_block)))
   13628:	e3a00000 	mov	r0, #0
   1362c:	e3a01000 	mov	r1, #0
   13630:	e3a03c02 	mov	r3, #512	; 0x200
   13634:	ebfffee1 	bl	131c0 <sd_raw_read>
        return 0;
#endif

    return 1;
   13638:	e2900000 	adds	r0, r0, #0
   1363c:	13a00001 	movne	r0, #1
}
   13640:	e8bd4070 	pop	{r4, r5, r6, lr}
   13644:	e12fff1e 	bx	lr
   13648:	e002c000 	.word	0xe002c000
   1364c:	e0028000 	.word	0xe0028000
   13650:	e0020000 	.word	0xe0020000
   13654:	4000003c 	.word	0x4000003c
   13658:	000001aa 	.word	0x000001aa

0001365c <sd_raw_write>:
 * \param[in] length The number of bytes to write.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_read_interval
 */
uint8_t sd_raw_write(offset_t offset, const uint8_t* buffer, uintptr_t length)
{
   1365c:	e92d4fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            write_length = length;
        
        /* Merge the data to write with the content of the block.
         * Use the cached block if available.
         */
        if(block_address != raw_block_address)
   13660:	e59f81b8 	ldr	r8, [pc, #440]	; 13820 <sd_raw_write+0x1c4>
 * \param[in] length The number of bytes to write.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_read_interval
 */
uint8_t sd_raw_write(offset_t offset, const uint8_t* buffer, uintptr_t length)
{
   13664:	e88d0003 	stm	sp, {r0, r1}
   13668:	e1a0a002 	mov	sl, r2
   1366c:	e1a07003 	mov	r7, r3
                    return 0;
            }
            raw_block_address = block_address;
        }

        if(buffer != raw_block)
   13670:	e288900c 	add	r9, r8, #12
   13674:	ea000063 	b	13808 <sd_raw_write+0x1ac>
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
    {
        /* determine byte count to write at once */
        block_offset = offset & 0x01ff;
   13678:	e89d0006 	ldm	sp, {r1, r2}
   1367c:	e59f31a0 	ldr	r3, [pc, #416]	; 13824 <sd_raw_write+0x1c8>
   13680:	e0011003 	and	r1, r1, r3
   13684:	e1a0b801 	lsl	fp, r1, #16
   13688:	e1a0b82b 	lsr	fp, fp, #16
   1368c:	e3a04000 	mov	r4, #0
        block_address = offset - block_offset;
        write_length = 512 - block_offset; /* write up to block border */
   13690:	e26b6c02 	rsb	r6, fp, #512	; 0x200
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
    {
        /* determine byte count to write at once */
        block_offset = offset & 0x01ff;
   13694:	e0022004 	and	r2, r2, r4
        block_address = offset - block_offset;
        write_length = 512 - block_offset; /* write up to block border */
   13698:	e1a06806 	lsl	r6, r6, #16
    uint16_t write_length;
    while(length > 0)
    {
        /* determine byte count to write at once */
        block_offset = offset & 0x01ff;
        block_address = offset - block_offset;
   1369c:	e89d0030 	ldm	sp, {r4, r5}
        write_length = 512 - block_offset; /* write up to block border */
   136a0:	e1a06826 	lsr	r6, r6, #16
    uint16_t write_length;
    while(length > 0)
    {
        /* determine byte count to write at once */
        block_offset = offset & 0x01ff;
        block_address = offset - block_offset;
   136a4:	e0544001 	subs	r4, r4, r1
   136a8:	e0c55002 	sbc	r5, r5, r2
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
    {
        /* determine byte count to write at once */
        block_offset = offset & 0x01ff;
   136ac:	e58d1008 	str	r1, [sp, #8]
   136b0:	e58d200c 	str	r2, [sp, #12]
        block_address = offset - block_offset;
        write_length = 512 - block_offset; /* write up to block border */
        if(write_length > length)
   136b4:	e1560007 	cmp	r6, r7
            write_length = length;
        
        /* Merge the data to write with the content of the block.
         * Use the cached block if available.
         */
        if(block_address != raw_block_address)
   136b8:	e998000c 	ldmib	r8, {r2, r3}
        /* determine byte count to write at once */
        block_offset = offset & 0x01ff;
        block_address = offset - block_offset;
        write_length = 512 - block_offset; /* write up to block border */
        if(write_length > length)
            write_length = length;
   136bc:	81a06807 	lslhi	r6, r7, #16
   136c0:	81a06826 	lsrhi	r6, r6, #16
        
        /* Merge the data to write with the content of the block.
         * Use the cached block if available.
         */
        if(block_address != raw_block_address)
   136c4:	e1550003 	cmp	r5, r3
   136c8:	01540002 	cmpeq	r4, r2
   136cc:	0a00000f 	beq	13710 <sd_raw_write+0xb4>
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
   136d0:	ebfffeaa 	bl	13180 <sd_raw_sync>
   136d4:	e3500000 	cmp	r0, #0
   136d8:	0a00002c 	beq	13790 <sd_raw_write+0x134>
                return 0;
#endif

            if(block_offset || write_length < 512)
   136dc:	e3560c02 	cmp	r6, #512	; 0x200
   136e0:	235b0000 	cmpcs	fp, #0
   136e4:	1a000001 	bne	136f0 <sd_raw_write+0x94>
            {
                if(!sd_raw_read(block_address, raw_block, sizeof(raw_block)))
                    return 0;
            }
            raw_block_address = block_address;
   136e8:	e9880030 	stmib	r8, {r4, r5}
   136ec:	ea000007 	b	13710 <sd_raw_write+0xb4>
                return 0;
#endif

            if(block_offset || write_length < 512)
            {
                if(!sd_raw_read(block_address, raw_block, sizeof(raw_block)))
   136f0:	e1a00004 	mov	r0, r4
   136f4:	e1a01005 	mov	r1, r5
   136f8:	e59f2128 	ldr	r2, [pc, #296]	; 13828 <sd_raw_write+0x1cc>
   136fc:	e3a03c02 	mov	r3, #512	; 0x200
   13700:	ebfffeae 	bl	131c0 <sd_raw_read>
   13704:	e3500000 	cmp	r0, #0
   13708:	1afffff6 	bne	136e8 <sd_raw_write+0x8c>
   1370c:	ea00001f 	b	13790 <sd_raw_write+0x134>
                    return 0;
            }
            raw_block_address = block_address;
        }

        if(buffer != raw_block)
   13710:	e15a0009 	cmp	sl, r9
   13714:	1a000009 	bne	13740 <sd_raw_write+0xe4>
                return 1;
#endif
        }

        /* address card */
        select_card();
   13718:	e59f310c 	ldr	r3, [pc, #268]	; 1382c <sd_raw_write+0x1d0>
   1371c:	e593200c 	ldr	r2, [r3, #12]
   13720:	e3822080 	orr	r2, r2, #128	; 0x80
   13724:	e583200c 	str	r2, [r3, #12]

        /* send single block request */
#if SD_RAW_SDHC
        if(sd_raw_send_command(CMD_WRITE_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
   13728:	e5d8320c 	ldrb	r3, [r8, #524]	; 0x20c
   1372c:	e3130004 	tst	r3, #4
   13730:	11a014a4 	lsrne	r1, r4, #9
   13734:	11811b85 	orrne	r1, r1, r5, lsl #23
   13738:	1a00000c 	bne	13770 <sd_raw_write+0x114>
   1373c:	ea00000a 	b	1376c <sd_raw_write+0x110>
            raw_block_address = block_address;
        }

        if(buffer != raw_block)
        {
            memcpy(raw_block + block_offset, buffer, write_length);
   13740:	e59d1008 	ldr	r1, [sp, #8]
   13744:	e1a02006 	mov	r2, r6
   13748:	e0890001 	add	r0, r9, r1
   1374c:	e1a0100a 	mov	r1, sl
   13750:	eb00096a 	bl	15d00 <memcpy>

#if SD_RAW_WRITE_BUFFERING
            raw_block_written = 0;
   13754:	e3a03000 	mov	r3, #0

            if(length == write_length)
   13758:	e1570006 	cmp	r7, r6
        if(buffer != raw_block)
        {
            memcpy(raw_block + block_offset, buffer, write_length);

#if SD_RAW_WRITE_BUFFERING
            raw_block_written = 0;
   1375c:	e5c83000 	strb	r3, [r8]

            if(length == write_length)
   13760:	1affffec 	bne	13718 <sd_raw_write+0xbc>
                return 1;
   13764:	e3a00001 	mov	r0, #1
   13768:	ea000029 	b	13814 <sd_raw_write+0x1b8>
        /* address card */
        select_card();

        /* send single block request */
#if SD_RAW_SDHC
        if(sd_raw_send_command(CMD_WRITE_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
   1376c:	e1a01004 	mov	r1, r4
   13770:	e3a00018 	mov	r0, #24
   13774:	ebfffe5a 	bl	130e4 <sd_raw_send_command>
   13778:	e2504000 	subs	r4, r0, #0
   1377c:	0a000005 	beq	13798 <sd_raw_write+0x13c>
#else
        if(sd_raw_send_command(CMD_WRITE_SINGLE_BLOCK, block_address))
#endif
        {
            unselect_card();
   13780:	e59f30a4 	ldr	r3, [pc, #164]	; 1382c <sd_raw_write+0x1d0>
   13784:	e5932004 	ldr	r2, [r3, #4]
   13788:	e3822080 	orr	r2, r2, #128	; 0x80
   1378c:	e5832004 	str	r2, [r3, #4]
            return 0;
   13790:	e3a00000 	mov	r0, #0
   13794:	ea00001e 	b	13814 <sd_raw_write+0x1b8>
        }

        /* send start byte */
        sd_raw_send_byte(0xfe);
   13798:	e3a000fe 	mov	r0, #254	; 0xfe
   1379c:	ebfffe3e 	bl	1309c <sd_raw_send_byte>

        /* write byte block */
        uint8_t* cache = raw_block;
        for(uint16_t i = 0; i < 512; ++i)
            sd_raw_send_byte(*cache++);
   137a0:	e59f5080 	ldr	r5, [pc, #128]	; 13828 <sd_raw_write+0x1cc>
   137a4:	e7d50004 	ldrb	r0, [r5, r4]
   137a8:	e2844001 	add	r4, r4, #1
   137ac:	ebfffe3a 	bl	1309c <sd_raw_send_byte>
        /* send start byte */
        sd_raw_send_byte(0xfe);

        /* write byte block */
        uint8_t* cache = raw_block;
        for(uint16_t i = 0; i < 512; ++i)
   137b0:	e3540c02 	cmp	r4, #512	; 0x200
   137b4:	1afffffa 	bne	137a4 <sd_raw_write+0x148>
            sd_raw_send_byte(*cache++);

        /* write dummy crc16 */
        sd_raw_send_byte(0xff);
   137b8:	e3a000ff 	mov	r0, #255	; 0xff
   137bc:	ebfffe36 	bl	1309c <sd_raw_send_byte>
        sd_raw_send_byte(0xff);
   137c0:	e3a000ff 	mov	r0, #255	; 0xff
   137c4:	ebfffe34 	bl	1309c <sd_raw_send_byte>

        /* wait while card is busy */
        while(sd_raw_rec_byte() != 0xff);
   137c8:	ebfffe3a 	bl	130b8 <sd_raw_rec_byte>
   137cc:	e35000ff 	cmp	r0, #255	; 0xff
   137d0:	1afffffc 	bne	137c8 <sd_raw_write+0x16c>
        sd_raw_rec_byte();
   137d4:	ebfffe37 	bl	130b8 <sd_raw_rec_byte>

        /* deaddress card */
        unselect_card();
   137d8:	e59f304c 	ldr	r3, [pc, #76]	; 1382c <sd_raw_write+0x1d0>
   137dc:	e5932004 	ldr	r2, [r3, #4]
   137e0:	e3822080 	orr	r2, r2, #128	; 0x80
   137e4:	e5832004 	str	r2, [r3, #4]

        buffer += write_length;
        offset += write_length;
   137e8:	e89d000c 	ldm	sp, {r2, r3}
   137ec:	e0922006 	adds	r2, r2, r6
   137f0:	e2a33000 	adc	r3, r3, #0
   137f4:	e88d000c 	stm	sp, {r2, r3}
        length -= write_length;

#if SD_RAW_WRITE_BUFFERING
        raw_block_written = 1;
   137f8:	e3a03001 	mov	r3, #1
   137fc:	e5c83000 	strb	r3, [r8]
        sd_raw_rec_byte();

        /* deaddress card */
        unselect_card();

        buffer += write_length;
   13800:	e08aa006 	add	sl, sl, r6
        offset += write_length;
        length -= write_length;
   13804:	e0667007 	rsb	r7, r6, r7
        return 0;

    offset_t block_address;
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
   13808:	e3570000 	cmp	r7, #0
   1380c:	1affff99 	bne	13678 <sd_raw_write+0x1c>
   13810:	eaffffd3 	b	13764 <sd_raw_write+0x108>
        raw_block_written = 1;
#endif
    }

    return 1;
}
   13814:	e28dd010 	add	sp, sp, #16
   13818:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1381c:	e12fff1e 	bx	lr
   13820:	4000003c 	.word	0x4000003c
   13824:	000001ff 	.word	0x000001ff
   13828:	40000048 	.word	0x40000048
   1382c:	e0028000 	.word	0xe0028000

00013830 <sd_raw_write_interval>:
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_read
 */
uint8_t sd_raw_write_interval(offset_t offset, uint8_t* buffer, uintptr_t length, sd_raw_write_interval_handler_t callback, void* p)
{
   13830:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13834:	e59da024 	ldr	sl, [sp, #36]	; 0x24
#if SD_RAW_SAVE_RAM
    #error "SD_RAW_WRITE_SUPPORT is not supported together with SD_RAW_SAVE_RAM"
#endif

    if(!buffer || !callback)
   13838:	e3520000 	cmp	r2, #0
   1383c:	135a0000 	cmpne	sl, #0
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_read
 */
uint8_t sd_raw_write_interval(offset_t offset, uint8_t* buffer, uintptr_t length, sd_raw_write_interval_handler_t callback, void* p)
{
   13840:	e1a04000 	mov	r4, r0
   13844:	e1a05001 	mov	r5, r1
   13848:	e1a06003 	mov	r6, r3
#if SD_RAW_SAVE_RAM
    #error "SD_RAW_WRITE_SUPPORT is not supported together with SD_RAW_SAVE_RAM"
#endif

    if(!buffer || !callback)
   1384c:	e1a07002 	mov	r7, r2
   13850:	1a000001 	bne	1385c <sd_raw_write_interval+0x2c>
        return 0;
   13854:	e3a00000 	mov	r0, #0
   13858:	ea000023 	b	138ec <sd_raw_write_interval+0xbc>

    uint8_t endless = (length == 0);
   1385c:	e2738001 	rsbs	r8, r3, #1
   13860:	33a08000 	movcc	r8, #0
    while(endless || length > 0)
   13864:	ea00001a 	b	138d4 <sd_raw_write_interval+0xa4>
    {
        uint16_t bytes_to_write = callback(buffer, offset, p);
   13868:	e1a00007 	mov	r0, r7
   1386c:	e1a01004 	mov	r1, r4
   13870:	e1a02005 	mov	r2, r5
   13874:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
   13878:	e1a0e00f 	mov	lr, pc
   1387c:	e12fff1a 	bx	sl
   13880:	e1a0c800 	lsl	ip, r0, #16
        if(!bytes_to_write)
   13884:	e1b0b82c 	lsrs	fp, ip, #16
   13888:	1a000001 	bne	13894 <sd_raw_write_interval+0x64>

        offset += bytes_to_write;
        length -= bytes_to_write;
    }

    return 1;
   1388c:	e3a00001 	mov	r0, #1
   13890:	ea000015 	b	138ec <sd_raw_write_interval+0xbc>
    while(endless || length > 0)
    {
        uint16_t bytes_to_write = callback(buffer, offset, p);
        if(!bytes_to_write)
            break;
        if(!endless && bytes_to_write > length)
   13894:	e3580000 	cmp	r8, #0
   13898:	1a000001 	bne	138a4 <sd_raw_write_interval+0x74>
   1389c:	e15b0006 	cmp	fp, r6
   138a0:	8affffeb 	bhi	13854 <sd_raw_write_interval+0x24>
            return 0;

        /* as writing is always buffered, we directly
         * hand over the request to sd_raw_write()
         */
        if(!sd_raw_write(offset, buffer, bytes_to_write))
   138a4:	e1a09800 	lsl	r9, r0, #16
   138a8:	e1a09829 	lsr	r9, r9, #16
   138ac:	e1a00004 	mov	r0, r4
   138b0:	e1a01005 	mov	r1, r5
   138b4:	e1a02007 	mov	r2, r7
   138b8:	e1a03009 	mov	r3, r9
   138bc:	ebffff66 	bl	1365c <sd_raw_write>
   138c0:	e3500000 	cmp	r0, #0
   138c4:	0affffe2 	beq	13854 <sd_raw_write_interval+0x24>
            return 0;

        offset += bytes_to_write;
   138c8:	e094400b 	adds	r4, r4, fp
   138cc:	e2a55000 	adc	r5, r5, #0
        length -= bytes_to_write;
   138d0:	e0696006 	rsb	r6, r9, r6

    if(!buffer || !callback)
        return 0;

    uint8_t endless = (length == 0);
    while(endless || length > 0)
   138d4:	e3560000 	cmp	r6, #0
   138d8:	01a03008 	moveq	r3, r8
   138dc:	13883001 	orrne	r3, r8, #1
   138e0:	e3530000 	cmp	r3, #0
   138e4:	1affffdf 	bne	13868 <sd_raw_write_interval+0x38>
   138e8:	eaffffe7 	b	1388c <sd_raw_write_interval+0x5c>
        offset += bytes_to_write;
        length -= bytes_to_write;
    }

    return 1;
}
   138ec:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138f0:	e12fff1e 	bx	lr

000138f4 <sd_raw_get_info>:
 *
 * \param[in] info A pointer to the structure into which to save the information.
 * \returns 0 on failure, 1 on success.
 */
uint8_t sd_raw_get_info(struct sd_raw_info* info)
{
   138f4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(!info || !sd_raw_available())
   138f8:	e2504000 	subs	r4, r0, #0
        return 0;
   138fc:	01a00004 	moveq	r0, r4
 * \param[in] info A pointer to the structure into which to save the information.
 * \returns 0 on failure, 1 on success.
 */
uint8_t sd_raw_get_info(struct sd_raw_info* info)
{
    if(!info || !sd_raw_available())
   13900:	0a0000a5 	beq	13b9c <sd_raw_get_info+0x2a8>
        return 0;

    memset(info, 0, sizeof(*info));

    select_card();
   13904:	e59f5298 	ldr	r5, [pc, #664]	; 13ba4 <sd_raw_get_info+0x2b0>
uint8_t sd_raw_get_info(struct sd_raw_info* info)
{
    if(!info || !sd_raw_available())
        return 0;

    memset(info, 0, sizeof(*info));
   13908:	e3a01000 	mov	r1, #0
   1390c:	e3a02020 	mov	r2, #32
   13910:	eb000902 	bl	15d20 <memset>

    select_card();
   13914:	e595300c 	ldr	r3, [r5, #12]
   13918:	e3833080 	orr	r3, r3, #128	; 0x80
   1391c:	e585300c 	str	r3, [r5, #12]

    /* read cid register */
    if(sd_raw_send_command(CMD_SEND_CID, 0))
   13920:	e3a0000a 	mov	r0, #10
   13924:	e3a01000 	mov	r1, #0
   13928:	ebfffded 	bl	130e4 <sd_raw_send_command>
   1392c:	e3500000 	cmp	r0, #0
    {
        unselect_card();
   13930:	15953004 	ldrne	r3, [r5, #4]
   13934:	13833080 	orrne	r3, r3, #128	; 0x80
   13938:	15853004 	strne	r3, [r5, #4]
   1393c:	1a00003a 	bne	13a2c <sd_raw_get_info+0x138>
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
   13940:	ebfffddc 	bl	130b8 <sd_raw_rec_byte>
   13944:	e35000fe 	cmp	r0, #254	; 0xfe
   13948:	1afffffc 	bne	13940 <sd_raw_get_info+0x4c>
   1394c:	e1a05004 	mov	r5, r4
   13950:	e3a06060 	mov	r6, #96	; 0x60
 *        to the user.
 *
 * \param[in] info A pointer to the structure into which to save the information.
 * \returns 0 on failure, 1 on success.
 */
uint8_t sd_raw_get_info(struct sd_raw_info* info)
   13954:	e0647005 	rsb	r7, r4, r5
   13958:	e20770ff 	and	r7, r7, #255	; 0xff
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
    {
        uint8_t b = sd_raw_rec_byte();
   1395c:	ebfffdd5 	bl	130b8 <sd_raw_rec_byte>

        switch(i)
   13960:	e357000e 	cmp	r7, #14
   13964:	979ff107 	ldrls	pc, [pc, r7, lsl #2]
   13968:	ea000022 	b	139f8 <sd_raw_get_info+0x104>
   1396c:	000139a8 	.word	0x000139a8
   13970:	000139b0 	.word	0x000139b0
   13974:	000139b0 	.word	0x000139b0
   13978:	000139b8 	.word	0x000139b8
   1397c:	000139b8 	.word	0x000139b8
   13980:	000139b8 	.word	0x000139b8
   13984:	000139b8 	.word	0x000139b8
   13988:	000139b8 	.word	0x000139b8
   1398c:	000139c0 	.word	0x000139c0
   13990:	000139c8 	.word	0x000139c8
   13994:	000139c8 	.word	0x000139c8
   13998:	000139c8 	.word	0x000139c8
   1399c:	000139c8 	.word	0x000139c8
   139a0:	000139d8 	.word	0x000139d8
   139a4:	000139e4 	.word	0x000139e4
        {
            case 0:
                info->manufacturer = b;
   139a8:	e5c40000 	strb	r0, [r4]
                break;
   139ac:	ea000011 	b	139f8 <sd_raw_get_info+0x104>
            case 1:
            case 2:
                info->oem[i - 1] = b;
   139b0:	e5c50000 	strb	r0, [r5]
                break;
   139b4:	ea00000f 	b	139f8 <sd_raw_get_info+0x104>
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
                info->product[i - 3] = b;
   139b8:	e5c50001 	strb	r0, [r5, #1]
                break;
   139bc:	ea00000d 	b	139f8 <sd_raw_get_info+0x104>
            case 8:
                info->revision = b;
   139c0:	e5c4000a 	strb	r0, [r4, #10]
                break;
   139c4:	ea00000b 	b	139f8 <sd_raw_get_info+0x104>
            case 9:
            case 10:
            case 11:
            case 12:
                info->serial |= (uint32_t) b << ((12 - i) * 8);
   139c8:	e594300c 	ldr	r3, [r4, #12]
   139cc:	e1830610 	orr	r0, r3, r0, lsl r6
   139d0:	e584000c 	str	r0, [r4, #12]
                break;
   139d4:	ea000007 	b	139f8 <sd_raw_get_info+0x104>
            case 13:
                info->manufacturing_year = b << 4;
   139d8:	e1a00200 	lsl	r0, r0, #4
   139dc:	e5c40010 	strb	r0, [r4, #16]
                break;
   139e0:	ea000004 	b	139f8 <sd_raw_get_info+0x104>
            case 14:
                info->manufacturing_year |= b >> 4;
   139e4:	e5d43010 	ldrb	r3, [r4, #16]
   139e8:	e1833220 	orr	r3, r3, r0, lsr #4
                info->manufacturing_month = b & 0x0f;
   139ec:	e200000f 	and	r0, r0, #15
                break;
            case 13:
                info->manufacturing_year = b << 4;
                break;
            case 14:
                info->manufacturing_year |= b >> 4;
   139f0:	e5c43010 	strb	r3, [r4, #16]
                info->manufacturing_month = b & 0x0f;
   139f4:	e5c40011 	strb	r0, [r4, #17]
   139f8:	e2466008 	sub	r6, r6, #8
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
   139fc:	e3760030 	cmn	r6, #48	; 0x30
   13a00:	e2855001 	add	r5, r5, #1
   13a04:	1affffd2 	bne	13954 <sd_raw_get_info+0x60>
#if SD_RAW_SDHC
    uint16_t csd_c_size = 0;
#else
    uint32_t csd_c_size = 0;
#endif
    if(sd_raw_send_command(CMD_SEND_CSD, 0))
   13a08:	e3a00009 	mov	r0, #9
   13a0c:	e3a01000 	mov	r1, #0
   13a10:	ebfffdb3 	bl	130e4 <sd_raw_send_command>
   13a14:	e3500000 	cmp	r0, #0
   13a18:	0a000005 	beq	13a34 <sd_raw_get_info+0x140>
    {
        unselect_card();
   13a1c:	e59f3180 	ldr	r3, [pc, #384]	; 13ba4 <sd_raw_get_info+0x2b0>
   13a20:	e5932004 	ldr	r2, [r3, #4]
   13a24:	e3822080 	orr	r2, r2, #128	; 0x80
   13a28:	e5832004 	str	r2, [r3, #4]
        return 0;
   13a2c:	e3a00000 	mov	r0, #0
   13a30:	ea000059 	b	13b9c <sd_raw_get_info+0x2a8>
    }
    while(sd_raw_rec_byte() != 0xfe);
   13a34:	ebfffd9f 	bl	130b8 <sd_raw_rec_byte>
   13a38:	e35000fe 	cmp	r0, #254	; 0xfe
   13a3c:	1afffffc 	bne	13a34 <sd_raw_get_info+0x140>
   13a40:	e3a06000 	mov	r6, #0
            info->format = (b & 0x0c) >> 2;
        }
        else
        {
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
   13a44:	e59f915c 	ldr	r9, [pc, #348]	; 13ba8 <sd_raw_get_info+0x2b4>
    if(sd_raw_send_command(CMD_SEND_CSD, 0))
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
   13a48:	e1a05006 	mov	r5, r6
   13a4c:	e1a07006 	mov	r7, r6
   13a50:	e1a0a006 	mov	sl, r6
                        csd_c_size_mult <<= 1;
                        break;
                    case 10:
                        csd_c_size_mult |= b >> 7;

                        info->capacity = (uint32_t) csd_c_size << (csd_c_size_mult + csd_read_bl_len + 2);
   13a54:	e1a0b006 	mov	fp, r6
            if(b & 0x40)
                info->flag_copy = 1;
            if(b & 0x20)
                info->flag_write_protect = 1;
            if(b & 0x10)
                info->flag_write_protect_temp = 1;
   13a58:	e3a08001 	mov	r8, #1
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
    {
        uint8_t b = sd_raw_rec_byte();
   13a5c:	ebfffd95 	bl	130b8 <sd_raw_rec_byte>

        if(i == 14)
   13a60:	e356000e 	cmp	r6, #14
   13a64:	1a000009 	bne	13a90 <sd_raw_get_info+0x19c>
        {
            if(b & 0x40)
   13a68:	e3100040 	tst	r0, #64	; 0x40
                info->flag_copy = 1;
   13a6c:	15c4801c 	strbne	r8, [r4, #28]
            if(b & 0x20)
   13a70:	e3100020 	tst	r0, #32
                info->flag_write_protect = 1;
   13a74:	15c4801d 	strbne	r8, [r4, #29]
            if(b & 0x10)
   13a78:	e3100010 	tst	r0, #16
                info->flag_write_protect_temp = 1;
            info->format = (b & 0x0c) >> 2;
   13a7c:	e200000c 	and	r0, r0, #12
   13a80:	e1a00140 	asr	r0, r0, #2
            if(b & 0x40)
                info->flag_copy = 1;
            if(b & 0x20)
                info->flag_write_protect = 1;
            if(b & 0x10)
                info->flag_write_protect_temp = 1;
   13a84:	15c4801e 	strbne	r8, [r4, #30]
            info->format = (b & 0x0c) >> 2;
   13a88:	e5c4001f 	strb	r0, [r4, #31]
   13a8c:	ea000038 	b	13b74 <sd_raw_get_info+0x280>
        }
        else
        {
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
   13a90:	e5d9320c 	ldrb	r3, [r9, #524]	; 0x20c
   13a94:	e3130002 	tst	r3, #2
   13a98:	0a000013 	beq	13aec <sd_raw_get_info+0x1f8>
            {
                switch(i)
   13a9c:	e3560007 	cmp	r6, #7
   13aa0:	0a000003 	beq	13ab4 <sd_raw_get_info+0x1c0>
   13aa4:	3a000006 	bcc	13ac4 <sd_raw_get_info+0x1d0>
   13aa8:	e3560009 	cmp	r6, #9
   13aac:	8a000030 	bhi	13b74 <sd_raw_get_info+0x280>
   13ab0:	ea000000 	b	13ab8 <sd_raw_get_info+0x1c4>
                {
                    case 7:
                        b &= 0x3f;
   13ab4:	e200003f 	and	r0, r0, #63	; 0x3f
                    case 8:
                    case 9:
                        csd_c_size <<= 8;
                        csd_c_size |= b;
   13ab8:	e1805405 	orr	r5, r0, r5, lsl #8
   13abc:	e1a05805 	lsl	r5, r5, #16
   13ac0:	e1a05825 	lsr	r5, r5, #16
                        break;
                }
                if(i == 9)
   13ac4:	e3560009 	cmp	r6, #9
   13ac8:	1a000029 	bne	13b74 <sd_raw_get_info+0x280>
                {
                    ++csd_c_size;
   13acc:	e2855001 	add	r5, r5, #1
   13ad0:	e1a03805 	lsl	r3, r5, #16
   13ad4:	e1a05823 	lsr	r5, r3, #16
                    info->capacity = (offset_t) csd_c_size * 512 * 1024;
   13ad8:	e1a03ea3 	lsr	r3, r3, #29
   13adc:	e5843018 	str	r3, [r4, #24]
   13ae0:	e1a03985 	lsl	r3, r5, #19
   13ae4:	e5843014 	str	r3, [r4, #20]
   13ae8:	ea000021 	b	13b74 <sd_raw_get_info+0x280>
                }
            }
            else
#endif
            {
                switch(i)
   13aec:	e2463005 	sub	r3, r6, #5
   13af0:	e3530005 	cmp	r3, #5
   13af4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   13af8:	ea00001d 	b	13b74 <sd_raw_get_info+0x280>
   13afc:	00013b14 	.word	0x00013b14
   13b00:	00013b1c 	.word	0x00013b1c
   13b04:	00013b28 	.word	0x00013b28
   13b08:	00013b34 	.word	0x00013b34
   13b0c:	00013b4c 	.word	0x00013b4c
   13b10:	00013b58 	.word	0x00013b58
                {
                    case 5:
                        csd_read_bl_len = b & 0x0f;
   13b14:	e200a00f 	and	sl, r0, #15
                        break;
   13b18:	ea000015 	b	13b74 <sd_raw_get_info+0x280>
                    case 6:
                        csd_c_size = b & 0x03;
   13b1c:	e2005003 	and	r5, r0, #3
                        csd_c_size <<= 8;
   13b20:	e1a05405 	lsl	r5, r5, #8
                        break;
   13b24:	ea000012 	b	13b74 <sd_raw_get_info+0x280>
                    case 7:
                        csd_c_size |= b;
   13b28:	e1805005 	orr	r5, r0, r5
                        csd_c_size <<= 2;
   13b2c:	e1a05905 	lsl	r5, r5, #18
   13b30:	ea000003 	b	13b44 <sd_raw_get_info+0x250>
                        break;
                    case 8:
                        csd_c_size |= b >> 6;
   13b34:	e1a00900 	lsl	r0, r0, #18
   13b38:	e1855c20 	orr	r5, r5, r0, lsr #24
   13b3c:	e1a05805 	lsl	r5, r5, #16
                        ++csd_c_size;
   13b40:	e2855801 	add	r5, r5, #65536	; 0x10000
   13b44:	e1a05825 	lsr	r5, r5, #16
                        break;
   13b48:	ea000009 	b	13b74 <sd_raw_get_info+0x280>
                    case 9:
                        csd_c_size_mult = b & 0x03;
   13b4c:	e2000003 	and	r0, r0, #3
                        csd_c_size_mult <<= 1;
   13b50:	e1a07080 	lsl	r7, r0, #1
                        break;
   13b54:	ea000006 	b	13b74 <sd_raw_get_info+0x280>
                    case 10:
                        csd_c_size_mult |= b >> 7;
   13b58:	e18773a0 	orr	r7, r7, r0, lsr #7
   13b5c:	e20770ff 	and	r7, r7, #255	; 0xff

                        info->capacity = (uint32_t) csd_c_size << (csd_c_size_mult + csd_read_bl_len + 2);
   13b60:	e087300a 	add	r3, r7, sl
   13b64:	e2833002 	add	r3, r3, #2
   13b68:	e1a03315 	lsl	r3, r5, r3
   13b6c:	e584b018 	str	fp, [r4, #24]
   13b70:	e5843014 	str	r3, [r4, #20]
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
   13b74:	e2866001 	add	r6, r6, #1
   13b78:	e20660ff 	and	r6, r6, #255	; 0xff
   13b7c:	e3560012 	cmp	r6, #18
   13b80:	1affffb5 	bne	13a5c <sd_raw_get_info+0x168>
                }
            }
        }
    }

    unselect_card();
   13b84:	e59f3018 	ldr	r3, [pc, #24]	; 13ba4 <sd_raw_get_info+0x2b0>
   13b88:	e5932004 	ldr	r2, [r3, #4]
   13b8c:	e3822080 	orr	r2, r2, #128	; 0x80
   13b90:	e5832004 	str	r2, [r3, #4]

    return 1;
   13b94:	e3a00001 	mov	r0, #1
   13b98:	eaffffff 	b	13b9c <sd_raw_get_info+0x2a8>
}
   13b9c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ba0:	e12fff1e 	bx	lr
   13ba4:	e0028000 	.word	0xe0028000
   13ba8:	4000003c 	.word	0x4000003c

00013bac <fat_clear_cluster_callback>:
 * Callback function for clearing a cluster.
 */
uintptr_t fat_clear_cluster_callback(uint8_t* buffer, offset_t offset, void* p)
{
    return 16;
}
   13bac:	e3a00010 	mov	r0, #16
   13bb0:	e12fff1e 	bx	lr

00013bb4 <fat_calc_83_checksum>:
 * \param[in] file_name_83 The 11-byte file name buffer.
 * \returns The checksum of the given file name.
 */
uint8_t fat_calc_83_checksum(const uint8_t* file_name_83)
{
    uint8_t checksum = file_name_83[0];
   13bb4:	e5d03000 	ldrb	r3, [r0]
    for(uint8_t i = 1; i < 11; ++i)
   13bb8:	e3a02001 	mov	r2, #1
        checksum = ((checksum >> 1) | (checksum << 7)) + file_name_83[i];
   13bbc:	e1a010a3 	lsr	r1, r3, #1
   13bc0:	e1813383 	orr	r3, r1, r3, lsl #7
 * \returns The checksum of the given file name.
 */
uint8_t fat_calc_83_checksum(const uint8_t* file_name_83)
{
    uint8_t checksum = file_name_83[0];
    for(uint8_t i = 1; i < 11; ++i)
   13bc4:	e2822001 	add	r2, r2, #1
        checksum = ((checksum >> 1) | (checksum << 7)) + file_name_83[i];
   13bc8:	e5f01001 	ldrb	r1, [r0, #1]!
 * \returns The checksum of the given file name.
 */
uint8_t fat_calc_83_checksum(const uint8_t* file_name_83)
{
    uint8_t checksum = file_name_83[0];
    for(uint8_t i = 1; i < 11; ++i)
   13bcc:	e20220ff 	and	r2, r2, #255	; 0xff
        checksum = ((checksum >> 1) | (checksum << 7)) + file_name_83[i];
   13bd0:	e0833001 	add	r3, r3, r1
 * \returns The checksum of the given file name.
 */
uint8_t fat_calc_83_checksum(const uint8_t* file_name_83)
{
    uint8_t checksum = file_name_83[0];
    for(uint8_t i = 1; i < 11; ++i)
   13bd4:	e352000b 	cmp	r2, #11
        checksum = ((checksum >> 1) | (checksum << 7)) + file_name_83[i];
   13bd8:	e20330ff 	and	r3, r3, #255	; 0xff
 * \returns The checksum of the given file name.
 */
uint8_t fat_calc_83_checksum(const uint8_t* file_name_83)
{
    uint8_t checksum = file_name_83[0];
    for(uint8_t i = 1; i < 11; ++i)
   13bdc:	1afffff6 	bne	13bbc <fat_calc_83_checksum+0x8>
        checksum = ((checksum >> 1) | (checksum << 7)) + file_name_83[i];

    return checksum;
}
   13be0:	e1a00003 	mov	r0, r3
   13be4:	e12fff1e 	bx	lr

00013be8 <fat_get_fs_free_32_callback>:
/**
 * \ingroup fat_fs
 * Callback function used for counting free clusters in a FAT32.
 */
uint8_t fat_get_fs_free_32_callback(uint8_t* buffer, offset_t offset, void* p)
{
   13be8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   13bec:	e1a06000 	mov	r6, r0
   13bf0:	e1a05003 	mov	r5, r3
    struct fat_usage_count_callback_arg* count_arg = (struct fat_usage_count_callback_arg*) p;
    uintptr_t buffer_size = count_arg->buffer_size;
   13bf4:	e5937004 	ldr	r7, [r3, #4]

    for(uintptr_t i = 0; i < buffer_size; i += 4, buffer += 4)
   13bf8:	e3a04000 	mov	r4, #0
   13bfc:	ea000005 	b	13c18 <fat_get_fs_free_32_callback+0x30>
    {
        uint32_t cluster = read32(buffer);
   13c00:	eb000809 	bl	15c2c <read32>
        if(cluster == HTOL32(FAT32_CLUSTER_FREE))
   13c04:	e3500000 	cmp	r0, #0
            ++(count_arg->cluster_count);
   13c08:	05953000 	ldreq	r3, [r5]
   13c0c:	02833001 	addeq	r3, r3, #1
   13c10:	05853000 	streq	r3, [r5]
uint8_t fat_get_fs_free_32_callback(uint8_t* buffer, offset_t offset, void* p)
{
    struct fat_usage_count_callback_arg* count_arg = (struct fat_usage_count_callback_arg*) p;
    uintptr_t buffer_size = count_arg->buffer_size;

    for(uintptr_t i = 0; i < buffer_size; i += 4, buffer += 4)
   13c14:	e2844004 	add	r4, r4, #4
   13c18:	e1540007 	cmp	r4, r7
#if DOXYGEN || FAT_FAT32_SUPPORT
/**
 * \ingroup fat_fs
 * Callback function used for counting free clusters in a FAT32.
 */
uint8_t fat_get_fs_free_32_callback(uint8_t* buffer, offset_t offset, void* p)
   13c1c:	e0860004 	add	r0, r6, r4
{
    struct fat_usage_count_callback_arg* count_arg = (struct fat_usage_count_callback_arg*) p;
    uintptr_t buffer_size = count_arg->buffer_size;

    for(uintptr_t i = 0; i < buffer_size; i += 4, buffer += 4)
   13c20:	3afffff6 	bcc	13c00 <fat_get_fs_free_32_callback+0x18>
        if(cluster == HTOL32(FAT32_CLUSTER_FREE))
            ++(count_arg->cluster_count);
    }

    return 1;
}
   13c24:	e3a00001 	mov	r0, #1
   13c28:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   13c2c:	e12fff1e 	bx	lr

00013c30 <fat_get_fs_free_16_callback>:
/**
 * \ingroup fat_fs
 * Callback function used for counting free clusters in a FAT.
 */
uint8_t fat_get_fs_free_16_callback(uint8_t* buffer, offset_t offset, void* p)
{
   13c30:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   13c34:	e1a06000 	mov	r6, r0
   13c38:	e1a05003 	mov	r5, r3
    struct fat_usage_count_callback_arg* count_arg = (struct fat_usage_count_callback_arg*) p;
    uintptr_t buffer_size = count_arg->buffer_size;
   13c3c:	e5937004 	ldr	r7, [r3, #4]

    for(uintptr_t i = 0; i < buffer_size; i += 2, buffer += 2)
   13c40:	e3a04000 	mov	r4, #0
   13c44:	ea000005 	b	13c60 <fat_get_fs_free_16_callback+0x30>
    {
        uint16_t cluster = read16(buffer);
   13c48:	eb0007f3 	bl	15c1c <read16>
        if(cluster == HTOL16(FAT16_CLUSTER_FREE))
   13c4c:	e3500000 	cmp	r0, #0
            ++(count_arg->cluster_count);
   13c50:	05953000 	ldreq	r3, [r5]
   13c54:	02833001 	addeq	r3, r3, #1
   13c58:	05853000 	streq	r3, [r5]
uint8_t fat_get_fs_free_16_callback(uint8_t* buffer, offset_t offset, void* p)
{
    struct fat_usage_count_callback_arg* count_arg = (struct fat_usage_count_callback_arg*) p;
    uintptr_t buffer_size = count_arg->buffer_size;

    for(uintptr_t i = 0; i < buffer_size; i += 2, buffer += 2)
   13c5c:	e2844002 	add	r4, r4, #2
   13c60:	e1540007 	cmp	r4, r7

/**
 * \ingroup fat_fs
 * Callback function used for counting free clusters in a FAT.
 */
uint8_t fat_get_fs_free_16_callback(uint8_t* buffer, offset_t offset, void* p)
   13c64:	e0860004 	add	r0, r6, r4
{
    struct fat_usage_count_callback_arg* count_arg = (struct fat_usage_count_callback_arg*) p;
    uintptr_t buffer_size = count_arg->buffer_size;

    for(uintptr_t i = 0; i < buffer_size; i += 2, buffer += 2)
   13c68:	3afffff6 	bcc	13c48 <fat_get_fs_free_16_callback+0x18>
        if(cluster == HTOL16(FAT16_CLUSTER_FREE))
            ++(count_arg->cluster_count);
    }

    return 1;
}
   13c6c:	e3a00001 	mov	r0, #1
   13c70:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   13c74:	e12fff1e 	bx	lr

00013c78 <fat_dir_entry_read_callback>:
 * \param[in,out] p An argument structure controlling operation.
 * \returns 0 on failure or completion, 1 if reading has
 *          to be continued
 */
uint8_t fat_dir_entry_read_callback(uint8_t* buffer, offset_t offset, void* p)
{
   13c78:	e92d41ff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   13c7c:	e1a08003 	mov	r8, r3
    struct fat_read_dir_callback_arg* arg = p;
    struct fat_dir_entry_struct* dir_entry = arg->dir_entry;
   13c80:	e5936000 	ldr	r6, [r3]

    arg->bytes_read += 32;
   13c84:	e5933004 	ldr	r3, [r3, #4]
   13c88:	e2833020 	add	r3, r3, #32
   13c8c:	e5883004 	str	r3, [r8, #4]

    /* skip deleted or empty entries */
    if(buffer[0] == FAT_DIRENTRY_DELETED || !buffer[0])
   13c90:	e5d03000 	ldrb	r3, [r0]
   13c94:	e35300e5 	cmp	r3, #229	; 0xe5
   13c98:	13530000 	cmpne	r3, #0
    {
#if FAT_LFN_SUPPORT
        arg->checksum = 0;
   13c9c:	03a03000 	moveq	r3, #0
 * \param[in,out] p An argument structure controlling operation.
 * \returns 0 on failure or completion, 1 if reading has
 *          to be continued
 */
uint8_t fat_dir_entry_read_callback(uint8_t* buffer, offset_t offset, void* p)
{
   13ca0:	e1a07000 	mov	r7, r0
   13ca4:	e1a04001 	mov	r4, r1
   13ca8:	e1a05002 	mov	r5, r2

    /* skip deleted or empty entries */
    if(buffer[0] == FAT_DIRENTRY_DELETED || !buffer[0])
    {
#if FAT_LFN_SUPPORT
        arg->checksum = 0;
   13cac:	05c83008 	strbeq	r3, [r8, #8]
    struct fat_dir_entry_struct* dir_entry = arg->dir_entry;

    arg->bytes_read += 32;

    /* skip deleted or empty entries */
    if(buffer[0] == FAT_DIRENTRY_DELETED || !buffer[0])
   13cb0:	0a000023 	beq	13d44 <fat_dir_entry_read_callback+0xcc>
        return 1;
#endif

    char* long_name = dir_entry->long_name;
#if FAT_LFN_SUPPORT
    if(buffer[11] == 0x0f)
   13cb4:	e5d0300b 	ldrb	r3, [r0, #11]
   13cb8:	e353000f 	cmp	r3, #15
   13cbc:	1a000026 	bne	13d5c <fat_dir_entry_read_callback+0xe4>
    {
        /* checksum validation */
        if(arg->checksum == 0 || arg->checksum != buffer[13])
   13cc0:	e5d83008 	ldrb	r3, [r8, #8]
   13cc4:	e3530000 	cmp	r3, #0
   13cc8:	0a000002 	beq	13cd8 <fat_dir_entry_read_callback+0x60>
   13ccc:	e5d0200d 	ldrb	r2, [r0, #13]
   13cd0:	e1520003 	cmp	r2, r3
   13cd4:	0a000007 	beq	13cf8 <fat_dir_entry_read_callback+0x80>
        {
            /* reset directory entry */
            memset(dir_entry, 0, sizeof(*dir_entry));
   13cd8:	e1a00006 	mov	r0, r6
   13cdc:	e3a01000 	mov	r1, #0
   13ce0:	e3a02034 	mov	r2, #52	; 0x34
   13ce4:	eb00080d 	bl	15d20 <memset>

            arg->checksum = buffer[13];
   13ce8:	e5d7300d 	ldrb	r3, [r7, #13]
   13cec:	e5c83008 	strb	r3, [r8, #8]
            dir_entry->entry_offset = offset;
   13cf0:	e586402c 	str	r4, [r6, #44]	; 0x2c
   13cf4:	e5865030 	str	r5, [r6, #48]	; 0x30

        /* lfn supports unicode, but we do not, for now.
         * So we assume pure ascii and read only every
         * second byte.
         */
        uint16_t char_offset = ((buffer[0] & 0x3f) - 1) * 13;
   13cf8:	e5d74000 	ldrb	r4, [r7]
   13cfc:	e204403f 	and	r4, r4, #63	; 0x3f
   13d00:	e3a0200d 	mov	r2, #13
   13d04:	e2444001 	sub	r4, r4, #1
   13d08:	e0040492 	mul	r4, r2, r4
   13d0c:	e1a04804 	lsl	r4, r4, #16
   13d10:	e1a04824 	lsr	r4, r4, #16
        const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
   13d14:	e1a0000d 	mov	r0, sp
   13d18:	e59f118c 	ldr	r1, [pc, #396]	; 13eac <fat_dir_entry_read_callback+0x234>
   13d1c:	eb0007f7 	bl	15d00 <memcpy>
 * \param[in] offset The absolute offset of the raw data.
 * \param[in,out] p An argument structure controlling operation.
 * \returns 0 on failure or completion, 1 if reading has
 *          to be continued
 */
uint8_t fat_dir_entry_read_callback(uint8_t* buffer, offset_t offset, void* p)
   13d20:	e0866004 	add	r6, r6, r4
        /* lfn supports unicode, but we do not, for now.
         * So we assume pure ascii and read only every
         * second byte.
         */
        uint16_t char_offset = ((buffer[0] & 0x3f) - 1) * 13;
        const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
   13d24:	e3a03000 	mov	r3, #0
   13d28:	ea000007 	b	13d4c <fat_dir_entry_read_callback+0xd4>
        for(uint8_t i = 0; i <= 12 && char_offset + i < sizeof(dir_entry->long_name) - 1; ++i)
            long_name[char_offset + i] = buffer[char_mapping[i]];
   13d2c:	e7dd2003 	ldrb	r2, [sp, r3]
   13d30:	e7d72002 	ldrb	r2, [r7, r2]
   13d34:	e7c62003 	strb	r2, [r6, r3]
   13d38:	e2833001 	add	r3, r3, #1
         * So we assume pure ascii and read only every
         * second byte.
         */
        uint16_t char_offset = ((buffer[0] & 0x3f) - 1) * 13;
        const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
        for(uint8_t i = 0; i <= 12 && char_offset + i < sizeof(dir_entry->long_name) - 1; ++i)
   13d3c:	e353000d 	cmp	r3, #13
   13d40:	1a000001 	bne	13d4c <fat_dir_entry_read_callback+0xd4>
            long_name[char_offset + i] = buffer[char_mapping[i]];

        return 1;
   13d44:	e3a00001 	mov	r0, #1
   13d48:	ea000054 	b	13ea0 <fat_dir_entry_read_callback+0x228>
         * So we assume pure ascii and read only every
         * second byte.
         */
        uint16_t char_offset = ((buffer[0] & 0x3f) - 1) * 13;
        const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
        for(uint8_t i = 0; i <= 12 && char_offset + i < sizeof(dir_entry->long_name) - 1; ++i)
   13d4c:	e0832004 	add	r2, r3, r4
   13d50:	e352001e 	cmp	r2, #30
   13d54:	9afffff4 	bls	13d2c <fat_dir_entry_read_callback+0xb4>
   13d58:	eafffff9 	b	13d44 <fat_dir_entry_read_callback+0xcc>
    else
#endif
    {
#if FAT_LFN_SUPPORT
        /* if we do not have a long name or the previous lfn does not match, take the 8.3 name */
        if(long_name[0] == '\0' || arg->checksum != fat_calc_83_checksum(buffer))
   13d5c:	e5d63000 	ldrb	r3, [r6]
   13d60:	e3530000 	cmp	r3, #0
   13d64:	0a000003 	beq	13d78 <fat_dir_entry_read_callback+0x100>
   13d68:	ebffff91 	bl	13bb4 <fat_calc_83_checksum>
   13d6c:	e5d83008 	ldrb	r3, [r8, #8]
   13d70:	e1530000 	cmp	r3, r0
   13d74:	0a000039 	beq	13e60 <fat_dir_entry_read_callback+0x1e8>
#endif
        {
            /* reset directory entry */
            memset(dir_entry, 0, sizeof(*dir_entry));
   13d78:	e3a01000 	mov	r1, #0
   13d7c:	e1a00006 	mov	r0, r6
   13d80:	e3a02034 	mov	r2, #52	; 0x34
   13d84:	eb0007e5 	bl	15d20 <memset>
            dir_entry->entry_offset = offset;
   13d88:	e586402c 	str	r4, [r6, #44]	; 0x2c
   13d8c:	e5865030 	str	r5, [r6, #48]	; 0x30
   13d90:	e3a01000 	mov	r1, #0

            uint8_t i;
            for(i = 0; i < 8; ++i)
            {
                if(buffer[i] == ' ')
   13d94:	e7d73001 	ldrb	r3, [r7, r1]
   13d98:	e3530020 	cmp	r3, #32
   13d9c:	e20120ff 	and	r2, r1, #255	; 0xff
   13da0:	0a00000d 	beq	13ddc <fat_dir_entry_read_callback+0x164>
                    break;
                long_name[i] = buffer[i];
   13da4:	e7c63001 	strb	r3, [r6, r1]
                /* Windows NT and later versions do not store lfn entries
                 * for 8.3 names which have a lowercase basename, extension
                 * or both when everything else is uppercase. They use two
                 * extra bits to signal a lowercase basename or extension.
                 */
                if((buffer[12] & 0x08) && buffer[i] >= 'A' && buffer[i] <= 'Z')
   13da8:	e5d7200c 	ldrb	r2, [r7, #12]
   13dac:	e3120008 	tst	r2, #8
   13db0:	0a000005 	beq	13dcc <fat_dir_entry_read_callback+0x154>
   13db4:	e7d72001 	ldrb	r2, [r7, r1]
   13db8:	e3520040 	cmp	r2, #64	; 0x40
   13dbc:	9a000002 	bls	13dcc <fat_dir_entry_read_callback+0x154>
   13dc0:	e352005a 	cmp	r2, #90	; 0x5a
                    long_name[i] += 'a' - 'A';
   13dc4:	92833020 	addls	r3, r3, #32
   13dc8:	97c63001 	strbls	r3, [r6, r1]
   13dcc:	e2811001 	add	r1, r1, #1
            /* reset directory entry */
            memset(dir_entry, 0, sizeof(*dir_entry));
            dir_entry->entry_offset = offset;

            uint8_t i;
            for(i = 0; i < 8; ++i)
   13dd0:	e3510008 	cmp	r1, #8
   13dd4:	1affffee 	bne	13d94 <fat_dir_entry_read_callback+0x11c>
   13dd8:	e1a02001 	mov	r2, r1
                 * extra bits to signal a lowercase basename or extension.
                 */
                if((buffer[12] & 0x08) && buffer[i] >= 'A' && buffer[i] <= 'Z')
                    long_name[i] += 'a' - 'A';
            }
            if(long_name[0] == 0x05)
   13ddc:	e5d63000 	ldrb	r3, [r6]
   13de0:	e3530005 	cmp	r3, #5
                long_name[0] = (char) FAT_DIRENTRY_DELETED;
   13de4:	03e0301a 	mvneq	r3, #26
   13de8:	05c63000 	strbeq	r3, [r6]

            if(buffer[8] != ' ')
   13dec:	e5d73008 	ldrb	r3, [r7, #8]
   13df0:	e3530020 	cmp	r3, #32
   13df4:	0a000017 	beq	13e58 <fat_dir_entry_read_callback+0x1e0>
            {
                long_name[i++] = '.';
   13df8:	e3a0302e 	mov	r3, #46	; 0x2e
   13dfc:	e7c63002 	strb	r3, [r6, r2]
   13e00:	e2821001 	add	r1, r2, #1
 * \param[in] offset The absolute offset of the raw data.
 * \param[in,out] p An argument structure controlling operation.
 * \returns 0 on failure or completion, 1 if reading has
 *          to be continued
 */
uint8_t fat_dir_entry_read_callback(uint8_t* buffer, offset_t offset, void* p)
   13e04:	e2822004 	add	r2, r2, #4
   13e08:	e202c0ff 	and	ip, r2, #255	; 0xff
   13e0c:	e2873008 	add	r3, r7, #8
            if(long_name[0] == 0x05)
                long_name[0] = (char) FAT_DIRENTRY_DELETED;

            if(buffer[8] != ' ')
            {
                long_name[i++] = '.';
   13e10:	e20120ff 	and	r2, r1, #255	; 0xff

                uint8_t j = 8;
                for(; j < 11; ++j)
                {
                    if(buffer[j] == ' ')
   13e14:	e4d31001 	ldrb	r1, [r3], #1
   13e18:	e3510020 	cmp	r1, #32
   13e1c:	0a00000d 	beq	13e58 <fat_dir_entry_read_callback+0x1e0>
                        break;
                    long_name[i] = buffer[j];
   13e20:	e7c61002 	strb	r1, [r6, r2]

                    /* See above for the lowercase 8.3 name handling of
                     * Windows NT and later.
                     */
                    if((buffer[12] & 0x10) && buffer[j] >= 'A' && buffer[j] <= 'Z')
   13e24:	e5d7000c 	ldrb	r0, [r7, #12]
   13e28:	e3100010 	tst	r0, #16
   13e2c:	0a000005 	beq	13e48 <fat_dir_entry_read_callback+0x1d0>
   13e30:	e5530001 	ldrb	r0, [r3, #-1]
   13e34:	e3500040 	cmp	r0, #64	; 0x40
   13e38:	9a000002 	bls	13e48 <fat_dir_entry_read_callback+0x1d0>
   13e3c:	e350005a 	cmp	r0, #90	; 0x5a
                        long_name[i] += 'a' - 'A';
   13e40:	92811020 	addls	r1, r1, #32
   13e44:	97c61002 	strbls	r1, [r6, r2]

                    ++i;
   13e48:	e2822001 	add	r2, r2, #1
   13e4c:	e20220ff 	and	r2, r2, #255	; 0xff
            if(buffer[8] != ' ')
            {
                long_name[i++] = '.';

                uint8_t j = 8;
                for(; j < 11; ++j)
   13e50:	e152000c 	cmp	r2, ip
   13e54:	1affffee 	bne	13e14 <fat_dir_entry_read_callback+0x19c>

                    ++i;
                }
            } 

            long_name[i] = '\0';
   13e58:	e3a03000 	mov	r3, #0
   13e5c:	e7c63002 	strb	r3, [r6, r2]
        }
        
        /* extract properties of file and store them within the structure */
        dir_entry->attributes = buffer[11];
   13e60:	e5d7300b 	ldrb	r3, [r7, #11]
        dir_entry->cluster = read16(&buffer[26]);
   13e64:	e287001a 	add	r0, r7, #26

            long_name[i] = '\0';
        }
        
        /* extract properties of file and store them within the structure */
        dir_entry->attributes = buffer[11];
   13e68:	e5c63020 	strb	r3, [r6, #32]
        dir_entry->cluster = read16(&buffer[26]);
   13e6c:	eb00076a 	bl	15c1c <read16>
   13e70:	e1a04000 	mov	r4, r0
   13e74:	e5860024 	str	r0, [r6, #36]	; 0x24
#if FAT_FAT32_SUPPORT
        dir_entry->cluster |= ((cluster_t) read16(&buffer[20])) << 16;
   13e78:	e2870014 	add	r0, r7, #20
   13e7c:	eb000766 	bl	15c1c <read16>
   13e80:	e1840800 	orr	r0, r4, r0, lsl #16
   13e84:	e5860024 	str	r0, [r6, #36]	; 0x24
#endif
        dir_entry->file_size = read32(&buffer[28]);
   13e88:	e287001c 	add	r0, r7, #28
   13e8c:	eb000766 	bl	15c2c <read32>
#if FAT_DATETIME_SUPPORT
        dir_entry->modification_time = read16(&buffer[22]);
        dir_entry->modification_date = read16(&buffer[24]);
#endif

        arg->finished = 1;
   13e90:	e3a03001 	mov	r3, #1
        dir_entry->attributes = buffer[11];
        dir_entry->cluster = read16(&buffer[26]);
#if FAT_FAT32_SUPPORT
        dir_entry->cluster |= ((cluster_t) read16(&buffer[20])) << 16;
#endif
        dir_entry->file_size = read32(&buffer[28]);
   13e94:	e5860028 	str	r0, [r6, #40]	; 0x28
#if FAT_DATETIME_SUPPORT
        dir_entry->modification_time = read16(&buffer[22]);
        dir_entry->modification_date = read16(&buffer[24]);
#endif

        arg->finished = 1;
   13e98:	e5c83009 	strb	r3, [r8, #9]
        return 0;
   13e9c:	e3a00000 	mov	r0, #0
    }
}
   13ea0:	e28dd010 	add	sp, sp, #16
   13ea4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   13ea8:	e12fff1e 	bx	lr
   13eac:	000162d4 	.word	0x000162d4

00013eb0 <fat_get_next_cluster>:
 * \param[in] cluster_num The number of the cluster for which to determine its successor.
 * \returns The wanted cluster number, or 0 on error.
 */
cluster_t fat_get_next_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
   13eb0:	e3500000 	cmp	r0, #0
   13eb4:	13510001 	cmpne	r1, #1
 * \param[in] fs The filesystem for which to determine the next cluster.
 * \param[in] cluster_num The number of the cluster for which to determine its successor.
 * \returns The wanted cluster number, or 0 on error.
 */
cluster_t fat_get_next_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
   13eb8:	e92d4003 	push	{r0, r1, lr}
   13ebc:	e1a02001 	mov	r2, r1
    if(!fs || cluster_num < 2)
   13ec0:	9a00002b 	bls	13f74 <fat_get_next_cluster+0xc4>
        return 0;

#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
   13ec4:	e590c000 	ldr	ip, [r0]
   13ec8:	e5dc3010 	ldrb	r3, [ip, #16]
   13ecc:	e353000b 	cmp	r3, #11
   13ed0:	e280100c 	add	r1, r0, #12
   13ed4:	e8910003 	ldm	r1, {r0, r1}
   13ed8:	1a000011 	bne	13f24 <fat_get_next_cluster+0x74>
    {
        /* read appropriate fat entry */
        uint32_t fat_entry;
        if(!fs->partition->device_read(fs->header.fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
   13edc:	e3a03004 	mov	r3, #4
   13ee0:	e0a10293 	umlal	r0, r1, r3, r2
   13ee4:	e08d2003 	add	r2, sp, r3
   13ee8:	e59cc000 	ldr	ip, [ip]
   13eec:	e1a0e00f 	mov	lr, pc
   13ef0:	e12fff1c 	bx	ip
   13ef4:	e3500000 	cmp	r0, #0
   13ef8:	0a00001d 	beq	13f74 <fat_get_next_cluster+0xc4>
            return 0;

        /* determine next cluster from fat */
        cluster_num = ltoh32(fat_entry);
   13efc:	e59d0004 	ldr	r0, [sp, #4]
        
        if(cluster_num == FAT32_CLUSTER_FREE ||
   13f00:	e370029f 	cmn	r0, #-268435447	; 0xf0000009
   13f04:	13500000 	cmpne	r0, #0
   13f08:	0a000019 	beq	13f74 <fat_get_next_cluster+0xc4>
           cluster_num == FAT32_CLUSTER_BAD ||
           (cluster_num >= FAT32_CLUSTER_RESERVED_MIN && cluster_num <= FAT32_CLUSTER_RESERVED_MAX) ||
   13f0c:	e280320f 	add	r3, r0, #-268435456	; 0xf0000000
   13f10:	e2833010 	add	r3, r3, #16

        /* determine next cluster from fat */
        cluster_num = ltoh32(fat_entry);
        
        if(cluster_num == FAT32_CLUSTER_FREE ||
           cluster_num == FAT32_CLUSTER_BAD ||
   13f14:	e3530006 	cmp	r3, #6
           (cluster_num >= FAT32_CLUSTER_RESERVED_MIN && cluster_num <= FAT32_CLUSTER_RESERVED_MAX) ||
           (cluster_num >= FAT32_CLUSTER_LAST_MIN && cluster_num <= FAT32_CLUSTER_LAST_MAX))
   13f18:	8280328f 	addhi	r3, r0, #-268435448	; 0xf0000008

        /* determine next cluster from fat */
        cluster_num = ltoh32(fat_entry);
        
        if(cluster_num == FAT32_CLUSTER_FREE ||
           cluster_num == FAT32_CLUSTER_BAD ||
   13f1c:	8a000012 	bhi	13f6c <fat_get_next_cluster+0xbc>
   13f20:	ea000013 	b	13f74 <fat_get_next_cluster+0xc4>
    else
#endif
    {
        /* read appropriate fat entry */
        uint16_t fat_entry;
        if(!fs->partition->device_read(fs->header.fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
   13f24:	e3a03002 	mov	r3, #2
   13f28:	e0a10293 	umlal	r0, r1, r3, r2
   13f2c:	e08d2003 	add	r2, sp, r3
   13f30:	e59cc000 	ldr	ip, [ip]
   13f34:	e1a0e00f 	mov	lr, pc
   13f38:	e12fff1c 	bx	ip
   13f3c:	e3500000 	cmp	r0, #0
   13f40:	0a00000b 	beq	13f74 <fat_get_next_cluster+0xc4>
            return 0;

        /* determine next cluster from fat */
        cluster_num = ltoh16(fat_entry);
   13f44:	e1dd00b2 	ldrh	r0, [sp, #2]
        
        if(cluster_num == FAT16_CLUSTER_FREE ||
   13f48:	e59f3030 	ldr	r3, [pc, #48]	; 13f80 <fat_get_next_cluster+0xd0>
   13f4c:	e3500000 	cmp	r0, #0
   13f50:	11500003 	cmpne	r0, r3
   13f54:	0a000006 	beq	13f74 <fat_get_next_cluster+0xc4>
           cluster_num == FAT16_CLUSTER_BAD ||
           (cluster_num >= FAT16_CLUSTER_RESERVED_MIN && cluster_num <= FAT16_CLUSTER_RESERVED_MAX) ||
   13f58:	e2403cff 	sub	r3, r0, #65280	; 0xff00
   13f5c:	e24320f0 	sub	r2, r3, #240	; 0xf0

        /* determine next cluster from fat */
        cluster_num = ltoh16(fat_entry);
        
        if(cluster_num == FAT16_CLUSTER_FREE ||
           cluster_num == FAT16_CLUSTER_BAD ||
   13f60:	e3520006 	cmp	r2, #6
   13f64:	9a000002 	bls	13f74 <fat_get_next_cluster+0xc4>
           (cluster_num >= FAT16_CLUSTER_RESERVED_MIN && cluster_num <= FAT16_CLUSTER_RESERVED_MAX) ||
           (cluster_num >= FAT16_CLUSTER_LAST_MIN && cluster_num <= FAT16_CLUSTER_LAST_MAX))
   13f68:	e24330f8 	sub	r3, r3, #248	; 0xf8
        /* determine next cluster from fat */
        cluster_num = ltoh16(fat_entry);
        
        if(cluster_num == FAT16_CLUSTER_FREE ||
           cluster_num == FAT16_CLUSTER_BAD ||
           (cluster_num >= FAT16_CLUSTER_RESERVED_MIN && cluster_num <= FAT16_CLUSTER_RESERVED_MAX) ||
   13f6c:	e3530007 	cmp	r3, #7
   13f70:	8a000000 	bhi	13f78 <fat_get_next_cluster+0xc8>
 * \returns The wanted cluster number, or 0 on error.
 */
cluster_t fat_get_next_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
        return 0;
   13f74:	e3a00000 	mov	r0, #0
           (cluster_num >= FAT16_CLUSTER_LAST_MIN && cluster_num <= FAT16_CLUSTER_LAST_MAX))
            return 0;
    }

    return cluster_num;
}
   13f78:	e8bd400c 	pop	{r2, r3, lr}
   13f7c:	e12fff1e 	bx	lr
   13f80:	0000fff7 	.word	0x0000fff7

00013f84 <fat_free_clusters>:
 * \returns 0 on failure, 1 on success.
 * \see fat_terminate_clusters
 */
uint8_t fat_free_clusters(struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
   13f84:	e3500000 	cmp	r0, #0
   13f88:	13510001 	cmpne	r1, #1
 * \param[in] cluster_num The starting cluster of the chain which to free.
 * \returns 0 on failure, 1 on success.
 * \see fat_terminate_clusters
 */
uint8_t fat_free_clusters(struct fat_fs_struct* fs, cluster_t cluster_num)
{
   13f8c:	e92d4ff7 	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f90:	e1a0a001 	mov	sl, r1
    if(!fs || cluster_num < 2)
   13f94:	e1a08000 	mov	r8, r0
   13f98:	83a09000 	movhi	r9, #0
   13f9c:	93a09001 	movls	r9, #1
   13fa0:	9a000057 	bls	14104 <fat_free_clusters+0x180>
        return 0;

    offset_t fat_offset = fs->header.fat_offset;
#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
   13fa4:	e5903000 	ldr	r3, [r0]
   13fa8:	e5d33010 	ldrb	r3, [r3, #16]
   13fac:	e353000b 	cmp	r3, #11
uint8_t fat_free_clusters(struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
        return 0;

    offset_t fat_offset = fs->header.fat_offset;
   13fb0:	e280500c 	add	r5, r0, #12
   13fb4:	e8950030 	ldm	r5, {r4, r5}
#endif
    {
        uint16_t fat_entry;
        while(cluster_num)
        {
            if(!fs->partition->device_read(fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
   13fb8:	13a0b002 	movne	fp, #2
               (cluster_num_next >= FAT16_CLUSTER_RESERVED_MIN &&
                cluster_num_next <= FAT16_CLUSTER_RESERVED_MAX
               )
              )
                return 0;
            if(cluster_num_next >= FAT16_CLUSTER_LAST_MIN && cluster_num_next <= FAT16_CLUSTER_LAST_MAX)
   13fbc:	159f914c 	ldrne	r9, [pc, #332]	; 14110 <fat_free_clusters+0x18c>
    if(!fs || cluster_num < 2)
        return 0;

    offset_t fat_offset = fs->header.fat_offset;
#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
   13fc0:	1a00002b 	bne	14074 <fat_free_clusters+0xf0>
   13fc4:	ea000001 	b	13fd0 <fat_free_clusters+0x4c>

            /* We continue in any case here, even if freeing the cluster failed.
             * The cluster is lost, but maybe we can still free up some later ones.
             */

            cluster_num = cluster_num_next;
   13fc8:	e1a0a00c 	mov	sl, ip
   13fcc:	ea000000 	b	13fd4 <fat_free_clusters+0x50>
    if(fs->partition->type == PARTITION_TYPE_FAT32)
    {
        uint32_t fat_entry;
        while(cluster_num)
        {
            if(!fs->partition->device_read(fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
   13fd0:	e3a0b004 	mov	fp, #4
   13fd4:	e1a06004 	mov	r6, r4
   13fd8:	e1a07005 	mov	r7, r5
   13fdc:	e0a76a9b 	umlal	r6, r7, fp, sl
   13fe0:	e598c000 	ldr	ip, [r8]
   13fe4:	e1a00006 	mov	r0, r6
   13fe8:	e1a01007 	mov	r1, r7
   13fec:	e28d2008 	add	r2, sp, #8
   13ff0:	e3a03004 	mov	r3, #4
   13ff4:	e59cc000 	ldr	ip, [ip]
   13ff8:	e1a0e00f 	mov	lr, pc
   13ffc:	e12fff1c 	bx	ip
   14000:	e3500000 	cmp	r0, #0
   14004:	0a00003f 	beq	14108 <fat_free_clusters+0x184>
                return 0;

            /* get next cluster of current cluster before freeing current cluster */
            uint32_t cluster_num_next = ltoh32(fat_entry);
   14008:	e59dc008 	ldr	ip, [sp, #8]

            if(cluster_num_next == FAT32_CLUSTER_FREE)
   1400c:	e35c0000 	cmp	ip, #0
   14010:	0a000039 	beq	140fc <fat_free_clusters+0x178>
                return 1;
            if(cluster_num_next == FAT32_CLUSTER_BAD ||
   14014:	e28c320f 	add	r3, ip, #-268435456	; 0xf0000000
   14018:	e2833010 	add	r3, r3, #16
   1401c:	e3530007 	cmp	r3, #7
   14020:	9a000037 	bls	14104 <fat_free_clusters+0x180>
               (cluster_num_next >= FAT32_CLUSTER_RESERVED_MIN &&
                cluster_num_next <= FAT32_CLUSTER_RESERVED_MAX
               )
              )
                return 0;
            if(cluster_num_next >= FAT32_CLUSTER_LAST_MIN && cluster_num_next <= FAT32_CLUSTER_LAST_MAX)
   14024:	e28c328f 	add	r3, ip, #-268435448	; 0xf0000008
                cluster_num_next = 0;
   14028:	e3530007 	cmp	r3, #7

            /* We know we will free the cluster, so remember it as
             * free for the next allocation.
             */
            if(!fs->cluster_free)
   1402c:	e5983030 	ldr	r3, [r8, #48]	; 0x30
                cluster_num_next <= FAT32_CLUSTER_RESERVED_MAX
               )
              )
                return 0;
            if(cluster_num_next >= FAT32_CLUSTER_LAST_MIN && cluster_num_next <= FAT32_CLUSTER_LAST_MAX)
                cluster_num_next = 0;
   14030:	93a0c000 	movls	ip, #0

            /* We know we will free the cluster, so remember it as
             * free for the next allocation.
             */
            if(!fs->cluster_free)
   14034:	e3530000 	cmp	r3, #0
                fs->cluster_free = cluster_num;
   14038:	0588a030 	streq	sl, [r8, #48]	; 0x30

            /* free cluster */
            fat_entry = HTOL32(FAT32_CLUSTER_FREE);
   1403c:	e58d9008 	str	r9, [sp, #8]
            fs->partition->device_write(fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry));
   14040:	e598a000 	ldr	sl, [r8]
   14044:	e1a00006 	mov	r0, r6
   14048:	e58dc000 	str	ip, [sp]
   1404c:	e1a01007 	mov	r1, r7
   14050:	e28d2008 	add	r2, sp, #8
   14054:	e3a03004 	mov	r3, #4
   14058:	e59ac008 	ldr	ip, [sl, #8]
   1405c:	e1a0e00f 	mov	lr, pc
   14060:	e12fff1c 	bx	ip
    offset_t fat_offset = fs->header.fat_offset;
#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
    {
        uint32_t fat_entry;
        while(cluster_num)
   14064:	e59dc000 	ldr	ip, [sp]
   14068:	e35c0000 	cmp	ip, #0
   1406c:	1affffd5 	bne	13fc8 <fat_free_clusters+0x44>
   14070:	ea000021 	b	140fc <fat_free_clusters+0x178>
#endif
    {
        uint16_t fat_entry;
        while(cluster_num)
        {
            if(!fs->partition->device_read(fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
   14074:	e1a06004 	mov	r6, r4
   14078:	e1a07005 	mov	r7, r5
   1407c:	e0a76a9b 	umlal	r6, r7, fp, sl
   14080:	e598c000 	ldr	ip, [r8]
   14084:	e1a00006 	mov	r0, r6
   14088:	e1a01007 	mov	r1, r7
   1408c:	e28d2006 	add	r2, sp, #6
   14090:	e3a03002 	mov	r3, #2
   14094:	e59cc000 	ldr	ip, [ip]
   14098:	e1a0e00f 	mov	lr, pc
   1409c:	e12fff1c 	bx	ip
   140a0:	e3500000 	cmp	r0, #0
   140a4:	0a000017 	beq	14108 <fat_free_clusters+0x184>
                return 0;

            /* get next cluster of current cluster before freeing current cluster */
            uint16_t cluster_num_next = ltoh16(fat_entry);
   140a8:	e1dda0b6 	ldrh	sl, [sp, #6]

            if(cluster_num_next == FAT16_CLUSTER_FREE)
   140ac:	e35a0000 	cmp	sl, #0
   140b0:	0a000011 	beq	140fc <fat_free_clusters+0x178>
                return 1;
            if(cluster_num_next == FAT16_CLUSTER_BAD ||
   140b4:	e28a3010 	add	r3, sl, #16
   140b8:	e1a03803 	lsl	r3, r3, #16
   140bc:	e3530807 	cmp	r3, #458752	; 0x70000
   140c0:	9a00000f 	bls	14104 <fat_free_clusters+0x180>
                cluster_num_next <= FAT16_CLUSTER_RESERVED_MAX
               )
              )
                return 0;
            if(cluster_num_next >= FAT16_CLUSTER_LAST_MIN && cluster_num_next <= FAT16_CLUSTER_LAST_MAX)
                cluster_num_next = 0;
   140c4:	e15a0009 	cmp	sl, r9

            /* free cluster */
            fat_entry = HTOL16(FAT16_CLUSTER_FREE);
   140c8:	e3a03000 	mov	r3, #0
                cluster_num_next <= FAT16_CLUSTER_RESERVED_MAX
               )
              )
                return 0;
            if(cluster_num_next >= FAT16_CLUSTER_LAST_MIN && cluster_num_next <= FAT16_CLUSTER_LAST_MAX)
                cluster_num_next = 0;
   140cc:	83a0a000 	movhi	sl, #0

            /* free cluster */
            fat_entry = HTOL16(FAT16_CLUSTER_FREE);
   140d0:	e1cd30b6 	strh	r3, [sp, #6]
            fs->partition->device_write(fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry));
   140d4:	e598c000 	ldr	ip, [r8]
   140d8:	e1a00006 	mov	r0, r6
   140dc:	e1a01007 	mov	r1, r7
   140e0:	e28d2006 	add	r2, sp, #6
   140e4:	e3a03002 	mov	r3, #2
   140e8:	e59cc008 	ldr	ip, [ip, #8]
   140ec:	e1a0e00f 	mov	lr, pc
   140f0:	e12fff1c 	bx	ip
    }
    else
#endif
    {
        uint16_t fat_entry;
        while(cluster_num)
   140f4:	e35a0000 	cmp	sl, #0
   140f8:	1affffdd 	bne	14074 <fat_free_clusters+0xf0>

            /* get next cluster of current cluster before freeing current cluster */
            uint16_t cluster_num_next = ltoh16(fat_entry);

            if(cluster_num_next == FAT16_CLUSTER_FREE)
                return 1;
   140fc:	e3a00001 	mov	r0, #1
   14100:	ea000000 	b	14108 <fat_free_clusters+0x184>
 * \see fat_terminate_clusters
 */
uint8_t fat_free_clusters(struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
        return 0;
   14104:	e3a00000 	mov	r0, #0
            cluster_num = cluster_num_next;
        }
    }

    return 1;
}
   14108:	e8bd4ffe 	pop	{r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1410c:	e12fff1e 	bx	lr
   14110:	0000fff7 	.word	0x0000fff7

00014114 <fat_append_clusters>:
 * \param[in] cluster_num The cluster to which to append the new chain.
 * \param[in] count The number of clusters to allocate.
 * \returns 0 on failure, the number of the first new cluster on success.
 */
cluster_t fat_append_clusters(struct fat_fs_struct* fs, cluster_t cluster_num, cluster_t count)
{
   14114:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(!fs)
   14118:	e2507000 	subs	r7, r0, #0
 * \param[in] cluster_num The cluster to which to append the new chain.
 * \param[in] count The number of clusters to allocate.
 * \returns 0 on failure, the number of the first new cluster on success.
 */
cluster_t fat_append_clusters(struct fat_fs_struct* fs, cluster_t cluster_num, cluster_t count)
{
   1411c:	e24dd020 	sub	sp, sp, #32
   14120:	e1a0b001 	mov	fp, r1
    if(!fs)
   14124:	0a000074 	beq	142fc <fat_append_clusters+0x1e8>
        return 0;

    device_read_t device_read = fs->partition->device_read;
   14128:	e5973000 	ldr	r3, [r7]
    device_write_t device_write = fs->partition->device_write;
    offset_t fat_offset = fs->header.fat_offset;
   1412c:	e287100c 	add	r1, r7, #12
   14130:	e8910003 	ldm	r1, {r0, r1}
cluster_t fat_append_clusters(struct fat_fs_struct* fs, cluster_t cluster_num, cluster_t count)
{
    if(!fs)
        return 0;

    device_read_t device_read = fs->partition->device_read;
   14134:	e593c000 	ldr	ip, [r3]
    device_write_t device_write = fs->partition->device_write;
   14138:	e593a008 	ldr	sl, [r3, #8]
    cluster_t cluster_next = 0;
    cluster_t cluster_count;
    uint16_t fat_entry16;
#if FAT_FAT32_SUPPORT
    uint32_t fat_entry32;
    uint8_t is_fat32 = (fs->partition->type == PARTITION_TYPE_FAT32);
   1413c:	e5d33010 	ldrb	r3, [r3, #16]
    if(!fs)
        return 0;

    device_read_t device_read = fs->partition->device_read;
    device_write_t device_write = fs->partition->device_write;
    offset_t fat_offset = fs->header.fat_offset;
   14140:	e88d0003 	stm	sp, {r0, r1}
    cluster_t cluster_next = 0;
    cluster_t cluster_count;
    uint16_t fat_entry16;
#if FAT_FAT32_SUPPORT
    uint32_t fat_entry32;
    uint8_t is_fat32 = (fs->partition->type == PARTITION_TYPE_FAT32);
   14144:	e253100b 	subs	r1, r3, #11
   14148:	e2713000 	rsbs	r3, r1, #0
   1414c:	e0b33001 	adcs	r3, r3, r1

    if(is_fat32)
   14150:	e3530000 	cmp	r3, #0
    cluster_t cluster_next = 0;
    cluster_t cluster_count;
    uint16_t fat_entry16;
#if FAT_FAT32_SUPPORT
    uint32_t fat_entry32;
    uint8_t is_fat32 = (fs->partition->type == PARTITION_TYPE_FAT32);
   14154:	e58d3010 	str	r3, [sp, #16]
   14158:	e5973014 	ldr	r3, [r7, #20]

    if(is_fat32)
        cluster_count = fs->header.fat_size / sizeof(fat_entry32);
   1415c:	11a03123 	lsrne	r3, r3, #2
    else
#endif
        cluster_count = fs->header.fat_size / sizeof(fat_entry16);
   14160:	01a030a3 	lsreq	r3, r3, #1
   14164:	e58d3008 	str	r3, [sp, #8]
cluster_t fat_append_clusters(struct fat_fs_struct* fs, cluster_t cluster_num, cluster_t count)
{
    if(!fs)
        return 0;

    device_read_t device_read = fs->partition->device_read;
   14168:	e58dc014 	str	ip, [sp, #20]
    else
#endif
        cluster_count = fs->header.fat_size / sizeof(fat_entry16);

    fs->cluster_free = 0;
    for(cluster_t cluster_left = cluster_count; cluster_left > 0; --cluster_left, ++cluster_current)
   1416c:	e59dc008 	ldr	ip, [sp, #8]
        cluster_count = fs->header.fat_size / sizeof(fat_entry32);
    else
#endif
        cluster_count = fs->header.fat_size / sizeof(fat_entry16);

    fs->cluster_free = 0;
   14170:	e3a06000 	mov	r6, #0

    device_read_t device_read = fs->partition->device_read;
    device_write_t device_write = fs->partition->device_write;
    offset_t fat_offset = fs->header.fat_offset;
    cluster_t count_left = count;
    cluster_t cluster_current = fs->cluster_free;
   14174:	e5979030 	ldr	r9, [r7, #48]	; 0x30
    else
#endif
        cluster_count = fs->header.fat_size / sizeof(fat_entry16);

    fs->cluster_free = 0;
    for(cluster_t cluster_left = cluster_count; cluster_left > 0; --cluster_left, ++cluster_current)
   14178:	e58dc00c 	str	ip, [sp, #12]
        cluster_count = fs->header.fat_size / sizeof(fat_entry32);
    else
#endif
        cluster_count = fs->header.fat_size / sizeof(fat_entry16);

    fs->cluster_free = 0;
   1417c:	e5876030 	str	r6, [r7, #48]	; 0x30
        return 0;

    device_read_t device_read = fs->partition->device_read;
    device_write_t device_write = fs->partition->device_write;
    offset_t fat_offset = fs->header.fat_offset;
    cluster_t count_left = count;
   14180:	e1a08002 	mov	r8, r2
    else
#endif
        cluster_count = fs->header.fat_size / sizeof(fat_entry16);

    fs->cluster_free = 0;
    for(cluster_t cluster_left = cluster_count; cluster_left > 0; --cluster_left, ++cluster_current)
   14184:	ea000045 	b	142a0 <fat_append_clusters+0x18c>
    {
        if(cluster_current < 2 || cluster_current >= cluster_count)
   14188:	e3590001 	cmp	r9, #1
   1418c:	e59dc008 	ldr	ip, [sp, #8]
   14190:	83a03000 	movhi	r3, #0
   14194:	93a03001 	movls	r3, #1
   14198:	e159000c 	cmp	r9, ip
   1419c:	23833001 	orrcs	r3, r3, #1
            cluster_current = 2;

#if FAT_FAT32_SUPPORT
        if(is_fat32)
   141a0:	e59dc010 	ldr	ip, [sp, #16]

    fs->cluster_free = 0;
    for(cluster_t cluster_left = cluster_count; cluster_left > 0; --cluster_left, ++cluster_current)
    {
        if(cluster_current < 2 || cluster_current >= cluster_count)
            cluster_current = 2;
   141a4:	e3530000 	cmp	r3, #0
   141a8:	13a09002 	movne	r9, #2

#if FAT_FAT32_SUPPORT
        if(is_fat32)
   141ac:	e35c0000 	cmp	ip, #0
   141b0:	0a00000b 	beq	141e4 <fat_append_clusters+0xd0>
        {
            if(!device_read(fat_offset + (offset_t) cluster_current * sizeof(fat_entry32), (uint8_t*) &fat_entry32, sizeof(fat_entry32)))
   141b4:	e89d0030 	ldm	sp, {r4, r5}
   141b8:	e3a03004 	mov	r3, #4
   141bc:	e0a54993 	umlal	r4, r5, r3, r9
   141c0:	e28d201c 	add	r2, sp, #28
   141c4:	e1a00004 	mov	r0, r4
   141c8:	e1a01005 	mov	r1, r5
   141cc:	e59dc014 	ldr	ip, [sp, #20]
   141d0:	e1a0e00f 	mov	lr, pc
   141d4:	e12fff1c 	bx	ip
   141d8:	e3500000 	cmp	r0, #0
   141dc:	1a00004c 	bne	14314 <fat_append_clusters+0x200>
   141e0:	ea000045 	b	142fc <fat_append_clusters+0x1e8>
                return 0;
        }
        else
#endif
        {
            if(!device_read(fat_offset + (offset_t) cluster_current * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
   141e4:	e89d0030 	ldm	sp, {r4, r5}
   141e8:	e3a00002 	mov	r0, #2
   141ec:	e0a54990 	umlal	r4, r5, r0, r9
   141f0:	e28d201a 	add	r2, sp, #26
   141f4:	e1a00004 	mov	r0, r4
   141f8:	e1a01005 	mov	r1, r5
   141fc:	e3a03002 	mov	r3, #2
   14200:	e59dc014 	ldr	ip, [sp, #20]
   14204:	e1a0e00f 	mov	lr, pc
   14208:	e12fff1c 	bx	ip
   1420c:	e3500000 	cmp	r0, #0
   14210:	1a00003b 	bne	14304 <fat_append_clusters+0x1f0>
   14214:	ea000038 	b	142fc <fat_append_clusters+0x1e8>

            /* If we don't need this free cluster for the
             * current allocation, we keep it in mind for
             * the next time.
             */
            if(count_left == 0)
   14218:	e3580000 	cmp	r8, #0
   1421c:	0a000010 	beq	14264 <fat_append_clusters+0x150>
                fs->cluster_free = cluster_current;
                break;
            }

            /* allocate cluster */
            if(cluster_next == 0)
   14220:	e3560000 	cmp	r6, #0
                fat_entry32 = HTOL32(FAT32_CLUSTER_LAST_MAX);
   14224:	03e0320f 	mvneq	r3, #-268435456	; 0xf0000000
            else
                fat_entry32 = htol32(cluster_next);
   14228:	158d601c 	strne	r6, [sp, #28]
                break;
            }

            /* allocate cluster */
            if(cluster_next == 0)
                fat_entry32 = HTOL32(FAT32_CLUSTER_LAST_MAX);
   1422c:	058d301c 	streq	r3, [sp, #28]
            else
                fat_entry32 = htol32(cluster_next);

            if(!device_write(fat_offset + (offset_t) cluster_current * sizeof(fat_entry32), (uint8_t*) &fat_entry32, sizeof(fat_entry32)))
   14230:	e1a00004 	mov	r0, r4
   14234:	e1a01005 	mov	r1, r5
   14238:	e28d201c 	add	r2, sp, #28
   1423c:	e3a03004 	mov	r3, #4
   14240:	e1a0e00f 	mov	lr, pc
   14244:	e12fff1a 	bx	sl
   14248:	e3500000 	cmp	r0, #0
   1424c:	0a000027 	beq	142f0 <fat_append_clusters+0x1dc>
            if(!device_write(fat_offset + (offset_t) cluster_current * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
                break;
        }

        cluster_next = cluster_current;
        --count_left;
   14250:	e2488001 	sub	r8, r8, #1
   14254:	e1a06009 	mov	r6, r9
   14258:	ea00000c 	b	14290 <fat_append_clusters+0x17c>

            /* If we don't need this free cluster for the
             * current allocation, we keep it in mind for
             * the next time.
             */
            if(count_left == 0)
   1425c:	e3580000 	cmp	r8, #0
   14260:	1a000001 	bne	1426c <fat_append_clusters+0x158>
            {
                fs->cluster_free = cluster_current;
   14264:	e5879030 	str	r9, [r7, #48]	; 0x30
                break;
   14268:	ea000011 	b	142b4 <fat_append_clusters+0x1a0>
            }

            /* allocate cluster */
            if(cluster_next == 0)
   1426c:	e3560000 	cmp	r6, #0
                fat_entry16 = HTOL16(FAT16_CLUSTER_LAST_MAX);
   14270:	03e03000 	mvneq	r3, #0
   14274:	01cd31ba 	strheq	r3, [sp, #26]
            else
                fat_entry16 = htol16((uint16_t) cluster_next);
   14278:	11cd61ba 	strhne	r6, [sp, #26]

            if(!device_write(fat_offset + (offset_t) cluster_current * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
   1427c:	e1a00004 	mov	r0, r4
   14280:	e1a01005 	mov	r1, r5
   14284:	e28d201a 	add	r2, sp, #26
   14288:	e3a03002 	mov	r3, #2
   1428c:	eaffffeb 	b	14240 <fat_append_clusters+0x12c>
    else
#endif
        cluster_count = fs->header.fat_size / sizeof(fat_entry16);

    fs->cluster_free = 0;
    for(cluster_t cluster_left = cluster_count; cluster_left > 0; --cluster_left, ++cluster_current)
   14290:	e59dc00c 	ldr	ip, [sp, #12]
   14294:	e24cc001 	sub	ip, ip, #1
   14298:	e58dc00c 	str	ip, [sp, #12]
   1429c:	e2899001 	add	r9, r9, #1
   142a0:	e59dc00c 	ldr	ip, [sp, #12]
   142a4:	e35c0000 	cmp	ip, #0
   142a8:	1affffb6 	bne	14188 <fat_append_clusters+0x74>
        --count_left;
    }

    do
    {
        if(count_left > 0)
   142ac:	e3580000 	cmp	r8, #0
   142b0:	1a00000e 	bne	142f0 <fat_append_clusters+0x1dc>
            break;

        /* We allocated a new cluster chain. Now join
         * it with the existing one (if any).
         */
        if(cluster_num >= 2)
   142b4:	e35b0001 	cmp	fp, #1
   142b8:	9a000019 	bls	14324 <fat_append_clusters+0x210>
        {
#if FAT_FAT32_SUPPORT
            if(is_fat32)
   142bc:	e59dc010 	ldr	ip, [sp, #16]
            else
#endif
            {
                fat_entry16 = htol16((uint16_t) cluster_next);

                if(!device_write(fat_offset + (offset_t) cluster_num * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
   142c0:	e89d0003 	ldm	sp, {r0, r1}
         * it with the existing one (if any).
         */
        if(cluster_num >= 2)
        {
#if FAT_FAT32_SUPPORT
            if(is_fat32)
   142c4:	e35c0000 	cmp	ip, #0
            {
                fat_entry32 = htol32(cluster_next);
   142c8:	e28d2020 	add	r2, sp, #32

                if(!device_write(fat_offset + (offset_t) cluster_num * sizeof(fat_entry32), (uint8_t*) &fat_entry32, sizeof(fat_entry32)))
   142cc:	13a03004 	movne	r3, #4
            else
#endif
            {
                fat_entry16 = htol16((uint16_t) cluster_next);

                if(!device_write(fat_offset + (offset_t) cluster_num * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
   142d0:	03a03002 	moveq	r3, #2
        if(cluster_num >= 2)
        {
#if FAT_FAT32_SUPPORT
            if(is_fat32)
            {
                fat_entry32 = htol32(cluster_next);
   142d4:	15226004 	strne	r6, [r2, #-4]!
                    break;
            }
            else
#endif
            {
                fat_entry16 = htol16((uint16_t) cluster_next);
   142d8:	016260b6 	strheq	r6, [r2, #-6]!

                if(!device_write(fat_offset + (offset_t) cluster_num * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
   142dc:	e0a10b93 	umlal	r0, r1, r3, fp
   142e0:	e1a0e00f 	mov	lr, pc
   142e4:	e12fff1a 	bx	sl
   142e8:	e3500000 	cmp	r0, #0
   142ec:	1a00000c 	bne	14324 <fat_append_clusters+0x210>
    } while(0);

    /* No space left on device or writing error.
     * Free up all clusters already allocated.
     */
    fat_free_clusters(fs, cluster_next);
   142f0:	e1a00007 	mov	r0, r7
   142f4:	e1a01006 	mov	r1, r6
   142f8:	ebffff21 	bl	13f84 <fat_free_clusters>

    return 0;
   142fc:	e3a06000 	mov	r6, #0
   14300:	ea000007 	b	14324 <fat_append_clusters+0x210>
        }
        else
#endif
        {
            /* check if this is a free cluster */
            if(fat_entry16 != HTOL16(FAT16_CLUSTER_FREE))
   14304:	e1dd31ba 	ldrh	r3, [sp, #26]
   14308:	e3530000 	cmp	r3, #0
   1430c:	1affffdf 	bne	14290 <fat_append_clusters+0x17c>
   14310:	eaffffd1 	b	1425c <fat_append_clusters+0x148>

#if FAT_FAT32_SUPPORT
        if(is_fat32)
        {
            /* check if this is a free cluster */
            if(fat_entry32 != HTOL32(FAT32_CLUSTER_FREE))
   14314:	e59d301c 	ldr	r3, [sp, #28]
   14318:	e3530000 	cmp	r3, #0
   1431c:	1affffdb 	bne	14290 <fat_append_clusters+0x17c>
   14320:	eaffffbc 	b	14218 <fat_append_clusters+0x104>
     * Free up all clusters already allocated.
     */
    fat_free_clusters(fs, cluster_next);

    return 0;
}
   14324:	e1a00006 	mov	r0, r6
   14328:	e28dd020 	add	sp, sp, #32
   1432c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14330:	e12fff1e 	bx	lr

00014334 <fat_cluster_offset>:
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
   14334:	e3500000 	cmp	r0, #0
   14338:	13510001 	cmpne	r1, #1
        return 0;
   1433c:	93a02000 	movls	r2, #0
   14340:	93a03000 	movls	r3, #0

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
   14344:	81d0c1ba 	ldrhhi	ip, [r0, #26]
   14348:	8280301c 	addhi	r3, r0, #28
   1434c:	8893000c 	ldmhi	r3, {r2, r3}
   14350:	82411002 	subhi	r1, r1, #2
   14354:	80a3219c 	umlalhi	r2, r3, ip, r1
   14358:	eaffffff 	b	1435c <fat_cluster_offset+0x28>
}
   1435c:	e1a00002 	mov	r0, r2
   14360:	e1a01003 	mov	r1, r3
   14364:	e12fff1e 	bx	lr

00014368 <fat_clear_cluster.part.3>:
 *
 * \param[in] fs The filesystem on which to operate.
 * \param[in] cluster_num The cluster to clear.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_clear_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
   14368:	e92d4070 	push	{r4, r5, r6, lr}
   1436c:	e24dd018 	sub	sp, sp, #24
   14370:	e1a06000 	mov	r6, r0
{
    if(cluster_num < 2)
        return 0;

    offset_t cluster_offset = fat_cluster_offset(fs, cluster_num);
   14374:	ebffffee 	bl	14334 <fat_cluster_offset>

    uint8_t zero[16];
    memset(zero, 0, sizeof(zero));
   14378:	e3a02010 	mov	r2, #16
uint8_t fat_clear_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(cluster_num < 2)
        return 0;

    offset_t cluster_offset = fat_cluster_offset(fs, cluster_num);
   1437c:	e1a04000 	mov	r4, r0
   14380:	e1a05001 	mov	r5, r1

    uint8_t zero[16];
    memset(zero, 0, sizeof(zero));
   14384:	e28d0008 	add	r0, sp, #8
   14388:	e3a01000 	mov	r1, #0
   1438c:	eb000663 	bl	15d20 <memset>
    return fs->partition->device_write_interval(cluster_offset,
   14390:	e59f2034 	ldr	r2, [pc, #52]	; 143cc <fat_clear_cluster.part.3+0x64>
   14394:	e58d2000 	str	r2, [sp]
   14398:	e3a02000 	mov	r2, #0
   1439c:	e58d2004 	str	r2, [sp, #4]
   143a0:	e596c000 	ldr	ip, [r6]
   143a4:	e1d631ba 	ldrh	r3, [r6, #26]
   143a8:	e1a00004 	mov	r0, r4
   143ac:	e1a01005 	mov	r1, r5
   143b0:	e28d2008 	add	r2, sp, #8
   143b4:	e59cc00c 	ldr	ip, [ip, #12]
   143b8:	e1a0e00f 	mov	lr, pc
   143bc:	e12fff1c 	bx	ip
                                                zero,
                                                fs->header.cluster_size,
                                                fat_clear_cluster_callback,
                                                0
                                               );
}
   143c0:	e28dd018 	add	sp, sp, #24
   143c4:	e8bd4070 	pop	{r4, r5, r6, lr}
   143c8:	e12fff1e 	bx	lr
   143cc:	00013bac 	.word	0x00013bac

000143d0 <fat_write_dir_entry>:
 * \param[in] fs The filesystem on which to operate.
 * \param[in] dir_entry The directory entry to write.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_write_dir_entry(const struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
{
   143d0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(!fs || !dir_entry)
   143d4:	e3500000 	cmp	r0, #0
   143d8:	13510000 	cmpne	r1, #0
 * \param[in] fs The filesystem on which to operate.
 * \param[in] dir_entry The directory entry to write.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_write_dir_entry(const struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
{
   143dc:	e24dd024 	sub	sp, sp, #36	; 0x24
    if(!fs || !dir_entry)
   143e0:	e1a06001 	mov	r6, r1
        return 0;
   143e4:	03a00000 	moveq	r0, #0
 * \param[in] dir_entry The directory entry to write.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_write_dir_entry(const struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry)
   143e8:	0a00009a 	beq	14658 <fat_write_dir_entry+0x288>
        fat_set_file_modification_date(dir_entry, year, month, day);
        fat_set_file_modification_time(dir_entry, hour, min, sec);
    }
#endif

    device_write_t device_write = fs->partition->device_write;
   143ec:	e5903000 	ldr	r3, [r0]
    offset_t offset = dir_entry->entry_offset;
    const char* name = dir_entry->long_name;
    uint8_t name_len = strlen(name);
   143f0:	e1a00001 	mov	r0, r1
        fat_set_file_modification_date(dir_entry, year, month, day);
        fat_set_file_modification_time(dir_entry, hour, min, sec);
    }
#endif

    device_write_t device_write = fs->partition->device_write;
   143f4:	e593a008 	ldr	sl, [r3, #8]
    offset_t offset = dir_entry->entry_offset;
   143f8:	e281502c 	add	r5, r1, #44	; 0x2c
   143fc:	e8950030 	ldm	r5, {r4, r5}
    const char* name = dir_entry->long_name;
    uint8_t name_len = strlen(name);
   14400:	eb000666 	bl	15da0 <strlen>
   14404:	e20080ff 	and	r8, r0, #255	; 0xff
#if FAT_LFN_SUPPORT
    uint8_t lfn_entry_count = (name_len + 12) / 13;
   14408:	e3a0100d 	mov	r1, #13
   1440c:	e288000c 	add	r0, r8, #12
   14410:	eb0006f0 	bl	15fd8 <__aeabi_idiv>
    uint8_t buffer[32];

    /* write 8.3 entry */

    /* generate 8.3 file name */
    memset(&buffer[0], ' ', 11);
   14414:	e3a01020 	mov	r1, #32
   14418:	e3a0200b 	mov	r2, #11
    device_write_t device_write = fs->partition->device_write;
    offset_t offset = dir_entry->entry_offset;
    const char* name = dir_entry->long_name;
    uint8_t name_len = strlen(name);
#if FAT_LFN_SUPPORT
    uint8_t lfn_entry_count = (name_len + 12) / 13;
   1441c:	e20070ff 	and	r7, r0, #255	; 0xff
    uint8_t buffer[32];

    /* write 8.3 entry */

    /* generate 8.3 file name */
    memset(&buffer[0], ' ', 11);
   14420:	e28d0004 	add	r0, sp, #4
   14424:	eb00063d 	bl	15d20 <memset>
    char* name_ext = strrchr(name, '.');
   14428:	e1a00006 	mov	r0, r6
   1442c:	e3a0102e 	mov	r1, #46	; 0x2e
   14430:	eb00068f 	bl	15e74 <strrchr>
    if(name_ext && *++name_ext)
   14434:	e3500000 	cmp	r0, #0
   14438:	0a00000e 	beq	14478 <fat_write_dir_entry+0xa8>
   1443c:	e5d03001 	ldrb	r3, [r0, #1]
   14440:	e3530000 	cmp	r3, #0
   14444:	0a00000b 	beq	14478 <fat_write_dir_entry+0xa8>
   14448:	e2809001 	add	r9, r0, #1
    {
        uint8_t name_ext_len = strlen(name_ext);
   1444c:	e1a00009 	mov	r0, r9
   14450:	eb000652 	bl	15da0 <strlen>
   14454:	e20020ff 	and	r2, r0, #255	; 0xff
        name_len -= name_ext_len + 1;
   14458:	e1e03002 	mvn	r3, r2
   1445c:	e0888003 	add	r8, r8, r3
            name_ext_len = 3;
#else
            return 0;
#endif
        
        memcpy(&buffer[8], name_ext, name_ext_len);
   14460:	e28d000c 	add	r0, sp, #12
   14464:	e1a01009 	mov	r1, r9
   14468:	e3520003 	cmp	r2, #3
   1446c:	23a02003 	movcs	r2, #3
    memset(&buffer[0], ' ', 11);
    char* name_ext = strrchr(name, '.');
    if(name_ext && *++name_ext)
    {
        uint8_t name_ext_len = strlen(name_ext);
        name_len -= name_ext_len + 1;
   14470:	e20880ff 	and	r8, r8, #255	; 0xff
            name_ext_len = 3;
#else
            return 0;
#endif
        
        memcpy(&buffer[8], name_ext, name_ext_len);
   14474:	eb000621 	bl	15d00 <memcpy>
    }
    
    if(name_len <= 8)
   14478:	e3580008 	cmp	r8, #8
    {
        memcpy(buffer, name, name_len);
   1447c:	e28d0004 	add	r0, sp, #4
   14480:	e1a01006 	mov	r1, r6
#endif
        
        memcpy(&buffer[8], name_ext, name_ext_len);
    }
    
    if(name_len <= 8)
   14484:	8a00000a 	bhi	144b4 <fat_write_dir_entry+0xe4>
    {
        memcpy(buffer, name, name_len);
   14488:	e1a02008 	mov	r2, r8
   1448c:	eb00061b 	bl	15d00 <memcpy>
         *
         * Theoretically it would be possible to leave
         * the 8.3 entry alone if the basename and the
         * extension have no mixed capitalization.
         */
        if(name[0] == '.' &&
   14490:	e5d63000 	ldrb	r3, [r6]
   14494:	e353002e 	cmp	r3, #46	; 0x2e
   14498:	1a000013 	bne	144ec <fat_write_dir_entry+0x11c>
           ((name[1] == '.' && name[2] == '\0') ||
   1449c:	e5d63001 	ldrb	r3, [r6, #1]
         *
         * Theoretically it would be possible to leave
         * the 8.3 entry alone if the basename and the
         * extension have no mixed capitalization.
         */
        if(name[0] == '.' &&
   144a0:	e353002e 	cmp	r3, #46	; 0x2e
           ((name[1] == '.' && name[2] == '\0') ||
   144a4:	05d63002 	ldrbeq	r3, [r6, #2]
            name[1] == '\0')
          )
            lfn_entry_count = 0;
   144a8:	e3530000 	cmp	r3, #0
   144ac:	03a07000 	moveq	r7, #0
   144b0:	ea00000d 	b	144ec <fat_write_dir_entry+0x11c>
#endif
    }
    else
    {
#if FAT_LFN_SUPPORT
        memcpy(buffer, name, 8);
   144b4:	e3a02008 	mov	r2, #8
   144b8:	eb000610 	bl	15d00 <memcpy>

        /* Minimize 8.3 name clashes by appending
         * the lower byte of the cluster number.
         */
        uint8_t num = dir_entry->cluster & 0xff;
   144bc:	e5963024 	ldr	r3, [r6, #36]	; 0x24
   144c0:	e20320ff 	and	r2, r3, #255	; 0xff

        buffer[6] = (num < 0xa0) ? ('0' + (num >> 4)) : ('a' + (num >> 4));
   144c4:	e352009f 	cmp	r2, #159	; 0x9f
        num &= 0x0f;
   144c8:	e203300f 	and	r3, r3, #15
   144cc:	e1a02222 	lsr	r2, r2, #4
        /* Minimize 8.3 name clashes by appending
         * the lower byte of the cluster number.
         */
        uint8_t num = dir_entry->cluster & 0xff;

        buffer[6] = (num < 0xa0) ? ('0' + (num >> 4)) : ('a' + (num >> 4));
   144d0:	92822030 	addls	r2, r2, #48	; 0x30
   144d4:	82822061 	addhi	r2, r2, #97	; 0x61
        num &= 0x0f;
        buffer[7] = (num < 0x0a) ? ('0' + num) : ('a' + num);
   144d8:	e3530009 	cmp	r3, #9
   144dc:	92833030 	addls	r3, r3, #48	; 0x30
   144e0:	82833061 	addhi	r3, r3, #97	; 0x61
        /* Minimize 8.3 name clashes by appending
         * the lower byte of the cluster number.
         */
        uint8_t num = dir_entry->cluster & 0xff;

        buffer[6] = (num < 0xa0) ? ('0' + (num >> 4)) : ('a' + (num >> 4));
   144e4:	e5cd200a 	strb	r2, [sp, #10]
        num &= 0x0f;
        buffer[7] = (num < 0x0a) ? ('0' + num) : ('a' + num);
   144e8:	e5cd300b 	strb	r3, [sp, #11]
#else
        return 0;
#endif
    }
    if(buffer[0] == FAT_DIRENTRY_DELETED)
   144ec:	e5dd3004 	ldrb	r3, [sp, #4]
        buffer[0] = 0x05;

    /* fill directory entry buffer */
    memset(&buffer[11], 0, sizeof(buffer) - 11);
   144f0:	e28d9004 	add	r9, sp, #4
        buffer[7] = (num < 0x0a) ? ('0' + num) : ('a' + num);
#else
        return 0;
#endif
    }
    if(buffer[0] == FAT_DIRENTRY_DELETED)
   144f4:	e35300e5 	cmp	r3, #229	; 0xe5
        buffer[0] = 0x05;
   144f8:	03a03005 	moveq	r3, #5

    /* fill directory entry buffer */
    memset(&buffer[11], 0, sizeof(buffer) - 11);
   144fc:	e3a02015 	mov	r2, #21
   14500:	e3a01000 	mov	r1, #0
   14504:	e289000b 	add	r0, r9, #11
#else
        return 0;
#endif
    }
    if(buffer[0] == FAT_DIRENTRY_DELETED)
        buffer[0] = 0x05;
   14508:	05cd3004 	strbeq	r3, [sp, #4]

    /* fill directory entry buffer */
    memset(&buffer[11], 0, sizeof(buffer) - 11);
   1450c:	eb000603 	bl	15d20 <memset>
    buffer[0x0b] = dir_entry->attributes;
   14510:	e5d63020 	ldrb	r3, [r6, #32]
#if FAT_DATETIME_SUPPORT
    write16(&buffer[0x16], dir_entry->modification_time);
    write16(&buffer[0x18], dir_entry->modification_date);
#endif
#if FAT_FAT32_SUPPORT
    write16(&buffer[0x14], (uint16_t) (dir_entry->cluster >> 16));
   14514:	e2890014 	add	r0, r9, #20
   14518:	e1d612b6 	ldrh	r1, [r6, #38]	; 0x26
    if(buffer[0] == FAT_DIRENTRY_DELETED)
        buffer[0] = 0x05;

    /* fill directory entry buffer */
    memset(&buffer[11], 0, sizeof(buffer) - 11);
    buffer[0x0b] = dir_entry->attributes;
   1451c:	e5cd300f 	strb	r3, [sp, #15]
#if FAT_DATETIME_SUPPORT
    write16(&buffer[0x16], dir_entry->modification_time);
    write16(&buffer[0x18], dir_entry->modification_date);
#endif
#if FAT_FAT32_SUPPORT
    write16(&buffer[0x14], (uint16_t) (dir_entry->cluster >> 16));
   14520:	eb0005ca 	bl	15c50 <write16>
#endif
    write16(&buffer[0x1a], dir_entry->cluster);
   14524:	e289001a 	add	r0, r9, #26
   14528:	e1d612b4 	ldrh	r1, [r6, #36]	; 0x24
   1452c:	eb0005c7 	bl	15c50 <write16>
    write32(&buffer[0x1c], dir_entry->file_size);
   14530:	e289001c 	add	r0, r9, #28
   14534:	e5961028 	ldr	r1, [r6, #40]	; 0x28
   14538:	eb0005ca 	bl	15c68 <write32>

    /* write to disk */
#if FAT_LFN_SUPPORT
    if(!device_write(offset + (uint16_t) lfn_entry_count * 32, buffer, sizeof(buffer)))
   1453c:	e3a03020 	mov	r3, #32
   14540:	e1a00004 	mov	r0, r4
   14544:	e1a01005 	mov	r1, r5
   14548:	e0a10793 	umlal	r0, r1, r3, r7
   1454c:	e1a02009 	mov	r2, r9
   14550:	e1a0e00f 	mov	lr, pc
   14554:	e12fff1a 	bx	sl
   14558:	e3500000 	cmp	r0, #0
   1455c:	0a00003d 	beq	14658 <fat_write_dir_entry+0x288>
#endif
        return 0;
    
#if FAT_LFN_SUPPORT
    /* calculate checksum of 8.3 name */
    uint8_t checksum = fat_calc_83_checksum(buffer);
   14560:	e1a00009 	mov	r0, r9
   14564:	ebfffd92 	bl	13bb4 <fat_calc_83_checksum>
   14568:	e1a08007 	mov	r8, r7
   1456c:	e58d0000 	str	r0, [sp]
        const char* long_name_curr = name + (lfn_entry - 1) * 13;
        uint8_t i = 1;
        while(i < 0x1f)
        {
            buffer[i++] = *long_name_curr;
            buffer[i++] = 0;
   14570:	e3a0b000 	mov	fp, #0
   14574:	ea000033 	b	14648 <fat_write_dir_entry+0x278>
    uint8_t checksum = fat_calc_83_checksum(buffer);
    
    /* write lfn entries */
    for(uint8_t lfn_entry = lfn_entry_count; lfn_entry > 0; --lfn_entry)
    {
        memset(buffer, 0xff, sizeof(buffer));
   14578:	e3a02020 	mov	r2, #32
   1457c:	e1a00009 	mov	r0, r9
   14580:	e3a010ff 	mov	r1, #255	; 0xff
   14584:	eb0005e5 	bl	15d20 <memset>
        
        /* set file name */
        const char* long_name_curr = name + (lfn_entry - 1) * 13;
   14588:	e2483001 	sub	r3, r8, #1
   1458c:	e3a0200d 	mov	r2, #13
   14590:	e0226293 	mla	r2, r3, r2, r6
        uint8_t i = 1;
   14594:	e3a03001 	mov	r3, #1
        while(i < 0x1f)
        {
            buffer[i++] = *long_name_curr;
   14598:	e4d20001 	ldrb	r0, [r2], #1
   1459c:	e28dc024 	add	ip, sp, #36	; 0x24
   145a0:	e08c1003 	add	r1, ip, r3
   145a4:	e5410020 	strb	r0, [r1, #-32]	; 0xffffffe0
   145a8:	e2831001 	add	r1, r3, #1
            buffer[i++] = 0;
   145ac:	e2833002 	add	r3, r3, #2
   145b0:	e20330ff 	and	r3, r3, #255	; 0xff
   145b4:	e20110ff 	and	r1, r1, #255	; 0xff
   145b8:	e08c1001 	add	r1, ip, r1

            switch(i)
   145bc:	e353000b 	cmp	r3, #11
        const char* long_name_curr = name + (lfn_entry - 1) * 13;
        uint8_t i = 1;
        while(i < 0x1f)
        {
            buffer[i++] = *long_name_curr;
            buffer[i++] = 0;
   145c0:	e541b020 	strb	fp, [r1, #-32]	; 0xffffffe0

            switch(i)
            {
                case 0x0b:
                    i = 0x0e;
   145c4:	03a0300e 	moveq	r3, #14
        while(i < 0x1f)
        {
            buffer[i++] = *long_name_curr;
            buffer[i++] = 0;

            switch(i)
   145c8:	0a000002 	beq	145d8 <fat_write_dir_entry+0x208>
            {
                case 0x0b:
                    i = 0x0e;
                    break;
                case 0x1a:
                    i = 0x1c;
   145cc:	e353001a 	cmp	r3, #26
   145d0:	03a0301c 	moveq	r3, #28
   145d4:	eaffffff 	b	145d8 <fat_write_dir_entry+0x208>
                    break;
            }

            if(!*long_name_curr++)
   145d8:	e5521001 	ldrb	r1, [r2, #-1]
   145dc:	e3510000 	cmp	r1, #0
   145e0:	0a000001 	beq	145ec <fat_write_dir_entry+0x21c>
        memset(buffer, 0xff, sizeof(buffer));
        
        /* set file name */
        const char* long_name_curr = name + (lfn_entry - 1) * 13;
        uint8_t i = 1;
        while(i < 0x1f)
   145e4:	e353001e 	cmp	r3, #30
   145e8:	9affffea 	bls	14598 <fat_write_dir_entry+0x1c8>
                break;
        }
        
        /* set index of lfn entry */
        buffer[0x00] = lfn_entry;
        if(lfn_entry == lfn_entry_count)
   145ec:	e1580007 	cmp	r8, r7
            buffer[0x00] |= FAT_DIRENTRY_LFNLAST;
   145f0:	03883040 	orreq	r3, r8, #64	; 0x40

        /* mark as lfn entry */
        buffer[0x0b] = 0x0f;

        /* set 8.3 checksum */
        buffer[0x0d] = checksum;
   145f4:	e59dc000 	ldr	ip, [sp]
        }
        
        /* set index of lfn entry */
        buffer[0x00] = lfn_entry;
        if(lfn_entry == lfn_entry_count)
            buffer[0x00] |= FAT_DIRENTRY_LFNLAST;
   145f8:	05cd3004 	strbeq	r3, [sp, #4]

        /* mark as lfn entry */
        buffer[0x0b] = 0x0f;
   145fc:	e3a0300f 	mov	r3, #15
            if(!*long_name_curr++)
                break;
        }
        
        /* set index of lfn entry */
        buffer[0x00] = lfn_entry;
   14600:	15cd8004 	strbne	r8, [sp, #4]
        if(lfn_entry == lfn_entry_count)
            buffer[0x00] |= FAT_DIRENTRY_LFNLAST;

        /* mark as lfn entry */
        buffer[0x0b] = 0x0f;
   14604:	e5cd300f 	strb	r3, [sp, #15]
        buffer[0x0c] = 0;
        buffer[0x1a] = 0;
        buffer[0x1b] = 0;

        /* write entry */
        device_write(offset, buffer, sizeof(buffer));
   14608:	e1a00004 	mov	r0, r4
   1460c:	e1a01005 	mov	r1, r5
   14610:	e1a02009 	mov	r2, r9
   14614:	e3a03020 	mov	r3, #32

        /* mark as lfn entry */
        buffer[0x0b] = 0x0f;

        /* set 8.3 checksum */
        buffer[0x0d] = checksum;
   14618:	e5cdc011 	strb	ip, [sp, #17]

        /* clear reserved bytes */
        buffer[0x0c] = 0;
   1461c:	e5cdb010 	strb	fp, [sp, #16]
        buffer[0x1a] = 0;
   14620:	e5cdb01e 	strb	fp, [sp, #30]
        buffer[0x1b] = 0;
   14624:	e5cdb01f 	strb	fp, [sp, #31]

        /* write entry */
        device_write(offset, buffer, sizeof(buffer));
   14628:	e1a0e00f 	mov	lr, pc
   1462c:	e12fff1a 	bx	sl
    
        offset += sizeof(buffer);
   14630:	e3a02020 	mov	r2, #32
   14634:	e3a03000 	mov	r3, #0
   14638:	e0944002 	adds	r4, r4, r2
#if FAT_LFN_SUPPORT
    /* calculate checksum of 8.3 name */
    uint8_t checksum = fat_calc_83_checksum(buffer);
    
    /* write lfn entries */
    for(uint8_t lfn_entry = lfn_entry_count; lfn_entry > 0; --lfn_entry)
   1463c:	e2488001 	sub	r8, r8, #1
        buffer[0x1b] = 0;

        /* write entry */
        device_write(offset, buffer, sizeof(buffer));
    
        offset += sizeof(buffer);
   14640:	e0a55003 	adc	r5, r5, r3
#if FAT_LFN_SUPPORT
    /* calculate checksum of 8.3 name */
    uint8_t checksum = fat_calc_83_checksum(buffer);
    
    /* write lfn entries */
    for(uint8_t lfn_entry = lfn_entry_count; lfn_entry > 0; --lfn_entry)
   14644:	e20880ff 	and	r8, r8, #255	; 0xff
   14648:	e3580000 	cmp	r8, #0
   1464c:	1affffc9 	bne	14578 <fat_write_dir_entry+0x1a8>
    
        offset += sizeof(buffer);
    }
#endif
    
    return 1;
   14650:	e3a00001 	mov	r0, #1
   14654:	eaffffff 	b	14658 <fat_write_dir_entry+0x288>
}
   14658:	e28dd024 	add	sp, sp, #36	; 0x24
   1465c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14660:	e12fff1e 	bx	lr

00014664 <fat_find_offset_for_dir_entry.part.4>:
 * \param[in] fs The filesystem on which to operate.
 * \param[in] parent The directory in which to search.
 * \param[in] dir_entry The directory entry for which to search space.
 * \returns 0 on failure, a device offset on success.
 */
offset_t fat_find_offset_for_dir_entry(struct fat_fs_struct* fs, const struct fat_dir_struct* parent, const struct fat_dir_entry_struct* dir_entry)
   14664:	e92d4fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14668:	e1a08000 	mov	r8, r0
    if(!fs || !dir_entry)
        return 0;

    /* search for a place where to write the directory entry to disk */
#if FAT_LFN_SUPPORT
    uint8_t free_dir_entries_needed = (strlen(dir_entry->long_name) + 12) / 13 + 1;
   1466c:	e1a00002 	mov	r0, r2
 * \param[in] fs The filesystem on which to operate.
 * \param[in] parent The directory in which to search.
 * \param[in] dir_entry The directory entry for which to search space.
 * \returns 0 on failure, a device offset on success.
 */
offset_t fat_find_offset_for_dir_entry(struct fat_fs_struct* fs, const struct fat_dir_struct* parent, const struct fat_dir_entry_struct* dir_entry)
   14670:	e1a04001 	mov	r4, r1
    if(!fs || !dir_entry)
        return 0;

    /* search for a place where to write the directory entry to disk */
#if FAT_LFN_SUPPORT
    uint8_t free_dir_entries_needed = (strlen(dir_entry->long_name) + 12) / 13 + 1;
   14674:	eb0005c9 	bl	15da0 <strlen>
   14678:	e3a0100d 	mov	r1, #13
   1467c:	e280000c 	add	r0, r0, #12
   14680:	eb00060e 	bl	15ec0 <__aeabi_uidiv>
    uint8_t free_dir_entries_found = 0;
#endif
    cluster_t cluster_num = parent->dir_entry.cluster;
   14684:	e594a028 	ldr	sl, [r4, #40]	; 0x28
    if(!fs || !dir_entry)
        return 0;

    /* search for a place where to write the directory entry to disk */
#if FAT_LFN_SUPPORT
    uint8_t free_dir_entries_needed = (strlen(dir_entry->long_name) + 12) / 13 + 1;
   14688:	e2800001 	add	r0, r0, #1
    cluster_t cluster_num = parent->dir_entry.cluster;
    offset_t dir_entry_offset = 0;
    offset_t offset = 0;
    offset_t offset_to = 0;
#if FAT_FAT32_SUPPORT
    uint8_t is_fat32 = (fs->partition->type == PARTITION_TYPE_FAT32);
   1468c:	e5983000 	ldr	r3, [r8]
    if(!fs || !dir_entry)
        return 0;

    /* search for a place where to write the directory entry to disk */
#if FAT_LFN_SUPPORT
    uint8_t free_dir_entries_needed = (strlen(dir_entry->long_name) + 12) / 13 + 1;
   14690:	e20000ff 	and	r0, r0, #255	; 0xff
    offset_t offset_to = 0;
#if FAT_FAT32_SUPPORT
    uint8_t is_fat32 = (fs->partition->type == PARTITION_TYPE_FAT32);
#endif

    if(cluster_num == 0)
   14694:	e35a0000 	cmp	sl, #0
    if(!fs || !dir_entry)
        return 0;

    /* search for a place where to write the directory entry to disk */
#if FAT_LFN_SUPPORT
    uint8_t free_dir_entries_needed = (strlen(dir_entry->long_name) + 12) / 13 + 1;
   14698:	e58d0008 	str	r0, [sp, #8]
    cluster_t cluster_num = parent->dir_entry.cluster;
    offset_t dir_entry_offset = 0;
    offset_t offset = 0;
    offset_t offset_to = 0;
#if FAT_FAT32_SUPPORT
    uint8_t is_fat32 = (fs->partition->type == PARTITION_TYPE_FAT32);
   1469c:	e5d33010 	ldrb	r3, [r3, #16]
#endif

    if(cluster_num == 0)
   146a0:	1a000007 	bne	146c4 <fat_find_offset_for_dir_entry.part.4+0x60>
    {
#if FAT_FAT32_SUPPORT
        if(is_fat32)
   146a4:	e353000b 	cmp	r3, #11
        {
            cluster_num = fs->header.root_dir_cluster;
   146a8:	0598a02c 	ldreq	sl, [r8, #44]	; 0x2c
#endif

    if(cluster_num == 0)
    {
#if FAT_FAT32_SUPPORT
        if(is_fat32)
   146ac:	0a000004 	beq	146c4 <fat_find_offset_for_dir_entry.part.4+0x60>
        }
        else
#endif
        {
            /* we read/write from the root directory entry */
            offset = fs->header.root_dir_offset;
   146b0:	e2885024 	add	r5, r8, #36	; 0x24
   146b4:	e8950030 	ldm	r5, {r4, r5}
            offset_to = fs->header.cluster_zero_offset;
   146b8:	e288c01c 	add	ip, r8, #28
   146bc:	e89c1800 	ldm	ip, {fp, ip}
   146c0:	ea000003 	b	146d4 <fat_find_offset_for_dir_entry.part.4+0x70>
    uint8_t free_dir_entries_found = 0;
#endif
    cluster_t cluster_num = parent->dir_entry.cluster;
    offset_t dir_entry_offset = 0;
    offset_t offset = 0;
    offset_t offset_to = 0;
   146c4:	e3a0b000 	mov	fp, #0
   146c8:	e3a0c000 	mov	ip, #0
#if FAT_LFN_SUPPORT
    uint8_t free_dir_entries_needed = (strlen(dir_entry->long_name) + 12) / 13 + 1;
    uint8_t free_dir_entries_found = 0;
#endif
    cluster_t cluster_num = parent->dir_entry.cluster;
    offset_t dir_entry_offset = 0;
   146cc:	e1a0400b 	mov	r4, fp
   146d0:	e1a0500c 	mov	r5, ip
   146d4:	e3a09000 	mov	r9, #0
   146d8:	e58d9000 	str	r9, [sp]
   146dc:	e1a06004 	mov	r6, r4
   146e0:	e1a07005 	mov	r7, r5
        }
    }
    
    while(1)
    {
        if(offset == offset_to)
   146e4:	e155000c 	cmp	r5, ip
   146e8:	0154000b 	cmpeq	r4, fp
   146ec:	1a000025 	bne	14788 <fat_find_offset_for_dir_entry.part.4+0x124>
        {
            if(cluster_num == 0)
   146f0:	e35a0000 	cmp	sl, #0
   146f4:	0a000049 	beq	14820 <fat_find_offset_for_dir_entry.part.4+0x1bc>
                /* We iterated through the whole root directory and
                 * could not find enough space for the directory entry.
                 */
                return 0;

            if(offset)
   146f8:	e1942005 	orrs	r2, r4, r5
   146fc:	0a000015 	beq	14758 <fat_find_offset_for_dir_entry.part.4+0xf4>
            {
                /* We reached a cluster boundary and have to
                 * switch to the next cluster.
                 */

                cluster_t cluster_next = fat_get_next_cluster(fs, cluster_num);
   14700:	e1a00008 	mov	r0, r8
   14704:	e1a0100a 	mov	r1, sl
   14708:	ebfffde8 	bl	13eb0 <fat_get_next_cluster>
                if(!cluster_next)
   1470c:	e3500000 	cmp	r0, #0
   14710:	1a00000f 	bne	14754 <fat_find_offset_for_dir_entry.part.4+0xf0>
                {
                    cluster_next = fat_append_clusters(fs, cluster_num, 1);
   14714:	e1a0100a 	mov	r1, sl
   14718:	e1a00008 	mov	r0, r8
   1471c:	e3a02001 	mov	r2, #1
   14720:	ebfffe7b 	bl	14114 <fat_append_clusters>
                    if(!cluster_next)
   14724:	e2501000 	subs	r1, r0, #0
   14728:	0a00003c 	beq	14820 <fat_find_offset_for_dir_entry.part.4+0x1bc>
                        return 0;

                    /* we appended a new cluster and know it is free */
                    dir_entry_offset = fs->header.cluster_zero_offset +
                                       (offset_t) (cluster_next - 2) * fs->header.cluster_size;
   1472c:	e1d831ba 	ldrh	r3, [r8, #26]
                    cluster_next = fat_append_clusters(fs, cluster_num, 1);
                    if(!cluster_next)
                        return 0;

                    /* we appended a new cluster and know it is free */
                    dir_entry_offset = fs->header.cluster_zero_offset +
   14730:	e288701c 	add	r7, r8, #28
   14734:	e89700c0 	ldm	r7, {r6, r7}
                                       (offset_t) (cluster_next - 2) * fs->header.cluster_size;
   14738:	e2412002 	sub	r2, r1, #2
 * \param[in] cluster_num The cluster to clear.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_clear_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(cluster_num < 2)
   1473c:	e3510001 	cmp	r1, #1
                    cluster_next = fat_append_clusters(fs, cluster_num, 1);
                    if(!cluster_next)
                        return 0;

                    /* we appended a new cluster and know it is free */
                    dir_entry_offset = fs->header.cluster_zero_offset +
   14740:	e0a76293 	umlal	r6, r7, r3, r2
 * \param[in] cluster_num The cluster to clear.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_clear_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(cluster_num < 2)
   14744:	9a000037 	bls	14828 <fat_find_offset_for_dir_entry.part.4+0x1c4>
   14748:	e1a00008 	mov	r0, r8
   1474c:	ebffff05 	bl	14368 <fat_clear_cluster.part.3>
   14750:	ea000034 	b	14828 <fat_find_offset_for_dir_entry.part.4+0x1c4>
                /* We reached a cluster boundary and have to
                 * switch to the next cluster.
                 */

                cluster_t cluster_next = fat_get_next_cluster(fs, cluster_num);
                if(!cluster_next)
   14754:	e1a0a000 	mov	sl, r0
                    break;
                }
                cluster_num = cluster_next;
            }

            offset = fat_cluster_offset(fs, cluster_num);
   14758:	e1a00008 	mov	r0, r8
   1475c:	e1a0100a 	mov	r1, sl
   14760:	ebfffef3 	bl	14334 <fat_cluster_offset>
            offset_to = offset + fs->header.cluster_size;
   14764:	e1d831ba 	ldrh	r3, [r8, #26]
            dir_entry_offset = offset;
#if FAT_LFN_SUPPORT
            free_dir_entries_found = 0;
   14768:	e3a09000 	mov	r9, #0
                }
                cluster_num = cluster_next;
            }

            offset = fat_cluster_offset(fs, cluster_num);
            offset_to = offset + fs->header.cluster_size;
   1476c:	e090b003 	adds	fp, r0, r3
            dir_entry_offset = offset;
#if FAT_LFN_SUPPORT
            free_dir_entries_found = 0;
   14770:	e58d9000 	str	r9, [sp]
                    break;
                }
                cluster_num = cluster_next;
            }

            offset = fat_cluster_offset(fs, cluster_num);
   14774:	e1a04000 	mov	r4, r0
   14778:	e1a05001 	mov	r5, r1
            offset_to = offset + fs->header.cluster_size;
   1477c:	e2a1c000 	adc	ip, r1, #0
            dir_entry_offset = offset;
   14780:	e1a06000 	mov	r6, r0
   14784:	e1a07001 	mov	r7, r1
#endif
        }
        
        /* read next lfn or 8.3 entry */
        uint8_t first_char;
        if(!fs->partition->device_read(offset, &first_char, sizeof(first_char)))
   14788:	e58dc004 	str	ip, [sp, #4]
   1478c:	e1a00004 	mov	r0, r4
   14790:	e1a01005 	mov	r1, r5
   14794:	e28d200f 	add	r2, sp, #15
   14798:	e3a03001 	mov	r3, #1
   1479c:	e5989000 	ldr	r9, [r8]
   147a0:	e599c000 	ldr	ip, [r9]
   147a4:	e1a0e00f 	mov	lr, pc
   147a8:	e12fff1c 	bx	ip
   147ac:	e3500000 	cmp	r0, #0
   147b0:	e59dc004 	ldr	ip, [sp, #4]
   147b4:	0a000019 	beq	14820 <fat_find_offset_for_dir_entry.part.4+0x1bc>
            return 0;

        /* check if we found a free directory entry */
        if(first_char == FAT_DIRENTRY_DELETED || !first_char)
   147b8:	e5dd300f 	ldrb	r3, [sp, #15]
   147bc:	e35300e5 	cmp	r3, #229	; 0xe5
   147c0:	13530000 	cmpne	r3, #0
   147c4:	13a03000 	movne	r3, #0
   147c8:	03a03001 	moveq	r3, #1
   147cc:	1a00000b 	bne	14800 <fat_find_offset_for_dir_entry.part.4+0x19c>
        {
            /* check if we have the needed number of available entries */
#if FAT_LFN_SUPPORT
            ++free_dir_entries_found;
   147d0:	e59d2000 	ldr	r2, [sp]
            if(free_dir_entries_found >= free_dir_entries_needed)
   147d4:	e59d3008 	ldr	r3, [sp, #8]
        /* check if we found a free directory entry */
        if(first_char == FAT_DIRENTRY_DELETED || !first_char)
        {
            /* check if we have the needed number of available entries */
#if FAT_LFN_SUPPORT
            ++free_dir_entries_found;
   147d8:	e2829001 	add	r9, r2, #1
   147dc:	e20990ff 	and	r9, r9, #255	; 0xff
            if(free_dir_entries_found >= free_dir_entries_needed)
   147e0:	e1590003 	cmp	r9, r3
        /* check if we found a free directory entry */
        if(first_char == FAT_DIRENTRY_DELETED || !first_char)
        {
            /* check if we have the needed number of available entries */
#if FAT_LFN_SUPPORT
            ++free_dir_entries_found;
   147e4:	e58d9000 	str	r9, [sp]
            if(free_dir_entries_found >= free_dir_entries_needed)
   147e8:	2a00000e 	bcs	14828 <fat_find_offset_for_dir_entry.part.4+0x1c4>
#endif
                break;

            offset += 32;
   147ec:	e3a02020 	mov	r2, #32
   147f0:	e3a03000 	mov	r3, #0
   147f4:	e0944002 	adds	r4, r4, r2
   147f8:	e0a55003 	adc	r5, r5, r3
   147fc:	eaffffb8 	b	146e4 <fat_find_offset_for_dir_entry.part.4+0x80>
        }
        else
        {
            offset += 32;
   14800:	e3a06020 	mov	r6, #32
   14804:	e0966004 	adds	r6, r6, r4
   14808:	e3a07000 	mov	r7, #0
   1480c:	e0a77005 	adc	r7, r7, r5
   14810:	e1a04006 	mov	r4, r6
   14814:	e1a05007 	mov	r5, r7
            dir_entry_offset = offset;
#if FAT_LFN_SUPPORT
            free_dir_entries_found = 0;
   14818:	e58d3000 	str	r3, [sp]
   1481c:	eaffffb0 	b	146e4 <fat_find_offset_for_dir_entry.part.4+0x80>
   14820:	e3a06000 	mov	r6, #0
   14824:	e3a07000 	mov	r7, #0
#endif
        }
    }

    return dir_entry_offset;
}
   14828:	e1a00006 	mov	r0, r6
   1482c:	e1a01007 	mov	r1, r7
   14830:	e28dd010 	add	sp, sp, #16
   14834:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14838:	e12fff1e 	bx	lr

0001483c <fat_open>:
 * \param[in] partition Discriptor of partition on which the filesystem resides.
 * \returns 0 on error, a FAT filesystem descriptor on success.
 * \see fat_close
 */
struct fat_fs_struct* fat_open(struct partition_struct* partition)
{
   1483c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(!partition ||
   14840:	e2504000 	subs	r4, r0, #0
 * \param[in] partition Discriptor of partition on which the filesystem resides.
 * \returns 0 on error, a FAT filesystem descriptor on success.
 * \see fat_close
 */
struct fat_fs_struct* fat_open(struct partition_struct* partition)
{
   14844:	e24dd040 	sub	sp, sp, #64	; 0x40
    if(!partition ||
   14848:	0a000093 	beq	14a9c <fat_open+0x260>
   1484c:	e5940008 	ldr	r0, [r4, #8]
   14850:	e3500000 	cmp	r0, #0
   14854:	0a000091 	beq	14aa0 <fat_open+0x264>
#if FAT_WRITE_SUPPORT
       !partition->device_write ||
   14858:	e594000c 	ldr	r0, [r4, #12]
   1485c:	e3500000 	cmp	r0, #0
   14860:	1a000089 	bne	14a8c <fat_open+0x250>
   14864:	ea00008d 	b	14aa0 <fat_open+0x264>
    offset_t partition_offset = (offset_t) partition->offset * 512;

    if(!partition->device_read(partition_offset + 0x0b, buffer, sizeof(buffer)))
        return 0;

    uint16_t bytes_per_sector = read16(&buffer[0x00]);
   14868:	e28d0018 	add	r0, sp, #24
   1486c:	eb0004ea 	bl	15c1c <read16>
   14870:	e1a06000 	mov	r6, r0
    uint16_t reserved_sectors = read16(&buffer[0x03]);
   14874:	e28d001b 	add	r0, sp, #27
   14878:	eb0004e7 	bl	15c1c <read16>
    uint8_t sectors_per_cluster = buffer[0x02];
   1487c:	e5dd301a 	ldrb	r3, [sp, #26]

    if(!partition->device_read(partition_offset + 0x0b, buffer, sizeof(buffer)))
        return 0;

    uint16_t bytes_per_sector = read16(&buffer[0x00]);
    uint16_t reserved_sectors = read16(&buffer[0x03]);
   14880:	e1a0b000 	mov	fp, r0
    uint8_t sectors_per_cluster = buffer[0x02];
    uint8_t fat_copies = buffer[0x05];
    uint16_t max_root_entries = read16(&buffer[0x06]);
   14884:	e28d001e 	add	r0, sp, #30
    if(!partition->device_read(partition_offset + 0x0b, buffer, sizeof(buffer)))
        return 0;

    uint16_t bytes_per_sector = read16(&buffer[0x00]);
    uint16_t reserved_sectors = read16(&buffer[0x03]);
    uint8_t sectors_per_cluster = buffer[0x02];
   14888:	e58d300c 	str	r3, [sp, #12]
    uint8_t fat_copies = buffer[0x05];
   1488c:	e5dda01d 	ldrb	sl, [sp, #29]
    uint16_t max_root_entries = read16(&buffer[0x06]);
   14890:	eb0004e1 	bl	15c1c <read16>
   14894:	e58d0010 	str	r0, [sp, #16]
    uint16_t sector_count_16 = read16(&buffer[0x08]);
   14898:	e28d0020 	add	r0, sp, #32
   1489c:	eb0004de 	bl	15c1c <read16>
   148a0:	e1a05000 	mov	r5, r0
    uint16_t sectors_per_fat = read16(&buffer[0x0b]);
   148a4:	e28d0023 	add	r0, sp, #35	; 0x23
   148a8:	eb0004db 	bl	15c1c <read16>
   148ac:	e1a09000 	mov	r9, r0
    uint32_t sector_count = read32(&buffer[0x15]);
   148b0:	e28d002d 	add	r0, sp, #45	; 0x2d
   148b4:	eb0004dc 	bl	15c2c <read32>
   148b8:	e1a08000 	mov	r8, r0
#if FAT_FAT32_SUPPORT
    uint32_t sectors_per_fat32 = read32(&buffer[0x19]);
   148bc:	e28d0031 	add	r0, sp, #49	; 0x31
   148c0:	eb0004d9 	bl	15c2c <read32>
   148c4:	e1a07000 	mov	r7, r0
    uint32_t cluster_root_dir = read32(&buffer[0x21]);
   148c8:	e28d0039 	add	r0, sp, #57	; 0x39
   148cc:	eb0004d6 	bl	15c2c <read32>
#endif

    if(sector_count == 0)
   148d0:	e3580000 	cmp	r8, #0
    uint16_t sector_count_16 = read16(&buffer[0x08]);
    uint16_t sectors_per_fat = read16(&buffer[0x0b]);
    uint32_t sector_count = read32(&buffer[0x15]);
#if FAT_FAT32_SUPPORT
    uint32_t sectors_per_fat32 = read32(&buffer[0x19]);
    uint32_t cluster_root_dir = read32(&buffer[0x21]);
   148d4:	e58d0014 	str	r0, [sp, #20]
#endif

    if(sector_count == 0)
   148d8:	1a000006 	bne	148f8 <fat_open+0xbc>
    {
        if(sector_count_16 == 0)
   148dc:	e3550000 	cmp	r5, #0
            /* illegal volume size */
            return 0;
        else
            sector_count = sector_count_16;
   148e0:	11a08005 	movne	r8, r5
    uint32_t cluster_root_dir = read32(&buffer[0x21]);
#endif

    if(sector_count == 0)
    {
        if(sector_count_16 == 0)
   148e4:	1a000003 	bne	148f8 <fat_open+0xbc>
    if(!fat_read_header(fs))
    {
#if USE_DYNAMIC_MEMORY
        free(fs);
#else
        fs->partition = 0;
   148e8:	e59f31bc 	ldr	r3, [pc, #444]	; 14aac <fat_open+0x270>

    if(sector_count == 0)
    {
        if(sector_count_16 == 0)
            /* illegal volume size */
            return 0;
   148ec:	e3a00000 	mov	r0, #0
    if(!fat_read_header(fs))
    {
#if USE_DYNAMIC_MEMORY
        free(fs);
#else
        fs->partition = 0;
   148f0:	e5830000 	str	r0, [r3]
#endif
        return 0;
   148f4:	ea000069 	b	14aa0 <fat_open+0x264>
            return 0;
        else
            sector_count = sector_count_16;
    }
#if FAT_FAT32_SUPPORT
    if(sectors_per_fat != 0)
   148f8:	e3590000 	cmp	r9, #0
        sectors_per_fat32 = sectors_per_fat;
   148fc:	11a07009 	movne	r7, r9
            return 0;
        else
            sector_count = sector_count_16;
    }
#if FAT_FAT32_SUPPORT
    if(sectors_per_fat != 0)
   14900:	1a000001 	bne	1490c <fat_open+0xd0>
        sectors_per_fat32 = sectors_per_fat;
    else if(sectors_per_fat32 == 0)
   14904:	e3570000 	cmp	r7, #0
   14908:	0afffff6 	beq	148e8 <fat_open+0xac>
#if FAT_FAT32_SUPPORT
                                 - sectors_per_fat32 * fat_copies
#else
                                 - (uint32_t) sectors_per_fat * fat_copies
#endif
                                 - ((max_root_entries * 32 + bytes_per_sector - 1) / bytes_per_sector);
   1490c:	e59d3010 	ldr	r3, [sp, #16]
   14910:	e3e0001f 	mvn	r0, #31
   14914:	e0000093 	mul	r0, r3, r0
   14918:	e0660000 	rsb	r0, r6, r0
   1491c:	e1a01006 	mov	r1, r6
   14920:	e2800001 	add	r0, r0, #1
   14924:	eb0005ab 	bl	15fd8 <__aeabi_idiv>

    /* determine the type of FAT we have here */
    uint32_t data_sector_count = sector_count
                                 - reserved_sectors
#if FAT_FAT32_SUPPORT
                                 - sectors_per_fat32 * fat_copies
   14928:	e003079a 	mul	r3, sl, r7
        return 0;
#endif

    /* determine the type of FAT we have here */
    uint32_t data_sector_count = sector_count
                                 - reserved_sectors
   1492c:	e06b0000 	rsb	r0, fp, r0
#if FAT_FAT32_SUPPORT
                                 - sectors_per_fat32 * fat_copies
   14930:	e0800008 	add	r0, r0, r8
#else
                                 - (uint32_t) sectors_per_fat * fat_copies
#endif
                                 - ((max_root_entries * 32 + bytes_per_sector - 1) / bytes_per_sector);
    uint32_t data_cluster_count = data_sector_count / sectors_per_cluster;
   14934:	e0630000 	rsb	r0, r3, r0
   14938:	e59d100c 	ldr	r1, [sp, #12]
   1493c:	eb00055f 	bl	15ec0 <__aeabi_uidiv>
    if(data_cluster_count < 4085)
   14940:	e59f2168 	ldr	r2, [pc, #360]	; 14ab0 <fat_open+0x274>
   14944:	e1500002 	cmp	r0, r2
                                 - sectors_per_fat32 * fat_copies
#else
                                 - (uint32_t) sectors_per_fat * fat_copies
#endif
                                 - ((max_root_entries * 32 + bytes_per_sector - 1) / bytes_per_sector);
    uint32_t data_cluster_count = data_sector_count / sectors_per_cluster;
   14948:	e1a03000 	mov	r3, r0
    if(data_cluster_count < 4085)
   1494c:	9affffe5 	bls	148e8 <fat_open+0xac>
        /* this is a FAT12, not supported */
        return 0;
    else if(data_cluster_count < 65525)
   14950:	e2822a0f 	add	r2, r2, #61440	; 0xf000
   14954:	e1500002 	cmp	r0, r2
    else
        /* this is a FAT32 */
        partition->type = PARTITION_TYPE_FAT32;

    /* fill header information */
    struct fat_header_struct* header = &fs->header;
   14958:	e59f514c 	ldr	r5, [pc, #332]	; 14aac <fat_open+0x270>
    if(data_cluster_count < 4085)
        /* this is a FAT12, not supported */
        return 0;
    else if(data_cluster_count < 65525)
        /* this is a FAT16 */
        partition->type = PARTITION_TYPE_FAT16;
   1495c:	93a02006 	movls	r2, #6
    else
        /* this is a FAT32 */
        partition->type = PARTITION_TYPE_FAT32;
   14960:	83a0200b 	movhi	r2, #11
   14964:	e5c42010 	strb	r2, [r4, #16]

    /* fill header information */
    struct fat_header_struct* header = &fs->header;
    memset(header, 0, sizeof(*header));
   14968:	e3a01000 	mov	r1, #0
   1496c:	e3a0202c 	mov	r2, #44	; 0x2c
   14970:	e2850004 	add	r0, r5, #4
   14974:	e58d3000 	str	r3, [sp]
   14978:	eb0004e8 	bl	15d20 <memset>
    
    header->size = (offset_t) sector_count * bytes_per_sector;
   1497c:	e0810698 	umull	r0, r1, r8, r6
   14980:	e9850003 	stmib	r5, {r0, r1}

    header->fat_offset = /* jump to partition */
                         partition_offset +
   14984:	e99d0003 	ldmib	sp, {r0, r1}
   14988:	e0a10b96 	umlal	r0, r1, r6, fp
    struct fat_header_struct* header = &fs->header;
    memset(header, 0, sizeof(*header));
    
    header->size = (offset_t) sector_count * bytes_per_sector;

    header->fat_offset = /* jump to partition */
   1498c:	e585000c 	str	r0, [r5, #12]
   14990:	e5851010 	str	r1, [r5, #16]
                         partition_offset +
                         /* jump to fat */
                         (offset_t) reserved_sectors * bytes_per_sector;
    header->fat_size = (data_cluster_count + 2) * (partition->type == PARTITION_TYPE_FAT16 ? 2 : 4);
   14994:	e5d42010 	ldrb	r2, [r4, #16]
   14998:	e59d3000 	ldr	r3, [sp]
   1499c:	e3520006 	cmp	r2, #6
   149a0:	13a02004 	movne	r2, #4
   149a4:	03a02002 	moveq	r2, #2
   149a8:	e2833002 	add	r3, r3, #2
   149ac:	e0030392 	mul	r3, r2, r3

    header->sector_size = bytes_per_sector;
    header->cluster_size = (uint16_t) bytes_per_sector * sectors_per_cluster;
   149b0:	e59d200c 	ldr	r2, [sp, #12]

    header->fat_offset = /* jump to partition */
                         partition_offset +
                         /* jump to fat */
                         (offset_t) reserved_sectors * bytes_per_sector;
    header->fat_size = (data_cluster_count + 2) * (partition->type == PARTITION_TYPE_FAT16 ? 2 : 4);
   149b4:	e5853014 	str	r3, [r5, #20]

    header->sector_size = bytes_per_sector;
    header->cluster_size = (uint16_t) bytes_per_sector * sectors_per_cluster;
   149b8:	e0030692 	mul	r3, r2, r6
                         partition_offset +
                         /* jump to fat */
                         (offset_t) reserved_sectors * bytes_per_sector;
    header->fat_size = (data_cluster_count + 2) * (partition->type == PARTITION_TYPE_FAT16 ? 2 : 4);

    header->sector_size = bytes_per_sector;
   149bc:	e1c561b8 	strh	r6, [r5, #24]
    header->cluster_size = (uint16_t) bytes_per_sector * sectors_per_cluster;
   149c0:	e1c531ba 	strh	r3, [r5, #26]

#if FAT_FAT32_SUPPORT
    if(partition->type == PARTITION_TYPE_FAT16)
   149c4:	e5d43010 	ldrb	r3, [r4, #16]
   149c8:	e3530006 	cmp	r3, #6
   149cc:	1a00000d 	bne	14a08 <fat_open+0x1cc>
#endif
    {
        header->root_dir_offset = /* jump to fats */
                                  header->fat_offset +
                                  /* jump to root directory entries */
                                  (offset_t) fat_copies * sectors_per_fat * bytes_per_sector;
   149d0:	e0832996 	umull	r2, r3, r6, r9
   149d4:	e20ac0ff 	and	ip, sl, #255	; 0xff
   149d8:	e0876c92 	umull	r6, r7, r2, ip
   149dc:	e027739c 	mla	r7, ip, r3, r7
#if FAT_FAT32_SUPPORT
    if(partition->type == PARTITION_TYPE_FAT16)
#endif
    {
        header->root_dir_offset = /* jump to fats */
                                  header->fat_offset +
   149e0:	e0900006 	adds	r0, r0, r6
                                  /* jump to root directory entries */
                                  (offset_t) fat_copies * sectors_per_fat * bytes_per_sector;

        header->cluster_zero_offset = /* jump to root directory entries */
                                      header->root_dir_offset +
   149e4:	e59d2010 	ldr	r2, [sp, #16]
#if FAT_FAT32_SUPPORT
    if(partition->type == PARTITION_TYPE_FAT16)
#endif
    {
        header->root_dir_offset = /* jump to fats */
                                  header->fat_offset +
   149e8:	e0a11007 	adc	r1, r1, r7
                                  /* jump to root directory entries */
                                  (offset_t) fat_copies * sectors_per_fat * bytes_per_sector;

        header->cluster_zero_offset = /* jump to root directory entries */
                                      header->root_dir_offset +
   149ec:	e3a03020 	mov	r3, #32

#if FAT_FAT32_SUPPORT
    if(partition->type == PARTITION_TYPE_FAT16)
#endif
    {
        header->root_dir_offset = /* jump to fats */
   149f0:	e5850024 	str	r0, [r5, #36]	; 0x24
   149f4:	e5851028 	str	r1, [r5, #40]	; 0x28
                                  header->fat_offset +
                                  /* jump to root directory entries */
                                  (offset_t) fat_copies * sectors_per_fat * bytes_per_sector;

        header->cluster_zero_offset = /* jump to root directory entries */
                                      header->root_dir_offset +
   149f8:	e0a10293 	umlal	r0, r1, r3, r2
        header->root_dir_offset = /* jump to fats */
                                  header->fat_offset +
                                  /* jump to root directory entries */
                                  (offset_t) fat_copies * sectors_per_fat * bytes_per_sector;

        header->cluster_zero_offset = /* jump to root directory entries */
   149fc:	e585001c 	str	r0, [r5, #28]
   14a00:	e5851020 	str	r1, [r5, #32]
   14a04:	ea000008 	b	14a2c <fat_open+0x1f0>
    else
    {
        header->cluster_zero_offset = /* jump to fats */
                                      header->fat_offset +
                                      /* skip fats */
                                      (offset_t) fat_copies * sectors_per_fat32 * bytes_per_sector;
   14a08:	e0832a96 	umull	r2, r3, r6, sl
   14a0c:	e0898792 	umull	r8, r9, r2, r7
   14a10:	e0299397 	mla	r9, r7, r3, r9
    }
#if FAT_FAT32_SUPPORT
    else
    {
        header->cluster_zero_offset = /* jump to fats */
                                      header->fat_offset +
   14a14:	e0900008 	adds	r0, r0, r8
   14a18:	e0a11009 	adc	r1, r1, r9
                                      /* skip fats */
                                      (offset_t) fat_copies * sectors_per_fat32 * bytes_per_sector;

        header->root_dir_cluster = cluster_root_dir;
   14a1c:	e59d3014 	ldr	r3, [sp, #20]
                                      (offset_t) max_root_entries * 32;
    }
#if FAT_FAT32_SUPPORT
    else
    {
        header->cluster_zero_offset = /* jump to fats */
   14a20:	e585001c 	str	r0, [r5, #28]
   14a24:	e5851020 	str	r1, [r5, #32]
                                      header->fat_offset +
                                      /* skip fats */
                                      (offset_t) fat_copies * sectors_per_fat32 * bytes_per_sector;

        header->root_dir_cluster = cluster_root_dir;
   14a28:	e585302c 	str	r3, [r5, #44]	; 0x2c
#if USE_DYNAMIC_MEMORY
    struct fat_fs_struct* fs = malloc(sizeof(*fs));
    if(!fs)
        return 0;
#else
    struct fat_fs_struct* fs = fat_fs_handles;
   14a2c:	e59f0078 	ldr	r0, [pc, #120]	; 14aac <fat_open+0x270>
   14a30:	ea00001a 	b	14aa0 <fat_open+0x264>
        ++fs;
    }
    if(i >= FAT_FS_COUNT)
        return 0;
#endif
    memset(fs, 0, sizeof(*fs));
   14a34:	e1a01005 	mov	r1, r5
   14a38:	e3a02034 	mov	r2, #52	; 0x34
   14a3c:	e1a00006 	mov	r0, r6
   14a40:	eb0004b6 	bl	15d20 <memset>
#if FAT_FAT32_SUPPORT
    uint8_t buffer[37];
#else
    uint8_t buffer[25];
#endif
    offset_t partition_offset = (offset_t) partition->offset * 512;
   14a44:	e5943014 	ldr	r3, [r4, #20]
   14a48:	e1a02ba3 	lsr	r2, r3, #23
   14a4c:	e1a01483 	lsl	r1, r3, #9
   14a50:	e58d2008 	str	r2, [sp, #8]
   14a54:	e58d1004 	str	r1, [sp, #4]

    if(!partition->device_read(partition_offset + 0x0b, buffer, sizeof(buffer)))
   14a58:	e3a02c02 	mov	r2, #512	; 0x200
   14a5c:	e3a0000b 	mov	r0, #11
   14a60:	e3a01000 	mov	r1, #0
   14a64:	e0a10392 	umlal	r0, r1, r2, r3
    if(i >= FAT_FS_COUNT)
        return 0;
#endif
    memset(fs, 0, sizeof(*fs));

    fs->partition = partition;
   14a68:	e5864000 	str	r4, [r6]
#else
    uint8_t buffer[25];
#endif
    offset_t partition_offset = (offset_t) partition->offset * 512;

    if(!partition->device_read(partition_offset + 0x0b, buffer, sizeof(buffer)))
   14a6c:	e28d2018 	add	r2, sp, #24
   14a70:	e3a03025 	mov	r3, #37	; 0x25
   14a74:	e594c000 	ldr	ip, [r4]
   14a78:	e1a0e00f 	mov	lr, pc
   14a7c:	e12fff1c 	bx	ip
   14a80:	e3500000 	cmp	r0, #0
   14a84:	0affff97 	beq	148e8 <fat_open+0xac>
   14a88:	eaffff76 	b	14868 <fat_open+0x2c>
#else
    struct fat_fs_struct* fs = fat_fs_handles;
    uint8_t i;
    for(i = 0; i < FAT_FS_COUNT; ++i)
    {
        if(!fs->partition)
   14a8c:	e59f6018 	ldr	r6, [pc, #24]	; 14aac <fat_open+0x270>
   14a90:	e5965000 	ldr	r5, [r6]
   14a94:	e3550000 	cmp	r5, #0
   14a98:	0affffe5 	beq	14a34 <fat_open+0x1f8>
       !partition->device_write_interval
#else
       0
#endif
      )
        return 0;
   14a9c:	e3a00000 	mov	r0, #0
#endif
        return 0;
    }
    
    return fs;
}
   14aa0:	e28dd040 	add	sp, sp, #64	; 0x40
   14aa4:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14aa8:	e12fff1e 	bx	lr
   14aac:	4000024c 	.word	0x4000024c
   14ab0:	00000ff4 	.word	0x00000ff4

00014ab4 <fat_close>:
 * \param[in] fs The filesystem to close.
 * \see fat_open
 */
void fat_close(struct fat_fs_struct* fs)
{
    if(!fs)
   14ab4:	e3500000 	cmp	r0, #0
        return;

#if USE_DYNAMIC_MEMORY
    free(fs);
#else
    fs->partition = 0;
   14ab8:	13a03000 	movne	r3, #0
   14abc:	15803000 	strne	r3, [r0]
   14ac0:	e12fff1e 	bx	lr

00014ac4 <fat_open_file>:
 * \returns The file handle, or 0 on failure.
 * \see fat_close_file
 */
struct fat_file_struct* fat_open_file(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry || (dir_entry->attributes & FAT_ATTRIB_DIR))
   14ac4:	e3500000 	cmp	r0, #0
   14ac8:	13510000 	cmpne	r1, #0
 * \param[in] dir_entry The directory entry of the file to open.
 * \returns The file handle, or 0 on failure.
 * \see fat_close_file
 */
struct fat_file_struct* fat_open_file(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
   14acc:	e92d4070 	push	{r4, r5, r6, lr}
    if(!fs || !dir_entry || (dir_entry->attributes & FAT_ATTRIB_DIR))
   14ad0:	e1a05000 	mov	r5, r0
   14ad4:	e1a06001 	mov	r6, r1
   14ad8:	13a00000 	movne	r0, #0
   14adc:	03a00001 	moveq	r0, #1
   14ae0:	0a000003 	beq	14af4 <fat_open_file+0x30>
   14ae4:	e5d13020 	ldrb	r3, [r1, #32]
   14ae8:	e2133010 	ands	r3, r3, #16
   14aec:	0a00000e 	beq	14b2c <fat_open_file+0x68>
   14af0:	ea000012 	b	14b40 <fat_open_file+0x7c>
        return 0;
   14af4:	e3a00000 	mov	r0, #0
   14af8:	ea000010 	b	14b40 <fat_open_file+0x7c>
    }
    if(i >= FAT_FILE_COUNT)
        return 0;
#endif
    
    memcpy(&fd->dir_entry, dir_entry, sizeof(*dir_entry));
   14afc:	e3a02034 	mov	r2, #52	; 0x34
   14b00:	e2840038 	add	r0, r4, #56	; 0x38
   14b04:	eb00047d 	bl	15d00 <memcpy>
    fd->fs = fs;
    fd->pos = 0;
   14b08:	e3a03000 	mov	r3, #0
   14b0c:	e3a02000 	mov	r2, #0
   14b10:	e584206c 	str	r2, [r4, #108]	; 0x6c
   14b14:	e5843070 	str	r3, [r4, #112]	; 0x70
    fd->pos_cluster = dir_entry->cluster;
   14b18:	e5963024 	ldr	r3, [r6, #36]	; 0x24
    if(i >= FAT_FILE_COUNT)
        return 0;
#endif
    
    memcpy(&fd->dir_entry, dir_entry, sizeof(*dir_entry));
    fd->fs = fs;
   14b1c:	e5845034 	str	r5, [r4, #52]	; 0x34
    fd->pos = 0;
    fd->pos_cluster = dir_entry->cluster;
   14b20:	e5843074 	str	r3, [r4, #116]	; 0x74
#if USE_DYNAMIC_MEMORY
    struct fat_file_struct* fd = malloc(sizeof(*fd));
    if(!fd)
        return 0;
#else
    struct fat_file_struct* fd = fat_file_handles;
   14b24:	e2840034 	add	r0, r4, #52	; 0x34
    memcpy(&fd->dir_entry, dir_entry, sizeof(*dir_entry));
    fd->fs = fs;
    fd->pos = 0;
    fd->pos_cluster = dir_entry->cluster;

    return fd;
   14b28:	ea000004 	b	14b40 <fat_open_file+0x7c>
#else
    struct fat_file_struct* fd = fat_file_handles;
    uint8_t i;
    for(i = 0; i < FAT_FILE_COUNT; ++i)
    {
        if(!fd->fs)
   14b2c:	e59f4014 	ldr	r4, [pc, #20]	; 14b48 <fat_open_file+0x84>
   14b30:	e5942034 	ldr	r2, [r4, #52]	; 0x34
   14b34:	e3520000 	cmp	r2, #0
   14b38:	0affffef 	beq	14afc <fat_open_file+0x38>
 * \see fat_close_file
 */
struct fat_file_struct* fat_open_file(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry || (dir_entry->attributes & FAT_ATTRIB_DIR))
        return 0;
   14b3c:	e1a00003 	mov	r0, r3
    fd->fs = fs;
    fd->pos = 0;
    fd->pos_cluster = dir_entry->cluster;

    return fd;
}
   14b40:	e8bd4070 	pop	{r4, r5, r6, lr}
   14b44:	e12fff1e 	bx	lr
   14b48:	4000024c 	.word	0x4000024c

00014b4c <fat_close_file>:
 * \param[in] fd The file handle of the file to close.
 * \see fat_open_file
 */
void fat_close_file(struct fat_file_struct* fd)
{
    if(fd)
   14b4c:	e3500000 	cmp	r0, #0
#endif

#if USE_DYNAMIC_MEMORY
        free(fd);
#else
        fd->fs = 0;
   14b50:	13a03000 	movne	r3, #0
   14b54:	15803000 	strne	r3, [r0]
   14b58:	e12fff1e 	bx	lr

00014b5c <fat_read_file>:
 * \param[in] buffer_len The amount of data to read.
 * \returns The number of bytes read, 0 on end of file, or -1 on failure.
 * \see fat_write_file
 */
intptr_t fat_read_file(struct fat_file_struct* fd, uint8_t* buffer, uintptr_t buffer_len)
{
   14b5c:	e92d4ff1 	push	{r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
   14b60:	e3500000 	cmp	r0, #0
   14b64:	13510000 	cmpne	r1, #0
 * \param[in] buffer_len The amount of data to read.
 * \returns The number of bytes read, 0 on end of file, or -1 on failure.
 * \see fat_write_file
 */
intptr_t fat_read_file(struct fat_file_struct* fd, uint8_t* buffer, uintptr_t buffer_len)
{
   14b68:	e1a0b002 	mov	fp, r2
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
   14b6c:	e58d1000 	str	r1, [sp]
   14b70:	e1a0a000 	mov	sl, r0
   14b74:	0a000019 	beq	14be0 <fat_read_file+0x84>
   14b78:	e3520000 	cmp	r2, #0
   14b7c:	0a000017 	beq	14be0 <fat_read_file+0x84>
        return -1;

    /* determine number of bytes to read */
    if(fd->pos + buffer_len > fd->dir_entry.file_size)
   14b80:	e2805038 	add	r5, r0, #56	; 0x38
   14b84:	e8950030 	ldm	r5, {r4, r5}
   14b88:	e590302c 	ldr	r3, [r0, #44]	; 0x2c
   14b8c:	e0948002 	adds	r8, r4, r2
   14b90:	e2a59000 	adc	r9, r5, #0
   14b94:	e1a06003 	mov	r6, r3
   14b98:	e3a07000 	mov	r7, #0
   14b9c:	e1570009 	cmp	r7, r9
   14ba0:	01560008 	cmpeq	r6, r8
   14ba4:	2a000003 	bcs	14bb8 <fat_read_file+0x5c>
        buffer_len = fd->dir_entry.file_size - fd->pos;
    if(buffer_len == 0)
   14ba8:	e053b004 	subs	fp, r3, r4
   14bac:	1a000001 	bne	14bb8 <fat_read_file+0x5c>
        return 0;
   14bb0:	e3a00000 	mov	r0, #0
   14bb4:	ea00004a 	b	14ce4 <fat_read_file+0x188>
    
    uint16_t cluster_size = fd->fs->header.cluster_size;
    cluster_t cluster_num = fd->pos_cluster;
   14bb8:	e59a6040 	ldr	r6, [sl, #64]	; 0x40
    if(fd->pos + buffer_len > fd->dir_entry.file_size)
        buffer_len = fd->dir_entry.file_size - fd->pos;
    if(buffer_len == 0)
        return 0;
    
    uint16_t cluster_size = fd->fs->header.cluster_size;
   14bbc:	e59a3000 	ldr	r3, [sl]
    cluster_t cluster_num = fd->pos_cluster;
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));

    /* find cluster in which to start reading */
    if(!cluster_num)
   14bc0:	e3560000 	cmp	r6, #0
    if(fd->pos + buffer_len > fd->dir_entry.file_size)
        buffer_len = fd->dir_entry.file_size - fd->pos;
    if(buffer_len == 0)
        return 0;
    
    uint16_t cluster_size = fd->fs->header.cluster_size;
   14bc4:	e1d371ba 	ldrh	r7, [r3, #26]
    cluster_t cluster_num = fd->pos_cluster;
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));

    /* find cluster in which to start reading */
    if(!cluster_num)
   14bc8:	1a000012 	bne	14c18 <fat_read_file+0xbc>
    {
        cluster_num = fd->dir_entry.cluster;
   14bcc:	e59a6028 	ldr	r6, [sl, #40]	; 0x28
        
        if(!cluster_num)
   14bd0:	e3560000 	cmp	r6, #0
   14bd4:	1a000003 	bne	14be8 <fat_read_file+0x8c>
        {
            if(!fd->pos)
   14bd8:	e1943005 	orrs	r3, r4, r5
   14bdc:	0afffff3 	beq	14bb0 <fat_read_file+0x54>
                return 0;
            else
                return -1;
   14be0:	e3e00000 	mvn	r0, #0
   14be4:	ea00003e 	b	14ce4 <fat_read_file+0x188>
        }

        if(fd->pos)
   14be8:	e1943005 	orrs	r3, r4, r5
        {
            uint32_t pos = fd->pos;
   14bec:	11a08004 	movne	r8, r4
                return 0;
            else
                return -1;
        }

        if(fd->pos)
   14bf0:	1a000006 	bne	14c10 <fat_read_file+0xb4>
   14bf4:	ea000007 	b	14c18 <fat_read_file+0xbc>
        {
            uint32_t pos = fd->pos;
            while(pos >= cluster_size)
            {
                pos -= cluster_size;
                cluster_num = fat_get_next_cluster(fd->fs, cluster_num);
   14bf8:	e1a01006 	mov	r1, r6
   14bfc:	e59a0000 	ldr	r0, [sl]
   14c00:	ebfffcaa 	bl	13eb0 <fat_get_next_cluster>
                if(!cluster_num)
   14c04:	e2506000 	subs	r6, r0, #0
 * \param[out] buffer The buffer into which to write.
 * \param[in] buffer_len The amount of data to read.
 * \returns The number of bytes read, 0 on end of file, or -1 on failure.
 * \see fat_write_file
 */
intptr_t fat_read_file(struct fat_file_struct* fd, uint8_t* buffer, uintptr_t buffer_len)
   14c08:	e0678008 	rsb	r8, r7, r8
            uint32_t pos = fd->pos;
            while(pos >= cluster_size)
            {
                pos -= cluster_size;
                cluster_num = fat_get_next_cluster(fd->fs, cluster_num);
                if(!cluster_num)
   14c0c:	0afffff3 	beq	14be0 <fat_read_file+0x84>
        }

        if(fd->pos)
        {
            uint32_t pos = fd->pos;
            while(pos >= cluster_size)
   14c10:	e1580007 	cmp	r8, r7
   14c14:	2afffff7 	bcs	14bf8 <fat_read_file+0x9c>
        return 0;
    
    uint16_t cluster_size = fd->fs->header.cluster_size;
    cluster_t cluster_num = fd->pos_cluster;
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));
   14c18:	e2473001 	sub	r3, r7, #1
   14c1c:	e0034004 	and	r4, r3, r4
   14c20:	e1a04804 	lsl	r4, r4, #16
   14c24:	e1a04824 	lsr	r4, r4, #16
   14c28:	e1a0500b 	mov	r5, fp
    
    /* read data */
    do
    {
        /* calculate data size to copy from cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
   14c2c:	e59a9000 	ldr	r9, [sl]
   14c30:	e1a01006 	mov	r1, r6
   14c34:	e1a00009 	mov	r0, r9
   14c38:	ebfffdbd 	bl	14334 <fat_cluster_offset>
        uint16_t copy_length = cluster_size - first_cluster_offset;
   14c3c:	e0648007 	rsb	r8, r4, r7
   14c40:	e1a08808 	lsl	r8, r8, #16
   14c44:	e1a08828 	lsr	r8, r8, #16
    
    /* read data */
    do
    {
        /* calculate data size to copy from cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
   14c48:	e0900004 	adds	r0, r0, r4
   14c4c:	e2a11000 	adc	r1, r1, #0
        uint16_t copy_length = cluster_size - first_cluster_offset;
        if(copy_length > buffer_left)
   14c50:	e1580005 	cmp	r8, r5
            copy_length = buffer_left;
   14c54:	81a08805 	lslhi	r8, r5, #16
   14c58:	81a08828 	lsrhi	r8, r8, #16

        /* read data */
        if(!fd->fs->partition->device_read(cluster_offset, buffer, copy_length))
   14c5c:	e5999000 	ldr	r9, [r9]
   14c60:	e59d2000 	ldr	r2, [sp]
   14c64:	e1a03008 	mov	r3, r8
   14c68:	e599c000 	ldr	ip, [r9]
   14c6c:	e1a0e00f 	mov	lr, pc
   14c70:	e12fff1c 	bx	ip
   14c74:	e3500000 	cmp	r0, #0
   14c78:	0a000012 	beq	14cc8 <fat_read_file+0x16c>
            return buffer_len - buffer_left;

        /* calculate new file position */
        buffer += copy_length;
   14c7c:	e59d3000 	ldr	r3, [sp]
   14c80:	e0833008 	add	r3, r3, r8
   14c84:	e58d3000 	str	r3, [sp]
        buffer_left -= copy_length;
        fd->pos += copy_length;
   14c88:	e28a3038 	add	r3, sl, #56	; 0x38
   14c8c:	e893000c 	ldm	r3, {r2, r3}
        if(!fd->fs->partition->device_read(cluster_offset, buffer, copy_length))
            return buffer_len - buffer_left;

        /* calculate new file position */
        buffer += copy_length;
        buffer_left -= copy_length;
   14c90:	e0685005 	rsb	r5, r8, r5
        fd->pos += copy_length;
   14c94:	e0922008 	adds	r2, r2, r8

        if(first_cluster_offset + copy_length >= cluster_size)
   14c98:	e0848008 	add	r8, r4, r8
            return buffer_len - buffer_left;

        /* calculate new file position */
        buffer += copy_length;
        buffer_left -= copy_length;
        fd->pos += copy_length;
   14c9c:	e2a33000 	adc	r3, r3, #0

        if(first_cluster_offset + copy_length >= cluster_size)
   14ca0:	e1580007 	cmp	r8, r7
            return buffer_len - buffer_left;

        /* calculate new file position */
        buffer += copy_length;
        buffer_left -= copy_length;
        fd->pos += copy_length;
   14ca4:	e58a2038 	str	r2, [sl, #56]	; 0x38
   14ca8:	e58a303c 	str	r3, [sl, #60]	; 0x3c

        if(first_cluster_offset + copy_length >= cluster_size)
   14cac:	ba000008 	blt	14cd4 <fat_read_file+0x178>
        {
            /* we are on a cluster boundary, so get the next cluster */
            if((cluster_num = fat_get_next_cluster(fd->fs, cluster_num)))
   14cb0:	e1a01006 	mov	r1, r6
   14cb4:	e59a0000 	ldr	r0, [sl]
   14cb8:	ebfffc7c 	bl	13eb0 <fat_get_next_cluster>
   14cbc:	e2506000 	subs	r6, r0, #0
   14cc0:	1a000002 	bne	14cd0 <fat_read_file+0x174>
            {
                first_cluster_offset = 0;
            }
            else
            {
                fd->pos_cluster = 0;
   14cc4:	e58a6040 	str	r6, [sl, #64]	; 0x40
                return buffer_len - buffer_left;
   14cc8:	e065000b 	rsb	r0, r5, fp
   14ccc:	ea000004 	b	14ce4 <fat_read_file+0x188>
        if(first_cluster_offset + copy_length >= cluster_size)
        {
            /* we are on a cluster boundary, so get the next cluster */
            if((cluster_num = fat_get_next_cluster(fd->fs, cluster_num)))
            {
                first_cluster_offset = 0;
   14cd0:	e3a04000 	mov	r4, #0
            }
        }

        fd->pos_cluster = cluster_num;

    } while(buffer_left > 0); /* check if we are done */
   14cd4:	e3550000 	cmp	r5, #0
                fd->pos_cluster = 0;
                return buffer_len - buffer_left;
            }
        }

        fd->pos_cluster = cluster_num;
   14cd8:	e58a6040 	str	r6, [sl, #64]	; 0x40

    } while(buffer_left > 0); /* check if we are done */
   14cdc:	1affffd2 	bne	14c2c <fat_read_file+0xd0>

    return buffer_len;
   14ce0:	e1a0000b 	mov	r0, fp
}
   14ce4:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ce8:	e12fff1e 	bx	lr

00014cec <fat_write_file>:
 * \param[in] buffer_len The amount of data to write.
 * \returns The number of bytes written (0 or something less than \c buffer_len on disk full) or -1 on failure.
 * \see fat_read_file
 */
intptr_t fat_write_file(struct fat_file_struct* fd, const uint8_t* buffer, uintptr_t buffer_len)
{
   14cec:	e92d4ff1 	push	{r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
   14cf0:	e3500000 	cmp	r0, #0
   14cf4:	13510000 	cmpne	r1, #0
 * \param[in] buffer_len The amount of data to write.
 * \returns The number of bytes written (0 or something less than \c buffer_len on disk full) or -1 on failure.
 * \see fat_read_file
 */
intptr_t fat_write_file(struct fat_file_struct* fd, const uint8_t* buffer, uintptr_t buffer_len)
{
   14cf8:	e58d2000 	str	r2, [sp]
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
   14cfc:	e1a09001 	mov	r9, r1
   14d00:	e1a08000 	mov	r8, r0
   14d04:	1a000001 	bne	14d10 <fat_write_file+0x24>
        return -1;
   14d08:	e3e00000 	mvn	r0, #0
   14d0c:	ea00007f 	b	14f10 <fat_write_file+0x224>
 * \see fat_read_file
 */
intptr_t fat_write_file(struct fat_file_struct* fd, const uint8_t* buffer, uintptr_t buffer_len)
{
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
   14d10:	e59d1000 	ldr	r1, [sp]
   14d14:	e3510000 	cmp	r1, #0
   14d18:	0afffffa 	beq	14d08 <fat_write_file+0x1c>
        return -1;
    if(fd->pos > fd->dir_entry.file_size)
   14d1c:	e590302c 	ldr	r3, [r0, #44]	; 0x2c
   14d20:	e2805038 	add	r5, r0, #56	; 0x38
   14d24:	e8950030 	ldm	r5, {r4, r5}
   14d28:	e1a06003 	mov	r6, r3
   14d2c:	e3a07000 	mov	r7, #0
   14d30:	e1570005 	cmp	r7, r5
   14d34:	01560004 	cmpeq	r6, r4
   14d38:	3afffff2 	bcc	14d08 <fat_write_file+0x1c>
        return -1;

    uint16_t cluster_size = fd->fs->header.cluster_size;
   14d3c:	e5900000 	ldr	r0, [r0]
   14d40:	e1d071ba 	ldrh	r7, [r0, #26]
    cluster_t cluster_num = fd->pos_cluster;
   14d44:	e598a040 	ldr	sl, [r8, #64]	; 0x40
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));
   14d48:	e247b001 	sub	fp, r7, #1
   14d4c:	e00bb004 	and	fp, fp, r4
   14d50:	e1a0b80b 	lsl	fp, fp, #16

    /* find cluster in which to start writing */
    if(!cluster_num)
   14d54:	e35a0000 	cmp	sl, #0
        return -1;

    uint16_t cluster_size = fd->fs->header.cluster_size;
    cluster_t cluster_num = fd->pos_cluster;
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));
   14d58:	e1a0b82b 	lsr	fp, fp, #16

    /* find cluster in which to start writing */
    if(!cluster_num)
   14d5c:	1a000024 	bne	14df4 <fat_write_file+0x108>
    {
        cluster_num = fd->dir_entry.cluster;
   14d60:	e598a028 	ldr	sl, [r8, #40]	; 0x28
        
        if(!cluster_num)
   14d64:	e35a0000 	cmp	sl, #0
   14d68:	1a00000a 	bne	14d98 <fat_write_file+0xac>
        {
            if(!fd->pos)
   14d6c:	e1943005 	orrs	r3, r4, r5
   14d70:	1affffe4 	bne	14d08 <fat_write_file+0x1c>
            {
                /* empty file */
                fd->dir_entry.cluster = cluster_num = fat_append_clusters(fd->fs, 0, 1);
   14d74:	e1a0100a 	mov	r1, sl
   14d78:	e3a02001 	mov	r2, #1
   14d7c:	ebfffce4 	bl	14114 <fat_append_clusters>
                if(!cluster_num)
   14d80:	e3500000 	cmp	r0, #0
        if(!cluster_num)
        {
            if(!fd->pos)
            {
                /* empty file */
                fd->dir_entry.cluster = cluster_num = fat_append_clusters(fd->fs, 0, 1);
   14d84:	e1a0a000 	mov	sl, r0
   14d88:	e5880028 	str	r0, [r8, #40]	; 0x28
                if(!cluster_num)
   14d8c:	1a000001 	bne	14d98 <fat_write_file+0xac>
                    return 0;
   14d90:	e3a00000 	mov	r0, #0
   14d94:	ea00005d 	b	14f10 <fat_write_file+0x224>
            {
                return -1;
            }
        }

        if(fd->pos)
   14d98:	e2883038 	add	r3, r8, #56	; 0x38
   14d9c:	e893000c 	ldm	r3, {r2, r3}
   14da0:	e1921003 	orrs	r1, r2, r3
        {
            uint32_t pos = fd->pos;
   14da4:	11a04002 	movne	r4, r2
            {
                return -1;
            }
        }

        if(fd->pos)
   14da8:	1a00000f 	bne	14dec <fat_write_file+0x100>
   14dac:	ea000010 	b	14df4 <fat_write_file+0x108>
            uint32_t pos = fd->pos;
            cluster_t cluster_num_next;
            while(pos >= cluster_size)
            {
                pos -= cluster_size;
                cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
   14db0:	e5980000 	ldr	r0, [r8]
   14db4:	e1a0100a 	mov	r1, sl
   14db8:	ebfffc3c 	bl	13eb0 <fat_get_next_cluster>
                if(!cluster_num_next)
   14dbc:	e3500000 	cmp	r0, #0
        {
            uint32_t pos = fd->pos;
            cluster_t cluster_num_next;
            while(pos >= cluster_size)
            {
                pos -= cluster_size;
   14dc0:	e0674004 	rsb	r4, r7, r4
                cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
                if(!cluster_num_next)
   14dc4:	1a000007 	bne	14de8 <fat_write_file+0xfc>
                {
                    if(pos != 0)
   14dc8:	e3540000 	cmp	r4, #0
   14dcc:	1affffcd 	bne	14d08 <fat_write_file+0x1c>
                        return -1; /* current file position points beyond end of file */

                    /* the file exactly ends on a cluster boundary, and we append to it */
                    cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
   14dd0:	e5980000 	ldr	r0, [r8]
   14dd4:	e1a0100a 	mov	r1, sl
   14dd8:	e3a02001 	mov	r2, #1
   14ddc:	ebfffccc 	bl	14114 <fat_append_clusters>
                    if(!cluster_num_next)
   14de0:	e3500000 	cmp	r0, #0
   14de4:	0affffe9 	beq	14d90 <fat_write_file+0xa4>
            cluster_t cluster_num_next;
            while(pos >= cluster_size)
            {
                pos -= cluster_size;
                cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
                if(!cluster_num_next)
   14de8:	e1a0a000 	mov	sl, r0

        if(fd->pos)
        {
            uint32_t pos = fd->pos;
            cluster_t cluster_num_next;
            while(pos >= cluster_size)
   14dec:	e1540007 	cmp	r4, r7
   14df0:	2affffee 	bcs	14db0 <fat_write_file+0xc4>
                    if(pos != 0)
                        return -1; /* current file position points beyond end of file */

                    /* the file exactly ends on a cluster boundary, and we append to it */
                    cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
                    if(!cluster_num_next)
   14df4:	e59d6000 	ldr	r6, [sp]
    
    /* write data */
    do
    {
        /* calculate data size to write to cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
   14df8:	e5985000 	ldr	r5, [r8]
   14dfc:	e1a0100a 	mov	r1, sl
   14e00:	e1a00005 	mov	r0, r5
   14e04:	ebfffd4a 	bl	14334 <fat_cluster_offset>
        uint16_t write_length = cluster_size - first_cluster_offset;
   14e08:	e06b4007 	rsb	r4, fp, r7
   14e0c:	e1a04804 	lsl	r4, r4, #16
   14e10:	e1a04824 	lsr	r4, r4, #16
    
    /* write data */
    do
    {
        /* calculate data size to write to cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
   14e14:	e090000b 	adds	r0, r0, fp
   14e18:	e2a11000 	adc	r1, r1, #0
        uint16_t write_length = cluster_size - first_cluster_offset;
        if(write_length > buffer_left)
   14e1c:	e1540006 	cmp	r4, r6
            write_length = buffer_left;
   14e20:	81a04806 	lslhi	r4, r6, #16
   14e24:	81a04824 	lsrhi	r4, r4, #16

        /* write data which fits into the current cluster */
        if(!fd->fs->partition->device_write(cluster_offset, buffer, write_length))
   14e28:	e5955000 	ldr	r5, [r5]
   14e2c:	e1a02009 	mov	r2, r9
   14e30:	e1a03004 	mov	r3, r4
   14e34:	e595c008 	ldr	ip, [r5, #8]
   14e38:	e1a0e00f 	mov	lr, pc
   14e3c:	e12fff1c 	bx	ip
   14e40:	e3500000 	cmp	r0, #0
   14e44:	0a00001e 	beq	14ec4 <fat_write_file+0x1d8>
            break;

        /* calculate new file position */
        buffer += write_length;
        buffer_left -= write_length;
        fd->pos += write_length;
   14e48:	e2883038 	add	r3, r8, #56	; 0x38
   14e4c:	e893000c 	ldm	r3, {r2, r3}
        /* write data which fits into the current cluster */
        if(!fd->fs->partition->device_write(cluster_offset, buffer, write_length))
            break;

        /* calculate new file position */
        buffer += write_length;
   14e50:	e0899004 	add	r9, r9, r4
        buffer_left -= write_length;
        fd->pos += write_length;
   14e54:	e0922004 	adds	r2, r2, r4
        if(!fd->fs->partition->device_write(cluster_offset, buffer, write_length))
            break;

        /* calculate new file position */
        buffer += write_length;
        buffer_left -= write_length;
   14e58:	e0646006 	rsb	r6, r4, r6
        fd->pos += write_length;

        if(first_cluster_offset + write_length >= cluster_size)
   14e5c:	e08b4004 	add	r4, fp, r4
            break;

        /* calculate new file position */
        buffer += write_length;
        buffer_left -= write_length;
        fd->pos += write_length;
   14e60:	e2a33000 	adc	r3, r3, #0

        if(first_cluster_offset + write_length >= cluster_size)
   14e64:	e1540007 	cmp	r4, r7
            break;

        /* calculate new file position */
        buffer += write_length;
        buffer_left -= write_length;
        fd->pos += write_length;
   14e68:	e5882038 	str	r2, [r8, #56]	; 0x38
   14e6c:	e588303c 	str	r3, [r8, #60]	; 0x3c

        if(first_cluster_offset + write_length >= cluster_size)
   14e70:	ba000010 	blt	14eb8 <fat_write_file+0x1cc>
        {
            /* we are on a cluster boundary, so get the next cluster */
            cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
   14e74:	e5980000 	ldr	r0, [r8]
   14e78:	e1a0100a 	mov	r1, sl
   14e7c:	ebfffc0b 	bl	13eb0 <fat_get_next_cluster>
            if(!cluster_num_next && buffer_left > 0)
   14e80:	e2703001 	rsbs	r3, r0, #1
   14e84:	33a03000 	movcc	r3, #0
   14e88:	e3560000 	cmp	r6, #0
   14e8c:	03a03000 	moveq	r3, #0
   14e90:	e3530000 	cmp	r3, #0
                /* we reached the last cluster, append a new one */
                cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
   14e94:	15980000 	ldrne	r0, [r8]
   14e98:	11a0100a 	movne	r1, sl
   14e9c:	13a02001 	movne	r2, #1
   14ea0:	1bfffc9b 	blne	14114 <fat_append_clusters>
            if(!cluster_num_next)
   14ea4:	e3500000 	cmp	r0, #0
            {
                fd->pos_cluster = 0;
   14ea8:	05880040 	streq	r0, [r8, #64]	; 0x40
                break;
   14eac:	0a000004 	beq	14ec4 <fat_write_file+0x1d8>
            /* we are on a cluster boundary, so get the next cluster */
            cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
            if(!cluster_num_next && buffer_left > 0)
                /* we reached the last cluster, append a new one */
                cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
            if(!cluster_num_next)
   14eb0:	e1a0a000 	mov	sl, r0
                fd->pos_cluster = 0;
                break;
            }

            cluster_num = cluster_num_next;
            first_cluster_offset = 0;
   14eb4:	e3a0b000 	mov	fp, #0
        }

        fd->pos_cluster = cluster_num;

    } while(buffer_left > 0); /* check if we are done */
   14eb8:	e3560000 	cmp	r6, #0

            cluster_num = cluster_num_next;
            first_cluster_offset = 0;
        }

        fd->pos_cluster = cluster_num;
   14ebc:	e588a040 	str	sl, [r8, #64]	; 0x40

    } while(buffer_left > 0); /* check if we are done */
   14ec0:	1affffcc 	bne	14df8 <fat_write_file+0x10c>

    /* update directory entry */
    if(fd->pos > fd->dir_entry.file_size)
   14ec4:	e598702c 	ldr	r7, [r8, #44]	; 0x2c
   14ec8:	e2883038 	add	r3, r8, #56	; 0x38
   14ecc:	e893000c 	ldm	r3, {r2, r3}
   14ed0:	e1a04007 	mov	r4, r7
   14ed4:	e3a05000 	mov	r5, #0
   14ed8:	e1550003 	cmp	r5, r3
   14edc:	01540002 	cmpeq	r4, r2
   14ee0:	2a000008 	bcs	14f08 <fat_write_file+0x21c>
#if !FAT_DELAY_DIRENTRY_UPDATE
        uint32_t size_old = fd->dir_entry.file_size;
#endif

        /* update file size */
        fd->dir_entry.file_size = fd->pos;
   14ee4:	e588202c 	str	r2, [r8, #44]	; 0x2c

#if !FAT_DELAY_DIRENTRY_UPDATE
        /* write directory entry */
        if(!fat_write_dir_entry(fd->fs, &fd->dir_entry))
   14ee8:	e5980000 	ldr	r0, [r8]
   14eec:	e2881004 	add	r1, r8, #4
   14ef0:	ebfffd36 	bl	143d0 <fat_write_dir_entry>
   14ef4:	e1500005 	cmp	r0, r5
        {
            /* We do not return an error here since we actually wrote
             * some data to disk. So we calculate the amount of data
             * we wrote to disk and which lies within the old file size.
             */
            buffer_left = fd->pos - size_old;
   14ef8:	05986038 	ldreq	r6, [r8, #56]	; 0x38
            fd->pos = size_old;
   14efc:	05884038 	streq	r4, [r8, #56]	; 0x38
   14f00:	0588503c 	streq	r5, [r8, #60]	; 0x3c
        {
            /* We do not return an error here since we actually wrote
             * some data to disk. So we calculate the amount of data
             * we wrote to disk and which lies within the old file size.
             */
            buffer_left = fd->pos - size_old;
   14f04:	00676006 	rsbeq	r6, r7, r6
            fd->pos = size_old;
        }
#endif
    }

    return buffer_len - buffer_left;
   14f08:	e59d3000 	ldr	r3, [sp]
   14f0c:	e0660003 	rsb	r0, r6, r3
}
   14f10:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f14:	e12fff1e 	bx	lr

00014f18 <fat_resize_file>:
 * \param[in] fd The file decriptor of the file which to resize.
 * \param[in] size The new size of the file.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_resize_file(struct fat_file_struct* fd, uint32_t size)
{
   14f18:	e92d47f3 	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    if(!fd)
   14f1c:	e2506000 	subs	r6, r0, #0
 * \param[in] fd The file decriptor of the file which to resize.
 * \param[in] size The new size of the file.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_resize_file(struct fat_file_struct* fd, uint32_t size)
{
   14f20:	e1a08001 	mov	r8, r1
    if(!fd)
   14f24:	1a000001 	bne	14f30 <fat_resize_file+0x18>
        return 0;
   14f28:	e3a00000 	mov	r0, #0
   14f2c:	ea000055 	b	15088 <fat_resize_file+0x170>

    cluster_t cluster_num = fd->dir_entry.cluster;
    uint16_t cluster_size = fd->fs->header.cluster_size;
   14f30:	e5963000 	ldr	r3, [r6]
uint8_t fat_resize_file(struct fat_file_struct* fd, uint32_t size)
{
    if(!fd)
        return 0;

    cluster_t cluster_num = fd->dir_entry.cluster;
   14f34:	e5967028 	ldr	r7, [r6, #40]	; 0x28
    uint16_t cluster_size = fd->fs->header.cluster_size;
   14f38:	e1d341ba 	ldrh	r4, [r3, #26]
    uint32_t size_new = size;

    do
    {
        if(cluster_num == 0 && size_new == 0)
   14f3c:	e1913007 	orrs	r3, r1, r7
   14f40:	11a05001 	movne	r5, r1
   14f44:	1a000007 	bne	14f68 <fat_resize_file+0x50>
   14f48:	ea000044 	b	15060 <fat_resize_file+0x148>

        /* seek to the next cluster as long as we need the space */
        while(size_new > cluster_size)
        {
            /* get next cluster of file */
            cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
   14f4c:	e5960000 	ldr	r0, [r6]
   14f50:	e1a01007 	mov	r1, r7
   14f54:	ebfffbd5 	bl	13eb0 <fat_get_next_cluster>
            if(cluster_num_next)
   14f58:	e3500000 	cmp	r0, #0
   14f5c:	0a000005 	beq	14f78 <fat_resize_file+0x60>
 *
 * \param[in] fd The file decriptor of the file which to resize.
 * \param[in] size The new size of the file.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_resize_file(struct fat_file_struct* fd, uint32_t size)
   14f60:	e0645005 	rsb	r5, r4, r5
        {
            /* get next cluster of file */
            cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
            if(cluster_num_next)
            {
                cluster_num = cluster_num_next;
   14f64:	e1a07000 	mov	r7, r0
        if(cluster_num == 0 && size_new == 0)
            /* the file stays empty */
            break;

        /* seek to the next cluster as long as we need the space */
        while(size_new > cluster_size)
   14f68:	e1550004 	cmp	r5, r4
   14f6c:	8afffff6 	bhi	14f4c <fat_resize_file+0x34>
            {
                break;
            }
        }

        if(size_new > cluster_size || cluster_num == 0)
   14f70:	e3570000 	cmp	r7, #0
   14f74:	1a00000c 	bne	14fac <fat_resize_file+0x94>
        {
            /* Allocate new cluster chain and append
             * it to the existing one, if available.
             */
            cluster_t cluster_count = (size_new + cluster_size - 1) / cluster_size;
   14f78:	e0850004 	add	r0, r5, r4
   14f7c:	e1a01004 	mov	r1, r4
   14f80:	e2400001 	sub	r0, r0, #1
   14f84:	eb0003cd 	bl	15ec0 <__aeabi_uidiv>
            cluster_t cluster_new_chain = fat_append_clusters(fd->fs, cluster_num, cluster_count);
   14f88:	e1a01007 	mov	r1, r7
        if(size_new > cluster_size || cluster_num == 0)
        {
            /* Allocate new cluster chain and append
             * it to the existing one, if available.
             */
            cluster_t cluster_count = (size_new + cluster_size - 1) / cluster_size;
   14f8c:	e1a02000 	mov	r2, r0
            cluster_t cluster_new_chain = fat_append_clusters(fd->fs, cluster_num, cluster_count);
   14f90:	e5960000 	ldr	r0, [r6]
   14f94:	ebfffc5e 	bl	14114 <fat_append_clusters>
            if(!cluster_new_chain)
   14f98:	e3500000 	cmp	r0, #0
   14f9c:	0affffe1 	beq	14f28 <fat_resize_file+0x10>
                return 0;

            if(!cluster_num)
   14fa0:	e3570000 	cmp	r7, #0
            {
                cluster_num = cluster_new_chain;
                fd->dir_entry.cluster = cluster_num;
   14fa4:	05860028 	streq	r0, [r6, #40]	; 0x28
   14fa8:	01a07000 	moveq	r7, r0
            }
        }

        /* write new directory entry */
        fd->dir_entry.file_size = size;
        if(size == 0)
   14fac:	e3580000 	cmp	r8, #0
            fd->dir_entry.cluster = 0;
   14fb0:	05868028 	streq	r8, [r6, #40]	; 0x28
                fd->dir_entry.cluster = cluster_num;
            }
        }

        /* write new directory entry */
        fd->dir_entry.file_size = size;
   14fb4:	e586802c 	str	r8, [r6, #44]	; 0x2c
        if(size == 0)
            fd->dir_entry.cluster = 0;
        if(!fat_write_dir_entry(fd->fs, &fd->dir_entry))
   14fb8:	e5960000 	ldr	r0, [r6]
   14fbc:	e2861004 	add	r1, r6, #4
   14fc0:	ebfffd02 	bl	143d0 <fat_write_dir_entry>
   14fc4:	e3500000 	cmp	r0, #0
   14fc8:	0affffd6 	beq	14f28 <fat_resize_file+0x10>
            return 0;

        if(size == 0)
   14fcc:	e3580000 	cmp	r8, #0
        {
            /* free all clusters of file */
            fat_free_clusters(fd->fs, cluster_num);
   14fd0:	05960000 	ldreq	r0, [r6]
   14fd4:	01a01007 	moveq	r1, r7
        if(size == 0)
            fd->dir_entry.cluster = 0;
        if(!fat_write_dir_entry(fd->fs, &fd->dir_entry))
            return 0;

        if(size == 0)
   14fd8:	0a00001f 	beq	1505c <fat_resize_file+0x144>
        {
            /* free all clusters of file */
            fat_free_clusters(fd->fs, cluster_num);
        }
        else if(size_new <= cluster_size)
   14fdc:	e1550004 	cmp	r5, r4
   14fe0:	8a00001e 	bhi	15060 <fat_resize_file+0x148>
        {
            /* free all clusters no longer needed */
            fat_terminate_clusters(fd->fs, cluster_num);
   14fe4:	e596a000 	ldr	sl, [r6]
 * \returns 0 on failure, 1 on success.
 * \see fat_free_clusters
 */
uint8_t fat_terminate_clusters(struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
   14fe8:	e35a0000 	cmp	sl, #0
   14fec:	13570001 	cmpne	r7, #1
   14ff0:	9a00001a 	bls	15060 <fat_resize_file+0x148>
        return 0;

    /* fetch next cluster before overwriting the cluster entry */
    cluster_t cluster_num_next = fat_get_next_cluster(fs, cluster_num);
   14ff4:	e1a01007 	mov	r1, r7
   14ff8:	e1a0000a 	mov	r0, sl
   14ffc:	ebfffbab 	bl	13eb0 <fat_get_next_cluster>

    /* mark cluster as the last one */
#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
   15000:	e59ac000 	ldr	ip, [sl]
   15004:	e5dc3010 	ldrb	r3, [ip, #16]
   15008:	e353000b 	cmp	r3, #11
    {
        uint32_t fat_entry = HTOL32(FAT32_CLUSTER_LAST_MAX);
   1500c:	03e0320f 	mvneq	r3, #-268435456	; 0xf0000000
            return 0;
    }
    else
#endif
    {
        uint16_t fat_entry = HTOL16(FAT16_CLUSTER_LAST_MAX);
   15010:	13e03000 	mvnne	r3, #0

    /* mark cluster as the last one */
#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
    {
        uint32_t fat_entry = HTOL32(FAT32_CLUSTER_LAST_MAX);
   15014:	e28d2008 	add	r2, sp, #8
{
    if(!fs || cluster_num < 2)
        return 0;

    /* fetch next cluster before overwriting the cluster entry */
    cluster_t cluster_num_next = fat_get_next_cluster(fs, cluster_num);
   15018:	e1a09000 	mov	r9, r0
   1501c:	e28a100c 	add	r1, sl, #12
   15020:	e8910003 	ldm	r1, {r0, r1}

    /* mark cluster as the last one */
#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
    {
        uint32_t fat_entry = HTOL32(FAT32_CLUSTER_LAST_MAX);
   15024:	05223004 	streq	r3, [r2, #-4]!
            return 0;
    }
    else
#endif
    {
        uint16_t fat_entry = HTOL16(FAT16_CLUSTER_LAST_MAX);
   15028:	116230b6 	strhne	r3, [r2, #-6]!
    /* mark cluster as the last one */
#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
    {
        uint32_t fat_entry = HTOL32(FAT32_CLUSTER_LAST_MAX);
        if(!fs->partition->device_write(fs->header.fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
   1502c:	03a03004 	moveq	r3, #4
    }
    else
#endif
    {
        uint16_t fat_entry = HTOL16(FAT16_CLUSTER_LAST_MAX);
        if(!fs->partition->device_write(fs->header.fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
   15030:	13a03002 	movne	r3, #2
   15034:	e0a10793 	umlal	r0, r1, r3, r7
   15038:	e59cc008 	ldr	ip, [ip, #8]
   1503c:	e1a0e00f 	mov	lr, pc
   15040:	e12fff1c 	bx	ip
   15044:	e3500000 	cmp	r0, #0
   15048:	0a000004 	beq	15060 <fat_resize_file+0x148>
            return 0;
    }

    /* free remaining clusters */
    if(cluster_num_next)
   1504c:	e3590000 	cmp	r9, #0
   15050:	0a000002 	beq	15060 <fat_resize_file+0x148>
        return fat_free_clusters(fs, cluster_num_next);
   15054:	e1a0000a 	mov	r0, sl
   15058:	e1a01009 	mov	r1, r9
   1505c:	ebfffbc8 	bl	13f84 <fat_free_clusters>
        }

    } while(0);

    /* correct file position */
    if(size < fd->pos)
   15060:	e2865038 	add	r5, r6, #56	; 0x38
   15064:	e8950030 	ldm	r5, {r4, r5}
   15068:	e1a02008 	mov	r2, r8
   1506c:	e3a03000 	mov	r3, #0
   15070:	e1530005 	cmp	r3, r5
   15074:	01520004 	cmpeq	r2, r4
    {
        fd->pos = size;
   15078:	35862038 	strcc	r2, [r6, #56]	; 0x38
   1507c:	3586303c 	strcc	r3, [r6, #60]	; 0x3c
        fd->pos_cluster = 0;
   15080:	35863040 	strcc	r3, [r6, #64]	; 0x40
    }

    return 1;
   15084:	e3a00001 	mov	r0, #1
}
   15088:	e8bd47fc 	pop	{r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1508c:	e12fff1e 	bx	lr

00015090 <fat_seek_file>:
 * \param[in] whence Affects the way \c offset is interpreted, see above.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_seek_file(struct fat_file_struct* fd, int32_t* offset, uint8_t whence)
{
    if(!fd || !offset)
   15090:	e3500000 	cmp	r0, #0
   15094:	13510000 	cmpne	r1, #0
 *                   to this location before it returns.
 * \param[in] whence Affects the way \c offset is interpreted, see above.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_seek_file(struct fat_file_struct* fd, int32_t* offset, uint8_t whence)
{
   15098:	e92d4070 	push	{r4, r5, r6, lr}
   1509c:	e20220ff 	and	r2, r2, #255	; 0xff
    if(!fd || !offset)
   150a0:	e1a04000 	mov	r4, r0
   150a4:	e1a06001 	mov	r6, r1
   150a8:	13a00000 	movne	r0, #0
   150ac:	03a00001 	moveq	r0, #1
   150b0:	1a000001 	bne	150bc <fat_seek_file+0x2c>
        return 0;
   150b4:	e3a00000 	mov	r0, #0
   150b8:	ea00001d 	b	15134 <fat_seek_file+0xa4>

    uint32_t new_pos = fd->pos;
    switch(whence)
   150bc:	e3520001 	cmp	r2, #1
uint8_t fat_seek_file(struct fat_file_struct* fd, int32_t* offset, uint8_t whence)
{
    if(!fd || !offset)
        return 0;

    uint32_t new_pos = fd->pos;
   150c0:	e5945038 	ldr	r5, [r4, #56]	; 0x38
    switch(whence)
   150c4:	0a000005 	beq	150e0 <fat_seek_file+0x50>
   150c8:	3a000002 	bcc	150d8 <fat_seek_file+0x48>
   150cc:	e3520002 	cmp	r2, #2
   150d0:	1a000017 	bne	15134 <fat_seek_file+0xa4>
   150d4:	ea000003 	b	150e8 <fat_seek_file+0x58>
    {
        case FAT_SEEK_SET:
            new_pos = *offset;
   150d8:	e5915000 	ldr	r5, [r1]
            break;
   150dc:	ea000004 	b	150f4 <fat_seek_file+0x64>
        case FAT_SEEK_CUR:
            new_pos += *offset;
   150e0:	e5913000 	ldr	r3, [r1]
   150e4:	ea000001 	b	150f0 <fat_seek_file+0x60>
            break;
        case FAT_SEEK_END:
            new_pos = fd->dir_entry.file_size + *offset;
   150e8:	e5915000 	ldr	r5, [r1]
   150ec:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   150f0:	e0855003 	add	r5, r5, r3
            break;
        default:
            return 0;
    }

    if(new_pos > fd->dir_entry.file_size
   150f4:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   150f8:	e1550003 	cmp	r5, r3
   150fc:	8a000006 	bhi	1511c <fat_seek_file+0x8c>
       && !fat_resize_file(fd, new_pos)
#endif
       )
        return 0;

    fd->pos = new_pos;
   15100:	e3a03000 	mov	r3, #0
   15104:	e5845038 	str	r5, [r4, #56]	; 0x38
   15108:	e584303c 	str	r3, [r4, #60]	; 0x3c
    fd->pos_cluster = 0;
   1510c:	e5843040 	str	r3, [r4, #64]	; 0x40

    *offset = (int32_t) new_pos;
    return 1;
   15110:	e3a00001 	mov	r0, #1
        return 0;

    fd->pos = new_pos;
    fd->pos_cluster = 0;

    *offset = (int32_t) new_pos;
   15114:	e5865000 	str	r5, [r6]
    return 1;
   15118:	ea000005 	b	15134 <fat_seek_file+0xa4>
            return 0;
    }

    if(new_pos > fd->dir_entry.file_size
#if FAT_WRITE_SUPPORT
       && !fat_resize_file(fd, new_pos)
   1511c:	e1a00004 	mov	r0, r4
   15120:	e1a01005 	mov	r1, r5
   15124:	ebffff7b 	bl	14f18 <fat_resize_file>
   15128:	e3500000 	cmp	r0, #0
   1512c:	1afffff3 	bne	15100 <fat_seek_file+0x70>
   15130:	eaffffdf 	b	150b4 <fat_seek_file+0x24>
    fd->pos = new_pos;
    fd->pos_cluster = 0;

    *offset = (int32_t) new_pos;
    return 1;
}
   15134:	e8bd4070 	pop	{r4, r5, r6, lr}
   15138:	e12fff1e 	bx	lr

0001513c <fat_open_dir>:
 * \returns An opaque directory descriptor on success, 0 on failure.
 * \see fat_close_dir
 */
struct fat_dir_struct* fat_open_dir(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry || !(dir_entry->attributes & FAT_ATTRIB_DIR))
   1513c:	e3500000 	cmp	r0, #0
   15140:	13510000 	cmpne	r1, #0
 * \param[in] dir_entry The directory entry which stands for the directory to open.
 * \returns An opaque directory descriptor on success, 0 on failure.
 * \see fat_close_dir
 */
struct fat_dir_struct* fat_open_dir(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
   15144:	e92d4070 	push	{r4, r5, r6, lr}
    if(!fs || !dir_entry || !(dir_entry->attributes & FAT_ATTRIB_DIR))
   15148:	e1a05001 	mov	r5, r1
   1514c:	e1a06000 	mov	r6, r0
   15150:	13a04000 	movne	r4, #0
   15154:	03a04001 	moveq	r4, #1
   15158:	0a00000a 	beq	15188 <fat_open_dir+0x4c>
   1515c:	e5d13020 	ldrb	r3, [r1, #32]
   15160:	e2133010 	ands	r3, r3, #16
   15164:	0a000007 	beq	15188 <fat_open_dir+0x4c>
#else
    struct fat_dir_struct* dd = fat_dir_handles;
    uint8_t i;
    for(i = 0; i < FAT_DIR_COUNT; ++i)
    {
        if(!dd->fs)
   15168:	e59f305c 	ldr	r3, [pc, #92]	; 151cc <fat_open_dir+0x90>
   1516c:	e5932078 	ldr	r2, [r3, #120]	; 0x78
   15170:	e3520000 	cmp	r2, #0
   15174:	0a000005 	beq	15190 <fat_open_dir+0x54>
   15178:	e59320b8 	ldr	r2, [r3, #184]	; 0xb8
   1517c:	e3520000 	cmp	r2, #0
   15180:	0a000004 	beq	15198 <fat_open_dir+0x5c>
   15184:	ea00000d 	b	151c0 <fat_open_dir+0x84>
 * \see fat_close_dir
 */
struct fat_dir_struct* fat_open_dir(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry || !(dir_entry->attributes & FAT_ATTRIB_DIR))
        return 0;
   15188:	e3a04000 	mov	r4, #0
   1518c:	ea00000b 	b	151c0 <fat_open_dir+0x84>
#if USE_DYNAMIC_MEMORY
    struct fat_dir_struct* dd = malloc(sizeof(*dd));
    if(!dd)
        return 0;
#else
    struct fat_dir_struct* dd = fat_dir_handles;
   15190:	e2834078 	add	r4, r3, #120	; 0x78
   15194:	ea000000 	b	1519c <fat_open_dir+0x60>
    for(i = 0; i < FAT_DIR_COUNT; ++i)
    {
        if(!dd->fs)
            break;

        ++dd;
   15198:	e28340b8 	add	r4, r3, #184	; 0xb8
    }
    if(i >= FAT_DIR_COUNT)
        return 0;
#endif
    
    memcpy(&dd->dir_entry, dir_entry, sizeof(*dir_entry));
   1519c:	e2840004 	add	r0, r4, #4
   151a0:	e1a01005 	mov	r1, r5
   151a4:	e3a02034 	mov	r2, #52	; 0x34
   151a8:	eb0002d4 	bl	15d00 <memcpy>
    dd->fs = fs;
    dd->entry_cluster = dir_entry->cluster;
   151ac:	e5953024 	ldr	r3, [r5, #36]	; 0x24
   151b0:	e5843038 	str	r3, [r4, #56]	; 0x38
    dd->entry_offset = 0;
   151b4:	e3a03000 	mov	r3, #0
    if(i >= FAT_DIR_COUNT)
        return 0;
#endif
    
    memcpy(&dd->dir_entry, dir_entry, sizeof(*dir_entry));
    dd->fs = fs;
   151b8:	e5846000 	str	r6, [r4]
    dd->entry_cluster = dir_entry->cluster;
    dd->entry_offset = 0;
   151bc:	e1c433bc 	strh	r3, [r4, #60]	; 0x3c

    return dd;
}
   151c0:	e1a00004 	mov	r0, r4
   151c4:	e8bd4070 	pop	{r4, r5, r6, lr}
   151c8:	e12fff1e 	bx	lr
   151cc:	4000024c 	.word	0x4000024c

000151d0 <fat_close_dir>:
 * \param[in] dd The directory descriptor to close.
 * \see fat_open_dir
 */
void fat_close_dir(struct fat_dir_struct* dd)
{
    if(dd)
   151d0:	e3500000 	cmp	r0, #0
#if USE_DYNAMIC_MEMORY
        free(dd);
#else
        dd->fs = 0;
   151d4:	13a03000 	movne	r3, #0
   151d8:	15803000 	strne	r3, [r0]
   151dc:	e12fff1e 	bx	lr

000151e0 <fat_reset_dir>:
 * \returns 0 on failure, 1 on success.
 * \see fat_read_dir
 */
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
    if(!dd)
   151e0:	e3500000 	cmp	r0, #0
   151e4:	012fff1e 	bxeq	lr
        return 0;

    dd->entry_cluster = dd->dir_entry.cluster;
   151e8:	e5903028 	ldr	r3, [r0, #40]	; 0x28
   151ec:	e5803038 	str	r3, [r0, #56]	; 0x38
    dd->entry_offset = 0;
   151f0:	e3a03000 	mov	r3, #0
   151f4:	e1c033bc 	strh	r3, [r0, #60]	; 0x3c
    return 1;
   151f8:	e3a00001 	mov	r0, #1
}
   151fc:	e12fff1e 	bx	lr

00015200 <fat_read_dir>:
 * \param[out] dir_entry Pointer to a buffer into which to write the directory entry information.
 * \returns 0 on failure, 1 on success.
 * \see fat_reset_dir
 */
uint8_t fat_read_dir(struct fat_dir_struct* dd, struct fat_dir_entry_struct* dir_entry)
{
   15200:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(!dd || !dir_entry)
   15204:	e3500000 	cmp	r0, #0
   15208:	13510000 	cmpne	r1, #0
 * \param[out] dir_entry Pointer to a buffer into which to write the directory entry information.
 * \returns 0 on failure, 1 on success.
 * \see fat_reset_dir
 */
uint8_t fat_read_dir(struct fat_dir_struct* dd, struct fat_dir_entry_struct* dir_entry)
{
   1520c:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    if(!dd || !dir_entry)
   15210:	e1a05001 	mov	r5, r1
   15214:	e1a07000 	mov	r7, r0
   15218:	13a0a000 	movne	sl, #0
   1521c:	03a0a001 	moveq	sl, #1
   15220:	0a000054 	beq	15378 <fat_read_dir+0x178>
        return 0;

    /* get current position of directory handle */
    struct fat_fs_struct* fs = dd->fs;
   15224:	e5906000 	ldr	r6, [r0]
    const struct fat_header_struct* header = &fs->header;
    uint16_t cluster_size = header->cluster_size;
    cluster_t cluster_num = dd->entry_cluster;
    uint16_t cluster_offset = dd->entry_offset;
   15228:	e1d043bc 	ldrh	r4, [r0, #60]	; 0x3c
        return 0;

    /* get current position of directory handle */
    struct fat_fs_struct* fs = dd->fs;
    const struct fat_header_struct* header = &fs->header;
    uint16_t cluster_size = header->cluster_size;
   1522c:	e1d691ba 	ldrh	r9, [r6, #26]
    cluster_t cluster_num = dd->entry_cluster;
    uint16_t cluster_offset = dd->entry_offset;
    struct fat_read_dir_callback_arg arg;

    if(cluster_offset >= cluster_size)
   15230:	e1540009 	cmp	r4, r9

    /* get current position of directory handle */
    struct fat_fs_struct* fs = dd->fs;
    const struct fat_header_struct* header = &fs->header;
    uint16_t cluster_size = header->cluster_size;
    cluster_t cluster_num = dd->entry_cluster;
   15234:	e5908038 	ldr	r8, [r0, #56]	; 0x38
    uint16_t cluster_offset = dd->entry_offset;
    struct fat_read_dir_callback_arg arg;

    if(cluster_offset >= cluster_size)
   15238:	3a000002 	bcc	15248 <fat_read_dir+0x48>
        /* The latest call hit the border of the last cluster in
         * the chain, but it still returned a directory entry.
         * So we now reset the handle and signal the caller the
         * end of the listing.
         */
        fat_reset_dir(dd);
   1523c:	e1a00007 	mov	r0, r7
   15240:	ebffffe6 	bl	151e0 <fat_reset_dir>
   15244:	ea00004b 	b	15378 <fat_read_dir+0x178>
        return 0;
    }

    /* reset callback arguments */
    memset(&arg, 0, sizeof(arg));
   15248:	e1a0100a 	mov	r1, sl
   1524c:	e3a0200c 	mov	r2, #12
   15250:	e28d0010 	add	r0, sp, #16
   15254:	eb0002b1 	bl	15d20 <memset>
    memset(dir_entry, 0, sizeof(*dir_entry));
   15258:	e1a00005 	mov	r0, r5
   1525c:	e1a0100a 	mov	r1, sl
   15260:	e3a02034 	mov	r2, #52	; 0x34
   15264:	eb0002ad 	bl	15d20 <memset>
    arg.dir_entry = dir_entry;

    /* check if we read from the root directory */
    if(cluster_num == 0)
   15268:	e3580000 	cmp	r8, #0
    }

    /* reset callback arguments */
    memset(&arg, 0, sizeof(arg));
    memset(dir_entry, 0, sizeof(*dir_entry));
    arg.dir_entry = dir_entry;
   1526c:	e58d5010 	str	r5, [sp, #16]

    /* check if we read from the root directory */
    if(cluster_num == 0)
   15270:	1a000037 	bne	15354 <fat_read_dir+0x154>
    {
#if FAT_FAT32_SUPPORT
        if(fs->partition->type == PARTITION_TYPE_FAT32)
   15274:	e5963000 	ldr	r3, [r6]
   15278:	e5d33010 	ldrb	r3, [r3, #16]
   1527c:	e353000b 	cmp	r3, #11
            cluster_num = header->root_dir_cluster;
        else
#endif
            cluster_size = header->cluster_zero_offset - header->root_dir_offset;
   15280:	11d691bc 	ldrhne	r9, [r6, #28]
   15284:	11d632b4 	ldrhne	r3, [r6, #36]	; 0x24
   15288:	10639009 	rsbne	r9, r3, r9
   1528c:	11a09809 	lslne	r9, r9, #16
    /* check if we read from the root directory */
    if(cluster_num == 0)
    {
#if FAT_FAT32_SUPPORT
        if(fs->partition->type == PARTITION_TYPE_FAT32)
            cluster_num = header->root_dir_cluster;
   15290:	0596802c 	ldreq	r8, [r6, #44]	; 0x2c
        else
#endif
            cluster_size = header->cluster_zero_offset - header->root_dir_offset;
   15294:	11a09829 	lsrne	r9, r9, #16
   15298:	ea00002d 	b	15354 <fat_read_dir+0x154>
    /* read entries */
    uint8_t buffer[32];
    while(!arg.finished)
    {
        /* read directory entries up to the cluster border */
        uint16_t cluster_left = cluster_size - cluster_offset;
   1529c:	e06a3009 	rsb	r3, sl, r9
        offset_t pos = cluster_offset;
   152a0:	e3a05000 	mov	r5, #0
    /* read entries */
    uint8_t buffer[32];
    while(!arg.finished)
    {
        /* read directory entries up to the cluster border */
        uint16_t cluster_left = cluster_size - cluster_offset;
   152a4:	e1a03803 	lsl	r3, r3, #16
        offset_t pos = cluster_offset;
        if(cluster_num == 0)
   152a8:	e1580005 	cmp	r8, r5
    /* read entries */
    uint8_t buffer[32];
    while(!arg.finished)
    {
        /* read directory entries up to the cluster border */
        uint16_t cluster_left = cluster_size - cluster_offset;
   152ac:	e1a03823 	lsr	r3, r3, #16
        offset_t pos = cluster_offset;
        if(cluster_num == 0)
   152b0:	1a000004 	bne	152c8 <fat_read_dir+0xc8>
            pos += header->root_dir_offset;
   152b4:	e2861024 	add	r1, r6, #36	; 0x24
   152b8:	e8910003 	ldm	r1, {r0, r1}
   152bc:	e090000a 	adds	r0, r0, sl
   152c0:	e0a11005 	adc	r1, r1, r5
   152c4:	ea000006 	b	152e4 <fat_read_dir+0xe4>
        else
            pos += fat_cluster_offset(fs, cluster_num);
   152c8:	e1a00006 	mov	r0, r6
   152cc:	e1a01008 	mov	r1, r8
   152d0:	e58d300c 	str	r3, [sp, #12]
   152d4:	ebfffc16 	bl	14334 <fat_cluster_offset>
   152d8:	e59d300c 	ldr	r3, [sp, #12]
   152dc:	e090000a 	adds	r0, r0, sl
   152e0:	e0a11005 	adc	r1, r1, r5

        arg.bytes_read = 0;
        if(!fs->partition->device_read_interval(pos,
   152e4:	e596c000 	ldr	ip, [r6]
        if(cluster_num == 0)
            pos += header->root_dir_offset;
        else
            pos += fat_cluster_offset(fs, cluster_num);

        arg.bytes_read = 0;
   152e8:	e3a04000 	mov	r4, #0
        if(!fs->partition->device_read_interval(pos,
   152ec:	e88d0808 	stm	sp, {r3, fp}
   152f0:	e28d3010 	add	r3, sp, #16
   152f4:	e58d3008 	str	r3, [sp, #8]
        if(cluster_num == 0)
            pos += header->root_dir_offset;
        else
            pos += fat_cluster_offset(fs, cluster_num);

        arg.bytes_read = 0;
   152f8:	e58d4014 	str	r4, [sp, #20]
        if(!fs->partition->device_read_interval(pos,
   152fc:	e28d201c 	add	r2, sp, #28
   15300:	e3a03020 	mov	r3, #32
   15304:	e59cc004 	ldr	ip, [ip, #4]
   15308:	e1a0e00f 	mov	lr, pc
   1530c:	e12fff1c 	bx	ip
   15310:	e3500000 	cmp	r0, #0
   15314:	0a000018 	beq	1537c <fat_read_dir+0x17c>
                                                fat_dir_entry_read_callback,
                                                &arg)
          )
            return 0;

        cluster_offset += arg.bytes_read;
   15318:	e59d3014 	ldr	r3, [sp, #20]
   1531c:	e08aa003 	add	sl, sl, r3
   15320:	e1a0a80a 	lsl	sl, sl, #16
   15324:	e1a0a82a 	lsr	sl, sl, #16

        if(cluster_offset >= cluster_size)
   15328:	e15a0009 	cmp	sl, r9
   1532c:	3a00000a 	bcc	1535c <fat_read_dir+0x15c>
        {
            /* we reached the cluster border and switch to the next cluster */

            /* get number of next cluster */
            if((cluster_num = fat_get_next_cluster(fs, cluster_num)) != 0)
   15330:	e1a01008 	mov	r1, r8
   15334:	e1a00006 	mov	r0, r6
   15338:	ebfffadc 	bl	13eb0 <fat_get_next_cluster>
   1533c:	e2508000 	subs	r8, r0, #0
   15340:	1a000004 	bne	15358 <fat_read_dir+0x158>
                cluster_offset = 0;
                continue;
            }

            /* we are at the end of the cluster chain */
            if(!arg.finished)
   15344:	e5dd3019 	ldrb	r3, [sp, #25]
   15348:	e1530004 	cmp	r3, r4
   1534c:	1a000005 	bne	15368 <fat_read_dir+0x168>
   15350:	eaffffb9 	b	1523c <fat_read_dir+0x3c>
            pos += header->root_dir_offset;
        else
            pos += fat_cluster_offset(fs, cluster_num);

        arg.bytes_read = 0;
        if(!fs->partition->device_read_interval(pos,
   15354:	e59fb02c 	ldr	fp, [pc, #44]	; 15388 <fat_read_dir+0x188>
 * \param[out] dir_entry Pointer to a buffer into which to write the directory entry information.
 * \returns 0 on failure, 1 on success.
 * \see fat_reset_dir
 */
uint8_t fat_read_dir(struct fat_dir_struct* dd, struct fat_dir_entry_struct* dir_entry)
{
   15358:	e1a0a004 	mov	sl, r4
            cluster_size = header->cluster_zero_offset - header->root_dir_offset;
    }

    /* read entries */
    uint8_t buffer[32];
    while(!arg.finished)
   1535c:	e5dd3019 	ldrb	r3, [sp, #25]
   15360:	e3530000 	cmp	r3, #0
   15364:	0affffcc 	beq	1529c <fat_read_dir+0x9c>

            break;
        }
    }

    dd->entry_cluster = cluster_num;
   15368:	e5878038 	str	r8, [r7, #56]	; 0x38
    dd->entry_offset = cluster_offset;
   1536c:	e1c7a3bc 	strh	sl, [r7, #60]	; 0x3c

    return arg.finished;
   15370:	e5dd0019 	ldrb	r0, [sp, #25]
   15374:	ea000000 	b	1537c <fat_read_dir+0x17c>
 * \see fat_reset_dir
 */
uint8_t fat_read_dir(struct fat_dir_struct* dd, struct fat_dir_entry_struct* dir_entry)
{
    if(!dd || !dir_entry)
        return 0;
   15378:	e3a00000 	mov	r0, #0

    dd->entry_cluster = cluster_num;
    dd->entry_offset = cluster_offset;

    return arg.finished;
}
   1537c:	e28dd03c 	add	sp, sp, #60	; 0x3c
   15380:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15384:	e12fff1e 	bx	lr
   15388:	00013c78 	.word	0x00013c78

0001538c <fat_get_dir_entry_of_path>:
 * \returns 0 on failure, 1 on success.
 * \see fat_read_dir
 */
uint8_t fat_get_dir_entry_of_path(struct fat_fs_struct* fs, const char* path, struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !path || path[0] == '\0' || !dir_entry)
   1538c:	e3500000 	cmp	r0, #0
   15390:	13510000 	cmpne	r1, #0
 * \param[out] dir_entry The directory entry to fill.
 * \returns 0 on failure, 1 on success.
 * \see fat_read_dir
 */
uint8_t fat_get_dir_entry_of_path(struct fat_fs_struct* fs, const char* path, struct fat_dir_entry_struct* dir_entry)
{
   15394:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15398:	e1a05002 	mov	r5, r2
    if(!fs || !path || path[0] == '\0' || !dir_entry)
   1539c:	e1a04001 	mov	r4, r1
   153a0:	e1a08000 	mov	r8, r0
   153a4:	0a000041 	beq	154b0 <fat_get_dir_entry_of_path+0x124>
   153a8:	e5d13000 	ldrb	r3, [r1]
   153ac:	e3530000 	cmp	r3, #0
   153b0:	0a00003e 	beq	154b0 <fat_get_dir_entry_of_path+0x124>
   153b4:	e3520000 	cmp	r2, #0
   153b8:	0a00003c 	beq	154b0 <fat_get_dir_entry_of_path+0x124>
        return 0;

    if(path[0] == '/')
   153bc:	e353002f 	cmp	r3, #47	; 0x2f
        ++path;
   153c0:	02814001 	addeq	r4, r1, #1

    /* begin with the root directory */
    memset(dir_entry, 0, sizeof(*dir_entry));
   153c4:	e1a00002 	mov	r0, r2
   153c8:	e3a01000 	mov	r1, #0
   153cc:	e3a02034 	mov	r2, #52	; 0x34
   153d0:	eb000252 	bl	15d20 <memset>
    dir_entry->attributes = FAT_ATTRIB_DIR;
   153d4:	e3a03010 	mov	r3, #16
   153d8:	e5c53020 	strb	r3, [r5, #32]

    while(1)
    {
        if(path[0] == '\0')
   153dc:	e5d43000 	ldrb	r3, [r4]
   153e0:	e3530000 	cmp	r3, #0
   153e4:	1a000001 	bne	153f0 <fat_get_dir_entry_of_path+0x64>
            return 1;
   153e8:	e3a00001 	mov	r0, #1
   153ec:	ea000030 	b	154b4 <fat_get_dir_entry_of_path+0x128>

        struct fat_dir_struct* dd = fat_open_dir(fs, dir_entry);
   153f0:	e1a00008 	mov	r0, r8
   153f4:	e1a01005 	mov	r1, r5
   153f8:	ebffff4f 	bl	1513c <fat_open_dir>
        if(!dd)
   153fc:	e2507000 	subs	r7, r0, #0
   15400:	0a00002a 	beq	154b0 <fat_get_dir_entry_of_path+0x124>
            break;

        /* extract the next hierarchy we will search for */
        const char* sub_path = strchr(path, '/');
   15404:	e1a00004 	mov	r0, r4
   15408:	e3a0102f 	mov	r1, #47	; 0x2f
   1540c:	eb00024a 	bl	15d3c <strchr>
        uint8_t length_to_sep;
        if(sub_path)
   15410:	e3500000 	cmp	r0, #0
        {
            length_to_sep = sub_path - path;
   15414:	10646000 	rsbne	r6, r4, r0
   15418:	120660ff 	andne	r6, r6, #255	; 0xff
            ++sub_path;
   1541c:	1280a001 	addne	sl, r0, #1
   15420:	1a000017 	bne	15484 <fat_get_dir_entry_of_path+0xf8>
        }
        else
        {
            length_to_sep = strlen(path);
   15424:	e1a00004 	mov	r0, r4
   15428:	eb00025c 	bl	15da0 <strlen>
   1542c:	e20060ff 	and	r6, r0, #255	; 0xff
            sub_path = path + length_to_sep;
   15430:	e084a006 	add	sl, r4, r6
   15434:	ea000012 	b	15484 <fat_get_dir_entry_of_path+0xf8>
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
   15438:	e1a00005 	mov	r0, r5
   1543c:	eb000257 	bl	15da0 <strlen>
   15440:	e1500006 	cmp	r0, r6
   15444:	1a00000e 	bne	15484 <fat_get_dir_entry_of_path+0xf8>
                strncmp(path, dir_entry->long_name, length_to_sep) != 0))
   15448:	e1a00004 	mov	r0, r4
   1544c:	e1a01005 	mov	r1, r5
   15450:	e1a02006 	mov	r2, r6
   15454:	eb000258 	bl	15dbc <strncmp>
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
   15458:	e2509000 	subs	r9, r0, #0
   1545c:	1a000008 	bne	15484 <fat_get_dir_entry_of_path+0xf8>
                strncmp(path, dir_entry->long_name, length_to_sep) != 0))
                continue;

            fat_close_dir(dd);
   15460:	e1a00007 	mov	r0, r7
   15464:	ebffff59 	bl	151d0 <fat_close_dir>
            dd = 0;

            if(path[length_to_sep] == '\0')
   15468:	e7d43006 	ldrb	r3, [r4, r6]
   1546c:	e3530000 	cmp	r3, #0
   15470:	0affffdc 	beq	153e8 <fat_get_dir_entry_of_path+0x5c>
                /* we iterated through the whole path and have found the file */
                return 1;

            if(dir_entry->attributes & FAT_ATTRIB_DIR)
   15474:	e5d53020 	ldrb	r3, [r5, #32]
   15478:	e3130010 	tst	r3, #16
   1547c:	1a000006 	bne	1549c <fat_get_dir_entry_of_path+0x110>
   15480:	ea00000a 	b	154b0 <fat_get_dir_entry_of_path+0x124>
            length_to_sep = strlen(path);
            sub_path = path + length_to_sep;
        }
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
   15484:	e1a00007 	mov	r0, r7
   15488:	e1a01005 	mov	r1, r5
   1548c:	ebffff5b 	bl	15200 <fat_read_dir>
   15490:	e3500000 	cmp	r0, #0
   15494:	1affffe7 	bne	15438 <fat_get_dir_entry_of_path+0xac>
   15498:	ea000001 	b	154a4 <fat_get_dir_entry_of_path+0x118>
                return 1;

            if(dir_entry->attributes & FAT_ATTRIB_DIR)
            {
                /* we found a parent directory of the file we are searching for */
                path = sub_path;
   1549c:	e1a0400a 	mov	r4, sl
            if((strlen(dir_entry->long_name) != length_to_sep ||
                strncmp(path, dir_entry->long_name, length_to_sep) != 0))
                continue;

            fat_close_dir(dd);
            dd = 0;
   154a0:	e1a07009 	mov	r7, r9

            /* a parent of the file exists, but not the file itself */
            return 0;
        }

        fat_close_dir(dd);
   154a4:	e1a00007 	mov	r0, r7
   154a8:	ebffff48 	bl	151d0 <fat_close_dir>
    }
   154ac:	eaffffca 	b	153dc <fat_get_dir_entry_of_path+0x50>
 * \see fat_read_dir
 */
uint8_t fat_get_dir_entry_of_path(struct fat_fs_struct* fs, const char* path, struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !path || path[0] == '\0' || !dir_entry)
        return 0;
   154b0:	e3a00000 	mov	r0, #0

        fat_close_dir(dd);
    }
    
    return 0;
}
   154b4:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   154b8:	e12fff1e 	bx	lr

000154bc <fat_create_file>:
 * \returns 0 on failure, 1 on success, 2 if the file already existed.
 * \see fat_delete_file
 */
uint8_t fat_create_file(struct fat_dir_struct* parent, const char* file, struct fat_dir_entry_struct* dir_entry)
{
    if(!parent || !file || !file[0] || !dir_entry)
   154bc:	e3500000 	cmp	r0, #0
   154c0:	13510000 	cmpne	r1, #0
 * \param[out] dir_entry The directory entry to fill for the new (or existing) file.
 * \returns 0 on failure, 1 on success, 2 if the file already existed.
 * \see fat_delete_file
 */
uint8_t fat_create_file(struct fat_dir_struct* parent, const char* file, struct fat_dir_entry_struct* dir_entry)
{
   154c4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   154c8:	e1a06002 	mov	r6, r2
    if(!parent || !file || !file[0] || !dir_entry)
   154cc:	e1a05001 	mov	r5, r1
   154d0:	e1a04000 	mov	r4, r0
   154d4:	1a000001 	bne	154e0 <fat_create_file+0x24>
        return 0;
   154d8:	e3a00000 	mov	r0, #0
   154dc:	ea00002c 	b	15594 <fat_create_file+0xd8>
 * \returns 0 on failure, 1 on success, 2 if the file already existed.
 * \see fat_delete_file
 */
uint8_t fat_create_file(struct fat_dir_struct* parent, const char* file, struct fat_dir_entry_struct* dir_entry)
{
    if(!parent || !file || !file[0] || !dir_entry)
   154e0:	e5d13000 	ldrb	r3, [r1]
   154e4:	e3530000 	cmp	r3, #0
   154e8:	0afffffa 	beq	154d8 <fat_create_file+0x1c>
   154ec:	e3520000 	cmp	r2, #0
   154f0:	0afffff8 	beq	154d8 <fat_create_file+0x1c>
        return 0;

    /* check if the file already exists */
    while(1)
    {
        if(!fat_read_dir(parent, dir_entry))
   154f4:	e1a01006 	mov	r1, r6
   154f8:	e1a00004 	mov	r0, r4
   154fc:	ebffff3f 	bl	15200 <fat_read_dir>
   15500:	e2501000 	subs	r1, r0, #0
   15504:	0a000008 	beq	1552c <fat_create_file+0x70>
            break;

        if(strcmp(file, dir_entry->long_name) == 0)
   15508:	e1a00005 	mov	r0, r5
   1550c:	e1a01006 	mov	r1, r6
   15510:	eb000215 	bl	15d6c <strcmp>
   15514:	e3500000 	cmp	r0, #0
   15518:	1afffff5 	bne	154f4 <fat_create_file+0x38>
        {
            fat_reset_dir(parent);
   1551c:	e1a00004 	mov	r0, r4
   15520:	ebffff2e 	bl	151e0 <fat_reset_dir>
            return 2;
   15524:	e3a00002 	mov	r0, #2
   15528:	ea000019 	b	15594 <fat_create_file+0xd8>
        }
    }

    struct fat_fs_struct* fs = parent->fs;
   1552c:	e5947000 	ldr	r7, [r4]

    /* prepare directory entry with values already known */
    memset(dir_entry, 0, sizeof(*dir_entry));
   15530:	e3a02034 	mov	r2, #52	; 0x34
   15534:	e1a00006 	mov	r0, r6
   15538:	eb0001f8 	bl	15d20 <memset>
    strncpy(dir_entry->long_name, file, sizeof(dir_entry->long_name) - 1);
   1553c:	e1a01005 	mov	r1, r5
   15540:	e1a00006 	mov	r0, r6
   15544:	e3a0201f 	mov	r2, #31
   15548:	eb000234 	bl	15e20 <strncpy>
 * \param[in] dir_entry The directory entry for which to search space.
 * \returns 0 on failure, a device offset on success.
 */
offset_t fat_find_offset_for_dir_entry(struct fat_fs_struct* fs, const struct fat_dir_struct* parent, const struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry)
   1554c:	e3570000 	cmp	r7, #0
        return 0;
   15550:	03a00000 	moveq	r0, #0
   15554:	03a01000 	moveq	r1, #0
 * \param[in] dir_entry The directory entry for which to search space.
 * \returns 0 on failure, a device offset on success.
 */
offset_t fat_find_offset_for_dir_entry(struct fat_fs_struct* fs, const struct fat_dir_struct* parent, const struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry)
   15558:	0a000004 	beq	15570 <fat_create_file+0xb4>
   1555c:	e1a00007 	mov	r0, r7
   15560:	e1a01004 	mov	r1, r4
   15564:	e1a02006 	mov	r2, r6
   15568:	ebfffc3d 	bl	14664 <fat_find_offset_for_dir_entry.part.4>
   1556c:	eaffffff 	b	15570 <fat_create_file+0xb4>
    /* prepare directory entry with values already known */
    memset(dir_entry, 0, sizeof(*dir_entry));
    strncpy(dir_entry->long_name, file, sizeof(dir_entry->long_name) - 1);

    /* find place where to store directory entry */
    if(!(dir_entry->entry_offset = fat_find_offset_for_dir_entry(fs, parent, dir_entry)))
   15570:	e1903001 	orrs	r3, r0, r1
   15574:	e586002c 	str	r0, [r6, #44]	; 0x2c
   15578:	e5861030 	str	r1, [r6, #48]	; 0x30
   1557c:	0affffd5 	beq	154d8 <fat_create_file+0x1c>
        return 0;
    
    /* write directory entry to disk */
    if(!fat_write_dir_entry(fs, dir_entry))
   15580:	e1a00007 	mov	r0, r7
   15584:	e1a01006 	mov	r1, r6
   15588:	ebfffb90 	bl	143d0 <fat_write_dir_entry>
 * \see fat_delete_file
 */
uint8_t fat_create_file(struct fat_dir_struct* parent, const char* file, struct fat_dir_entry_struct* dir_entry)
{
    if(!parent || !file || !file[0] || !dir_entry)
        return 0;
   1558c:	e2900000 	adds	r0, r0, #0
   15590:	13a00001 	movne	r0, #1
    /* write directory entry to disk */
    if(!fat_write_dir_entry(fs, dir_entry))
        return 0;
    
    return 1;
}
   15594:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   15598:	e12fff1e 	bx	lr

0001559c <fat_delete_file>:
 * \returns 0 on failure, 1 on success.
 * \see fat_create_file
 */
uint8_t fat_delete_file(struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry)
   1559c:	e3500000 	cmp	r0, #0
   155a0:	13510000 	cmpne	r1, #0
 * \param[in] dir_entry The directory entry of the file to delete.
 * \returns 0 on failure, 1 on success.
 * \see fat_create_file
 */
uint8_t fat_delete_file(struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
{
   155a4:	e92d47f7 	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, lr}
    if(!fs || !dir_entry)
   155a8:	e1a0a001 	mov	sl, r1
   155ac:	e1a08000 	mov	r8, r0
   155b0:	0a00002c 	beq	15668 <fat_delete_file+0xcc>
        return 0;

    /* get offset of the file's directory entry */
    offset_t dir_entry_offset = dir_entry->entry_offset;
   155b4:	e281502c 	add	r5, r1, #44	; 0x2c
   155b8:	e8950030 	ldm	r5, {r4, r5}
    if(!dir_entry_offset)
   155bc:	e1943005 	orrs	r3, r4, r5
   155c0:	0a000028 	beq	15668 <fat_delete_file+0xcc>
        /* read directory entry */
        if(!fs->partition->device_read(dir_entry_offset, buffer, sizeof(buffer)))
            return 0;
        
        /* mark the directory entry as deleted */
        buffer[0] = FAT_DIRENTRY_DELETED;
   155c4:	e3e0901a 	mvn	r9, #26

        /* check if we deleted the whole entry */
        if(buffer[11] != 0x0f)
            break;

        dir_entry_offset += 32;
   155c8:	e3a06020 	mov	r6, #32
   155cc:	e3a07000 	mov	r7, #0
#if FAT_LFN_SUPPORT
    uint8_t buffer[12];
    while(1)
    {
        /* read directory entry */
        if(!fs->partition->device_read(dir_entry_offset, buffer, sizeof(buffer)))
   155d0:	e598c000 	ldr	ip, [r8]
   155d4:	e1a00004 	mov	r0, r4
   155d8:	e1a01005 	mov	r1, r5
   155dc:	e1a0200d 	mov	r2, sp
   155e0:	e3a0300c 	mov	r3, #12
   155e4:	e59cc000 	ldr	ip, [ip]
   155e8:	e1a0e00f 	mov	lr, pc
   155ec:	e12fff1c 	bx	ip
   155f0:	e3500000 	cmp	r0, #0
   155f4:	0a00001b 	beq	15668 <fat_delete_file+0xcc>
            return 0;
        
        /* mark the directory entry as deleted */
        buffer[0] = FAT_DIRENTRY_DELETED;
   155f8:	e5cd9000 	strb	r9, [sp]
        
        /* write back entry */
        if(!fs->partition->device_write(dir_entry_offset, buffer, sizeof(buffer)))
   155fc:	e598c000 	ldr	ip, [r8]
   15600:	e1a00004 	mov	r0, r4
   15604:	e1a01005 	mov	r1, r5
   15608:	e1a0200d 	mov	r2, sp
   1560c:	e3a0300c 	mov	r3, #12
   15610:	e59cc008 	ldr	ip, [ip, #8]
   15614:	e1a0e00f 	mov	lr, pc
   15618:	e12fff1c 	bx	ip
   1561c:	e3500000 	cmp	r0, #0
   15620:	0a000010 	beq	15668 <fat_delete_file+0xcc>
            return 0;

        /* check if we deleted the whole entry */
        if(buffer[11] != 0x0f)
   15624:	e5dd300b 	ldrb	r3, [sp, #11]
   15628:	e353000f 	cmp	r3, #15
   1562c:	1a000002 	bne	1563c <fat_delete_file+0xa0>
            break;

        dir_entry_offset += 32;
   15630:	e0944006 	adds	r4, r4, r6
   15634:	e0a55007 	adc	r5, r5, r7
   15638:	eaffffe4 	b	155d0 <fat_delete_file+0x34>
#endif

    /* We deleted the directory entry. The next thing to do is
     * marking all occupied clusters as free.
     */
    return (dir_entry->cluster == 0 || fat_free_clusters(fs, dir_entry->cluster));
   1563c:	e59a1024 	ldr	r1, [sl, #36]	; 0x24
   15640:	e3510000 	cmp	r1, #0
   15644:	03a00001 	moveq	r0, #1
   15648:	0a000004 	beq	15660 <fat_delete_file+0xc4>
   1564c:	e1a00008 	mov	r0, r8
   15650:	ebfffa4b 	bl	13f84 <fat_free_clusters>
   15654:	e2900000 	adds	r0, r0, #0
   15658:	13a00001 	movne	r0, #1
   1565c:	eaffffff 	b	15660 <fat_delete_file+0xc4>
   15660:	e20000ff 	and	r0, r0, #255	; 0xff
   15664:	ea000000 	b	1566c <fat_delete_file+0xd0>
 * \see fat_create_file
 */
uint8_t fat_delete_file(struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry)
        return 0;
   15668:	e3a00000 	mov	r0, #0

    /* We deleted the directory entry. The next thing to do is
     * marking all occupied clusters as free.
     */
    return (dir_entry->cluster == 0 || fat_free_clusters(fs, dir_entry->cluster));
}
   1566c:	e8bd47fe 	pop	{r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   15670:	e12fff1e 	bx	lr

00015674 <fat_move_file>:
 * \param[in] file_new The file's new name.
 * \returns 0 on failure, 1 on success.
 * \see fat_create_file, fat_delete_file, fat_move_dir
 */
uint8_t fat_move_file(struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry, struct fat_dir_struct* parent_new, const char* file_new)
{
   15674:	e92d4070 	push	{r4, r5, r6, lr}
    if(!fs || !dir_entry || !parent_new || (file_new && !file_new[0]))
   15678:	e3500000 	cmp	r0, #0
   1567c:	13510000 	cmpne	r1, #0
 * \param[in] file_new The file's new name.
 * \returns 0 on failure, 1 on success.
 * \see fat_create_file, fat_delete_file, fat_move_dir
 */
uint8_t fat_move_file(struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry, struct fat_dir_struct* parent_new, const char* file_new)
{
   15680:	e24dd034 	sub	sp, sp, #52	; 0x34
    if(!fs || !dir_entry || !parent_new || (file_new && !file_new[0]))
   15684:	e1a04001 	mov	r4, r1
   15688:	e1a05000 	mov	r5, r0
   1568c:	1a000001 	bne	15698 <fat_move_file+0x24>
        return 0;
   15690:	e3a00000 	mov	r0, #0
   15694:	ea000032 	b	15764 <fat_move_file+0xf0>
 * \returns 0 on failure, 1 on success.
 * \see fat_create_file, fat_delete_file, fat_move_dir
 */
uint8_t fat_move_file(struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry, struct fat_dir_struct* parent_new, const char* file_new)
{
    if(!fs || !dir_entry || !parent_new || (file_new && !file_new[0]))
   15698:	e3520000 	cmp	r2, #0
   1569c:	0afffffb 	beq	15690 <fat_move_file+0x1c>
   156a0:	e3530000 	cmp	r3, #0
   156a4:	0a000002 	beq	156b4 <fat_move_file+0x40>
   156a8:	e5d31000 	ldrb	r1, [r3]
   156ac:	e3510000 	cmp	r1, #0
   156b0:	0afffff6 	beq	15690 <fat_move_file+0x1c>
        return 0;
    if(fs != parent_new->fs)
   156b4:	e5921000 	ldr	r1, [r2]
   156b8:	e1550001 	cmp	r5, r1
   156bc:	1afffff3 	bne	15690 <fat_move_file+0x1c>
    if(!file_new)
        file_new = dir_entry->long_name;

    /* create file with new file name */
    struct fat_dir_entry_struct dir_entry_new;
    if(!fat_create_file(parent_new, file_new, &dir_entry_new))
   156c0:	e3530000 	cmp	r3, #0
   156c4:	e1a00002 	mov	r0, r2
   156c8:	11a01003 	movne	r1, r3
   156cc:	01a01004 	moveq	r1, r4
   156d0:	e1a0200d 	mov	r2, sp
   156d4:	ebffff78 	bl	154bc <fat_create_file>
   156d8:	e3500000 	cmp	r0, #0
   156dc:	0affffeb 	beq	15690 <fat_move_file+0x1c>
        return 0;

    /* copy members of directory entry which do not change with rename */
    dir_entry_new.attributes = dir_entry->attributes;
   156e0:	e5d43020 	ldrb	r3, [r4, #32]
   156e4:	e5cd3020 	strb	r3, [sp, #32]
#if FAT_DATETIME_SUPPORT
    dir_entry_new.modification_time = dir_entry->modification_time;
    dir_entry_new.modification_date = dir_entry->modification_date;
#endif
    dir_entry_new.cluster = dir_entry->cluster;
   156e8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   156ec:	e58d3024 	str	r3, [sp, #36]	; 0x24
    dir_entry_new.file_size = dir_entry->file_size;
   156f0:	e5943028 	ldr	r3, [r4, #40]	; 0x28

    /* make the new file name point to the old file's content */
    if(!fat_write_dir_entry(fs, &dir_entry_new))
   156f4:	e1a00005 	mov	r0, r5
   156f8:	e1a0100d 	mov	r1, sp
#if FAT_DATETIME_SUPPORT
    dir_entry_new.modification_time = dir_entry->modification_time;
    dir_entry_new.modification_date = dir_entry->modification_date;
#endif
    dir_entry_new.cluster = dir_entry->cluster;
    dir_entry_new.file_size = dir_entry->file_size;
   156fc:	e58d3028 	str	r3, [sp, #40]	; 0x28

    /* make the new file name point to the old file's content */
    if(!fat_write_dir_entry(fs, &dir_entry_new))
   15700:	ebfffb32 	bl	143d0 <fat_write_dir_entry>
   15704:	e2506000 	subs	r6, r0, #0
   15708:	1a000003 	bne	1571c <fat_move_file+0xa8>
    {
        fat_delete_file(fs, &dir_entry_new);
   1570c:	e1a00005 	mov	r0, r5
   15710:	e1a0100d 	mov	r1, sp
   15714:	ebffffa0 	bl	1559c <fat_delete_file>
   15718:	eaffffdc 	b	15690 <fat_move_file+0x1c>
        return 0;
    }
    
    /* delete the old file, but not its clusters, which have already been remapped above */
    dir_entry->cluster = 0;
   1571c:	e3a03000 	mov	r3, #0
   15720:	e5843024 	str	r3, [r4, #36]	; 0x24
    if(!fat_delete_file(fs, dir_entry))
   15724:	e1a00005 	mov	r0, r5
   15728:	e1a01004 	mov	r1, r4
   1572c:	ebffff9a 	bl	1559c <fat_delete_file>
   15730:	e3500000 	cmp	r0, #0
   15734:	0affffd5 	beq	15690 <fat_move_file+0x1c>
        return 0;

    *dir_entry = dir_entry_new;
   15738:	e1a0c004 	mov	ip, r4
   1573c:	e1a0400d 	mov	r4, sp
   15740:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
   15744:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   15748:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
   1574c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   15750:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
   15754:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   15758:	e5943000 	ldr	r3, [r4]
   1575c:	e58c3000 	str	r3, [ip]
    return 1;
   15760:	e3a00001 	mov	r0, #1
}
   15764:	e28dd034 	add	sp, sp, #52	; 0x34
   15768:	e8bd4070 	pop	{r4, r5, r6, lr}
   1576c:	e12fff1e 	bx	lr

00015770 <fat_create_dir>:
 * \returns 0 on failure, 1 on success.
 * \see fat_delete_dir
 */
uint8_t fat_create_dir(struct fat_dir_struct* parent, const char* dir, struct fat_dir_entry_struct* dir_entry)
{
    if(!parent || !dir || !dir[0] || !dir_entry)
   15770:	e3500000 	cmp	r0, #0
   15774:	13510000 	cmpne	r1, #0
 * \param[out] dir_entry The directory entry to fill for the new directory.
 * \returns 0 on failure, 1 on success.
 * \see fat_delete_dir
 */
uint8_t fat_create_dir(struct fat_dir_struct* parent, const char* dir, struct fat_dir_entry_struct* dir_entry)
{
   15778:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1577c:	e1a06002 	mov	r6, r2
    if(!parent || !dir || !dir[0] || !dir_entry)
   15780:	e1a0b001 	mov	fp, r1
   15784:	e1a09000 	mov	r9, r0
   15788:	0a000051 	beq	158d4 <fat_create_dir+0x164>
   1578c:	e5d12000 	ldrb	r2, [r1]
   15790:	e3520000 	cmp	r2, #0
   15794:	0a00004e 	beq	158d4 <fat_create_dir+0x164>
   15798:	e3560000 	cmp	r6, #0
   1579c:	1a000008 	bne	157c4 <fat_create_dir+0x54>
   157a0:	ea00004b 	b	158d4 <fat_create_dir+0x164>
        return 0;

    /* check if the file or directory already exists */
    while(fat_read_dir(parent, dir_entry))
    {
        if(strcmp(dir, dir_entry->long_name) == 0)
   157a4:	e1a0000b 	mov	r0, fp
   157a8:	e1a01006 	mov	r1, r6
   157ac:	eb00016e 	bl	15d6c <strcmp>
   157b0:	e2504000 	subs	r4, r0, #0
   157b4:	1a000002 	bne	157c4 <fat_create_dir+0x54>
        {
            fat_reset_dir(parent);
   157b8:	e1a00009 	mov	r0, r9
   157bc:	ebfffe87 	bl	151e0 <fat_reset_dir>
   157c0:	ea000043 	b	158d4 <fat_create_dir+0x164>
{
    if(!parent || !dir || !dir[0] || !dir_entry)
        return 0;

    /* check if the file or directory already exists */
    while(fat_read_dir(parent, dir_entry))
   157c4:	e1a01006 	mov	r1, r6
   157c8:	e1a00009 	mov	r0, r9
   157cc:	ebfffe8b 	bl	15200 <fat_read_dir>
   157d0:	e2501000 	subs	r1, r0, #0
   157d4:	1afffff2 	bne	157a4 <fat_create_dir+0x34>
            fat_reset_dir(parent);
            return 0;
        }
    }

    struct fat_fs_struct* fs = parent->fs;
   157d8:	e5998000 	ldr	r8, [r9]

    /* allocate cluster which will hold directory entries */
    cluster_t dir_cluster = fat_append_clusters(fs, 0, 1);
   157dc:	e3a02001 	mov	r2, #1
   157e0:	e1a00008 	mov	r0, r8
   157e4:	ebfffa4a 	bl	14114 <fat_append_clusters>
    if(!dir_cluster)
   157e8:	e250a000 	subs	sl, r0, #0
   157ec:	0a000038 	beq	158d4 <fat_create_dir+0x164>
 * \param[in] cluster_num The cluster to clear.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_clear_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(cluster_num < 2)
   157f0:	e35a0001 	cmp	sl, #1
   157f4:	81a00008 	movhi	r0, r8
   157f8:	81a0100a 	movhi	r1, sl
   157fc:	8bfffad9 	blhi	14368 <fat_clear_cluster.part.3>
        return 0;

    /* clear cluster to prevent bogus directory entries */
    fat_clear_cluster(fs, dir_cluster);
    
    memset(dir_entry, 0, sizeof(*dir_entry));
   15800:	e3a01000 	mov	r1, #0
   15804:	e3a02034 	mov	r2, #52	; 0x34
   15808:	e1a00006 	mov	r0, r6
   1580c:	eb000143 	bl	15d20 <memset>
    dir_entry->attributes = FAT_ATTRIB_DIR;
   15810:	e3a02010 	mov	r2, #16
   15814:	e5c62020 	strb	r2, [r6, #32]

    /* create "." directory self reference */
    dir_entry->entry_offset = fs->header.cluster_zero_offset +
                              (offset_t) (dir_cluster - 2) * fs->header.cluster_size;
   15818:	e1d821ba 	ldrh	r2, [r8, #26]
    
    memset(dir_entry, 0, sizeof(*dir_entry));
    dir_entry->attributes = FAT_ATTRIB_DIR;

    /* create "." directory self reference */
    dir_entry->entry_offset = fs->header.cluster_zero_offset +
   1581c:	e288101c 	add	r1, r8, #28
   15820:	e8910003 	ldm	r1, {r0, r1}
                              (offset_t) (dir_cluster - 2) * fs->header.cluster_size;
   15824:	e24ac002 	sub	ip, sl, #2
    
    memset(dir_entry, 0, sizeof(*dir_entry));
    dir_entry->attributes = FAT_ATTRIB_DIR;

    /* create "." directory self reference */
    dir_entry->entry_offset = fs->header.cluster_zero_offset +
   15828:	e0a10c92 	umlal	r0, r1, r2, ip
                              (offset_t) (dir_cluster - 2) * fs->header.cluster_size;
    dir_entry->long_name[0] = '.';
   1582c:	e3a0702e 	mov	r7, #46	; 0x2e
    
    memset(dir_entry, 0, sizeof(*dir_entry));
    dir_entry->attributes = FAT_ATTRIB_DIR;

    /* create "." directory self reference */
    dir_entry->entry_offset = fs->header.cluster_zero_offset +
   15830:	e586002c 	str	r0, [r6, #44]	; 0x2c
   15834:	e5861030 	str	r1, [r6, #48]	; 0x30
                              (offset_t) (dir_cluster - 2) * fs->header.cluster_size;
    dir_entry->long_name[0] = '.';
   15838:	e5c67000 	strb	r7, [r6]
    dir_entry->cluster = dir_cluster;
   1583c:	e586a024 	str	sl, [r6, #36]	; 0x24
    if(!fat_write_dir_entry(fs, dir_entry))
   15840:	e1a00008 	mov	r0, r8
   15844:	e1a01006 	mov	r1, r6
   15848:	ebfffae0 	bl	143d0 <fat_write_dir_entry>
   1584c:	e2504000 	subs	r4, r0, #0
   15850:	0a000026 	beq	158f0 <fat_create_dir+0x180>
        fat_free_clusters(fs, dir_cluster);
        return 0;
    }

    /* create ".." parent directory reference */
    dir_entry->entry_offset += 32;
   15854:	e286502c 	add	r5, r6, #44	; 0x2c
   15858:	e8950030 	ldm	r5, {r4, r5}
   1585c:	e3a02020 	mov	r2, #32
   15860:	e0944002 	adds	r4, r4, r2
   15864:	e3a03000 	mov	r3, #0
    dir_entry->long_name[1] = '.';
    dir_entry->cluster = parent->dir_entry.cluster;
   15868:	e5992028 	ldr	r2, [r9, #40]	; 0x28
        fat_free_clusters(fs, dir_cluster);
        return 0;
    }

    /* create ".." parent directory reference */
    dir_entry->entry_offset += 32;
   1586c:	e0a55003 	adc	r5, r5, r3
   15870:	e586402c 	str	r4, [r6, #44]	; 0x2c
   15874:	e5865030 	str	r5, [r6, #48]	; 0x30
    dir_entry->long_name[1] = '.';
   15878:	e5c67001 	strb	r7, [r6, #1]
    dir_entry->cluster = parent->dir_entry.cluster;
   1587c:	e5862024 	str	r2, [r6, #36]	; 0x24
    if(!fat_write_dir_entry(fs, dir_entry))
   15880:	e1a00008 	mov	r0, r8
   15884:	e1a01006 	mov	r1, r6
   15888:	ebfffad0 	bl	143d0 <fat_write_dir_entry>
   1588c:	e2504000 	subs	r4, r0, #0
   15890:	0a000016 	beq	158f0 <fat_create_dir+0x180>
        fat_free_clusters(fs, dir_cluster);
        return 0;
    }

    /* fill directory entry */
    strncpy(dir_entry->long_name, dir, sizeof(dir_entry->long_name) - 1);
   15894:	e1a0100b 	mov	r1, fp
   15898:	e3a0201f 	mov	r2, #31
   1589c:	e1a00006 	mov	r0, r6
   158a0:	eb00015e 	bl	15e20 <strncpy>
    dir_entry->cluster = dir_cluster;
   158a4:	e586a024 	str	sl, [r6, #36]	; 0x24
   158a8:	e1a00008 	mov	r0, r8
   158ac:	e1a01009 	mov	r1, r9
   158b0:	e1a02006 	mov	r2, r6
   158b4:	ebfffb6a 	bl	14664 <fat_find_offset_for_dir_entry.part.4>

    /* find place where to store directory entry */
    if(!(dir_entry->entry_offset = fat_find_offset_for_dir_entry(fs, parent, dir_entry)))
   158b8:	e1903001 	orrs	r3, r0, r1
   158bc:	e586002c 	str	r0, [r6, #44]	; 0x2c
   158c0:	e5861030 	str	r1, [r6, #48]	; 0x30
    {
        fat_free_clusters(fs, dir_cluster);
   158c4:	e1a00008 	mov	r0, r8
    /* fill directory entry */
    strncpy(dir_entry->long_name, dir, sizeof(dir_entry->long_name) - 1);
    dir_entry->cluster = dir_cluster;

    /* find place where to store directory entry */
    if(!(dir_entry->entry_offset = fat_find_offset_for_dir_entry(fs, parent, dir_entry)))
   158c8:	1a000003 	bne	158dc <fat_create_dir+0x16c>
    {
        fat_free_clusters(fs, dir_cluster);
   158cc:	e1a0100a 	mov	r1, sl
   158d0:	ebfff9ab 	bl	13f84 <fat_free_clusters>
        return 0;
   158d4:	e3a00000 	mov	r0, #0
   158d8:	ea000006 	b	158f8 <fat_create_dir+0x188>
    }

    /* write directory to disk */
    if(!fat_write_dir_entry(fs, dir_entry))
   158dc:	e1a01006 	mov	r1, r6
   158e0:	ebfffaba 	bl	143d0 <fat_write_dir_entry>
   158e4:	e2504000 	subs	r4, r0, #0
    {
        fat_free_clusters(fs, dir_cluster);
        return 0;
    }

    return 1;
   158e8:	13a00001 	movne	r0, #1
        fat_free_clusters(fs, dir_cluster);
        return 0;
    }

    /* write directory to disk */
    if(!fat_write_dir_entry(fs, dir_entry))
   158ec:	1a000001 	bne	158f8 <fat_create_dir+0x188>
    {
        fat_free_clusters(fs, dir_cluster);
   158f0:	e1a00008 	mov	r0, r8
   158f4:	eafffff4 	b	158cc <fat_create_dir+0x15c>
        return 0;
    }

    return 1;
}
   158f8:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   158fc:	e12fff1e 	bx	lr

00015900 <fat_get_fs_size>:
 * \param[in] fs The filesystem on which to operate.
 * \returns 0 on failure, the filesystem size in bytes otherwise.
 */
offset_t fat_get_fs_size(const struct fat_fs_struct* fs)
{
    if(!fs)
   15900:	e3500000 	cmp	r0, #0
   15904:	0a000009 	beq	15930 <fat_get_fs_size+0x30>
        return 0;

#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
   15908:	e5903000 	ldr	r3, [r0]
   1590c:	e5d33010 	ldrb	r3, [r3, #16]
   15910:	e353000b 	cmp	r3, #11
   15914:	e5903014 	ldr	r3, [r0, #20]
   15918:	e1d011ba 	ldrh	r1, [r0, #26]
        return (offset_t) (fs->header.fat_size / 4 - 2) * fs->header.cluster_size;
   1591c:	01a03123 	lsreq	r3, r3, #2
    else
#endif
        return (offset_t) (fs->header.fat_size / 2 - 2) * fs->header.cluster_size;
   15920:	11a030a3 	lsrne	r3, r3, #1
   15924:	e2430002 	sub	r0, r3, #2
   15928:	e0832190 	umull	r2, r3, r0, r1
   1592c:	ea000001 	b	15938 <fat_get_fs_size+0x38>
 * \returns 0 on failure, the filesystem size in bytes otherwise.
 */
offset_t fat_get_fs_size(const struct fat_fs_struct* fs)
{
    if(!fs)
        return 0;
   15930:	e3a02000 	mov	r2, #0
   15934:	e3a03000 	mov	r3, #0
    if(fs->partition->type == PARTITION_TYPE_FAT32)
        return (offset_t) (fs->header.fat_size / 4 - 2) * fs->header.cluster_size;
    else
#endif
        return (offset_t) (fs->header.fat_size / 2 - 2) * fs->header.cluster_size;
}
   15938:	e1a00002 	mov	r0, r2
   1593c:	e1a01003 	mov	r1, r3
   15940:	e12fff1e 	bx	lr

00015944 <fat_get_fs_free>:
 *
 * \param[in] fs The filesystem on which to operate.
 * \returns 0 on failure, the free filesystem space in bytes otherwise.
 */
offset_t fat_get_fs_free(const struct fat_fs_struct* fs)
{
   15944:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    if(!fs)
   15948:	e2507000 	subs	r7, r0, #0
 *
 * \param[in] fs The filesystem on which to operate.
 * \returns 0 on failure, the free filesystem space in bytes otherwise.
 */
offset_t fat_get_fs_free(const struct fat_fs_struct* fs)
{
   1594c:	e24dd034 	sub	sp, sp, #52	; 0x34
    if(!fs)
   15950:	1a000002 	bne	15960 <fat_get_fs_free+0x1c>
        return 0;
   15954:	e3a02000 	mov	r2, #0
   15958:	e3a03000 	mov	r3, #0
   1595c:	ea000026 	b	159fc <fat_get_fs_free+0xb8>

    uint8_t fat[32];
    struct fat_usage_count_callback_arg count_arg;
    count_arg.cluster_count = 0;
   15960:	e3a03000 	mov	r3, #0
   15964:	e58d300c 	str	r3, [sp, #12]
    count_arg.buffer_size = sizeof(fat);
   15968:	e3a03020 	mov	r3, #32
   1596c:	e58d3010 	str	r3, [sp, #16]

    offset_t fat_offset = fs->header.fat_offset;
   15970:	e287500c 	add	r5, r7, #12
   15974:	e8950030 	ldm	r5, {r4, r5}
    uint32_t fat_size = fs->header.fat_size;
   15978:	e5976014 	ldr	r6, [r7, #20]
    {
        uintptr_t length = UINT32_MAX - 1;
        if(fat_size < length)
            length = fat_size;

        if(!fs->partition->device_read_interval(fat_offset,
   1597c:	e59fa08c 	ldr	sl, [pc, #140]	; 15a10 <fat_get_fs_free+0xcc>
   15980:	e59f908c 	ldr	r9, [pc, #140]	; 15a14 <fat_get_fs_free+0xd0>
    count_arg.cluster_count = 0;
    count_arg.buffer_size = sizeof(fat);

    offset_t fat_offset = fs->header.fat_offset;
    uint32_t fat_size = fs->header.fat_size;
    while(fat_size > 0)
   15984:	ea000017 	b	159e8 <fat_get_fs_free+0xa4>
    {
        uintptr_t length = UINT32_MAX - 1;
        if(fat_size < length)
            length = fat_size;

        if(!fs->partition->device_read_interval(fat_offset,
   15988:	e5973000 	ldr	r3, [r7]
   1598c:	e593c004 	ldr	ip, [r3, #4]
   15990:	e5d33010 	ldrb	r3, [r3, #16]

    offset_t fat_offset = fs->header.fat_offset;
    uint32_t fat_size = fs->header.fat_size;
    while(fat_size > 0)
    {
        uintptr_t length = UINT32_MAX - 1;
   15994:	e3760003 	cmn	r6, #3
   15998:	91a08006 	movls	r8, r6
   1599c:	83e08001 	mvnhi	r8, #1
        if(fat_size < length)
            length = fat_size;

        if(!fs->partition->device_read_interval(fat_offset,
   159a0:	e3530006 	cmp	r3, #6
   159a4:	11a0300a 	movne	r3, sl
   159a8:	01a03009 	moveq	r3, r9
   159ac:	e58d3004 	str	r3, [sp, #4]
   159b0:	e28d300c 	add	r3, sp, #12
   159b4:	e58d3008 	str	r3, [sp, #8]
   159b8:	e58d8000 	str	r8, [sp]
   159bc:	e1a00004 	mov	r0, r4
   159c0:	e1a01005 	mov	r1, r5
   159c4:	e28d2014 	add	r2, sp, #20
   159c8:	e3a03020 	mov	r3, #32
   159cc:	e1a0e00f 	mov	lr, pc
   159d0:	e12fff1c 	bx	ip
   159d4:	e3500000 	cmp	r0, #0
   159d8:	0affffdd 	beq	15954 <fat_get_fs_free+0x10>
                                                &count_arg
                                               )
          )
            return 0;

        fat_offset += length;
   159dc:	e0944008 	adds	r4, r4, r8
   159e0:	e2a55000 	adc	r5, r5, #0
        fat_size -= length;
   159e4:	e0686006 	rsb	r6, r8, r6
    count_arg.cluster_count = 0;
    count_arg.buffer_size = sizeof(fat);

    offset_t fat_offset = fs->header.fat_offset;
    uint32_t fat_size = fs->header.fat_size;
    while(fat_size > 0)
   159e8:	e3560000 	cmp	r6, #0
   159ec:	1affffe5 	bne	15988 <fat_get_fs_free+0x44>

        fat_offset += length;
        fat_size -= length;
    }

    return (offset_t) count_arg.cluster_count * fs->header.cluster_size;
   159f0:	e1d711ba 	ldrh	r1, [r7, #26]
   159f4:	e59d000c 	ldr	r0, [sp, #12]
   159f8:	e0832190 	umull	r2, r3, r0, r1
}
   159fc:	e1a00002 	mov	r0, r2
   15a00:	e1a01003 	mov	r1, r3
   15a04:	e28dd034 	add	sp, sp, #52	; 0x34
   15a08:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   15a0c:	e12fff1e 	bx	lr
   15a10:	00013be8 	.word	0x00013be8
   15a14:	00013c30 	.word	0x00013c30

00015a18 <find_file_in_dir>:
    return 1;
}
#endif

uint8_t find_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name, struct fat_dir_entry_struct* dir_entry)
{
   15a18:	e92d4070 	push	{r4, r5, r6, lr}
   15a1c:	e1a05001 	mov	r5, r1
   15a20:	e1a06002 	mov	r6, r2
   15a24:	e1a04003 	mov	r4, r3
    while(fat_read_dir(dd, dir_entry))
   15a28:	ea000008 	b	15a50 <find_file_in_dir+0x38>
    {
        if(strcmp(dir_entry->long_name, name) == 0)
   15a2c:	e1a00004 	mov	r0, r4
   15a30:	e1a01006 	mov	r1, r6
   15a34:	eb0000cc 	bl	15d6c <strcmp>
   15a38:	e3500000 	cmp	r0, #0
   15a3c:	1a000003 	bne	15a50 <find_file_in_dir+0x38>
        {
            fat_reset_dir(dd);
   15a40:	e1a00005 	mov	r0, r5
   15a44:	ebfffde5 	bl	151e0 <fat_reset_dir>
            return 1;
   15a48:	e3a00001 	mov	r0, #1
   15a4c:	ea000004 	b	15a64 <find_file_in_dir+0x4c>
}
#endif

uint8_t find_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name, struct fat_dir_entry_struct* dir_entry)
{
    while(fat_read_dir(dd, dir_entry))
   15a50:	e1a00005 	mov	r0, r5
   15a54:	e1a01004 	mov	r1, r4
   15a58:	ebfffde8 	bl	15200 <fat_read_dir>
   15a5c:	e3500000 	cmp	r0, #0
   15a60:	1afffff1 	bne	15a2c <find_file_in_dir+0x14>
            return 1;
        }
    }

    return 0;
}
   15a64:	e8bd4070 	pop	{r4, r5, r6, lr}
   15a68:	e12fff1e 	bx	lr

00015a6c <open_file_in_dir>:

struct fat_file_struct* open_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name)
{
   15a6c:	e92d4010 	push	{r4, lr}
   15a70:	e24dd034 	sub	sp, sp, #52	; 0x34
    struct fat_dir_entry_struct file_entry;
    if(!find_file_in_dir(fs, dd, name, &file_entry))
   15a74:	e1a0300d 	mov	r3, sp

    return 0;
}

struct fat_file_struct* open_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name)
{
   15a78:	e1a04000 	mov	r4, r0
    struct fat_dir_entry_struct file_entry;
    if(!find_file_in_dir(fs, dd, name, &file_entry))
   15a7c:	ebffffe5 	bl	15a18 <find_file_in_dir>
   15a80:	e3500000 	cmp	r0, #0
        return 0;

    return fat_open_file(fs, &file_entry);
   15a84:	11a00004 	movne	r0, r4
   15a88:	11a0100d 	movne	r1, sp
   15a8c:	1bfffc0c 	blne	14ac4 <fat_open_file>
}
   15a90:	e28dd034 	add	sp, sp, #52	; 0x34
   15a94:	e8bd4010 	pop	{r4, lr}
   15a98:	e12fff1e 	bx	lr

00015a9c <partition_open>:
 *                  as a single partition (e.g. for "super floppy" use).
 * \returns 0 on failure, a partition descriptor on success.
 * \see partition_close
 */
struct partition_struct* partition_open(device_read_t device_read, device_read_interval_t device_read_interval, device_write_t device_write, device_write_interval_t device_write_interval, int8_t index)
{
   15a9c:	e92d45ff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, sl, lr}
    struct partition_struct* new_partition = 0;
    uint8_t buffer[0x10];

    if(!device_read || !device_read_interval || index >= 4)
   15aa0:	e3500000 	cmp	r0, #0
   15aa4:	13510000 	cmpne	r1, #0
 *                  as a single partition (e.g. for "super floppy" use).
 * \returns 0 on failure, a partition descriptor on success.
 * \see partition_close
 */
struct partition_struct* partition_open(device_read_t device_read, device_read_interval_t device_read_interval, device_write_t device_write, device_write_interval_t device_write_interval, int8_t index)
{
   15aa8:	e1a0a002 	mov	sl, r2
   15aac:	e1a08003 	mov	r8, r3
   15ab0:	e1dd52dc 	ldrsb	r5, [sp, #44]	; 0x2c
    struct partition_struct* new_partition = 0;
    uint8_t buffer[0x10];

    if(!device_read || !device_read_interval || index >= 4)
   15ab4:	e1a07001 	mov	r7, r1
   15ab8:	e1a06000 	mov	r6, r0
   15abc:	1a000001 	bne	15ac8 <partition_open+0x2c>
        return 0;
   15ac0:	e3a00000 	mov	r0, #0
   15ac4:	ea00002c 	b	15b7c <partition_open+0xe0>
struct partition_struct* partition_open(device_read_t device_read, device_read_interval_t device_read_interval, device_write_t device_write, device_write_interval_t device_write_interval, int8_t index)
{
    struct partition_struct* new_partition = 0;
    uint8_t buffer[0x10];

    if(!device_read || !device_read_interval || index >= 4)
   15ac8:	e3550003 	cmp	r5, #3
   15acc:	cafffffb 	bgt	15ac0 <partition_open+0x24>
        return 0;

    if(index >= 0)
   15ad0:	e3550000 	cmp	r5, #0
   15ad4:	aa000004 	bge	15aec <partition_open+0x50>
#else
    new_partition = partition_handles;
    uint8_t i;
    for(i = 0; i < PARTITION_COUNT; ++i)
    {
        if(new_partition->type == PARTITION_TYPE_FREE)
   15ad8:	e59f40a8 	ldr	r4, [pc, #168]	; 15b88 <partition_open+0xec>
   15adc:	e5d41010 	ldrb	r1, [r4, #16]
   15ae0:	e3510000 	cmp	r1, #0
   15ae4:	1afffff5 	bne	15ac0 <partition_open+0x24>
   15ae8:	ea00001b 	b	15b5c <partition_open+0xc0>
        return 0;

    if(index >= 0)
    {
        /* read specified partition table index */
        if(!device_read(0x01be + index * 0x10, buffer, sizeof(buffer)))
   15aec:	e1a03205 	lsl	r3, r5, #4
   15af0:	e2833f6f 	add	r3, r3, #444	; 0x1bc
   15af4:	e2833002 	add	r3, r3, #2
   15af8:	e1a00003 	mov	r0, r3
   15afc:	e1a01fc3 	asr	r1, r3, #31
   15b00:	e1a0200d 	mov	r2, sp
   15b04:	e3a03010 	mov	r3, #16
   15b08:	e1a0e00f 	mov	lr, pc
   15b0c:	e12fff16 	bx	r6
   15b10:	e3500000 	cmp	r0, #0
   15b14:	0affffe9 	beq	15ac0 <partition_open+0x24>
            return 0;

        /* abort on empty partition entry */
        if(buffer[4] == 0x00)
   15b18:	e5dd3004 	ldrb	r3, [sp, #4]
   15b1c:	e3530000 	cmp	r3, #0
   15b20:	1affffec 	bne	15ad8 <partition_open+0x3c>
   15b24:	eaffffe5 	b	15ac0 <partition_open+0x24>
    new_partition->device_write = device_write;
    new_partition->device_write_interval = device_write_interval;

    if(index >= 0)
    {
        new_partition->type = buffer[4];
   15b28:	e5dd3004 	ldrb	r3, [sp, #4]
        new_partition->offset = read32(&buffer[8]);
   15b2c:	e28d0008 	add	r0, sp, #8
    new_partition->device_write = device_write;
    new_partition->device_write_interval = device_write_interval;

    if(index >= 0)
    {
        new_partition->type = buffer[4];
   15b30:	e5c43010 	strb	r3, [r4, #16]
        new_partition->offset = read32(&buffer[8]);
   15b34:	eb00003c 	bl	15c2c <read32>
   15b38:	e5840014 	str	r0, [r4, #20]
        new_partition->length = read32(&buffer[12]);
   15b3c:	e28d000c 	add	r0, sp, #12
   15b40:	eb000039 	bl	15c2c <read32>
   15b44:	e5840018 	str	r0, [r4, #24]
   15b48:	ea000001 	b	15b54 <partition_open+0xb8>
    }
    else
    {
        new_partition->type = 0xff;
   15b4c:	e3e03000 	mvn	r3, #0
   15b50:	e5c43010 	strb	r3, [r4, #16]
   15b54:	e1a00004 	mov	r0, r4
   15b58:	ea000007 	b	15b7c <partition_open+0xe0>
    }
    if(i >= PARTITION_COUNT)
        return 0;
#endif

    memset(new_partition, 0, sizeof(*new_partition));
   15b5c:	e1a00004 	mov	r0, r4
   15b60:	e3a0201c 	mov	r2, #28
   15b64:	eb00006d 	bl	15d20 <memset>
    new_partition->device_read = device_read;
    new_partition->device_read_interval = device_read_interval;
    new_partition->device_write = device_write;
    new_partition->device_write_interval = device_write_interval;

    if(index >= 0)
   15b68:	e3550000 	cmp	r5, #0
    memset(new_partition, 0, sizeof(*new_partition));

    /* fill partition descriptor */
    new_partition->device_read = device_read;
    new_partition->device_read_interval = device_read_interval;
    new_partition->device_write = device_write;
   15b6c:	e88404c0 	stm	r4, {r6, r7, sl}
    new_partition->device_write_interval = device_write_interval;
   15b70:	e584800c 	str	r8, [r4, #12]

    if(index >= 0)
   15b74:	aaffffeb 	bge	15b28 <partition_open+0x8c>
   15b78:	eafffff3 	b	15b4c <partition_open+0xb0>
    {
        new_partition->type = 0xff;
    }

    return new_partition;
}
   15b7c:	e28dd010 	add	sp, sp, #16
   15b80:	e8bd45f0 	pop	{r4, r5, r6, r7, r8, sl, lr}
   15b84:	e12fff1e 	bx	lr
   15b88:	40000344 	.word	0x40000344

00015b8c <partition_close>:
 * \returns 0 on failure, 1 on success.
 * \see partition_open
 */
uint8_t partition_close(struct partition_struct* partition)
{
    if(!partition)
   15b8c:	e3500000 	cmp	r0, #0

    /* destroy partition descriptor */
#if USE_DYNAMIC_MEMORY
    free(partition);
#else
    partition->type = PARTITION_TYPE_FREE;
   15b90:	13a03000 	movne	r3, #0
   15b94:	15c03010 	strbne	r3, [r0, #16]
#endif

    return 1;
   15b98:	13a00001 	movne	r0, #1
}
   15b9c:	e12fff1e 	bx	lr

00015ba0 <convert>:
Print integers in a given base 2-16 (default 10)
*/
//#include <stdio.h>
//#include <stdlib.h>

int convert(int n, int b, char str[], int i) {
   15ba0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   15ba4:	e1a07000 	mov	r7, r0
   15ba8:	e1a06001 	mov	r6, r1
   15bac:	e1a05002 	mov	r5, r2
   15bb0:	e1a04003 	mov	r4, r3
	if (n/b > 0)
   15bb4:	eb000107 	bl	15fd8 <__aeabi_idiv>
   15bb8:	e3500000 	cmp	r0, #0
   15bbc:	da000004 	ble	15bd4 <convert+0x34>
		i = convert(n/b, b, str, i);
   15bc0:	e1a03004 	mov	r3, r4
   15bc4:	e1a01006 	mov	r1, r6
   15bc8:	e1a02005 	mov	r2, r5
   15bcc:	ebfffff3 	bl	15ba0 <convert>
   15bd0:	e1a04000 	mov	r4, r0
	str[i++] = "0123456789ABCDEF"[n%b];
   15bd4:	e1a00007 	mov	r0, r7
   15bd8:	e1a01006 	mov	r1, r6
   15bdc:	eb000182 	bl	161ec <__modsi3>
   15be0:	e59f3010 	ldr	r3, [pc, #16]	; 15bf8 <convert+0x58>
   15be4:	e7d33000 	ldrb	r3, [r3, r0]
	return i;
}
   15be8:	e2840001 	add	r0, r4, #1
//#include <stdlib.h>

int convert(int n, int b, char str[], int i) {
	if (n/b > 0)
		i = convert(n/b, b, str, i);
	str[i++] = "0123456789ABCDEF"[n%b];
   15bec:	e7c53004 	strb	r3, [r5, r4]
	return i;
}
   15bf0:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   15bf4:	e12fff1e 	bx	lr
   15bf8:	00016697 	.word	0x00016697

00015bfc <itoa>:

int itoa(int n, int b, char str[]) {
   15bfc:	e92d4010 	push	{r4, lr}
	int i = convert(n, b, str, 0);
   15c00:	e3a03000 	mov	r3, #0
		i = convert(n/b, b, str, i);
	str[i++] = "0123456789ABCDEF"[n%b];
	return i;
}

int itoa(int n, int b, char str[]) {
   15c04:	e1a04002 	mov	r4, r2
	int i = convert(n, b, str, 0);
   15c08:	ebffffe4 	bl	15ba0 <convert>
	str[i] = '\0';
   15c0c:	e3a02000 	mov	r2, #0
   15c10:	e7c42000 	strb	r2, [r4, r0]
	return i;
}
   15c14:	e8bd4010 	pop	{r4, lr}
   15c18:	e12fff1e 	bx	lr

00015c1c <read16>:
 * \param[in] p Pointer from where to read the integer.
 * \returns The 16-bit integer read from memory.
 */
uint16_t read16(const uint8_t* p)
{
    return (((uint16_t) p[1]) << 8) |
   15c1c:	e5d02001 	ldrb	r2, [r0, #1]
   15c20:	e5d00000 	ldrb	r0, [r0]
           (((uint16_t) p[0]) << 0);
}
   15c24:	e1800402 	orr	r0, r0, r2, lsl #8
   15c28:	e12fff1e 	bx	lr

00015c2c <read32>:
 * \returns The 32-bit integer read from memory.
 */
uint32_t read32(const uint8_t* p)
{
    return (((uint32_t) p[3]) << 24) |
           (((uint32_t) p[2]) << 16) |
   15c2c:	e5d03002 	ldrb	r3, [r0, #2]
 * \param[in] p Pointer from where to read the integer.
 * \returns The 32-bit integer read from memory.
 */
uint32_t read32(const uint8_t* p)
{
    return (((uint32_t) p[3]) << 24) |
   15c30:	e5d02003 	ldrb	r2, [r0, #3]
           (((uint32_t) p[2]) << 16) |
   15c34:	e1a03803 	lsl	r3, r3, #16
 * \param[in] p Pointer from where to read the integer.
 * \returns The 32-bit integer read from memory.
 */
uint32_t read32(const uint8_t* p)
{
    return (((uint32_t) p[3]) << 24) |
   15c38:	e1833c02 	orr	r3, r3, r2, lsl #24
           (((uint32_t) p[2]) << 16) |
           (((uint32_t) p[1]) <<  8) |
           (((uint32_t) p[0]) <<  0);
   15c3c:	e5d02000 	ldrb	r2, [r0]
 */
uint32_t read32(const uint8_t* p)
{
    return (((uint32_t) p[3]) << 24) |
           (((uint32_t) p[2]) << 16) |
           (((uint32_t) p[1]) <<  8) |
   15c40:	e5d00001 	ldrb	r0, [r0, #1]
 * \returns The 32-bit integer read from memory.
 */
uint32_t read32(const uint8_t* p)
{
    return (((uint32_t) p[3]) << 24) |
           (((uint32_t) p[2]) << 16) |
   15c44:	e1833002 	orr	r3, r3, r2
           (((uint32_t) p[1]) <<  8) |
           (((uint32_t) p[0]) <<  0);
}
   15c48:	e1830400 	orr	r0, r3, r0, lsl #8
   15c4c:	e12fff1e 	bx	lr

00015c50 <write16>:
 *
 * \param[in] p Pointer where to write the integer to.
 * \param[in] i The 16-bit integer to write.
 */
void write16(uint8_t* p, uint16_t i)
{
   15c50:	e1a01801 	lsl	r1, r1, #16
   15c54:	e1a03821 	lsr	r3, r1, #16
    p[1] = (uint8_t) ((i & 0xff00) >> 8);
   15c58:	e1a01c21 	lsr	r1, r1, #24
   15c5c:	e5c01001 	strb	r1, [r0, #1]
    p[0] = (uint8_t) ((i & 0x00ff) >> 0);
   15c60:	e5c03000 	strb	r3, [r0]
   15c64:	e12fff1e 	bx	lr

00015c68 <write32>:
 * \param[in] p Pointer where to write the integer to.
 * \param[in] i The 32-bit integer to write.
 */
void write32(uint8_t* p, uint32_t i)
{
    p[3] = (uint8_t) ((i & 0xff000000) >> 24);
   15c68:	e1a03c21 	lsr	r3, r1, #24
   15c6c:	e5c03003 	strb	r3, [r0, #3]
    p[2] = (uint8_t) ((i & 0x00ff0000) >> 16);
   15c70:	e1a03821 	lsr	r3, r1, #16
   15c74:	e5c03002 	strb	r3, [r0, #2]
    p[1] = (uint8_t) ((i & 0x0000ff00) >>  8);
   15c78:	e1a03421 	lsr	r3, r1, #8
   15c7c:	e5c03001 	strb	r3, [r0, #1]
    p[0] = (uint8_t) ((i & 0x000000ff) >>  0);
   15c80:	e5c01000 	strb	r1, [r0]
   15c84:	e12fff1e 	bx	lr

00015c88 <disableIRQ>:
#define INT_MASK (IRQ_MASK | FIQ_MASK)

static inline unsigned __get_cpsr(void)
{
  unsigned long retval;
  asm volatile (" mrs  %0, cpsr" : "=r" (retval) : /* no inputs */  ); 
   15c88:	e10f0000 	mrs	r0, CPSR
unsigned disableIRQ(void)
{
  unsigned _cpsr;

  _cpsr = __get_cpsr();
  __set_cpsr(_cpsr | IRQ_MASK);
   15c8c:	e3803080 	orr	r3, r0, #128	; 0x80
  return retval;
}

static inline void __set_cpsr(unsigned val)
{
  asm volatile (" msr  cpsr, %0" : /* no outputs */ : "r" (val)  );	
   15c90:	e129f003 	msr	CPSR_fc, r3
  unsigned _cpsr;

  _cpsr = __get_cpsr();
  __set_cpsr(_cpsr | IRQ_MASK);
  return _cpsr;
}
   15c94:	e12fff1e 	bx	lr

00015c98 <restoreIRQ>:
#define INT_MASK (IRQ_MASK | FIQ_MASK)

static inline unsigned __get_cpsr(void)
{
  unsigned long retval;
  asm volatile (" mrs  %0, cpsr" : "=r" (retval) : /* no inputs */  ); 
   15c98:	e10f3000 	mrs	r3, CPSR
unsigned restoreIRQ(unsigned oldCPSR)
{
  unsigned _cpsr;

  _cpsr = __get_cpsr();
  __set_cpsr((_cpsr & ~IRQ_MASK) | (oldCPSR & IRQ_MASK));
   15c9c:	e3c32080 	bic	r2, r3, #128	; 0x80
   15ca0:	e2000080 	and	r0, r0, #128	; 0x80
   15ca4:	e1820000 	orr	r0, r2, r0
  return retval;
}

static inline void __set_cpsr(unsigned val)
{
  asm volatile (" msr  cpsr, %0" : /* no outputs */ : "r" (val)  );	
   15ca8:	e129f000 	msr	CPSR_fc, r0
  unsigned _cpsr;

  _cpsr = __get_cpsr();
  __set_cpsr((_cpsr & ~IRQ_MASK) | (oldCPSR & IRQ_MASK));
  return _cpsr;
}
   15cac:	e1a00003 	mov	r0, r3
   15cb0:	e12fff1e 	bx	lr

00015cb4 <enableIRQ>:
#define INT_MASK (IRQ_MASK | FIQ_MASK)

static inline unsigned __get_cpsr(void)
{
  unsigned long retval;
  asm volatile (" mrs  %0, cpsr" : "=r" (retval) : /* no inputs */  ); 
   15cb4:	e10f0000 	mrs	r0, CPSR
unsigned enableIRQ(void)
{
  unsigned _cpsr;

  _cpsr = __get_cpsr();
  __set_cpsr(_cpsr & ~IRQ_MASK);
   15cb8:	e3c03080 	bic	r3, r0, #128	; 0x80
  return retval;
}

static inline void __set_cpsr(unsigned val)
{
  asm volatile (" msr  cpsr, %0" : /* no outputs */ : "r" (val)  );	
   15cbc:	e129f003 	msr	CPSR_fc, r3
  unsigned _cpsr;

  _cpsr = __get_cpsr();
  __set_cpsr(_cpsr & ~IRQ_MASK);
  return _cpsr;
}
   15cc0:	e12fff1e 	bx	lr

00015cc4 <disableFIQ>:
#define INT_MASK (IRQ_MASK | FIQ_MASK)

static inline unsigned __get_cpsr(void)
{
  unsigned long retval;
  asm volatile (" mrs  %0, cpsr" : "=r" (retval) : /* no inputs */  ); 
   15cc4:	e10f0000 	mrs	r0, CPSR
unsigned disableFIQ(void)
{
  unsigned _cpsr;

  _cpsr = __get_cpsr();
  __set_cpsr(_cpsr | FIQ_MASK);
   15cc8:	e3803040 	orr	r3, r0, #64	; 0x40
  return retval;
}

static inline void __set_cpsr(unsigned val)
{
  asm volatile (" msr  cpsr, %0" : /* no outputs */ : "r" (val)  );	
   15ccc:	e129f003 	msr	CPSR_fc, r3
  unsigned _cpsr;

  _cpsr = __get_cpsr();
  __set_cpsr(_cpsr | FIQ_MASK);
  return _cpsr;
}
   15cd0:	e12fff1e 	bx	lr

00015cd4 <restoreFIQ>:
#define INT_MASK (IRQ_MASK | FIQ_MASK)

static inline unsigned __get_cpsr(void)
{
  unsigned long retval;
  asm volatile (" mrs  %0, cpsr" : "=r" (retval) : /* no inputs */  ); 
   15cd4:	e10f3000 	mrs	r3, CPSR
unsigned restoreFIQ(unsigned oldCPSR)
{
  unsigned _cpsr;

  _cpsr = __get_cpsr();
  __set_cpsr((_cpsr & ~FIQ_MASK) | (oldCPSR & FIQ_MASK));
   15cd8:	e3c32040 	bic	r2, r3, #64	; 0x40
   15cdc:	e2000040 	and	r0, r0, #64	; 0x40
   15ce0:	e1820000 	orr	r0, r2, r0
  return retval;
}

static inline void __set_cpsr(unsigned val)
{
  asm volatile (" msr  cpsr, %0" : /* no outputs */ : "r" (val)  );	
   15ce4:	e129f000 	msr	CPSR_fc, r0
  unsigned _cpsr;

  _cpsr = __get_cpsr();
  __set_cpsr((_cpsr & ~FIQ_MASK) | (oldCPSR & FIQ_MASK));
  return _cpsr;
}
   15ce8:	e1a00003 	mov	r0, r3
   15cec:	e12fff1e 	bx	lr

00015cf0 <enableFIQ>:
#define INT_MASK (IRQ_MASK | FIQ_MASK)

static inline unsigned __get_cpsr(void)
{
  unsigned long retval;
  asm volatile (" mrs  %0, cpsr" : "=r" (retval) : /* no inputs */  ); 
   15cf0:	e10f0000 	mrs	r0, CPSR
unsigned enableFIQ(void)
{
  unsigned _cpsr;

  _cpsr = __get_cpsr();
  __set_cpsr(_cpsr & ~FIQ_MASK);
   15cf4:	e3c03040 	bic	r3, r0, #64	; 0x40
  return retval;
}

static inline void __set_cpsr(unsigned val)
{
  asm volatile (" msr  cpsr, %0" : /* no outputs */ : "r" (val)  );	
   15cf8:	e129f003 	msr	CPSR_fc, r3
  unsigned _cpsr;

  _cpsr = __get_cpsr();
  __set_cpsr(_cpsr & ~FIQ_MASK);
  return _cpsr;
}
   15cfc:	e12fff1e 	bx	lr

00015d00 <memcpy>:
   15d00:	e3a03000 	mov	r3, #0
   15d04:	ea000002 	b	15d14 <memcpy+0x14>
   15d08:	e7d1c003 	ldrb	ip, [r1, r3]
   15d0c:	e7c0c003 	strb	ip, [r0, r3]
   15d10:	e2833001 	add	r3, r3, #1
   15d14:	e1530002 	cmp	r3, r2
   15d18:	1afffffa 	bne	15d08 <memcpy+0x8>
   15d1c:	e12fff1e 	bx	lr

00015d20 <memset>:
   15d20:	e0802002 	add	r2, r0, r2
   15d24:	e1a03000 	mov	r3, r0
   15d28:	ea000000 	b	15d30 <memset+0x10>
   15d2c:	e4c31001 	strb	r1, [r3], #1
   15d30:	e1530002 	cmp	r3, r2
   15d34:	1afffffc 	bne	15d2c <memset+0xc>
   15d38:	e12fff1e 	bx	lr

00015d3c <strchr>:
   15d3c:	e20110ff 	and	r1, r1, #255	; 0xff
   15d40:	e1a03000 	mov	r3, r0
   15d44:	e4d02001 	ldrb	r2, [r0], #1
   15d48:	e3520000 	cmp	r2, #0
   15d4c:	0a000002 	beq	15d5c <strchr+0x20>
   15d50:	e1520001 	cmp	r2, r1
   15d54:	1afffff9 	bne	15d40 <strchr+0x4>
   15d58:	ea000001 	b	15d64 <strchr+0x28>
   15d5c:	e3510000 	cmp	r1, #0
   15d60:	13a03000 	movne	r3, #0
   15d64:	e1a00003 	mov	r0, r3
   15d68:	e12fff1e 	bx	lr

00015d6c <strcmp>:
   15d6c:	e4d02001 	ldrb	r2, [r0], #1
   15d70:	e4d13001 	ldrb	r3, [r1], #1
   15d74:	e3520001 	cmp	r2, #1
   15d78:	21520003 	cmpcs	r2, r3
   15d7c:	0afffffa 	beq	15d6c <strcmp>
   15d80:	e0420003 	sub	r0, r2, r3
   15d84:	e12fff1e 	bx	lr

00015d88 <strcpy>:
   15d88:	e1a03000 	mov	r3, r0
   15d8c:	e4d12001 	ldrb	r2, [r1], #1
   15d90:	e4c32001 	strb	r2, [r3], #1
   15d94:	e3520000 	cmp	r2, #0
   15d98:	1afffffb 	bne	15d8c <strcpy+0x4>
   15d9c:	e12fff1e 	bx	lr

00015da0 <strlen>:
   15da0:	e1a03000 	mov	r3, r0
   15da4:	e4d32001 	ldrb	r2, [r3], #1
   15da8:	e3520000 	cmp	r2, #0
   15dac:	1afffffc 	bne	15da4 <strlen+0x4>
   15db0:	e0600003 	rsb	r0, r0, r3
   15db4:	e2400001 	sub	r0, r0, #1
   15db8:	e12fff1e 	bx	lr

00015dbc <strncmp>:
   15dbc:	e3520000 	cmp	r2, #0
   15dc0:	e92d4030 	push	{r4, r5, lr}
   15dc4:	0a000013 	beq	15e18 <strncmp+0x5c>
   15dc8:	ea000008 	b	15df0 <strncmp+0x34>
   15dcc:	e3520001 	cmp	r2, #1
   15dd0:	1a000003 	bne	15de4 <strncmp+0x28>
   15dd4:	e5d40000 	ldrb	r0, [r4]
   15dd8:	e5d33000 	ldrb	r3, [r3]
   15ddc:	e0630000 	rsb	r0, r3, r0
   15de0:	e8bd8030 	pop	{r4, r5, pc}
   15de4:	e35c0000 	cmp	ip, #0
   15de8:	e2422001 	sub	r2, r2, #1
   15dec:	0afffff8 	beq	15dd4 <strncmp+0x18>
   15df0:	e3520000 	cmp	r2, #0
   15df4:	e1a03001 	mov	r3, r1
   15df8:	e1a04000 	mov	r4, r0
   15dfc:	0afffff4 	beq	15dd4 <strncmp+0x18>
   15e00:	e4d05001 	ldrb	r5, [r0], #1
   15e04:	e5d3c000 	ldrb	ip, [r3]
   15e08:	e15c0005 	cmp	ip, r5
   15e0c:	e2811001 	add	r1, r1, #1
   15e10:	0affffed 	beq	15dcc <strncmp+0x10>
   15e14:	eaffffee 	b	15dd4 <strncmp+0x18>
   15e18:	e1a00002 	mov	r0, r2
   15e1c:	e8bd8030 	pop	{r4, r5, pc}

00015e20 <strncpy>:
   15e20:	e92d4010 	push	{r4, lr}
   15e24:	e2411001 	sub	r1, r1, #1
   15e28:	e1a03000 	mov	r3, r0
   15e2c:	ea000008 	b	15e54 <strncpy+0x34>
   15e30:	e5f14001 	ldrb	r4, [r1, #1]!
   15e34:	e4c34001 	strb	r4, [r3], #1
   15e38:	e3540000 	cmp	r4, #0
   15e3c:	e2422001 	sub	r2, r2, #1
   15e40:	e1a0c003 	mov	ip, r3
   15e44:	1a000002 	bne	15e54 <strncpy+0x34>
   15e48:	e0833002 	add	r3, r3, r2
   15e4c:	e3a02000 	mov	r2, #0
   15e50:	ea000004 	b	15e68 <strncpy+0x48>
   15e54:	e3520000 	cmp	r2, #0
   15e58:	e1a0c003 	mov	ip, r3
   15e5c:	1afffff3 	bne	15e30 <strncpy+0x10>
   15e60:	eafffff8 	b	15e48 <strncpy+0x28>
   15e64:	e4cc2001 	strb	r2, [ip], #1
   15e68:	e15c0003 	cmp	ip, r3
   15e6c:	1afffffc 	bne	15e64 <strncpy+0x44>
   15e70:	e8bd8010 	pop	{r4, pc}

00015e74 <strrchr>:
   15e74:	e92d4030 	push	{r4, r5, lr}
   15e78:	e2515000 	subs	r5, r1, #0
   15e7c:	e1a03000 	mov	r3, r0
   15e80:	13a04000 	movne	r4, #0
   15e84:	1a000003 	bne	15e98 <strrchr+0x24>
   15e88:	ea000008 	b	15eb0 <strrchr+0x3c>
   15e8c:	e2803001 	add	r3, r0, #1
   15e90:	e1a04000 	mov	r4, r0
   15e94:	eaffffff 	b	15e98 <strrchr+0x24>
   15e98:	e1a00003 	mov	r0, r3
   15e9c:	e1a01005 	mov	r1, r5
   15ea0:	ebffffa5 	bl	15d3c <strchr>
   15ea4:	e3500000 	cmp	r0, #0
   15ea8:	1afffff7 	bne	15e8c <strrchr+0x18>
   15eac:	ea000001 	b	15eb8 <strrchr+0x44>
   15eb0:	e8bd4030 	pop	{r4, r5, lr}
   15eb4:	eaffffa0 	b	15d3c <strchr>
   15eb8:	e1a00004 	mov	r0, r4
   15ebc:	e8bd8030 	pop	{r4, r5, pc}

00015ec0 <__aeabi_uidiv>:
   15ec0:	e2512001 	subs	r2, r1, #1
   15ec4:	012fff1e 	bxeq	lr
   15ec8:	3a000036 	bcc	15fa8 <__aeabi_uidiv+0xe8>
   15ecc:	e1500001 	cmp	r0, r1
   15ed0:	9a000022 	bls	15f60 <__aeabi_uidiv+0xa0>
   15ed4:	e1110002 	tst	r1, r2
   15ed8:	0a000023 	beq	15f6c <__aeabi_uidiv+0xac>
   15edc:	e311020e 	tst	r1, #-536870912	; 0xe0000000
   15ee0:	01a01181 	lsleq	r1, r1, #3
   15ee4:	03a03008 	moveq	r3, #8
   15ee8:	13a03001 	movne	r3, #1
   15eec:	e3510201 	cmp	r1, #268435456	; 0x10000000
   15ef0:	31510000 	cmpcc	r1, r0
   15ef4:	31a01201 	lslcc	r1, r1, #4
   15ef8:	31a03203 	lslcc	r3, r3, #4
   15efc:	3afffffa 	bcc	15eec <__aeabi_uidiv+0x2c>
   15f00:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
   15f04:	31510000 	cmpcc	r1, r0
   15f08:	31a01081 	lslcc	r1, r1, #1
   15f0c:	31a03083 	lslcc	r3, r3, #1
   15f10:	3afffffa 	bcc	15f00 <__aeabi_uidiv+0x40>
   15f14:	e3a02000 	mov	r2, #0
   15f18:	e1500001 	cmp	r0, r1
   15f1c:	20400001 	subcs	r0, r0, r1
   15f20:	21822003 	orrcs	r2, r2, r3
   15f24:	e15000a1 	cmp	r0, r1, lsr #1
   15f28:	204000a1 	subcs	r0, r0, r1, lsr #1
   15f2c:	218220a3 	orrcs	r2, r2, r3, lsr #1
   15f30:	e1500121 	cmp	r0, r1, lsr #2
   15f34:	20400121 	subcs	r0, r0, r1, lsr #2
   15f38:	21822123 	orrcs	r2, r2, r3, lsr #2
   15f3c:	e15001a1 	cmp	r0, r1, lsr #3
   15f40:	204001a1 	subcs	r0, r0, r1, lsr #3
   15f44:	218221a3 	orrcs	r2, r2, r3, lsr #3
   15f48:	e3500000 	cmp	r0, #0
   15f4c:	11b03223 	lsrsne	r3, r3, #4
   15f50:	11a01221 	lsrne	r1, r1, #4
   15f54:	1affffef 	bne	15f18 <__aeabi_uidiv+0x58>
   15f58:	e1a00002 	mov	r0, r2
   15f5c:	e12fff1e 	bx	lr
   15f60:	03a00001 	moveq	r0, #1
   15f64:	13a00000 	movne	r0, #0
   15f68:	e12fff1e 	bx	lr
   15f6c:	e3510801 	cmp	r1, #65536	; 0x10000
   15f70:	21a01821 	lsrcs	r1, r1, #16
   15f74:	23a02010 	movcs	r2, #16
   15f78:	33a02000 	movcc	r2, #0
   15f7c:	e3510c01 	cmp	r1, #256	; 0x100
   15f80:	21a01421 	lsrcs	r1, r1, #8
   15f84:	22822008 	addcs	r2, r2, #8
   15f88:	e3510010 	cmp	r1, #16
   15f8c:	21a01221 	lsrcs	r1, r1, #4
   15f90:	22822004 	addcs	r2, r2, #4
   15f94:	e3510004 	cmp	r1, #4
   15f98:	82822003 	addhi	r2, r2, #3
   15f9c:	908220a1 	addls	r2, r2, r1, lsr #1
   15fa0:	e1a00230 	lsr	r0, r0, r2
   15fa4:	e12fff1e 	bx	lr
   15fa8:	e52de008 	str	lr, [sp, #-8]!
   15fac:	eb0000c7 	bl	162d0 <__div0>
   15fb0:	e3a00000 	mov	r0, #0
   15fb4:	e49df008 	ldr	pc, [sp], #8

00015fb8 <__aeabi_uidivmod>:
   15fb8:	e3510000 	cmp	r1, #0
   15fbc:	0afffff9 	beq	15fa8 <__aeabi_uidiv+0xe8>
   15fc0:	e92d4003 	push	{r0, r1, lr}
   15fc4:	ebffffbd 	bl	15ec0 <__aeabi_uidiv>
   15fc8:	e8bd4006 	pop	{r1, r2, lr}
   15fcc:	e0030092 	mul	r3, r2, r0
   15fd0:	e0411003 	sub	r1, r1, r3
   15fd4:	e12fff1e 	bx	lr

00015fd8 <__aeabi_idiv>:
   15fd8:	e3510000 	cmp	r1, #0
   15fdc:	0a000043 	beq	160f0 <.divsi3_skip_div0_test+0x110>

00015fe0 <.divsi3_skip_div0_test>:
   15fe0:	e020c001 	eor	ip, r0, r1
   15fe4:	42611000 	rsbmi	r1, r1, #0
   15fe8:	e2512001 	subs	r2, r1, #1
   15fec:	0a000027 	beq	16090 <.divsi3_skip_div0_test+0xb0>
   15ff0:	e1b03000 	movs	r3, r0
   15ff4:	42603000 	rsbmi	r3, r0, #0
   15ff8:	e1530001 	cmp	r3, r1
   15ffc:	9a000026 	bls	1609c <.divsi3_skip_div0_test+0xbc>
   16000:	e1110002 	tst	r1, r2
   16004:	0a000028 	beq	160ac <.divsi3_skip_div0_test+0xcc>
   16008:	e311020e 	tst	r1, #-536870912	; 0xe0000000
   1600c:	01a01181 	lsleq	r1, r1, #3
   16010:	03a02008 	moveq	r2, #8
   16014:	13a02001 	movne	r2, #1
   16018:	e3510201 	cmp	r1, #268435456	; 0x10000000
   1601c:	31510003 	cmpcc	r1, r3
   16020:	31a01201 	lslcc	r1, r1, #4
   16024:	31a02202 	lslcc	r2, r2, #4
   16028:	3afffffa 	bcc	16018 <.divsi3_skip_div0_test+0x38>
   1602c:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
   16030:	31510003 	cmpcc	r1, r3
   16034:	31a01081 	lslcc	r1, r1, #1
   16038:	31a02082 	lslcc	r2, r2, #1
   1603c:	3afffffa 	bcc	1602c <.divsi3_skip_div0_test+0x4c>
   16040:	e3a00000 	mov	r0, #0
   16044:	e1530001 	cmp	r3, r1
   16048:	20433001 	subcs	r3, r3, r1
   1604c:	21800002 	orrcs	r0, r0, r2
   16050:	e15300a1 	cmp	r3, r1, lsr #1
   16054:	204330a1 	subcs	r3, r3, r1, lsr #1
   16058:	218000a2 	orrcs	r0, r0, r2, lsr #1
   1605c:	e1530121 	cmp	r3, r1, lsr #2
   16060:	20433121 	subcs	r3, r3, r1, lsr #2
   16064:	21800122 	orrcs	r0, r0, r2, lsr #2
   16068:	e15301a1 	cmp	r3, r1, lsr #3
   1606c:	204331a1 	subcs	r3, r3, r1, lsr #3
   16070:	218001a2 	orrcs	r0, r0, r2, lsr #3
   16074:	e3530000 	cmp	r3, #0
   16078:	11b02222 	lsrsne	r2, r2, #4
   1607c:	11a01221 	lsrne	r1, r1, #4
   16080:	1affffef 	bne	16044 <.divsi3_skip_div0_test+0x64>
   16084:	e35c0000 	cmp	ip, #0
   16088:	42600000 	rsbmi	r0, r0, #0
   1608c:	e12fff1e 	bx	lr
   16090:	e13c0000 	teq	ip, r0
   16094:	42600000 	rsbmi	r0, r0, #0
   16098:	e12fff1e 	bx	lr
   1609c:	33a00000 	movcc	r0, #0
   160a0:	01a00fcc 	asreq	r0, ip, #31
   160a4:	03800001 	orreq	r0, r0, #1
   160a8:	e12fff1e 	bx	lr
   160ac:	e3510801 	cmp	r1, #65536	; 0x10000
   160b0:	21a01821 	lsrcs	r1, r1, #16
   160b4:	23a02010 	movcs	r2, #16
   160b8:	33a02000 	movcc	r2, #0
   160bc:	e3510c01 	cmp	r1, #256	; 0x100
   160c0:	21a01421 	lsrcs	r1, r1, #8
   160c4:	22822008 	addcs	r2, r2, #8
   160c8:	e3510010 	cmp	r1, #16
   160cc:	21a01221 	lsrcs	r1, r1, #4
   160d0:	22822004 	addcs	r2, r2, #4
   160d4:	e3510004 	cmp	r1, #4
   160d8:	82822003 	addhi	r2, r2, #3
   160dc:	908220a1 	addls	r2, r2, r1, lsr #1
   160e0:	e35c0000 	cmp	ip, #0
   160e4:	e1a00233 	lsr	r0, r3, r2
   160e8:	42600000 	rsbmi	r0, r0, #0
   160ec:	e12fff1e 	bx	lr
   160f0:	e52de008 	str	lr, [sp, #-8]!
   160f4:	eb000075 	bl	162d0 <__div0>
   160f8:	e3a00000 	mov	r0, #0
   160fc:	e49df008 	ldr	pc, [sp], #8

00016100 <__aeabi_idivmod>:
   16100:	e3510000 	cmp	r1, #0
   16104:	0afffff9 	beq	160f0 <.divsi3_skip_div0_test+0x110>
   16108:	e92d4003 	push	{r0, r1, lr}
   1610c:	ebffffb3 	bl	15fe0 <.divsi3_skip_div0_test>
   16110:	e8bd4006 	pop	{r1, r2, lr}
   16114:	e0030092 	mul	r3, r2, r0
   16118:	e0411003 	sub	r1, r1, r3
   1611c:	e12fff1e 	bx	lr

00016120 <__umodsi3>:
   16120:	e2512001 	subs	r2, r1, #1
   16124:	3a00002c 	bcc	161dc <__umodsi3+0xbc>
   16128:	11500001 	cmpne	r0, r1
   1612c:	03a00000 	moveq	r0, #0
   16130:	81110002 	tsthi	r1, r2
   16134:	00000002 	andeq	r0, r0, r2
   16138:	912fff1e 	bxls	lr
   1613c:	e3a02000 	mov	r2, #0
   16140:	e3510201 	cmp	r1, #268435456	; 0x10000000
   16144:	31510000 	cmpcc	r1, r0
   16148:	31a01201 	lslcc	r1, r1, #4
   1614c:	32822004 	addcc	r2, r2, #4
   16150:	3afffffa 	bcc	16140 <__umodsi3+0x20>
   16154:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
   16158:	31510000 	cmpcc	r1, r0
   1615c:	31a01081 	lslcc	r1, r1, #1
   16160:	32822001 	addcc	r2, r2, #1
   16164:	3afffffa 	bcc	16154 <__umodsi3+0x34>
   16168:	e2522003 	subs	r2, r2, #3
   1616c:	ba00000e 	blt	161ac <__umodsi3+0x8c>
   16170:	e1500001 	cmp	r0, r1
   16174:	20400001 	subcs	r0, r0, r1
   16178:	e15000a1 	cmp	r0, r1, lsr #1
   1617c:	204000a1 	subcs	r0, r0, r1, lsr #1
   16180:	e1500121 	cmp	r0, r1, lsr #2
   16184:	20400121 	subcs	r0, r0, r1, lsr #2
   16188:	e15001a1 	cmp	r0, r1, lsr #3
   1618c:	204001a1 	subcs	r0, r0, r1, lsr #3
   16190:	e3500001 	cmp	r0, #1
   16194:	e1a01221 	lsr	r1, r1, #4
   16198:	a2522004 	subsge	r2, r2, #4
   1619c:	aafffff3 	bge	16170 <__umodsi3+0x50>
   161a0:	e3120003 	tst	r2, #3
   161a4:	13300000 	teqne	r0, #0
   161a8:	0a00000a 	beq	161d8 <__umodsi3+0xb8>
   161ac:	e3720002 	cmn	r2, #2
   161b0:	ba000006 	blt	161d0 <__umodsi3+0xb0>
   161b4:	0a000002 	beq	161c4 <__umodsi3+0xa4>
   161b8:	e1500001 	cmp	r0, r1
   161bc:	20400001 	subcs	r0, r0, r1
   161c0:	e1a010a1 	lsr	r1, r1, #1
   161c4:	e1500001 	cmp	r0, r1
   161c8:	20400001 	subcs	r0, r0, r1
   161cc:	e1a010a1 	lsr	r1, r1, #1
   161d0:	e1500001 	cmp	r0, r1
   161d4:	20400001 	subcs	r0, r0, r1
   161d8:	e12fff1e 	bx	lr
   161dc:	e52de008 	str	lr, [sp, #-8]!
   161e0:	eb00003a 	bl	162d0 <__div0>
   161e4:	e3a00000 	mov	r0, #0
   161e8:	e49df008 	ldr	pc, [sp], #8

000161ec <__modsi3>:
   161ec:	e3510000 	cmp	r1, #0
   161f0:	0a000032 	beq	162c0 <__modsi3+0xd4>
   161f4:	42611000 	rsbmi	r1, r1, #0
   161f8:	e1b0c000 	movs	ip, r0
   161fc:	42600000 	rsbmi	r0, r0, #0
   16200:	e2512001 	subs	r2, r1, #1
   16204:	11500001 	cmpne	r0, r1
   16208:	03a00000 	moveq	r0, #0
   1620c:	81110002 	tsthi	r1, r2
   16210:	00000002 	andeq	r0, r0, r2
   16214:	9a000026 	bls	162b4 <__modsi3+0xc8>
   16218:	e3a02000 	mov	r2, #0
   1621c:	e3510201 	cmp	r1, #268435456	; 0x10000000
   16220:	31510000 	cmpcc	r1, r0
   16224:	31a01201 	lslcc	r1, r1, #4
   16228:	32822004 	addcc	r2, r2, #4
   1622c:	3afffffa 	bcc	1621c <__modsi3+0x30>
   16230:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
   16234:	31510000 	cmpcc	r1, r0
   16238:	31a01081 	lslcc	r1, r1, #1
   1623c:	32822001 	addcc	r2, r2, #1
   16240:	3afffffa 	bcc	16230 <__modsi3+0x44>
   16244:	e2522003 	subs	r2, r2, #3
   16248:	ba00000e 	blt	16288 <__modsi3+0x9c>
   1624c:	e1500001 	cmp	r0, r1
   16250:	20400001 	subcs	r0, r0, r1
   16254:	e15000a1 	cmp	r0, r1, lsr #1
   16258:	204000a1 	subcs	r0, r0, r1, lsr #1
   1625c:	e1500121 	cmp	r0, r1, lsr #2
   16260:	20400121 	subcs	r0, r0, r1, lsr #2
   16264:	e15001a1 	cmp	r0, r1, lsr #3
   16268:	204001a1 	subcs	r0, r0, r1, lsr #3
   1626c:	e3500001 	cmp	r0, #1
   16270:	e1a01221 	lsr	r1, r1, #4
   16274:	a2522004 	subsge	r2, r2, #4
   16278:	aafffff3 	bge	1624c <__modsi3+0x60>
   1627c:	e3120003 	tst	r2, #3
   16280:	13300000 	teqne	r0, #0
   16284:	0a00000a 	beq	162b4 <__modsi3+0xc8>
   16288:	e3720002 	cmn	r2, #2
   1628c:	ba000006 	blt	162ac <__modsi3+0xc0>
   16290:	0a000002 	beq	162a0 <__modsi3+0xb4>
   16294:	e1500001 	cmp	r0, r1
   16298:	20400001 	subcs	r0, r0, r1
   1629c:	e1a010a1 	lsr	r1, r1, #1
   162a0:	e1500001 	cmp	r0, r1
   162a4:	20400001 	subcs	r0, r0, r1
   162a8:	e1a010a1 	lsr	r1, r1, #1
   162ac:	e1500001 	cmp	r0, r1
   162b0:	20400001 	subcs	r0, r0, r1
   162b4:	e35c0000 	cmp	ip, #0
   162b8:	42600000 	rsbmi	r0, r0, #0
   162bc:	e12fff1e 	bx	lr
   162c0:	e52de008 	str	lr, [sp, #-8]!
   162c4:	eb000001 	bl	162d0 <__div0>
   162c8:	e3a00000 	mov	r0, #0
   162cc:	e49df008 	ldr	pc, [sp], #8

000162d0 <__div0>:
   162d0:	e12fff1e 	bx	lr
   162d4:	07050301 	.word	0x07050301
   162d8:	12100e09 	.word	0x12100e09
   162dc:	1c181614 	.word	0x1c181614
   162e0:	1e          	.byte	0x1e
   162e1:	0a          	.byte	0x0a
   162e2:	6544      	.short	0x6544
   162e4:	6c756166 	.word	0x6c756166
   162e8:	49562074 	.word	0x49562074
   162ec:	74532043 	.word	0x74532043
   162f0:	706f      	.short	0x706f
   162f2:	00          	.byte	0x00
   162f3:	25          	.byte	0x25
   162f4:	20200064 	.word	0x20200064
   162f8:	44530020 	.word	0x44530020
   162fc:	696e4920 	.word	0x696e4920
   16300:	72452074 	.word	0x72452074
   16304:	0a726f72 	.word	0x0a726f72
   16308:	4453000d 	.word	0x4453000d
   1630c:	65704f20 	.word	0x65704f20
   16310:	6f6f526e 	.word	0x6f6f526e
   16314:	72452074 	.word	0x72452074
   16318:	0a726f72 	.word	0x0a726f72
   1631c:	0d0a000d 	.word	0x0d0a000d
   16320:	6f676f4c 	.word	0x6f676f4c
   16324:	6974616d 	.word	0x6974616d
   16328:	32562063 	.word	0x32562063
   1632c:	73655420 	.word	0x73655420
   16330:	6f432074 	.word	0x6f432074
   16334:	0a3a6564 	.word	0x0a3a6564
   16338:	4441000d 	.word	0x4441000d
   1633c:	65542043 	.word	0x65542043
   16340:	77207473 	.word	0x77207473
   16344:	206c6c69 	.word	0x206c6c69
   16348:	69676562 	.word	0x69676562
   1634c:	6e69206e 	.word	0x6e69206e
   16350:	73203520 	.word	0x73203520
   16354:	6e6f6365 	.word	0x6e6f6365
   16358:	202c7364 	.word	0x202c7364
   1635c:	20746968 	.word	0x20746968
   16360:	706f7473 	.word	0x706f7473
   16364:	74756220 	.word	0x74756220
   16368:	206e6f74 	.word	0x206e6f74
   1636c:	74206f74 	.word	0x74206f74
   16370:	696d7265 	.word	0x696d7265
   16374:	6574616e 	.word	0x6574616e
   16378:	65687420 	.word	0x65687420
   1637c:	73657420 	.word	0x73657420
   16380:	0a0d2e74 	.word	0x0a0d2e74
   16384:	0d0a000a 	.word	0x0d0a000a
   16388:	74736554 	.word	0x74736554
   1638c:	6d6f6320 	.word	0x6d6f6320
   16390:	74656c70 	.word	0x74656c70
   16394:	6c202c65 	.word	0x6c202c65
   16398:	696b636f 	.word	0x696b636f
   1639c:	7520676e 	.word	0x7520676e
   163a0:	2e2e2e70 	.word	0x2e2e2e70
   163a4:	4c000d0a 	.word	0x4c000d0a
   163a8:	4f43474f 	.word	0x4f43474f
   163ac:	78742e4e 	.word	0x78742e4e
   163b0:	72450074 	.word	0x72450074
   163b4:	20726f72 	.word	0x20726f72
   163b8:	61657263 	.word	0x61657263
   163bc:	676e6974 	.word	0x676e6974
   163c0:	474f4c20 	.word	0x474f4c20
   163c4:	2e4e4f43 	.word	0x2e4e4f43
   163c8:	2c747874 	.word	0x2c747874
   163cc:	636f6c20 	.word	0x636f6c20
   163d0:	676e696b 	.word	0x676e696b
   163d4:	2e707520 	.word	0x2e707520
   163d8:	0d0a2e2e 	.word	0x0d0a2e2e
   163dc:	444f4d00 	.word	0x444f4d00
   163e0:	203d2045 	.word	0x203d2045
   163e4:	410a0d30 	.word	0x410a0d30
   163e8:	49494353 	.word	0x49494353
   163ec:	4e203d20 	.word	0x4e203d20
   163f0:	61420a0d 	.word	0x61420a0d
   163f4:	3d206475 	.word	0x3d206475
   163f8:	0a0d3420 	.word	0x0a0d3420
   163fc:	71657246 	.word	0x71657246
   16400:	636e6575 	.word	0x636e6575
   16404:	203d2079 	.word	0x203d2079
   16408:	0d303031 	.word	0x0d303031
   1640c:	6972540a 	.word	0x6972540a
   16410:	72656767 	.word	0x72656767
   16414:	61684320 	.word	0x61684320
   16418:	74636172 	.word	0x74636172
   1641c:	3d207265 	.word	0x3d207265
   16420:	0a0d2420 	.word	0x0a0d2420
   16424:	74786554 	.word	0x74786554
   16428:	61724620 	.word	0x61724620
   1642c:	3d20656d 	.word	0x3d20656d
   16430:	30303120 	.word	0x30303120
   16434:	44410a0d 	.word	0x44410a0d
   16438:	20332e30 	.word	0x20332e30
   1643c:	0d4e203d 	.word	0x0d4e203d
   16440:	3044410a 	.word	0x3044410a
   16444:	3d20322e 	.word	0x3d20322e
   16448:	0a0d4e20 	.word	0x0a0d4e20
   1644c:	2e304441 	.word	0x2e304441
   16450:	203d2031 	.word	0x203d2031
   16454:	410a0d4e 	.word	0x410a0d4e
   16458:	342e3044 	.word	0x342e3044
   1645c:	4e203d20 	.word	0x4e203d20
   16460:	44410a0d 	.word	0x44410a0d
   16464:	20372e31 	.word	0x20372e31
   16468:	0d4e203d 	.word	0x0d4e203d
   1646c:	3144410a 	.word	0x3144410a
   16470:	3d20362e 	.word	0x3d20362e
   16474:	0a0d4e20 	.word	0x0a0d4e20
   16478:	2e314441 	.word	0x2e314441
   1647c:	203d2032 	.word	0x203d2032
   16480:	410a0d4e 	.word	0x410a0d4e
   16484:	332e3144 	.word	0x332e3144
   16488:	4e203d20 	.word	0x4e203d20
   1648c:	61530a0d 	.word	0x61530a0d
   16490:	79657466 	.word	0x79657466
   16494:	206e4f20 	.word	0x206e4f20
   16498:	0d59203d 	.word	0x0d59203d
   1649c:	6f6d000a 	.word	0x6f6d000a
   164a0:	3d206564 	.word	0x3d206564
   164a4:	0a642520 	.word	0x0a642520
   164a8:	7361000d 	.word	0x7361000d
   164ac:	203d2063 	.word	0x203d2063
   164b0:	0d0a6325 	.word	0x0d0a6325
   164b4:	75616200 	.word	0x75616200
   164b8:	203d2064 	.word	0x203d2064
   164bc:	0d0a6425 	.word	0x0d0a6425
   164c0:	65726600 	.word	0x65726600
   164c4:	203d2071 	.word	0x203d2071
   164c8:	0d0a6425 	.word	0x0d0a6425
   164cc:	69727400 	.word	0x69727400
   164d0:	203d2067 	.word	0x203d2067
   164d4:	0d0a6325 	.word	0x0d0a6325
   164d8:	61726600 	.word	0x61726600
   164dc:	3d20656d 	.word	0x3d20656d
   164e0:	0a642520 	.word	0x0a642520
   164e4:	6461000d 	.word	0x6461000d
   164e8:	20335f31 	.word	0x20335f31
   164ec:	6325203d 	.word	0x6325203d
   164f0:	61000d0a 	.word	0x61000d0a
   164f4:	335f3064 	.word	0x335f3064
   164f8:	25203d20 	.word	0x25203d20
   164fc:	000d0a63 	.word	0x000d0a63
   16500:	5f306461 	.word	0x5f306461
   16504:	203d2032 	.word	0x203d2032
   16508:	0d0a6325 	.word	0x0d0a6325
   1650c:	30646100 	.word	0x30646100
   16510:	3d20315f 	.word	0x3d20315f
   16514:	0a632520 	.word	0x0a632520
   16518:	6461000d 	.word	0x6461000d
   1651c:	20325f31 	.word	0x20325f31
   16520:	6325203d 	.word	0x6325203d
   16524:	61000d0a 	.word	0x61000d0a
   16528:	345f3064 	.word	0x345f3064
   1652c:	25203d20 	.word	0x25203d20
   16530:	000d0a63 	.word	0x000d0a63
   16534:	5f316461 	.word	0x5f316461
   16538:	203d2037 	.word	0x203d2037
   1653c:	0d0a6325 	.word	0x0d0a6325
   16540:	31646100 	.word	0x31646100
   16544:	3d20365f 	.word	0x3d20365f
   16548:	0a632520 	.word	0x0a632520
   1654c:	6173000d 	.word	0x6173000d
   16550:	79746566 	.word	0x79746566
   16554:	25203d20 	.word	0x25203d20
   16558:	000d0a63 	.word	0x000d0a63
   1655c:	45444f4d 	.word	0x45444f4d
   16560:	0d0a3220 	.word	0x0d0a3220
   16564:	444f4d00 	.word	0x444f4d00
   16568:	0a312045 	.word	0x0a312045
   1656c:	4f4d000d 	.word	0x4f4d000d
   16570:	30204544 	.word	0x30204544
   16574:	4c000d0a 	.word	0x4c000d0a
   16578:	3025474f 	.word	0x3025474f
   1657c:	742e6432 	.word	0x742e6432
   16580:	54007478 	.word	0x54007478
   16584:	4d206f6f 	.word	0x4d206f6f
   16588:	20796e61 	.word	0x20796e61
   1658c:	73676f4c 	.word	0x73676f4c
   16590:	000d0a21 	.word	0x000d0a21
   16594:	6e65706f 	.word	0x6e65706f
   16598:	20676e69 	.word	0x20676e69
   1659c:	74726170 	.word	0x74726170
   165a0:	6f697469 	.word	0x6f697469
   165a4:	6166206e 	.word	0x6166206e
   165a8:	64656c69 	.word	0x64656c69
   165ac:	6f000d0a 	.word	0x6f000d0a
   165b0:	696e6570 	.word	0x696e6570
   165b4:	6620676e 	.word	0x6620676e
   165b8:	73656c69 	.word	0x73656c69
   165bc:	65747379 	.word	0x65747379
   165c0:	6166206d 	.word	0x6166206d
   165c4:	64656c69 	.word	0x64656c69
   165c8:	2f000d0a 	.word	0x2f000d0a
   165cc:	65706f00 	.word	0x65706f00
   165d0:	676e696e 	.word	0x676e696e
   165d4:	6f6f7220 	.word	0x6f6f7220
   165d8:	69642074 	.word	0x69642074
   165dc:	74636572 	.word	0x74636572
   165e0:	2079726f 	.word	0x2079726f
   165e4:	6c696166 	.word	0x6c696166
   165e8:	0d0a6465 	.word	0x0d0a6465
   165ec:	6e616d00 	.word	0x6e616d00
   165f0:	203a6675 	.word	0x203a6675
   165f4:	25783020 	.word	0x25783020
   165f8:	0a783230 	.word	0x0a783230
   165fc:	656f000d 	.word	0x656f000d
   16600:	20203a6d 	.word	0x20203a6d
   16604:	73252020 	.word	0x73252020
   16608:	70000d0a 	.word	0x70000d0a
   1660c:	3a646f72 	.word	0x3a646f72
   16610:	25202020 	.word	0x25202020
   16614:	000d0a73 	.word	0x000d0a73
   16618:	3a766572 	.word	0x3a766572
   1661c:	20202020 	.word	0x20202020
   16620:	78323025 	.word	0x78323025
   16624:	73000d0a 	.word	0x73000d0a
   16628:	61697265 	.word	0x61697265
   1662c:	30203a6c 	.word	0x30203a6c
   16630:	38302578 	.word	0x38302578
   16634:	0d0a786c 	.word	0x0d0a786c
   16638:	74616400 	.word	0x74616400
   1663c:	20203a65 	.word	0x20203a65
   16640:	32302520 	.word	0x32302520
   16644:	30252f64 	.word	0x30252f64
   16648:	0d0a6432 	.word	0x0d0a6432
   1664c:	7a697300 	.word	0x7a697300
   16650:	20203a65 	.word	0x20203a65
   16654:	646c2520 	.word	0x646c2520
   16658:	63000d0a 	.word	0x63000d0a
   1665c:	3a79706f 	.word	0x3a79706f
   16660:	25202020 	.word	0x25202020
   16664:	000d0a64 	.word	0x000d0a64
   16668:	702e7277 	.word	0x702e7277
   1666c:	203a2e72 	.word	0x203a2e72
   16670:	252f6425 	.word	0x252f6425
   16674:	000d0a64 	.word	0x000d0a64
   16678:	6d726f66 	.word	0x6d726f66
   1667c:	203a7461 	.word	0x203a7461
   16680:	0d0a6425 	.word	0x0d0a6425
   16684:	65726600 	.word	0x65726600
   16688:	20203a65 	.word	0x20203a65
   1668c:	646c2520 	.word	0x646c2520
   16690:	646c252f 	.word	0x646c252f
   16694:	0d0a      	.short	0x0d0a
   16696:	00          	.byte	0x00
   16697:	30          	.byte	0x30
   16698:	34333231 	.word	0x34333231
   1669c:	38373635 	.word	0x38373635
   166a0:	43424139 	.word	0x43424139
   166a4:	00464544 	.word	0x00464544
